Index.PACKAGES = {"org.saddle.spire" : [], "org.saddle.csv" : [{"name" : "org.saddle.csv.ByteChannel", "shortDescription" : "", "object" : "org\/saddle\/csv\/ByteChannel$.html", "members_object" : [{"label" : "apply", "tail" : "(s: String, charset: Charset): ByteChannel", "member" : "org.saddle.csv.ByteChannel.apply", "link" : "org\/saddle\/csv\/ByteChannel$.html#apply(s:String,charset:java.nio.charset.Charset):org.saddle.csv.ByteChannel", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/saddle\/csv\/ByteChannel$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/saddle\/csv\/ByteChannel$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/saddle\/csv\/ByteChannel$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/saddle\/csv\/ByteChannel$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/saddle\/csv\/ByteChannel$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/saddle\/csv\/ByteChannel$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/saddle\/csv\/ByteChannel$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/csv\/ByteChannel$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/csv\/ByteChannel$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/csv\/ByteChannel$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/saddle\/csv\/ByteChannel$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/saddle\/csv\/ByteChannel$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/saddle\/csv\/ByteChannel$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/saddle\/csv\/ByteChannel$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/saddle\/csv\/ByteChannel$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/saddle\/csv\/ByteChannel$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "org\/saddle\/csv\/ByteChannel$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/saddle\/csv\/ByteChannel$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/saddle\/csv\/ByteChannel$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "org.saddle.csv.CsvParser", "shortDescription" : "Csv parsing utilities", "object" : "org\/saddle\/csv\/CsvParser$.html", "members_object" : [{"label" : "parseFromChannel", "tail" : "(channel: ReadableByteChannel, cols: Seq[Int], fieldSeparator: Char, quoteChar: Char, recordSeparator: String, maxLines: Long, header: Boolean, charset: CharsetDecoder, bufferSize: Int)(st: ST[T]): Either[String, (Frame[Int, Int, T], Option[Index[String]])]", "member" : "org.saddle.csv.CsvParser.parseFromChannel", "link" : "org\/saddle\/csv\/CsvParser$.html#parseFromChannel[T](channel:java.nio.channels.ReadableByteChannel,cols:Seq[Int],fieldSeparator:Char,quoteChar:Char,recordSeparator:String,maxLines:Long,header:Boolean,charset:java.nio.charset.CharsetDecoder,bufferSize:Int)(implicitst:org.saddle.ST[T]):Either[String,(org.saddle.Frame[Int,Int,T],Option[org.saddle.Index[String]])]", "kind" : "def"}, {"label" : "parseInputStreamWithHeader", "tail" : "(inputStream: InputStream, cols: Seq[Int], fieldSeparator: Char, quoteChar: Char, recordSeparator: String, maxLines: Long, charset: CharsetDecoder, bufferSize: Int)(st: ST[T]): Either[String, Frame[Int, String, T]]", "member" : "org.saddle.csv.CsvParser.parseInputStreamWithHeader", "link" : "org\/saddle\/csv\/CsvParser$.html#parseInputStreamWithHeader[T](inputStream:java.io.InputStream,cols:Seq[Int],fieldSeparator:Char,quoteChar:Char,recordSeparator:String,maxLines:Long,charset:java.nio.charset.CharsetDecoder,bufferSize:Int)(implicitst:org.saddle.ST[T]):Either[String,org.saddle.Frame[Int,String,T]]", "kind" : "def"}, {"label" : "parseStringWithHeader", "tail" : "(data: String, cols: Seq[Int], fieldSeparator: Char, quoteChar: Char, recordSeparator: String, maxLines: Long, charset: CharsetDecoder, bufferSize: Int)(st: ST[T]): Either[String, Frame[Int, String, T]]", "member" : "org.saddle.csv.CsvParser.parseStringWithHeader", "link" : "org\/saddle\/csv\/CsvParser$.html#parseStringWithHeader[T](data:String,cols:Seq[Int],fieldSeparator:Char,quoteChar:Char,recordSeparator:String,maxLines:Long,charset:java.nio.charset.CharsetDecoder,bufferSize:Int)(implicitst:org.saddle.ST[T]):Either[String,org.saddle.Frame[Int,String,T]]", "kind" : "def"}, {"label" : "parseFileWithHeader", "tail" : "(file: File, cols: Seq[Int], fieldSeparator: Char, quoteChar: Char, recordSeparator: String, maxLines: Long, charset: CharsetDecoder, bufferSize: Int)(st: ST[T]): Either[String, Frame[Int, String, T]]", "member" : "org.saddle.csv.CsvParser.parseFileWithHeader", "link" : "org\/saddle\/csv\/CsvParser$.html#parseFileWithHeader[T](file:java.io.File,cols:Seq[Int],fieldSeparator:Char,quoteChar:Char,recordSeparator:String,maxLines:Long,charset:java.nio.charset.CharsetDecoder,bufferSize:Int)(implicitst:org.saddle.ST[T]):Either[String,org.saddle.Frame[Int,String,T]]", "kind" : "def"}, {"label" : "parseString", "tail" : "(data: String, cols: Seq[Int], fieldSeparator: Char, quoteChar: Char, recordSeparator: String, maxLines: Long, charset: CharsetDecoder, bufferSize: Int)(st: ST[T]): Either[String, Frame[Int, Int, T]]", "member" : "org.saddle.csv.CsvParser.parseString", "link" : "org\/saddle\/csv\/CsvParser$.html#parseString[T](data:String,cols:Seq[Int],fieldSeparator:Char,quoteChar:Char,recordSeparator:String,maxLines:Long,charset:java.nio.charset.CharsetDecoder,bufferSize:Int)(implicitst:org.saddle.ST[T]):Either[String,org.saddle.Frame[Int,Int,T]]", "kind" : "def"}, {"label" : "parseInputStream", "tail" : "(inputStream: InputStream, cols: Seq[Int], fieldSeparator: Char, quoteChar: Char, recordSeparator: String, maxLines: Long, charset: CharsetDecoder, bufferSize: Int)(st: ST[T]): Either[String, Frame[Int, Int, T]]", "member" : "org.saddle.csv.CsvParser.parseInputStream", "link" : "org\/saddle\/csv\/CsvParser$.html#parseInputStream[T](inputStream:java.io.InputStream,cols:Seq[Int],fieldSeparator:Char,quoteChar:Char,recordSeparator:String,maxLines:Long,charset:java.nio.charset.CharsetDecoder,bufferSize:Int)(implicitst:org.saddle.ST[T]):Either[String,org.saddle.Frame[Int,Int,T]]", "kind" : "def"}, {"label" : "parseFile", "tail" : "(file: File, cols: Seq[Int], fieldSeparator: Char, quoteChar: Char, recordSeparator: String, maxLines: Long, charset: CharsetDecoder, bufferSize: Int)(st: ST[T]): Either[String, Frame[Int, Int, T]]", "member" : "org.saddle.csv.CsvParser.parseFile", "link" : "org\/saddle\/csv\/CsvParser$.html#parseFile[T](file:java.io.File,cols:Seq[Int],fieldSeparator:Char,quoteChar:Char,recordSeparator:String,maxLines:Long,charset:java.nio.charset.CharsetDecoder,bufferSize:Int)(implicitst:org.saddle.ST[T]):Either[String,org.saddle.Frame[Int,Int,T]]", "kind" : "def"}, {"label" : "makeAsciiSilentCharsetDecoder", "tail" : "(): CharsetDecoder", "member" : "org.saddle.csv.CsvParser.makeAsciiSilentCharsetDecoder", "link" : "org\/saddle\/csv\/CsvParser$.html#makeAsciiSilentCharsetDecoder:java.nio.charset.CharsetDecoder", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/saddle\/csv\/CsvParser$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/saddle\/csv\/CsvParser$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/saddle\/csv\/CsvParser$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/saddle\/csv\/CsvParser$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/saddle\/csv\/CsvParser$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/saddle\/csv\/CsvParser$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/saddle\/csv\/CsvParser$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/csv\/CsvParser$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/csv\/CsvParser$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/csv\/CsvParser$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/saddle\/csv\/CsvParser$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/saddle\/csv\/CsvParser$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/saddle\/csv\/CsvParser$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/saddle\/csv\/CsvParser$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/saddle\/csv\/CsvParser$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/saddle\/csv\/CsvParser$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "org\/saddle\/csv\/CsvParser$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/saddle\/csv\/CsvParser$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/saddle\/csv\/CsvParser$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "org.saddle.csv.CsvSettings", "shortDescription" : "Settings for writing a CSV file", "members_case class" : [{"member" : "org.saddle.csv.CsvSettings#<init>", "error" : "unsupported entity"}, {"label" : "encoding", "tail" : ": Charset", "member" : "org.saddle.csv.CsvSettings.encoding", "link" : "org\/saddle\/csv\/CsvSettings.html#encoding:java.nio.charset.Charset", "kind" : "val"}, {"label" : "useQuote", "tail" : ": Boolean", "member" : "org.saddle.csv.CsvSettings.useQuote", "link" : "org\/saddle\/csv\/CsvSettings.html#useQuote:Boolean", "kind" : "val"}, {"label" : "quoteChar", "tail" : ": Char", "member" : "org.saddle.csv.CsvSettings.quoteChar", "link" : "org\/saddle\/csv\/CsvSettings.html#quoteChar:Char", "kind" : "val"}, {"label" : "separChar", "tail" : ": Char", "member" : "org.saddle.csv.CsvSettings.separChar", "link" : "org\/saddle\/csv\/CsvSettings.html#separChar:Char", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "org\/saddle\/csv\/CsvSettings.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/saddle\/csv\/CsvSettings.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/saddle\/csv\/CsvSettings.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/saddle\/csv\/CsvSettings.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/saddle\/csv\/CsvSettings.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/saddle\/csv\/CsvSettings.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/saddle\/csv\/CsvSettings.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/saddle\/csv\/CsvSettings.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/csv\/CsvSettings.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/csv\/CsvSettings.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/csv\/CsvSettings.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/saddle\/csv\/CsvSettings.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/saddle\/csv\/CsvSettings.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/saddle\/csv\/CsvSettings.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "org\/saddle\/csv\/CsvSettings.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/saddle\/csv\/CsvSettings.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/saddle\/csv\/CsvSettings.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "org\/saddle\/csv\/CsvSettings.html", "kind" : "case class"}, {"name" : "org.saddle.csv.CsvWriter", "shortDescription" : "", "object" : "org\/saddle\/csv\/CsvWriter$.html", "members_object" : [{"label" : "writeFrameToStream", "tail" : "(frame: Frame[RX, CX, T], stream: OutputStream, withColIx: Boolean, withRowIx: Boolean, settings: CsvSettings)(arg0: ST[T]): Unit", "member" : "org.saddle.csv.CsvWriter.writeFrameToStream", "link" : "org\/saddle\/csv\/CsvWriter$.html#writeFrameToStream[RX,CX,T](frame:org.saddle.Frame[RX,CX,T],stream:java.io.OutputStream,withColIx:Boolean,withRowIx:Boolean,settings:org.saddle.csv.CsvSettings)(implicitevidence$12:org.saddle.ST[T]):Unit", "kind" : "def"}, {"label" : "writeFrameToArray", "tail" : "(frame: Frame[RX, CX, T], withColIx: Boolean, withRowIx: Boolean, settings: CsvSettings)(arg0: ST[T]): Array[Byte]", "member" : "org.saddle.csv.CsvWriter.writeFrameToArray", "link" : "org\/saddle\/csv\/CsvWriter$.html#writeFrameToArray[RX,CX,T](frame:org.saddle.Frame[RX,CX,T],withColIx:Boolean,withRowIx:Boolean,settings:org.saddle.csv.CsvSettings)(implicitevidence$11:org.saddle.ST[T]):Array[Byte]", "kind" : "def"}, {"label" : "writeFrameToFile", "tail" : "(frame: Frame[RX, CX, T], path: String, withColIx: Boolean, withRowIx: Boolean, settings: CsvSettings)(arg0: ST[T]): Unit", "member" : "org.saddle.csv.CsvWriter.writeFrameToFile", "link" : "org\/saddle\/csv\/CsvWriter$.html#writeFrameToFile[RX,CX,T](frame:org.saddle.Frame[RX,CX,T],path:String,withColIx:Boolean,withRowIx:Boolean,settings:org.saddle.csv.CsvSettings)(implicitevidence$10:org.saddle.ST[T]):Unit", "kind" : "def"}, {"label" : "writeSeriesToArray", "tail" : "(series: Series[X, T], withColIx: Boolean, withRowIx: Boolean, settings: CsvSettings)(arg0: ST[X], arg1: ORD[X], arg2: ST[T]): Array[Byte]", "member" : "org.saddle.csv.CsvWriter.writeSeriesToArray", "link" : "org\/saddle\/csv\/CsvWriter$.html#writeSeriesToArray[X,T](series:org.saddle.Series[X,T],withColIx:Boolean,withRowIx:Boolean,settings:org.saddle.csv.CsvSettings)(implicitevidence$7:org.saddle.ST[X],implicitevidence$8:org.saddle.ORD[X],implicitevidence$9:org.saddle.ST[T]):Array[Byte]", "kind" : "def"}, {"label" : "writeSeriesToStream", "tail" : "(series: Series[X, T], stream: OutputStream, withColIx: Boolean, withRowIx: Boolean, settings: CsvSettings)(arg0: ST[X], arg1: ORD[X], arg2: ST[T]): Unit", "member" : "org.saddle.csv.CsvWriter.writeSeriesToStream", "link" : "org\/saddle\/csv\/CsvWriter$.html#writeSeriesToStream[X,T](series:org.saddle.Series[X,T],stream:java.io.OutputStream,withColIx:Boolean,withRowIx:Boolean,settings:org.saddle.csv.CsvSettings)(implicitevidence$4:org.saddle.ST[X],implicitevidence$5:org.saddle.ORD[X],implicitevidence$6:org.saddle.ST[T]):Unit", "kind" : "def"}, {"label" : "writeSeriesToFile", "tail" : "(series: Series[X, T], path: String, withColIx: Boolean, withRowIx: Boolean, settings: CsvSettings)(arg0: ST[X], arg1: ORD[X], arg2: ST[T]): Unit", "member" : "org.saddle.csv.CsvWriter.writeSeriesToFile", "link" : "org\/saddle\/csv\/CsvWriter$.html#writeSeriesToFile[X,T](series:org.saddle.Series[X,T],path:String,withColIx:Boolean,withRowIx:Boolean,settings:org.saddle.csv.CsvSettings)(implicitevidence$1:org.saddle.ST[X],implicitevidence$2:org.saddle.ORD[X],implicitevidence$3:org.saddle.ST[T]):Unit", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/saddle\/csv\/CsvWriter$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/saddle\/csv\/CsvWriter$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/saddle\/csv\/CsvWriter$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/saddle\/csv\/CsvWriter$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/saddle\/csv\/CsvWriter$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/saddle\/csv\/CsvWriter$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/saddle\/csv\/CsvWriter$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/csv\/CsvWriter$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/csv\/CsvWriter$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/csv\/CsvWriter$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/saddle\/csv\/CsvWriter$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/saddle\/csv\/CsvWriter$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/saddle\/csv\/CsvWriter$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/saddle\/csv\/CsvWriter$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/saddle\/csv\/CsvWriter$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/saddle\/csv\/CsvWriter$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "org\/saddle\/csv\/CsvWriter$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/saddle\/csv\/CsvWriter$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/saddle\/csv\/CsvWriter$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}], "org.saddle.macros" : [{"name" : "org.saddle.macros.BinOpMatCopy", "trait" : "org\/saddle\/macros\/BinOpMatCopy.html", "kind" : "trait", "members_trait" : [{"label" : "matSclr_Copy_BB_Xor", "tail" : ": BinOp[XorOp, Mat[Boolean], Boolean, Mat[Boolean]]", "member" : "org.saddle.macros.BinOpMatCopy.matSclr_Copy_BB_Xor", "link" : "org\/saddle\/macros\/BinOpMatCopy.html#matSclr_Copy_BB_Xor:org.saddle.ops.BinOp[org.saddle.ops.XorOp,org.saddle.Mat[Boolean],Boolean,org.saddle.Mat[Boolean]]", "kind" : "implicit val"}, {"label" : "matSclr_Copy_BB_Or", "tail" : ": BinOp[OrOp, Mat[Boolean], Boolean, Mat[Boolean]]", "member" : "org.saddle.macros.BinOpMatCopy.matSclr_Copy_BB_Or", "link" : "org\/saddle\/macros\/BinOpMatCopy.html#matSclr_Copy_BB_Or:org.saddle.ops.BinOp[org.saddle.ops.OrOp,org.saddle.Mat[Boolean],Boolean,org.saddle.Mat[Boolean]]", "kind" : "implicit val"}, {"label" : "matSclr_Copy_BB_And", "tail" : ": BinOp[AndOp, Mat[Boolean], Boolean, Mat[Boolean]]", "member" : "org.saddle.macros.BinOpMatCopy.matSclr_Copy_BB_And", "link" : "org\/saddle\/macros\/BinOpMatCopy.html#matSclr_Copy_BB_And:org.saddle.ops.BinOp[org.saddle.ops.AndOp,org.saddle.Mat[Boolean],Boolean,org.saddle.Mat[Boolean]]", "kind" : "implicit val"}, {"label" : "matSclr_Copy_BB_EQ", "tail" : ": BinOp[EqOp, Mat[Boolean], Boolean, Mat[Boolean]]", "member" : "org.saddle.macros.BinOpMatCopy.matSclr_Copy_BB_EQ", "link" : "org\/saddle\/macros\/BinOpMatCopy.html#matSclr_Copy_BB_EQ:org.saddle.ops.BinOp[org.saddle.ops.EqOp,org.saddle.Mat[Boolean],Boolean,org.saddle.Mat[Boolean]]", "kind" : "implicit val"}, {"label" : "matSclr_Copy_II_EQ", "tail" : ": BinOp[EqOp, Mat[Int], Int, Mat[Boolean]]", "member" : "org.saddle.macros.BinOpMatCopy.matSclr_Copy_II_EQ", "link" : "org\/saddle\/macros\/BinOpMatCopy.html#matSclr_Copy_II_EQ:org.saddle.ops.BinOp[org.saddle.ops.EqOp,org.saddle.Mat[Int],Int,org.saddle.Mat[Boolean]]", "kind" : "implicit val"}, {"label" : "matSclr_Copy_ID_EQ", "tail" : ": BinOp[EqOp, Mat[Int], Double, Mat[Boolean]]", "member" : "org.saddle.macros.BinOpMatCopy.matSclr_Copy_ID_EQ", "link" : "org\/saddle\/macros\/BinOpMatCopy.html#matSclr_Copy_ID_EQ:org.saddle.ops.BinOp[org.saddle.ops.EqOp,org.saddle.Mat[Int],Double,org.saddle.Mat[Boolean]]", "kind" : "implicit val"}, {"label" : "matSclr_Copy_LI_EQ", "tail" : ": BinOp[EqOp, Mat[Long], Int, Mat[Boolean]]", "member" : "org.saddle.macros.BinOpMatCopy.matSclr_Copy_LI_EQ", "link" : "org\/saddle\/macros\/BinOpMatCopy.html#matSclr_Copy_LI_EQ:org.saddle.ops.BinOp[org.saddle.ops.EqOp,org.saddle.Mat[Long],Int,org.saddle.Mat[Boolean]]", "kind" : "implicit val"}, {"label" : "matSclr_Copy_LL_EQ", "tail" : ": BinOp[EqOp, Mat[Long], Long, Mat[Boolean]]", "member" : "org.saddle.macros.BinOpMatCopy.matSclr_Copy_LL_EQ", "link" : "org\/saddle\/macros\/BinOpMatCopy.html#matSclr_Copy_LL_EQ:org.saddle.ops.BinOp[org.saddle.ops.EqOp,org.saddle.Mat[Long],Long,org.saddle.Mat[Boolean]]", "kind" : "implicit val"}, {"label" : "matSclr_Copy_LD_EQ", "tail" : ": BinOp[EqOp, Mat[Long], Double, Mat[Boolean]]", "member" : "org.saddle.macros.BinOpMatCopy.matSclr_Copy_LD_EQ", "link" : "org\/saddle\/macros\/BinOpMatCopy.html#matSclr_Copy_LD_EQ:org.saddle.ops.BinOp[org.saddle.ops.EqOp,org.saddle.Mat[Long],Double,org.saddle.Mat[Boolean]]", "kind" : "implicit val"}, {"label" : "matSclr_Copy_DI_EQ", "tail" : ": BinOp[EqOp, Mat[Double], Int, Mat[Boolean]]", "member" : "org.saddle.macros.BinOpMatCopy.matSclr_Copy_DI_EQ", "link" : "org\/saddle\/macros\/BinOpMatCopy.html#matSclr_Copy_DI_EQ:org.saddle.ops.BinOp[org.saddle.ops.EqOp,org.saddle.Mat[Double],Int,org.saddle.Mat[Boolean]]", "kind" : "implicit val"}, {"label" : "matSclr_Copy_DL_EQ", "tail" : ": BinOp[EqOp, Mat[Double], Long, Mat[Boolean]]", "member" : "org.saddle.macros.BinOpMatCopy.matSclr_Copy_DL_EQ", "link" : "org\/saddle\/macros\/BinOpMatCopy.html#matSclr_Copy_DL_EQ:org.saddle.ops.BinOp[org.saddle.ops.EqOp,org.saddle.Mat[Double],Long,org.saddle.Mat[Boolean]]", "kind" : "implicit val"}, {"label" : "matSclr_Copy_DD_EQ", "tail" : ": BinOp[EqOp, Mat[Double], Double, Mat[Boolean]]", "member" : "org.saddle.macros.BinOpMatCopy.matSclr_Copy_DD_EQ", "link" : "org\/saddle\/macros\/BinOpMatCopy.html#matSclr_Copy_DD_EQ:org.saddle.ops.BinOp[org.saddle.ops.EqOp,org.saddle.Mat[Double],Double,org.saddle.Mat[Boolean]]", "kind" : "implicit val"}, {"label" : "matSclr_Copy_BB_NEQ", "tail" : ": BinOp[NeqOp, Mat[Boolean], Boolean, Mat[Boolean]]", "member" : "org.saddle.macros.BinOpMatCopy.matSclr_Copy_BB_NEQ", "link" : "org\/saddle\/macros\/BinOpMatCopy.html#matSclr_Copy_BB_NEQ:org.saddle.ops.BinOp[org.saddle.ops.NeqOp,org.saddle.Mat[Boolean],Boolean,org.saddle.Mat[Boolean]]", "kind" : "implicit val"}, {"label" : "matSclr_Copy_II_NEQ", "tail" : ": BinOp[NeqOp, Mat[Int], Int, Mat[Boolean]]", "member" : "org.saddle.macros.BinOpMatCopy.matSclr_Copy_II_NEQ", "link" : "org\/saddle\/macros\/BinOpMatCopy.html#matSclr_Copy_II_NEQ:org.saddle.ops.BinOp[org.saddle.ops.NeqOp,org.saddle.Mat[Int],Int,org.saddle.Mat[Boolean]]", "kind" : "implicit val"}, {"label" : "matSclr_Copy_ID_NEQ", "tail" : ": BinOp[NeqOp, Mat[Int], Double, Mat[Boolean]]", "member" : "org.saddle.macros.BinOpMatCopy.matSclr_Copy_ID_NEQ", "link" : "org\/saddle\/macros\/BinOpMatCopy.html#matSclr_Copy_ID_NEQ:org.saddle.ops.BinOp[org.saddle.ops.NeqOp,org.saddle.Mat[Int],Double,org.saddle.Mat[Boolean]]", "kind" : "implicit val"}, {"label" : "matSclr_Copy_LI_NEQ", "tail" : ": BinOp[NeqOp, Mat[Long], Int, Mat[Boolean]]", "member" : "org.saddle.macros.BinOpMatCopy.matSclr_Copy_LI_NEQ", "link" : "org\/saddle\/macros\/BinOpMatCopy.html#matSclr_Copy_LI_NEQ:org.saddle.ops.BinOp[org.saddle.ops.NeqOp,org.saddle.Mat[Long],Int,org.saddle.Mat[Boolean]]", "kind" : "implicit val"}, {"label" : "matSclr_Copy_LL_NEQ", "tail" : ": BinOp[NeqOp, Mat[Long], Long, Mat[Boolean]]", "member" : "org.saddle.macros.BinOpMatCopy.matSclr_Copy_LL_NEQ", "link" : "org\/saddle\/macros\/BinOpMatCopy.html#matSclr_Copy_LL_NEQ:org.saddle.ops.BinOp[org.saddle.ops.NeqOp,org.saddle.Mat[Long],Long,org.saddle.Mat[Boolean]]", "kind" : "implicit val"}, {"label" : "matSclr_Copy_LD_NEQ", "tail" : ": BinOp[NeqOp, Mat[Long], Double, Mat[Boolean]]", "member" : "org.saddle.macros.BinOpMatCopy.matSclr_Copy_LD_NEQ", "link" : "org\/saddle\/macros\/BinOpMatCopy.html#matSclr_Copy_LD_NEQ:org.saddle.ops.BinOp[org.saddle.ops.NeqOp,org.saddle.Mat[Long],Double,org.saddle.Mat[Boolean]]", "kind" : "implicit val"}, {"label" : "matSclr_Copy_DI_NEQ", "tail" : ": BinOp[NeqOp, Mat[Double], Int, Mat[Boolean]]", "member" : "org.saddle.macros.BinOpMatCopy.matSclr_Copy_DI_NEQ", "link" : "org\/saddle\/macros\/BinOpMatCopy.html#matSclr_Copy_DI_NEQ:org.saddle.ops.BinOp[org.saddle.ops.NeqOp,org.saddle.Mat[Double],Int,org.saddle.Mat[Boolean]]", "kind" : "implicit val"}, {"label" : "matSclr_Copy_DL_NEQ", "tail" : ": BinOp[NeqOp, Mat[Double], Long, Mat[Boolean]]", "member" : "org.saddle.macros.BinOpMatCopy.matSclr_Copy_DL_NEQ", "link" : "org\/saddle\/macros\/BinOpMatCopy.html#matSclr_Copy_DL_NEQ:org.saddle.ops.BinOp[org.saddle.ops.NeqOp,org.saddle.Mat[Double],Long,org.saddle.Mat[Boolean]]", "kind" : "implicit val"}, {"label" : "matSclr_Copy_DD_NEQ", "tail" : ": BinOp[NeqOp, Mat[Double], Double, Mat[Boolean]]", "member" : "org.saddle.macros.BinOpMatCopy.matSclr_Copy_DD_NEQ", "link" : "org\/saddle\/macros\/BinOpMatCopy.html#matSclr_Copy_DD_NEQ:org.saddle.ops.BinOp[org.saddle.ops.NeqOp,org.saddle.Mat[Double],Double,org.saddle.Mat[Boolean]]", "kind" : "implicit val"}, {"label" : "matSclr_Copy_BB_LTE", "tail" : ": BinOp[LteOp, Mat[Boolean], Boolean, Mat[Boolean]]", "member" : "org.saddle.macros.BinOpMatCopy.matSclr_Copy_BB_LTE", "link" : "org\/saddle\/macros\/BinOpMatCopy.html#matSclr_Copy_BB_LTE:org.saddle.ops.BinOp[org.saddle.ops.LteOp,org.saddle.Mat[Boolean],Boolean,org.saddle.Mat[Boolean]]", "kind" : "implicit val"}, {"label" : "matSclr_Copy_II_LTE", "tail" : ": BinOp[LteOp, Mat[Int], Int, Mat[Boolean]]", "member" : "org.saddle.macros.BinOpMatCopy.matSclr_Copy_II_LTE", "link" : "org\/saddle\/macros\/BinOpMatCopy.html#matSclr_Copy_II_LTE:org.saddle.ops.BinOp[org.saddle.ops.LteOp,org.saddle.Mat[Int],Int,org.saddle.Mat[Boolean]]", "kind" : "implicit val"}, {"label" : "matSclr_Copy_ID_LTE", "tail" : ": BinOp[LteOp, Mat[Int], Double, Mat[Boolean]]", "member" : "org.saddle.macros.BinOpMatCopy.matSclr_Copy_ID_LTE", "link" : "org\/saddle\/macros\/BinOpMatCopy.html#matSclr_Copy_ID_LTE:org.saddle.ops.BinOp[org.saddle.ops.LteOp,org.saddle.Mat[Int],Double,org.saddle.Mat[Boolean]]", "kind" : "implicit val"}, {"label" : "matSclr_Copy_LI_LTE", "tail" : ": BinOp[LteOp, Mat[Long], Int, Mat[Boolean]]", "member" : "org.saddle.macros.BinOpMatCopy.matSclr_Copy_LI_LTE", "link" : "org\/saddle\/macros\/BinOpMatCopy.html#matSclr_Copy_LI_LTE:org.saddle.ops.BinOp[org.saddle.ops.LteOp,org.saddle.Mat[Long],Int,org.saddle.Mat[Boolean]]", "kind" : "implicit val"}, {"label" : "matSclr_Copy_LL_LTE", "tail" : ": BinOp[LteOp, Mat[Long], Long, Mat[Boolean]]", "member" : "org.saddle.macros.BinOpMatCopy.matSclr_Copy_LL_LTE", "link" : "org\/saddle\/macros\/BinOpMatCopy.html#matSclr_Copy_LL_LTE:org.saddle.ops.BinOp[org.saddle.ops.LteOp,org.saddle.Mat[Long],Long,org.saddle.Mat[Boolean]]", "kind" : "implicit val"}, {"label" : "matSclr_Copy_LD_LTE", "tail" : ": BinOp[LteOp, Mat[Long], Double, Mat[Boolean]]", "member" : "org.saddle.macros.BinOpMatCopy.matSclr_Copy_LD_LTE", "link" : "org\/saddle\/macros\/BinOpMatCopy.html#matSclr_Copy_LD_LTE:org.saddle.ops.BinOp[org.saddle.ops.LteOp,org.saddle.Mat[Long],Double,org.saddle.Mat[Boolean]]", "kind" : "implicit val"}, {"label" : "matSclr_Copy_DI_LTE", "tail" : ": BinOp[LteOp, Mat[Double], Int, Mat[Boolean]]", "member" : "org.saddle.macros.BinOpMatCopy.matSclr_Copy_DI_LTE", "link" : "org\/saddle\/macros\/BinOpMatCopy.html#matSclr_Copy_DI_LTE:org.saddle.ops.BinOp[org.saddle.ops.LteOp,org.saddle.Mat[Double],Int,org.saddle.Mat[Boolean]]", "kind" : "implicit val"}, {"label" : "matSclr_Copy_DL_LTE", "tail" : ": BinOp[LteOp, Mat[Double], Long, Mat[Boolean]]", "member" : "org.saddle.macros.BinOpMatCopy.matSclr_Copy_DL_LTE", "link" : "org\/saddle\/macros\/BinOpMatCopy.html#matSclr_Copy_DL_LTE:org.saddle.ops.BinOp[org.saddle.ops.LteOp,org.saddle.Mat[Double],Long,org.saddle.Mat[Boolean]]", "kind" : "implicit val"}, {"label" : "matSclr_Copy_DD_LTE", "tail" : ": BinOp[LteOp, Mat[Double], Double, Mat[Boolean]]", "member" : "org.saddle.macros.BinOpMatCopy.matSclr_Copy_DD_LTE", "link" : "org\/saddle\/macros\/BinOpMatCopy.html#matSclr_Copy_DD_LTE:org.saddle.ops.BinOp[org.saddle.ops.LteOp,org.saddle.Mat[Double],Double,org.saddle.Mat[Boolean]]", "kind" : "implicit val"}, {"label" : "matSclr_Copy_BB_LT", "tail" : ": BinOp[LtOp, Mat[Boolean], Boolean, Mat[Boolean]]", "member" : "org.saddle.macros.BinOpMatCopy.matSclr_Copy_BB_LT", "link" : "org\/saddle\/macros\/BinOpMatCopy.html#matSclr_Copy_BB_LT:org.saddle.ops.BinOp[org.saddle.ops.LtOp,org.saddle.Mat[Boolean],Boolean,org.saddle.Mat[Boolean]]", "kind" : "implicit val"}, {"label" : "matSclr_Copy_II_LT", "tail" : ": BinOp[LtOp, Mat[Int], Int, Mat[Boolean]]", "member" : "org.saddle.macros.BinOpMatCopy.matSclr_Copy_II_LT", "link" : "org\/saddle\/macros\/BinOpMatCopy.html#matSclr_Copy_II_LT:org.saddle.ops.BinOp[org.saddle.ops.LtOp,org.saddle.Mat[Int],Int,org.saddle.Mat[Boolean]]", "kind" : "implicit val"}, {"label" : "matSclr_Copy_ID_LT", "tail" : ": BinOp[LtOp, Mat[Int], Double, Mat[Boolean]]", "member" : "org.saddle.macros.BinOpMatCopy.matSclr_Copy_ID_LT", "link" : "org\/saddle\/macros\/BinOpMatCopy.html#matSclr_Copy_ID_LT:org.saddle.ops.BinOp[org.saddle.ops.LtOp,org.saddle.Mat[Int],Double,org.saddle.Mat[Boolean]]", "kind" : "implicit val"}, {"label" : "matSclr_Copy_LI_LT", "tail" : ": BinOp[LtOp, Mat[Long], Int, Mat[Boolean]]", "member" : "org.saddle.macros.BinOpMatCopy.matSclr_Copy_LI_LT", "link" : "org\/saddle\/macros\/BinOpMatCopy.html#matSclr_Copy_LI_LT:org.saddle.ops.BinOp[org.saddle.ops.LtOp,org.saddle.Mat[Long],Int,org.saddle.Mat[Boolean]]", "kind" : "implicit val"}, {"label" : "matSclr_Copy_LL_LT", "tail" : ": BinOp[LtOp, Mat[Long], Long, Mat[Boolean]]", "member" : "org.saddle.macros.BinOpMatCopy.matSclr_Copy_LL_LT", "link" : "org\/saddle\/macros\/BinOpMatCopy.html#matSclr_Copy_LL_LT:org.saddle.ops.BinOp[org.saddle.ops.LtOp,org.saddle.Mat[Long],Long,org.saddle.Mat[Boolean]]", "kind" : "implicit val"}, {"label" : "matSclr_Copy_LD_LT", "tail" : ": BinOp[LtOp, Mat[Long], Double, Mat[Boolean]]", "member" : "org.saddle.macros.BinOpMatCopy.matSclr_Copy_LD_LT", "link" : "org\/saddle\/macros\/BinOpMatCopy.html#matSclr_Copy_LD_LT:org.saddle.ops.BinOp[org.saddle.ops.LtOp,org.saddle.Mat[Long],Double,org.saddle.Mat[Boolean]]", "kind" : "implicit val"}, {"label" : "matSclr_Copy_DI_LT", "tail" : ": BinOp[LtOp, Mat[Double], Int, Mat[Boolean]]", "member" : "org.saddle.macros.BinOpMatCopy.matSclr_Copy_DI_LT", "link" : "org\/saddle\/macros\/BinOpMatCopy.html#matSclr_Copy_DI_LT:org.saddle.ops.BinOp[org.saddle.ops.LtOp,org.saddle.Mat[Double],Int,org.saddle.Mat[Boolean]]", "kind" : "implicit val"}, {"label" : "matSclr_Copy_DL_LT", "tail" : ": BinOp[LtOp, Mat[Double], Long, Mat[Boolean]]", "member" : "org.saddle.macros.BinOpMatCopy.matSclr_Copy_DL_LT", "link" : "org\/saddle\/macros\/BinOpMatCopy.html#matSclr_Copy_DL_LT:org.saddle.ops.BinOp[org.saddle.ops.LtOp,org.saddle.Mat[Double],Long,org.saddle.Mat[Boolean]]", "kind" : "implicit val"}, {"label" : "matSclr_Copy_DD_LT", "tail" : ": BinOp[LtOp, Mat[Double], Double, Mat[Boolean]]", "member" : "org.saddle.macros.BinOpMatCopy.matSclr_Copy_DD_LT", "link" : "org\/saddle\/macros\/BinOpMatCopy.html#matSclr_Copy_DD_LT:org.saddle.ops.BinOp[org.saddle.ops.LtOp,org.saddle.Mat[Double],Double,org.saddle.Mat[Boolean]]", "kind" : "implicit val"}, {"label" : "matSclr_Copy_BB_GTE", "tail" : ": BinOp[GteOp, Mat[Boolean], Boolean, Mat[Boolean]]", "member" : "org.saddle.macros.BinOpMatCopy.matSclr_Copy_BB_GTE", "link" : "org\/saddle\/macros\/BinOpMatCopy.html#matSclr_Copy_BB_GTE:org.saddle.ops.BinOp[org.saddle.ops.GteOp,org.saddle.Mat[Boolean],Boolean,org.saddle.Mat[Boolean]]", "kind" : "implicit val"}, {"label" : "matSclr_Copy_II_GTE", "tail" : ": BinOp[GteOp, Mat[Int], Int, Mat[Boolean]]", "member" : "org.saddle.macros.BinOpMatCopy.matSclr_Copy_II_GTE", "link" : "org\/saddle\/macros\/BinOpMatCopy.html#matSclr_Copy_II_GTE:org.saddle.ops.BinOp[org.saddle.ops.GteOp,org.saddle.Mat[Int],Int,org.saddle.Mat[Boolean]]", "kind" : "implicit val"}, {"label" : "matSclr_Copy_ID_GTE", "tail" : ": BinOp[GteOp, Mat[Int], Double, Mat[Boolean]]", "member" : "org.saddle.macros.BinOpMatCopy.matSclr_Copy_ID_GTE", "link" : "org\/saddle\/macros\/BinOpMatCopy.html#matSclr_Copy_ID_GTE:org.saddle.ops.BinOp[org.saddle.ops.GteOp,org.saddle.Mat[Int],Double,org.saddle.Mat[Boolean]]", "kind" : "implicit val"}, {"label" : "matSclr_Copy_LI_GTE", "tail" : ": BinOp[GteOp, Mat[Long], Int, Mat[Boolean]]", "member" : "org.saddle.macros.BinOpMatCopy.matSclr_Copy_LI_GTE", "link" : "org\/saddle\/macros\/BinOpMatCopy.html#matSclr_Copy_LI_GTE:org.saddle.ops.BinOp[org.saddle.ops.GteOp,org.saddle.Mat[Long],Int,org.saddle.Mat[Boolean]]", "kind" : "implicit val"}, {"label" : "matSclr_Copy_LL_GTE", "tail" : ": BinOp[GteOp, Mat[Long], Long, Mat[Boolean]]", "member" : "org.saddle.macros.BinOpMatCopy.matSclr_Copy_LL_GTE", "link" : "org\/saddle\/macros\/BinOpMatCopy.html#matSclr_Copy_LL_GTE:org.saddle.ops.BinOp[org.saddle.ops.GteOp,org.saddle.Mat[Long],Long,org.saddle.Mat[Boolean]]", "kind" : "implicit val"}, {"label" : "matSclr_Copy_LD_GTE", "tail" : ": BinOp[GteOp, Mat[Long], Double, Mat[Boolean]]", "member" : "org.saddle.macros.BinOpMatCopy.matSclr_Copy_LD_GTE", "link" : "org\/saddle\/macros\/BinOpMatCopy.html#matSclr_Copy_LD_GTE:org.saddle.ops.BinOp[org.saddle.ops.GteOp,org.saddle.Mat[Long],Double,org.saddle.Mat[Boolean]]", "kind" : "implicit val"}, {"label" : "matSclr_Copy_DI_GTE", "tail" : ": BinOp[GteOp, Mat[Double], Int, Mat[Boolean]]", "member" : "org.saddle.macros.BinOpMatCopy.matSclr_Copy_DI_GTE", "link" : "org\/saddle\/macros\/BinOpMatCopy.html#matSclr_Copy_DI_GTE:org.saddle.ops.BinOp[org.saddle.ops.GteOp,org.saddle.Mat[Double],Int,org.saddle.Mat[Boolean]]", "kind" : "implicit val"}, {"label" : "matSclr_Copy_DL_GTE", "tail" : ": BinOp[GteOp, Mat[Double], Long, Mat[Boolean]]", "member" : "org.saddle.macros.BinOpMatCopy.matSclr_Copy_DL_GTE", "link" : "org\/saddle\/macros\/BinOpMatCopy.html#matSclr_Copy_DL_GTE:org.saddle.ops.BinOp[org.saddle.ops.GteOp,org.saddle.Mat[Double],Long,org.saddle.Mat[Boolean]]", "kind" : "implicit val"}, {"label" : "matSclr_Copy_DD_GTE", "tail" : ": BinOp[GteOp, Mat[Double], Double, Mat[Boolean]]", "member" : "org.saddle.macros.BinOpMatCopy.matSclr_Copy_DD_GTE", "link" : "org\/saddle\/macros\/BinOpMatCopy.html#matSclr_Copy_DD_GTE:org.saddle.ops.BinOp[org.saddle.ops.GteOp,org.saddle.Mat[Double],Double,org.saddle.Mat[Boolean]]", "kind" : "implicit val"}, {"label" : "matSclr_Copy_BB_GT", "tail" : ": BinOp[GtOp, Mat[Boolean], Boolean, Mat[Boolean]]", "member" : "org.saddle.macros.BinOpMatCopy.matSclr_Copy_BB_GT", "link" : "org\/saddle\/macros\/BinOpMatCopy.html#matSclr_Copy_BB_GT:org.saddle.ops.BinOp[org.saddle.ops.GtOp,org.saddle.Mat[Boolean],Boolean,org.saddle.Mat[Boolean]]", "kind" : "implicit val"}, {"label" : "matSclr_Copy_II_GT", "tail" : ": BinOp[GtOp, Mat[Int], Int, Mat[Boolean]]", "member" : "org.saddle.macros.BinOpMatCopy.matSclr_Copy_II_GT", "link" : "org\/saddle\/macros\/BinOpMatCopy.html#matSclr_Copy_II_GT:org.saddle.ops.BinOp[org.saddle.ops.GtOp,org.saddle.Mat[Int],Int,org.saddle.Mat[Boolean]]", "kind" : "implicit val"}, {"label" : "matSclr_Copy_ID_GT", "tail" : ": BinOp[GtOp, Mat[Int], Double, Mat[Boolean]]", "member" : "org.saddle.macros.BinOpMatCopy.matSclr_Copy_ID_GT", "link" : "org\/saddle\/macros\/BinOpMatCopy.html#matSclr_Copy_ID_GT:org.saddle.ops.BinOp[org.saddle.ops.GtOp,org.saddle.Mat[Int],Double,org.saddle.Mat[Boolean]]", "kind" : "implicit val"}, {"label" : "matSclr_Copy_LI_GT", "tail" : ": BinOp[GtOp, Mat[Long], Int, Mat[Boolean]]", "member" : "org.saddle.macros.BinOpMatCopy.matSclr_Copy_LI_GT", "link" : "org\/saddle\/macros\/BinOpMatCopy.html#matSclr_Copy_LI_GT:org.saddle.ops.BinOp[org.saddle.ops.GtOp,org.saddle.Mat[Long],Int,org.saddle.Mat[Boolean]]", "kind" : "implicit val"}, {"label" : "matSclr_Copy_LL_GT", "tail" : ": BinOp[GtOp, Mat[Long], Long, Mat[Boolean]]", "member" : "org.saddle.macros.BinOpMatCopy.matSclr_Copy_LL_GT", "link" : "org\/saddle\/macros\/BinOpMatCopy.html#matSclr_Copy_LL_GT:org.saddle.ops.BinOp[org.saddle.ops.GtOp,org.saddle.Mat[Long],Long,org.saddle.Mat[Boolean]]", "kind" : "implicit val"}, {"label" : "matSclr_Copy_LD_GT", "tail" : ": BinOp[GtOp, Mat[Long], Double, Mat[Boolean]]", "member" : "org.saddle.macros.BinOpMatCopy.matSclr_Copy_LD_GT", "link" : "org\/saddle\/macros\/BinOpMatCopy.html#matSclr_Copy_LD_GT:org.saddle.ops.BinOp[org.saddle.ops.GtOp,org.saddle.Mat[Long],Double,org.saddle.Mat[Boolean]]", "kind" : "implicit val"}, {"label" : "matSclr_Copy_DI_GT", "tail" : ": BinOp[GtOp, Mat[Double], Int, Mat[Boolean]]", "member" : "org.saddle.macros.BinOpMatCopy.matSclr_Copy_DI_GT", "link" : "org\/saddle\/macros\/BinOpMatCopy.html#matSclr_Copy_DI_GT:org.saddle.ops.BinOp[org.saddle.ops.GtOp,org.saddle.Mat[Double],Int,org.saddle.Mat[Boolean]]", "kind" : "implicit val"}, {"label" : "matSclr_Copy_DL_GT", "tail" : ": BinOp[GtOp, Mat[Double], Long, Mat[Boolean]]", "member" : "org.saddle.macros.BinOpMatCopy.matSclr_Copy_DL_GT", "link" : "org\/saddle\/macros\/BinOpMatCopy.html#matSclr_Copy_DL_GT:org.saddle.ops.BinOp[org.saddle.ops.GtOp,org.saddle.Mat[Double],Long,org.saddle.Mat[Boolean]]", "kind" : "implicit val"}, {"label" : "matSclr_Copy_DD_GT", "tail" : ": BinOp[GtOp, Mat[Double], Double, Mat[Boolean]]", "member" : "org.saddle.macros.BinOpMatCopy.matSclr_Copy_DD_GT", "link" : "org\/saddle\/macros\/BinOpMatCopy.html#matSclr_Copy_DD_GT:org.saddle.ops.BinOp[org.saddle.ops.GtOp,org.saddle.Mat[Double],Double,org.saddle.Mat[Boolean]]", "kind" : "implicit val"}, {"label" : "matSclr_Copy_II_BitUshr", "tail" : ": BinOp[BitUShr, Mat[Int], Int, Mat[Int]]", "member" : "org.saddle.macros.BinOpMatCopy.matSclr_Copy_II_BitUshr", "link" : "org\/saddle\/macros\/BinOpMatCopy.html#matSclr_Copy_II_BitUshr:org.saddle.ops.BinOp[org.saddle.ops.BitUShr,org.saddle.Mat[Int],Int,org.saddle.Mat[Int]]", "kind" : "implicit val"}, {"label" : "matSclr_Copy_LI_BitUshr", "tail" : ": BinOp[BitUShr, Mat[Long], Int, Mat[Long]]", "member" : "org.saddle.macros.BinOpMatCopy.matSclr_Copy_LI_BitUshr", "link" : "org\/saddle\/macros\/BinOpMatCopy.html#matSclr_Copy_LI_BitUshr:org.saddle.ops.BinOp[org.saddle.ops.BitUShr,org.saddle.Mat[Long],Int,org.saddle.Mat[Long]]", "kind" : "implicit val"}, {"label" : "matSclr_Copy_LL_BitUshr", "tail" : ": BinOp[BitUShr, Mat[Long], Long, Mat[Long]]", "member" : "org.saddle.macros.BinOpMatCopy.matSclr_Copy_LL_BitUshr", "link" : "org\/saddle\/macros\/BinOpMatCopy.html#matSclr_Copy_LL_BitUshr:org.saddle.ops.BinOp[org.saddle.ops.BitUShr,org.saddle.Mat[Long],Long,org.saddle.Mat[Long]]", "kind" : "implicit val"}, {"label" : "matSclr_Copy_II_BitShr", "tail" : ": BinOp[BitShr, Mat[Int], Int, Mat[Int]]", "member" : "org.saddle.macros.BinOpMatCopy.matSclr_Copy_II_BitShr", "link" : "org\/saddle\/macros\/BinOpMatCopy.html#matSclr_Copy_II_BitShr:org.saddle.ops.BinOp[org.saddle.ops.BitShr,org.saddle.Mat[Int],Int,org.saddle.Mat[Int]]", "kind" : "implicit val"}, {"label" : "matSclr_Copy_LI_BitShr", "tail" : ": BinOp[BitShr, Mat[Long], Int, Mat[Long]]", "member" : "org.saddle.macros.BinOpMatCopy.matSclr_Copy_LI_BitShr", "link" : "org\/saddle\/macros\/BinOpMatCopy.html#matSclr_Copy_LI_BitShr:org.saddle.ops.BinOp[org.saddle.ops.BitShr,org.saddle.Mat[Long],Int,org.saddle.Mat[Long]]", "kind" : "implicit val"}, {"label" : "matSclr_Copy_LL_BitShr", "tail" : ": BinOp[BitShr, Mat[Long], Long, Mat[Long]]", "member" : "org.saddle.macros.BinOpMatCopy.matSclr_Copy_LL_BitShr", "link" : "org\/saddle\/macros\/BinOpMatCopy.html#matSclr_Copy_LL_BitShr:org.saddle.ops.BinOp[org.saddle.ops.BitShr,org.saddle.Mat[Long],Long,org.saddle.Mat[Long]]", "kind" : "implicit val"}, {"label" : "matSclr_Copy_II_BitShl", "tail" : ": BinOp[BitShl, Mat[Int], Int, Mat[Int]]", "member" : "org.saddle.macros.BinOpMatCopy.matSclr_Copy_II_BitShl", "link" : "org\/saddle\/macros\/BinOpMatCopy.html#matSclr_Copy_II_BitShl:org.saddle.ops.BinOp[org.saddle.ops.BitShl,org.saddle.Mat[Int],Int,org.saddle.Mat[Int]]", "kind" : "implicit val"}, {"label" : "matSclr_Copy_LI_BitShl", "tail" : ": BinOp[BitShl, Mat[Long], Int, Mat[Long]]", "member" : "org.saddle.macros.BinOpMatCopy.matSclr_Copy_LI_BitShl", "link" : "org\/saddle\/macros\/BinOpMatCopy.html#matSclr_Copy_LI_BitShl:org.saddle.ops.BinOp[org.saddle.ops.BitShl,org.saddle.Mat[Long],Int,org.saddle.Mat[Long]]", "kind" : "implicit val"}, {"label" : "matSclr_Copy_LL_BitShl", "tail" : ": BinOp[BitShl, Mat[Long], Long, Mat[Long]]", "member" : "org.saddle.macros.BinOpMatCopy.matSclr_Copy_LL_BitShl", "link" : "org\/saddle\/macros\/BinOpMatCopy.html#matSclr_Copy_LL_BitShl:org.saddle.ops.BinOp[org.saddle.ops.BitShl,org.saddle.Mat[Long],Long,org.saddle.Mat[Long]]", "kind" : "implicit val"}, {"label" : "matSclr_Copy_II_BitXor", "tail" : ": BinOp[BitXor, Mat[Int], Int, Mat[Int]]", "member" : "org.saddle.macros.BinOpMatCopy.matSclr_Copy_II_BitXor", "link" : "org\/saddle\/macros\/BinOpMatCopy.html#matSclr_Copy_II_BitXor:org.saddle.ops.BinOp[org.saddle.ops.BitXor,org.saddle.Mat[Int],Int,org.saddle.Mat[Int]]", "kind" : "implicit val"}, {"label" : "matSclr_Copy_LI_BitXor", "tail" : ": BinOp[BitXor, Mat[Long], Int, Mat[Long]]", "member" : "org.saddle.macros.BinOpMatCopy.matSclr_Copy_LI_BitXor", "link" : "org\/saddle\/macros\/BinOpMatCopy.html#matSclr_Copy_LI_BitXor:org.saddle.ops.BinOp[org.saddle.ops.BitXor,org.saddle.Mat[Long],Int,org.saddle.Mat[Long]]", "kind" : "implicit val"}, {"label" : "matSclr_Copy_LL_BitXor", "tail" : ": BinOp[BitXor, Mat[Long], Long, Mat[Long]]", "member" : "org.saddle.macros.BinOpMatCopy.matSclr_Copy_LL_BitXor", "link" : "org\/saddle\/macros\/BinOpMatCopy.html#matSclr_Copy_LL_BitXor:org.saddle.ops.BinOp[org.saddle.ops.BitXor,org.saddle.Mat[Long],Long,org.saddle.Mat[Long]]", "kind" : "implicit val"}, {"label" : "matSclr_Copy_II_BitOr", "tail" : ": BinOp[BitOr, Mat[Int], Int, Mat[Int]]", "member" : "org.saddle.macros.BinOpMatCopy.matSclr_Copy_II_BitOr", "link" : "org\/saddle\/macros\/BinOpMatCopy.html#matSclr_Copy_II_BitOr:org.saddle.ops.BinOp[org.saddle.ops.BitOr,org.saddle.Mat[Int],Int,org.saddle.Mat[Int]]", "kind" : "implicit val"}, {"label" : "matSclr_Copy_LI_BitOr", "tail" : ": BinOp[BitOr, Mat[Long], Int, Mat[Long]]", "member" : "org.saddle.macros.BinOpMatCopy.matSclr_Copy_LI_BitOr", "link" : "org\/saddle\/macros\/BinOpMatCopy.html#matSclr_Copy_LI_BitOr:org.saddle.ops.BinOp[org.saddle.ops.BitOr,org.saddle.Mat[Long],Int,org.saddle.Mat[Long]]", "kind" : "implicit val"}, {"label" : "matSclr_Copy_LL_BitOr", "tail" : ": BinOp[BitOr, Mat[Long], Long, Mat[Long]]", "member" : "org.saddle.macros.BinOpMatCopy.matSclr_Copy_LL_BitOr", "link" : "org\/saddle\/macros\/BinOpMatCopy.html#matSclr_Copy_LL_BitOr:org.saddle.ops.BinOp[org.saddle.ops.BitOr,org.saddle.Mat[Long],Long,org.saddle.Mat[Long]]", "kind" : "implicit val"}, {"label" : "matSclr_Copy_II_BitAnd", "tail" : ": BinOp[BitAnd, Mat[Int], Int, Mat[Int]]", "member" : "org.saddle.macros.BinOpMatCopy.matSclr_Copy_II_BitAnd", "link" : "org\/saddle\/macros\/BinOpMatCopy.html#matSclr_Copy_II_BitAnd:org.saddle.ops.BinOp[org.saddle.ops.BitAnd,org.saddle.Mat[Int],Int,org.saddle.Mat[Int]]", "kind" : "implicit val"}, {"label" : "matSclr_Copy_LI_BitAnd", "tail" : ": BinOp[BitAnd, Mat[Long], Int, Mat[Long]]", "member" : "org.saddle.macros.BinOpMatCopy.matSclr_Copy_LI_BitAnd", "link" : "org\/saddle\/macros\/BinOpMatCopy.html#matSclr_Copy_LI_BitAnd:org.saddle.ops.BinOp[org.saddle.ops.BitAnd,org.saddle.Mat[Long],Int,org.saddle.Mat[Long]]", "kind" : "implicit val"}, {"label" : "matSclr_Copy_LL_BitAnd", "tail" : ": BinOp[BitAnd, Mat[Long], Long, Mat[Long]]", "member" : "org.saddle.macros.BinOpMatCopy.matSclr_Copy_LL_BitAnd", "link" : "org\/saddle\/macros\/BinOpMatCopy.html#matSclr_Copy_LL_BitAnd:org.saddle.ops.BinOp[org.saddle.ops.BitAnd,org.saddle.Mat[Long],Long,org.saddle.Mat[Long]]", "kind" : "implicit val"}, {"label" : "matSclr_Copy_ID_Mod", "tail" : ": BinOp[Mod, Mat[Int], Double, Mat[Double]]", "member" : "org.saddle.macros.BinOpMatCopy.matSclr_Copy_ID_Mod", "link" : "org\/saddle\/macros\/BinOpMatCopy.html#matSclr_Copy_ID_Mod:org.saddle.ops.BinOp[org.saddle.ops.Mod,org.saddle.Mat[Int],Double,org.saddle.Mat[Double]]", "kind" : "implicit val"}, {"label" : "matSclr_Copy_II_Mod", "tail" : ": BinOp[Mod, Mat[Int], Int, Mat[Int]]", "member" : "org.saddle.macros.BinOpMatCopy.matSclr_Copy_II_Mod", "link" : "org\/saddle\/macros\/BinOpMatCopy.html#matSclr_Copy_II_Mod:org.saddle.ops.BinOp[org.saddle.ops.Mod,org.saddle.Mat[Int],Int,org.saddle.Mat[Int]]", "kind" : "implicit val"}, {"label" : "matSclr_Copy_IL_Mod", "tail" : ": BinOp[Mod, Mat[Int], Long, Mat[Long]]", "member" : "org.saddle.macros.BinOpMatCopy.matSclr_Copy_IL_Mod", "link" : "org\/saddle\/macros\/BinOpMatCopy.html#matSclr_Copy_IL_Mod:org.saddle.ops.BinOp[org.saddle.ops.Mod,org.saddle.Mat[Int],Long,org.saddle.Mat[Long]]", "kind" : "implicit val"}, {"label" : "matSclr_Copy_LI_Mod", "tail" : ": BinOp[Mod, Mat[Long], Int, Mat[Long]]", "member" : "org.saddle.macros.BinOpMatCopy.matSclr_Copy_LI_Mod", "link" : "org\/saddle\/macros\/BinOpMatCopy.html#matSclr_Copy_LI_Mod:org.saddle.ops.BinOp[org.saddle.ops.Mod,org.saddle.Mat[Long],Int,org.saddle.Mat[Long]]", "kind" : "implicit val"}, {"label" : "matSclr_Copy_LD_Mod", "tail" : ": BinOp[Mod, Mat[Long], Double, Mat[Double]]", "member" : "org.saddle.macros.BinOpMatCopy.matSclr_Copy_LD_Mod", "link" : "org\/saddle\/macros\/BinOpMatCopy.html#matSclr_Copy_LD_Mod:org.saddle.ops.BinOp[org.saddle.ops.Mod,org.saddle.Mat[Long],Double,org.saddle.Mat[Double]]", "kind" : "implicit val"}, {"label" : "matSclr_Copy_LL_Mod", "tail" : ": BinOp[Mod, Mat[Long], Long, Mat[Long]]", "member" : "org.saddle.macros.BinOpMatCopy.matSclr_Copy_LL_Mod", "link" : "org\/saddle\/macros\/BinOpMatCopy.html#matSclr_Copy_LL_Mod:org.saddle.ops.BinOp[org.saddle.ops.Mod,org.saddle.Mat[Long],Long,org.saddle.Mat[Long]]", "kind" : "implicit val"}, {"label" : "matSclr_Copy_DI_Mod", "tail" : ": BinOp[Mod, Mat[Double], Int, Mat[Double]]", "member" : "org.saddle.macros.BinOpMatCopy.matSclr_Copy_DI_Mod", "link" : "org\/saddle\/macros\/BinOpMatCopy.html#matSclr_Copy_DI_Mod:org.saddle.ops.BinOp[org.saddle.ops.Mod,org.saddle.Mat[Double],Int,org.saddle.Mat[Double]]", "kind" : "implicit val"}, {"label" : "matSclr_Copy_DL_Mod", "tail" : ": BinOp[Mod, Mat[Double], Long, Mat[Double]]", "member" : "org.saddle.macros.BinOpMatCopy.matSclr_Copy_DL_Mod", "link" : "org\/saddle\/macros\/BinOpMatCopy.html#matSclr_Copy_DL_Mod:org.saddle.ops.BinOp[org.saddle.ops.Mod,org.saddle.Mat[Double],Long,org.saddle.Mat[Double]]", "kind" : "implicit val"}, {"label" : "matSclr_Copy_DD_Mod", "tail" : ": BinOp[Mod, Mat[Double], Double, Mat[Double]]", "member" : "org.saddle.macros.BinOpMatCopy.matSclr_Copy_DD_Mod", "link" : "org\/saddle\/macros\/BinOpMatCopy.html#matSclr_Copy_DD_Mod:org.saddle.ops.BinOp[org.saddle.ops.Mod,org.saddle.Mat[Double],Double,org.saddle.Mat[Double]]", "kind" : "implicit val"}, {"label" : "matSclr_Copy_ID_Div", "tail" : ": BinOp[Divide, Mat[Int], Double, Mat[Double]]", "member" : "org.saddle.macros.BinOpMatCopy.matSclr_Copy_ID_Div", "link" : "org\/saddle\/macros\/BinOpMatCopy.html#matSclr_Copy_ID_Div:org.saddle.ops.BinOp[org.saddle.ops.Divide,org.saddle.Mat[Int],Double,org.saddle.Mat[Double]]", "kind" : "implicit val"}, {"label" : "matSclr_Copy_II_Div", "tail" : ": BinOp[Divide, Mat[Int], Int, Mat[Int]]", "member" : "org.saddle.macros.BinOpMatCopy.matSclr_Copy_II_Div", "link" : "org\/saddle\/macros\/BinOpMatCopy.html#matSclr_Copy_II_Div:org.saddle.ops.BinOp[org.saddle.ops.Divide,org.saddle.Mat[Int],Int,org.saddle.Mat[Int]]", "kind" : "implicit val"}, {"label" : "matSclr_Copy_IL_Div", "tail" : ": BinOp[Divide, Mat[Int], Long, Mat[Long]]", "member" : "org.saddle.macros.BinOpMatCopy.matSclr_Copy_IL_Div", "link" : "org\/saddle\/macros\/BinOpMatCopy.html#matSclr_Copy_IL_Div:org.saddle.ops.BinOp[org.saddle.ops.Divide,org.saddle.Mat[Int],Long,org.saddle.Mat[Long]]", "kind" : "implicit val"}, {"label" : "matSclr_Copy_LI_Div", "tail" : ": BinOp[Divide, Mat[Long], Int, Mat[Long]]", "member" : "org.saddle.macros.BinOpMatCopy.matSclr_Copy_LI_Div", "link" : "org\/saddle\/macros\/BinOpMatCopy.html#matSclr_Copy_LI_Div:org.saddle.ops.BinOp[org.saddle.ops.Divide,org.saddle.Mat[Long],Int,org.saddle.Mat[Long]]", "kind" : "implicit val"}, {"label" : "matSclr_Copy_LD_Div", "tail" : ": BinOp[Divide, Mat[Long], Double, Mat[Double]]", "member" : "org.saddle.macros.BinOpMatCopy.matSclr_Copy_LD_Div", "link" : "org\/saddle\/macros\/BinOpMatCopy.html#matSclr_Copy_LD_Div:org.saddle.ops.BinOp[org.saddle.ops.Divide,org.saddle.Mat[Long],Double,org.saddle.Mat[Double]]", "kind" : "implicit val"}, {"label" : "matSclr_Copy_LL_Div", "tail" : ": BinOp[Divide, Mat[Long], Long, Mat[Long]]", "member" : "org.saddle.macros.BinOpMatCopy.matSclr_Copy_LL_Div", "link" : "org\/saddle\/macros\/BinOpMatCopy.html#matSclr_Copy_LL_Div:org.saddle.ops.BinOp[org.saddle.ops.Divide,org.saddle.Mat[Long],Long,org.saddle.Mat[Long]]", "kind" : "implicit val"}, {"label" : "matSclr_Copy_DI_Div", "tail" : ": BinOp[Divide, Mat[Double], Int, Mat[Double]]", "member" : "org.saddle.macros.BinOpMatCopy.matSclr_Copy_DI_Div", "link" : "org\/saddle\/macros\/BinOpMatCopy.html#matSclr_Copy_DI_Div:org.saddle.ops.BinOp[org.saddle.ops.Divide,org.saddle.Mat[Double],Int,org.saddle.Mat[Double]]", "kind" : "implicit val"}, {"label" : "matSclr_Copy_DL_Div", "tail" : ": BinOp[Divide, Mat[Double], Long, Mat[Double]]", "member" : "org.saddle.macros.BinOpMatCopy.matSclr_Copy_DL_Div", "link" : "org\/saddle\/macros\/BinOpMatCopy.html#matSclr_Copy_DL_Div:org.saddle.ops.BinOp[org.saddle.ops.Divide,org.saddle.Mat[Double],Long,org.saddle.Mat[Double]]", "kind" : "implicit val"}, {"label" : "matSclr_Copy_DD_Div", "tail" : ": BinOp[Divide, Mat[Double], Double, Mat[Double]]", "member" : "org.saddle.macros.BinOpMatCopy.matSclr_Copy_DD_Div", "link" : "org\/saddle\/macros\/BinOpMatCopy.html#matSclr_Copy_DD_Div:org.saddle.ops.BinOp[org.saddle.ops.Divide,org.saddle.Mat[Double],Double,org.saddle.Mat[Double]]", "kind" : "implicit val"}, {"label" : "matSclr_Copy_ID_Mult", "tail" : ": BinOp[Multiply, Mat[Int], Double, Mat[Double]]", "member" : "org.saddle.macros.BinOpMatCopy.matSclr_Copy_ID_Mult", "link" : "org\/saddle\/macros\/BinOpMatCopy.html#matSclr_Copy_ID_Mult:org.saddle.ops.BinOp[org.saddle.ops.Multiply,org.saddle.Mat[Int],Double,org.saddle.Mat[Double]]", "kind" : "implicit val"}, {"label" : "matSclr_Copy_II_Mult", "tail" : ": BinOp[Multiply, Mat[Int], Int, Mat[Int]]", "member" : "org.saddle.macros.BinOpMatCopy.matSclr_Copy_II_Mult", "link" : "org\/saddle\/macros\/BinOpMatCopy.html#matSclr_Copy_II_Mult:org.saddle.ops.BinOp[org.saddle.ops.Multiply,org.saddle.Mat[Int],Int,org.saddle.Mat[Int]]", "kind" : "implicit val"}, {"label" : "matSclr_Copy_IL_Mult", "tail" : ": BinOp[Multiply, Mat[Int], Long, Mat[Long]]", "member" : "org.saddle.macros.BinOpMatCopy.matSclr_Copy_IL_Mult", "link" : "org\/saddle\/macros\/BinOpMatCopy.html#matSclr_Copy_IL_Mult:org.saddle.ops.BinOp[org.saddle.ops.Multiply,org.saddle.Mat[Int],Long,org.saddle.Mat[Long]]", "kind" : "implicit val"}, {"label" : "matSclr_Copy_LI_Mult", "tail" : ": BinOp[Multiply, Mat[Long], Int, Mat[Long]]", "member" : "org.saddle.macros.BinOpMatCopy.matSclr_Copy_LI_Mult", "link" : "org\/saddle\/macros\/BinOpMatCopy.html#matSclr_Copy_LI_Mult:org.saddle.ops.BinOp[org.saddle.ops.Multiply,org.saddle.Mat[Long],Int,org.saddle.Mat[Long]]", "kind" : "implicit val"}, {"label" : "matSclr_Copy_LD_Mult", "tail" : ": BinOp[Multiply, Mat[Long], Double, Mat[Double]]", "member" : "org.saddle.macros.BinOpMatCopy.matSclr_Copy_LD_Mult", "link" : "org\/saddle\/macros\/BinOpMatCopy.html#matSclr_Copy_LD_Mult:org.saddle.ops.BinOp[org.saddle.ops.Multiply,org.saddle.Mat[Long],Double,org.saddle.Mat[Double]]", "kind" : "implicit val"}, {"label" : "matSclr_Copy_LL_Mult", "tail" : ": BinOp[Multiply, Mat[Long], Long, Mat[Long]]", "member" : "org.saddle.macros.BinOpMatCopy.matSclr_Copy_LL_Mult", "link" : "org\/saddle\/macros\/BinOpMatCopy.html#matSclr_Copy_LL_Mult:org.saddle.ops.BinOp[org.saddle.ops.Multiply,org.saddle.Mat[Long],Long,org.saddle.Mat[Long]]", "kind" : "implicit val"}, {"label" : "matSclr_Copy_DI_Mult", "tail" : ": BinOp[Multiply, Mat[Double], Int, Mat[Double]]", "member" : "org.saddle.macros.BinOpMatCopy.matSclr_Copy_DI_Mult", "link" : "org\/saddle\/macros\/BinOpMatCopy.html#matSclr_Copy_DI_Mult:org.saddle.ops.BinOp[org.saddle.ops.Multiply,org.saddle.Mat[Double],Int,org.saddle.Mat[Double]]", "kind" : "implicit val"}, {"label" : "matSclr_Copy_DL_Mult", "tail" : ": BinOp[Multiply, Mat[Double], Long, Mat[Double]]", "member" : "org.saddle.macros.BinOpMatCopy.matSclr_Copy_DL_Mult", "link" : "org\/saddle\/macros\/BinOpMatCopy.html#matSclr_Copy_DL_Mult:org.saddle.ops.BinOp[org.saddle.ops.Multiply,org.saddle.Mat[Double],Long,org.saddle.Mat[Double]]", "kind" : "implicit val"}, {"label" : "matSclr_Copy_DD_Mult", "tail" : ": BinOp[Multiply, Mat[Double], Double, Mat[Double]]", "member" : "org.saddle.macros.BinOpMatCopy.matSclr_Copy_DD_Mult", "link" : "org\/saddle\/macros\/BinOpMatCopy.html#matSclr_Copy_DD_Mult:org.saddle.ops.BinOp[org.saddle.ops.Multiply,org.saddle.Mat[Double],Double,org.saddle.Mat[Double]]", "kind" : "implicit val"}, {"label" : "matSclr_Copy_ID_Sub", "tail" : ": BinOp[Subtract, Mat[Int], Double, Mat[Double]]", "member" : "org.saddle.macros.BinOpMatCopy.matSclr_Copy_ID_Sub", "link" : "org\/saddle\/macros\/BinOpMatCopy.html#matSclr_Copy_ID_Sub:org.saddle.ops.BinOp[org.saddle.ops.Subtract,org.saddle.Mat[Int],Double,org.saddle.Mat[Double]]", "kind" : "implicit val"}, {"label" : "matSclr_Copy_II_Sub", "tail" : ": BinOp[Subtract, Mat[Int], Int, Mat[Int]]", "member" : "org.saddle.macros.BinOpMatCopy.matSclr_Copy_II_Sub", "link" : "org\/saddle\/macros\/BinOpMatCopy.html#matSclr_Copy_II_Sub:org.saddle.ops.BinOp[org.saddle.ops.Subtract,org.saddle.Mat[Int],Int,org.saddle.Mat[Int]]", "kind" : "implicit val"}, {"label" : "matSclr_Copy_IL_Sub", "tail" : ": BinOp[Subtract, Mat[Int], Long, Mat[Long]]", "member" : "org.saddle.macros.BinOpMatCopy.matSclr_Copy_IL_Sub", "link" : "org\/saddle\/macros\/BinOpMatCopy.html#matSclr_Copy_IL_Sub:org.saddle.ops.BinOp[org.saddle.ops.Subtract,org.saddle.Mat[Int],Long,org.saddle.Mat[Long]]", "kind" : "implicit val"}, {"label" : "matSclr_Copy_LI_Sub", "tail" : ": BinOp[Subtract, Mat[Long], Int, Mat[Long]]", "member" : "org.saddle.macros.BinOpMatCopy.matSclr_Copy_LI_Sub", "link" : "org\/saddle\/macros\/BinOpMatCopy.html#matSclr_Copy_LI_Sub:org.saddle.ops.BinOp[org.saddle.ops.Subtract,org.saddle.Mat[Long],Int,org.saddle.Mat[Long]]", "kind" : "implicit val"}, {"label" : "matSclr_Copy_LD_Sub", "tail" : ": BinOp[Subtract, Mat[Long], Double, Mat[Double]]", "member" : "org.saddle.macros.BinOpMatCopy.matSclr_Copy_LD_Sub", "link" : "org\/saddle\/macros\/BinOpMatCopy.html#matSclr_Copy_LD_Sub:org.saddle.ops.BinOp[org.saddle.ops.Subtract,org.saddle.Mat[Long],Double,org.saddle.Mat[Double]]", "kind" : "implicit val"}, {"label" : "matSclr_Copy_LL_Sub", "tail" : ": BinOp[Subtract, Mat[Long], Long, Mat[Long]]", "member" : "org.saddle.macros.BinOpMatCopy.matSclr_Copy_LL_Sub", "link" : "org\/saddle\/macros\/BinOpMatCopy.html#matSclr_Copy_LL_Sub:org.saddle.ops.BinOp[org.saddle.ops.Subtract,org.saddle.Mat[Long],Long,org.saddle.Mat[Long]]", "kind" : "implicit val"}, {"label" : "matSclr_Copy_DI_Sub", "tail" : ": BinOp[Subtract, Mat[Double], Int, Mat[Double]]", "member" : "org.saddle.macros.BinOpMatCopy.matSclr_Copy_DI_Sub", "link" : "org\/saddle\/macros\/BinOpMatCopy.html#matSclr_Copy_DI_Sub:org.saddle.ops.BinOp[org.saddle.ops.Subtract,org.saddle.Mat[Double],Int,org.saddle.Mat[Double]]", "kind" : "implicit val"}, {"label" : "matSclr_Copy_DL_Sub", "tail" : ": BinOp[Subtract, Mat[Double], Long, Mat[Double]]", "member" : "org.saddle.macros.BinOpMatCopy.matSclr_Copy_DL_Sub", "link" : "org\/saddle\/macros\/BinOpMatCopy.html#matSclr_Copy_DL_Sub:org.saddle.ops.BinOp[org.saddle.ops.Subtract,org.saddle.Mat[Double],Long,org.saddle.Mat[Double]]", "kind" : "implicit val"}, {"label" : "matSclr_Copy_DD_Sub", "tail" : ": BinOp[Subtract, Mat[Double], Double, Mat[Double]]", "member" : "org.saddle.macros.BinOpMatCopy.matSclr_Copy_DD_Sub", "link" : "org\/saddle\/macros\/BinOpMatCopy.html#matSclr_Copy_DD_Sub:org.saddle.ops.BinOp[org.saddle.ops.Subtract,org.saddle.Mat[Double],Double,org.saddle.Mat[Double]]", "kind" : "implicit val"}, {"label" : "matSclr_Copy_ID_Power", "tail" : ": BinOp[Power, Mat[Int], Double, Mat[Double]]", "member" : "org.saddle.macros.BinOpMatCopy.matSclr_Copy_ID_Power", "link" : "org\/saddle\/macros\/BinOpMatCopy.html#matSclr_Copy_ID_Power:org.saddle.ops.BinOp[org.saddle.ops.Power,org.saddle.Mat[Int],Double,org.saddle.Mat[Double]]", "kind" : "implicit val"}, {"label" : "matSclr_Copy_II_Power", "tail" : ": BinOp[Power, Mat[Int], Int, Mat[Int]]", "member" : "org.saddle.macros.BinOpMatCopy.matSclr_Copy_II_Power", "link" : "org\/saddle\/macros\/BinOpMatCopy.html#matSclr_Copy_II_Power:org.saddle.ops.BinOp[org.saddle.ops.Power,org.saddle.Mat[Int],Int,org.saddle.Mat[Int]]", "kind" : "implicit val"}, {"label" : "matSclr_Copy_IL_Power", "tail" : ": BinOp[Power, Mat[Int], Long, Mat[Long]]", "member" : "org.saddle.macros.BinOpMatCopy.matSclr_Copy_IL_Power", "link" : "org\/saddle\/macros\/BinOpMatCopy.html#matSclr_Copy_IL_Power:org.saddle.ops.BinOp[org.saddle.ops.Power,org.saddle.Mat[Int],Long,org.saddle.Mat[Long]]", "kind" : "implicit val"}, {"label" : "matSclr_Copy_LI_Power", "tail" : ": BinOp[Power, Mat[Long], Int, Mat[Long]]", "member" : "org.saddle.macros.BinOpMatCopy.matSclr_Copy_LI_Power", "link" : "org\/saddle\/macros\/BinOpMatCopy.html#matSclr_Copy_LI_Power:org.saddle.ops.BinOp[org.saddle.ops.Power,org.saddle.Mat[Long],Int,org.saddle.Mat[Long]]", "kind" : "implicit val"}, {"label" : "matSclr_Copy_LD_Power", "tail" : ": BinOp[Power, Mat[Long], Double, Mat[Double]]", "member" : "org.saddle.macros.BinOpMatCopy.matSclr_Copy_LD_Power", "link" : "org\/saddle\/macros\/BinOpMatCopy.html#matSclr_Copy_LD_Power:org.saddle.ops.BinOp[org.saddle.ops.Power,org.saddle.Mat[Long],Double,org.saddle.Mat[Double]]", "kind" : "implicit val"}, {"label" : "matSclr_Copy_LL_Power", "tail" : ": BinOp[Power, Mat[Long], Long, Mat[Long]]", "member" : "org.saddle.macros.BinOpMatCopy.matSclr_Copy_LL_Power", "link" : "org\/saddle\/macros\/BinOpMatCopy.html#matSclr_Copy_LL_Power:org.saddle.ops.BinOp[org.saddle.ops.Power,org.saddle.Mat[Long],Long,org.saddle.Mat[Long]]", "kind" : "implicit val"}, {"label" : "matSclr_Copy_DI_Power", "tail" : ": BinOp[Power, Mat[Double], Int, Mat[Double]]", "member" : "org.saddle.macros.BinOpMatCopy.matSclr_Copy_DI_Power", "link" : "org\/saddle\/macros\/BinOpMatCopy.html#matSclr_Copy_DI_Power:org.saddle.ops.BinOp[org.saddle.ops.Power,org.saddle.Mat[Double],Int,org.saddle.Mat[Double]]", "kind" : "implicit val"}, {"label" : "matSclr_Copy_DL_Power", "tail" : ": BinOp[Power, Mat[Double], Long, Mat[Double]]", "member" : "org.saddle.macros.BinOpMatCopy.matSclr_Copy_DL_Power", "link" : "org\/saddle\/macros\/BinOpMatCopy.html#matSclr_Copy_DL_Power:org.saddle.ops.BinOp[org.saddle.ops.Power,org.saddle.Mat[Double],Long,org.saddle.Mat[Double]]", "kind" : "implicit val"}, {"label" : "matSclr_Copy_DD_Power", "tail" : ": BinOp[Power, Mat[Double], Double, Mat[Double]]", "member" : "org.saddle.macros.BinOpMatCopy.matSclr_Copy_DD_Power", "link" : "org\/saddle\/macros\/BinOpMatCopy.html#matSclr_Copy_DD_Power:org.saddle.ops.BinOp[org.saddle.ops.Power,org.saddle.Mat[Double],Double,org.saddle.Mat[Double]]", "kind" : "implicit val"}, {"label" : "matSclr_Copy_ID_Add", "tail" : ": BinOp[Add, Mat[Int], Double, Mat[Double]]", "member" : "org.saddle.macros.BinOpMatCopy.matSclr_Copy_ID_Add", "link" : "org\/saddle\/macros\/BinOpMatCopy.html#matSclr_Copy_ID_Add:org.saddle.ops.BinOp[org.saddle.ops.Add,org.saddle.Mat[Int],Double,org.saddle.Mat[Double]]", "kind" : "implicit val"}, {"label" : "matSclr_Copy_II_Add", "tail" : ": BinOp[Add, Mat[Int], Int, Mat[Int]]", "member" : "org.saddle.macros.BinOpMatCopy.matSclr_Copy_II_Add", "link" : "org\/saddle\/macros\/BinOpMatCopy.html#matSclr_Copy_II_Add:org.saddle.ops.BinOp[org.saddle.ops.Add,org.saddle.Mat[Int],Int,org.saddle.Mat[Int]]", "kind" : "implicit val"}, {"label" : "matSclr_Copy_IL_Add", "tail" : ": BinOp[Add, Mat[Int], Long, Mat[Long]]", "member" : "org.saddle.macros.BinOpMatCopy.matSclr_Copy_IL_Add", "link" : "org\/saddle\/macros\/BinOpMatCopy.html#matSclr_Copy_IL_Add:org.saddle.ops.BinOp[org.saddle.ops.Add,org.saddle.Mat[Int],Long,org.saddle.Mat[Long]]", "kind" : "implicit val"}, {"label" : "matSclr_Copy_LI_Add", "tail" : ": BinOp[Add, Mat[Long], Int, Mat[Long]]", "member" : "org.saddle.macros.BinOpMatCopy.matSclr_Copy_LI_Add", "link" : "org\/saddle\/macros\/BinOpMatCopy.html#matSclr_Copy_LI_Add:org.saddle.ops.BinOp[org.saddle.ops.Add,org.saddle.Mat[Long],Int,org.saddle.Mat[Long]]", "kind" : "implicit val"}, {"label" : "matSclr_Copy_LD_Add", "tail" : ": BinOp[Add, Mat[Long], Double, Mat[Double]]", "member" : "org.saddle.macros.BinOpMatCopy.matSclr_Copy_LD_Add", "link" : "org\/saddle\/macros\/BinOpMatCopy.html#matSclr_Copy_LD_Add:org.saddle.ops.BinOp[org.saddle.ops.Add,org.saddle.Mat[Long],Double,org.saddle.Mat[Double]]", "kind" : "implicit val"}, {"label" : "matSclr_Copy_LL_Add", "tail" : ": BinOp[Add, Mat[Long], Long, Mat[Long]]", "member" : "org.saddle.macros.BinOpMatCopy.matSclr_Copy_LL_Add", "link" : "org\/saddle\/macros\/BinOpMatCopy.html#matSclr_Copy_LL_Add:org.saddle.ops.BinOp[org.saddle.ops.Add,org.saddle.Mat[Long],Long,org.saddle.Mat[Long]]", "kind" : "implicit val"}, {"label" : "matSclr_Copy_DI_Add", "tail" : ": BinOp[Add, Mat[Double], Int, Mat[Double]]", "member" : "org.saddle.macros.BinOpMatCopy.matSclr_Copy_DI_Add", "link" : "org\/saddle\/macros\/BinOpMatCopy.html#matSclr_Copy_DI_Add:org.saddle.ops.BinOp[org.saddle.ops.Add,org.saddle.Mat[Double],Int,org.saddle.Mat[Double]]", "kind" : "implicit val"}, {"label" : "matSclr_Copy_DL_Add", "tail" : ": BinOp[Add, Mat[Double], Long, Mat[Double]]", "member" : "org.saddle.macros.BinOpMatCopy.matSclr_Copy_DL_Add", "link" : "org\/saddle\/macros\/BinOpMatCopy.html#matSclr_Copy_DL_Add:org.saddle.ops.BinOp[org.saddle.ops.Add,org.saddle.Mat[Double],Long,org.saddle.Mat[Double]]", "kind" : "implicit val"}, {"label" : "matSclr_Copy_DD_Add", "tail" : ": BinOp[Add, Mat[Double], Double, Mat[Double]]", "member" : "org.saddle.macros.BinOpMatCopy.matSclr_Copy_DD_Add", "link" : "org\/saddle\/macros\/BinOpMatCopy.html#matSclr_Copy_DD_Add:org.saddle.ops.BinOp[org.saddle.ops.Add,org.saddle.Mat[Double],Double,org.saddle.Mat[Double]]", "kind" : "implicit val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/saddle\/macros\/BinOpMatCopy.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/saddle\/macros\/BinOpMatCopy.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/saddle\/macros\/BinOpMatCopy.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/saddle\/macros\/BinOpMatCopy.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/saddle\/macros\/BinOpMatCopy.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/saddle\/macros\/BinOpMatCopy.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/saddle\/macros\/BinOpMatCopy.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/macros\/BinOpMatCopy.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/macros\/BinOpMatCopy.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/macros\/BinOpMatCopy.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/saddle\/macros\/BinOpMatCopy.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/saddle\/macros\/BinOpMatCopy.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/saddle\/macros\/BinOpMatCopy.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/saddle\/macros\/BinOpMatCopy.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/saddle\/macros\/BinOpMatCopy.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/saddle\/macros\/BinOpMatCopy.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "org\/saddle\/macros\/BinOpMatCopy.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/saddle\/macros\/BinOpMatCopy.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/saddle\/macros\/BinOpMatCopy.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}, {"name" : "org.saddle.macros.BinOpMatInPlace", "trait" : "org\/saddle\/macros\/BinOpMatInPlace.html", "kind" : "trait", "members_trait" : [{"label" : "matSclr_BB_Xor", "tail" : ": BinOpInPlace[XorOp, Mat[Boolean], Boolean]", "member" : "org.saddle.macros.BinOpMatInPlace.matSclr_BB_Xor", "link" : "org\/saddle\/macros\/BinOpMatInPlace.html#matSclr_BB_Xor:org.saddle.ops.BinOpInPlace[org.saddle.ops.XorOp,org.saddle.Mat[Boolean],Boolean]", "kind" : "implicit val"}, {"label" : "matSclr_BB_Or", "tail" : ": BinOpInPlace[OrOp, Mat[Boolean], Boolean]", "member" : "org.saddle.macros.BinOpMatInPlace.matSclr_BB_Or", "link" : "org\/saddle\/macros\/BinOpMatInPlace.html#matSclr_BB_Or:org.saddle.ops.BinOpInPlace[org.saddle.ops.OrOp,org.saddle.Mat[Boolean],Boolean]", "kind" : "implicit val"}, {"label" : "matSclr_BB_And", "tail" : ": BinOpInPlace[AndOp, Mat[Boolean], Boolean]", "member" : "org.saddle.macros.BinOpMatInPlace.matSclr_BB_And", "link" : "org\/saddle\/macros\/BinOpMatInPlace.html#matSclr_BB_And:org.saddle.ops.BinOpInPlace[org.saddle.ops.AndOp,org.saddle.Mat[Boolean],Boolean]", "kind" : "implicit val"}, {"label" : "matSclr_BB_EQ", "tail" : ": BinOpInPlace[EqOp, Mat[Boolean], Boolean]", "member" : "org.saddle.macros.BinOpMatInPlace.matSclr_BB_EQ", "link" : "org\/saddle\/macros\/BinOpMatInPlace.html#matSclr_BB_EQ:org.saddle.ops.BinOpInPlace[org.saddle.ops.EqOp,org.saddle.Mat[Boolean],Boolean]", "kind" : "implicit val"}, {"label" : "matSclr_BB_NEQ", "tail" : ": BinOpInPlace[NeqOp, Mat[Boolean], Boolean]", "member" : "org.saddle.macros.BinOpMatInPlace.matSclr_BB_NEQ", "link" : "org\/saddle\/macros\/BinOpMatInPlace.html#matSclr_BB_NEQ:org.saddle.ops.BinOpInPlace[org.saddle.ops.NeqOp,org.saddle.Mat[Boolean],Boolean]", "kind" : "implicit val"}, {"label" : "matSclr_BB_LTE", "tail" : ": BinOpInPlace[LteOp, Mat[Boolean], Boolean]", "member" : "org.saddle.macros.BinOpMatInPlace.matSclr_BB_LTE", "link" : "org\/saddle\/macros\/BinOpMatInPlace.html#matSclr_BB_LTE:org.saddle.ops.BinOpInPlace[org.saddle.ops.LteOp,org.saddle.Mat[Boolean],Boolean]", "kind" : "implicit val"}, {"label" : "matSclr_BB_LT", "tail" : ": BinOpInPlace[LtOp, Mat[Boolean], Boolean]", "member" : "org.saddle.macros.BinOpMatInPlace.matSclr_BB_LT", "link" : "org\/saddle\/macros\/BinOpMatInPlace.html#matSclr_BB_LT:org.saddle.ops.BinOpInPlace[org.saddle.ops.LtOp,org.saddle.Mat[Boolean],Boolean]", "kind" : "implicit val"}, {"label" : "matSclr_BB_GTE", "tail" : ": BinOpInPlace[GteOp, Mat[Boolean], Boolean]", "member" : "org.saddle.macros.BinOpMatInPlace.matSclr_BB_GTE", "link" : "org\/saddle\/macros\/BinOpMatInPlace.html#matSclr_BB_GTE:org.saddle.ops.BinOpInPlace[org.saddle.ops.GteOp,org.saddle.Mat[Boolean],Boolean]", "kind" : "implicit val"}, {"label" : "matSclr_BB_GT", "tail" : ": BinOpInPlace[GtOp, Mat[Boolean], Boolean]", "member" : "org.saddle.macros.BinOpMatInPlace.matSclr_BB_GT", "link" : "org\/saddle\/macros\/BinOpMatInPlace.html#matSclr_BB_GT:org.saddle.ops.BinOpInPlace[org.saddle.ops.GtOp,org.saddle.Mat[Boolean],Boolean]", "kind" : "implicit val"}, {"label" : "matSclr_II_BitUshr", "tail" : ": BinOpInPlace[BitUShr, Mat[Int], Int]", "member" : "org.saddle.macros.BinOpMatInPlace.matSclr_II_BitUshr", "link" : "org\/saddle\/macros\/BinOpMatInPlace.html#matSclr_II_BitUshr:org.saddle.ops.BinOpInPlace[org.saddle.ops.BitUShr,org.saddle.Mat[Int],Int]", "kind" : "implicit val"}, {"label" : "matSclr_LI_BitUshr", "tail" : ": BinOpInPlace[BitUShr, Mat[Long], Int]", "member" : "org.saddle.macros.BinOpMatInPlace.matSclr_LI_BitUshr", "link" : "org\/saddle\/macros\/BinOpMatInPlace.html#matSclr_LI_BitUshr:org.saddle.ops.BinOpInPlace[org.saddle.ops.BitUShr,org.saddle.Mat[Long],Int]", "kind" : "implicit val"}, {"label" : "matSclr_LL_BitUshr", "tail" : ": BinOpInPlace[BitUShr, Mat[Long], Long]", "member" : "org.saddle.macros.BinOpMatInPlace.matSclr_LL_BitUshr", "link" : "org\/saddle\/macros\/BinOpMatInPlace.html#matSclr_LL_BitUshr:org.saddle.ops.BinOpInPlace[org.saddle.ops.BitUShr,org.saddle.Mat[Long],Long]", "kind" : "implicit val"}, {"label" : "matSclr_II_BitShr", "tail" : ": BinOpInPlace[BitShr, Mat[Int], Int]", "member" : "org.saddle.macros.BinOpMatInPlace.matSclr_II_BitShr", "link" : "org\/saddle\/macros\/BinOpMatInPlace.html#matSclr_II_BitShr:org.saddle.ops.BinOpInPlace[org.saddle.ops.BitShr,org.saddle.Mat[Int],Int]", "kind" : "implicit val"}, {"label" : "matSclr_LI_BitShr", "tail" : ": BinOpInPlace[BitShr, Mat[Long], Int]", "member" : "org.saddle.macros.BinOpMatInPlace.matSclr_LI_BitShr", "link" : "org\/saddle\/macros\/BinOpMatInPlace.html#matSclr_LI_BitShr:org.saddle.ops.BinOpInPlace[org.saddle.ops.BitShr,org.saddle.Mat[Long],Int]", "kind" : "implicit val"}, {"label" : "matSclr_LL_BitShr", "tail" : ": BinOpInPlace[BitShr, Mat[Long], Long]", "member" : "org.saddle.macros.BinOpMatInPlace.matSclr_LL_BitShr", "link" : "org\/saddle\/macros\/BinOpMatInPlace.html#matSclr_LL_BitShr:org.saddle.ops.BinOpInPlace[org.saddle.ops.BitShr,org.saddle.Mat[Long],Long]", "kind" : "implicit val"}, {"label" : "matSclr_II_BitShl", "tail" : ": BinOpInPlace[BitShl, Mat[Int], Int]", "member" : "org.saddle.macros.BinOpMatInPlace.matSclr_II_BitShl", "link" : "org\/saddle\/macros\/BinOpMatInPlace.html#matSclr_II_BitShl:org.saddle.ops.BinOpInPlace[org.saddle.ops.BitShl,org.saddle.Mat[Int],Int]", "kind" : "implicit val"}, {"label" : "matSclr_LI_BitShl", "tail" : ": BinOpInPlace[BitShl, Mat[Long], Int]", "member" : "org.saddle.macros.BinOpMatInPlace.matSclr_LI_BitShl", "link" : "org\/saddle\/macros\/BinOpMatInPlace.html#matSclr_LI_BitShl:org.saddle.ops.BinOpInPlace[org.saddle.ops.BitShl,org.saddle.Mat[Long],Int]", "kind" : "implicit val"}, {"label" : "matSclr_LL_BitShl", "tail" : ": BinOpInPlace[BitShl, Mat[Long], Long]", "member" : "org.saddle.macros.BinOpMatInPlace.matSclr_LL_BitShl", "link" : "org\/saddle\/macros\/BinOpMatInPlace.html#matSclr_LL_BitShl:org.saddle.ops.BinOpInPlace[org.saddle.ops.BitShl,org.saddle.Mat[Long],Long]", "kind" : "implicit val"}, {"label" : "matSclr_II_BitXor", "tail" : ": BinOpInPlace[BitXor, Mat[Int], Int]", "member" : "org.saddle.macros.BinOpMatInPlace.matSclr_II_BitXor", "link" : "org\/saddle\/macros\/BinOpMatInPlace.html#matSclr_II_BitXor:org.saddle.ops.BinOpInPlace[org.saddle.ops.BitXor,org.saddle.Mat[Int],Int]", "kind" : "implicit val"}, {"label" : "matSclr_LI_BitXor", "tail" : ": BinOpInPlace[BitXor, Mat[Long], Int]", "member" : "org.saddle.macros.BinOpMatInPlace.matSclr_LI_BitXor", "link" : "org\/saddle\/macros\/BinOpMatInPlace.html#matSclr_LI_BitXor:org.saddle.ops.BinOpInPlace[org.saddle.ops.BitXor,org.saddle.Mat[Long],Int]", "kind" : "implicit val"}, {"label" : "matSclr_LL_BitXor", "tail" : ": BinOpInPlace[BitXor, Mat[Long], Long]", "member" : "org.saddle.macros.BinOpMatInPlace.matSclr_LL_BitXor", "link" : "org\/saddle\/macros\/BinOpMatInPlace.html#matSclr_LL_BitXor:org.saddle.ops.BinOpInPlace[org.saddle.ops.BitXor,org.saddle.Mat[Long],Long]", "kind" : "implicit val"}, {"label" : "matSclr_II_BitOr", "tail" : ": BinOpInPlace[BitOr, Mat[Int], Int]", "member" : "org.saddle.macros.BinOpMatInPlace.matSclr_II_BitOr", "link" : "org\/saddle\/macros\/BinOpMatInPlace.html#matSclr_II_BitOr:org.saddle.ops.BinOpInPlace[org.saddle.ops.BitOr,org.saddle.Mat[Int],Int]", "kind" : "implicit val"}, {"label" : "matSclr_LI_BitOr", "tail" : ": BinOpInPlace[BitOr, Mat[Long], Int]", "member" : "org.saddle.macros.BinOpMatInPlace.matSclr_LI_BitOr", "link" : "org\/saddle\/macros\/BinOpMatInPlace.html#matSclr_LI_BitOr:org.saddle.ops.BinOpInPlace[org.saddle.ops.BitOr,org.saddle.Mat[Long],Int]", "kind" : "implicit val"}, {"label" : "matSclr_LL_BitOr", "tail" : ": BinOpInPlace[BitOr, Mat[Long], Long]", "member" : "org.saddle.macros.BinOpMatInPlace.matSclr_LL_BitOr", "link" : "org\/saddle\/macros\/BinOpMatInPlace.html#matSclr_LL_BitOr:org.saddle.ops.BinOpInPlace[org.saddle.ops.BitOr,org.saddle.Mat[Long],Long]", "kind" : "implicit val"}, {"label" : "matSclr_II_BitAnd", "tail" : ": BinOpInPlace[BitAnd, Mat[Int], Int]", "member" : "org.saddle.macros.BinOpMatInPlace.matSclr_II_BitAnd", "link" : "org\/saddle\/macros\/BinOpMatInPlace.html#matSclr_II_BitAnd:org.saddle.ops.BinOpInPlace[org.saddle.ops.BitAnd,org.saddle.Mat[Int],Int]", "kind" : "implicit val"}, {"label" : "matSclr_LI_BitAnd", "tail" : ": BinOpInPlace[BitAnd, Mat[Long], Int]", "member" : "org.saddle.macros.BinOpMatInPlace.matSclr_LI_BitAnd", "link" : "org\/saddle\/macros\/BinOpMatInPlace.html#matSclr_LI_BitAnd:org.saddle.ops.BinOpInPlace[org.saddle.ops.BitAnd,org.saddle.Mat[Long],Int]", "kind" : "implicit val"}, {"label" : "matSclr_LL_BitAnd", "tail" : ": BinOpInPlace[BitAnd, Mat[Long], Long]", "member" : "org.saddle.macros.BinOpMatInPlace.matSclr_LL_BitAnd", "link" : "org\/saddle\/macros\/BinOpMatInPlace.html#matSclr_LL_BitAnd:org.saddle.ops.BinOpInPlace[org.saddle.ops.BitAnd,org.saddle.Mat[Long],Long]", "kind" : "implicit val"}, {"label" : "matSclr_II_Mod", "tail" : ": BinOpInPlace[Mod, Mat[Int], Int]", "member" : "org.saddle.macros.BinOpMatInPlace.matSclr_II_Mod", "link" : "org\/saddle\/macros\/BinOpMatInPlace.html#matSclr_II_Mod:org.saddle.ops.BinOpInPlace[org.saddle.ops.Mod,org.saddle.Mat[Int],Int]", "kind" : "implicit val"}, {"label" : "matSclr_LI_Mod", "tail" : ": BinOpInPlace[Mod, Mat[Long], Int]", "member" : "org.saddle.macros.BinOpMatInPlace.matSclr_LI_Mod", "link" : "org\/saddle\/macros\/BinOpMatInPlace.html#matSclr_LI_Mod:org.saddle.ops.BinOpInPlace[org.saddle.ops.Mod,org.saddle.Mat[Long],Int]", "kind" : "implicit val"}, {"label" : "matSclr_LL_Mod", "tail" : ": BinOpInPlace[Mod, Mat[Long], Long]", "member" : "org.saddle.macros.BinOpMatInPlace.matSclr_LL_Mod", "link" : "org\/saddle\/macros\/BinOpMatInPlace.html#matSclr_LL_Mod:org.saddle.ops.BinOpInPlace[org.saddle.ops.Mod,org.saddle.Mat[Long],Long]", "kind" : "implicit val"}, {"label" : "matSclr_DI_Mod", "tail" : ": BinOpInPlace[Mod, Mat[Double], Int]", "member" : "org.saddle.macros.BinOpMatInPlace.matSclr_DI_Mod", "link" : "org\/saddle\/macros\/BinOpMatInPlace.html#matSclr_DI_Mod:org.saddle.ops.BinOpInPlace[org.saddle.ops.Mod,org.saddle.Mat[Double],Int]", "kind" : "implicit val"}, {"label" : "matSclr_DL_Mod", "tail" : ": BinOpInPlace[Mod, Mat[Double], Long]", "member" : "org.saddle.macros.BinOpMatInPlace.matSclr_DL_Mod", "link" : "org\/saddle\/macros\/BinOpMatInPlace.html#matSclr_DL_Mod:org.saddle.ops.BinOpInPlace[org.saddle.ops.Mod,org.saddle.Mat[Double],Long]", "kind" : "implicit val"}, {"label" : "matSclr_DD_Mod", "tail" : ": BinOpInPlace[Mod, Mat[Double], Double]", "member" : "org.saddle.macros.BinOpMatInPlace.matSclr_DD_Mod", "link" : "org\/saddle\/macros\/BinOpMatInPlace.html#matSclr_DD_Mod:org.saddle.ops.BinOpInPlace[org.saddle.ops.Mod,org.saddle.Mat[Double],Double]", "kind" : "implicit val"}, {"label" : "matSclr_II_Div", "tail" : ": BinOpInPlace[Divide, Mat[Int], Int]", "member" : "org.saddle.macros.BinOpMatInPlace.matSclr_II_Div", "link" : "org\/saddle\/macros\/BinOpMatInPlace.html#matSclr_II_Div:org.saddle.ops.BinOpInPlace[org.saddle.ops.Divide,org.saddle.Mat[Int],Int]", "kind" : "implicit val"}, {"label" : "matSclr_LI_Div", "tail" : ": BinOpInPlace[Divide, Mat[Long], Int]", "member" : "org.saddle.macros.BinOpMatInPlace.matSclr_LI_Div", "link" : "org\/saddle\/macros\/BinOpMatInPlace.html#matSclr_LI_Div:org.saddle.ops.BinOpInPlace[org.saddle.ops.Divide,org.saddle.Mat[Long],Int]", "kind" : "implicit val"}, {"label" : "matSclr_LL_Div", "tail" : ": BinOpInPlace[Divide, Mat[Long], Long]", "member" : "org.saddle.macros.BinOpMatInPlace.matSclr_LL_Div", "link" : "org\/saddle\/macros\/BinOpMatInPlace.html#matSclr_LL_Div:org.saddle.ops.BinOpInPlace[org.saddle.ops.Divide,org.saddle.Mat[Long],Long]", "kind" : "implicit val"}, {"label" : "matSclr_DI_Div", "tail" : ": BinOpInPlace[Divide, Mat[Double], Int]", "member" : "org.saddle.macros.BinOpMatInPlace.matSclr_DI_Div", "link" : "org\/saddle\/macros\/BinOpMatInPlace.html#matSclr_DI_Div:org.saddle.ops.BinOpInPlace[org.saddle.ops.Divide,org.saddle.Mat[Double],Int]", "kind" : "implicit val"}, {"label" : "matSclr_DL_Div", "tail" : ": BinOpInPlace[Divide, Mat[Double], Long]", "member" : "org.saddle.macros.BinOpMatInPlace.matSclr_DL_Div", "link" : "org\/saddle\/macros\/BinOpMatInPlace.html#matSclr_DL_Div:org.saddle.ops.BinOpInPlace[org.saddle.ops.Divide,org.saddle.Mat[Double],Long]", "kind" : "implicit val"}, {"label" : "matSclr_DD_Div", "tail" : ": BinOpInPlace[Divide, Mat[Double], Double]", "member" : "org.saddle.macros.BinOpMatInPlace.matSclr_DD_Div", "link" : "org\/saddle\/macros\/BinOpMatInPlace.html#matSclr_DD_Div:org.saddle.ops.BinOpInPlace[org.saddle.ops.Divide,org.saddle.Mat[Double],Double]", "kind" : "implicit val"}, {"label" : "matSclr_II_Mult", "tail" : ": BinOpInPlace[Multiply, Mat[Int], Int]", "member" : "org.saddle.macros.BinOpMatInPlace.matSclr_II_Mult", "link" : "org\/saddle\/macros\/BinOpMatInPlace.html#matSclr_II_Mult:org.saddle.ops.BinOpInPlace[org.saddle.ops.Multiply,org.saddle.Mat[Int],Int]", "kind" : "implicit val"}, {"label" : "matSclr_LI_Mult", "tail" : ": BinOpInPlace[Multiply, Mat[Long], Int]", "member" : "org.saddle.macros.BinOpMatInPlace.matSclr_LI_Mult", "link" : "org\/saddle\/macros\/BinOpMatInPlace.html#matSclr_LI_Mult:org.saddle.ops.BinOpInPlace[org.saddle.ops.Multiply,org.saddle.Mat[Long],Int]", "kind" : "implicit val"}, {"label" : "matSclr_LL_Mult", "tail" : ": BinOpInPlace[Multiply, Mat[Long], Long]", "member" : "org.saddle.macros.BinOpMatInPlace.matSclr_LL_Mult", "link" : "org\/saddle\/macros\/BinOpMatInPlace.html#matSclr_LL_Mult:org.saddle.ops.BinOpInPlace[org.saddle.ops.Multiply,org.saddle.Mat[Long],Long]", "kind" : "implicit val"}, {"label" : "matSclr_DI_Mult", "tail" : ": BinOpInPlace[Multiply, Mat[Double], Int]", "member" : "org.saddle.macros.BinOpMatInPlace.matSclr_DI_Mult", "link" : "org\/saddle\/macros\/BinOpMatInPlace.html#matSclr_DI_Mult:org.saddle.ops.BinOpInPlace[org.saddle.ops.Multiply,org.saddle.Mat[Double],Int]", "kind" : "implicit val"}, {"label" : "matSclr_DL_Mult", "tail" : ": BinOpInPlace[Multiply, Mat[Double], Long]", "member" : "org.saddle.macros.BinOpMatInPlace.matSclr_DL_Mult", "link" : "org\/saddle\/macros\/BinOpMatInPlace.html#matSclr_DL_Mult:org.saddle.ops.BinOpInPlace[org.saddle.ops.Multiply,org.saddle.Mat[Double],Long]", "kind" : "implicit val"}, {"label" : "matSclr_DD_Mult", "tail" : ": BinOpInPlace[Multiply, Mat[Double], Double]", "member" : "org.saddle.macros.BinOpMatInPlace.matSclr_DD_Mult", "link" : "org\/saddle\/macros\/BinOpMatInPlace.html#matSclr_DD_Mult:org.saddle.ops.BinOpInPlace[org.saddle.ops.Multiply,org.saddle.Mat[Double],Double]", "kind" : "implicit val"}, {"label" : "matSclr_II_Sub", "tail" : ": BinOpInPlace[Subtract, Mat[Int], Int]", "member" : "org.saddle.macros.BinOpMatInPlace.matSclr_II_Sub", "link" : "org\/saddle\/macros\/BinOpMatInPlace.html#matSclr_II_Sub:org.saddle.ops.BinOpInPlace[org.saddle.ops.Subtract,org.saddle.Mat[Int],Int]", "kind" : "implicit val"}, {"label" : "matSclr_LI_Sub", "tail" : ": BinOpInPlace[Subtract, Mat[Long], Int]", "member" : "org.saddle.macros.BinOpMatInPlace.matSclr_LI_Sub", "link" : "org\/saddle\/macros\/BinOpMatInPlace.html#matSclr_LI_Sub:org.saddle.ops.BinOpInPlace[org.saddle.ops.Subtract,org.saddle.Mat[Long],Int]", "kind" : "implicit val"}, {"label" : "matSclr_LL_Sub", "tail" : ": BinOpInPlace[Subtract, Mat[Long], Long]", "member" : "org.saddle.macros.BinOpMatInPlace.matSclr_LL_Sub", "link" : "org\/saddle\/macros\/BinOpMatInPlace.html#matSclr_LL_Sub:org.saddle.ops.BinOpInPlace[org.saddle.ops.Subtract,org.saddle.Mat[Long],Long]", "kind" : "implicit val"}, {"label" : "matSclr_DI_Sub", "tail" : ": BinOpInPlace[Subtract, Mat[Double], Int]", "member" : "org.saddle.macros.BinOpMatInPlace.matSclr_DI_Sub", "link" : "org\/saddle\/macros\/BinOpMatInPlace.html#matSclr_DI_Sub:org.saddle.ops.BinOpInPlace[org.saddle.ops.Subtract,org.saddle.Mat[Double],Int]", "kind" : "implicit val"}, {"label" : "matSclr_DL_Sub", "tail" : ": BinOpInPlace[Subtract, Mat[Double], Long]", "member" : "org.saddle.macros.BinOpMatInPlace.matSclr_DL_Sub", "link" : "org\/saddle\/macros\/BinOpMatInPlace.html#matSclr_DL_Sub:org.saddle.ops.BinOpInPlace[org.saddle.ops.Subtract,org.saddle.Mat[Double],Long]", "kind" : "implicit val"}, {"label" : "matSclr_DD_Sub", "tail" : ": BinOpInPlace[Subtract, Mat[Double], Double]", "member" : "org.saddle.macros.BinOpMatInPlace.matSclr_DD_Sub", "link" : "org\/saddle\/macros\/BinOpMatInPlace.html#matSclr_DD_Sub:org.saddle.ops.BinOpInPlace[org.saddle.ops.Subtract,org.saddle.Mat[Double],Double]", "kind" : "implicit val"}, {"label" : "matSclr_II_Power", "tail" : ": BinOpInPlace[Power, Mat[Int], Int]", "member" : "org.saddle.macros.BinOpMatInPlace.matSclr_II_Power", "link" : "org\/saddle\/macros\/BinOpMatInPlace.html#matSclr_II_Power:org.saddle.ops.BinOpInPlace[org.saddle.ops.Power,org.saddle.Mat[Int],Int]", "kind" : "implicit val"}, {"label" : "matSclr_LI_Power", "tail" : ": BinOpInPlace[Power, Mat[Long], Int]", "member" : "org.saddle.macros.BinOpMatInPlace.matSclr_LI_Power", "link" : "org\/saddle\/macros\/BinOpMatInPlace.html#matSclr_LI_Power:org.saddle.ops.BinOpInPlace[org.saddle.ops.Power,org.saddle.Mat[Long],Int]", "kind" : "implicit val"}, {"label" : "matSclr_LL_Power", "tail" : ": BinOpInPlace[Power, Mat[Long], Long]", "member" : "org.saddle.macros.BinOpMatInPlace.matSclr_LL_Power", "link" : "org\/saddle\/macros\/BinOpMatInPlace.html#matSclr_LL_Power:org.saddle.ops.BinOpInPlace[org.saddle.ops.Power,org.saddle.Mat[Long],Long]", "kind" : "implicit val"}, {"label" : "matSclr_DI_Power", "tail" : ": BinOpInPlace[Power, Mat[Double], Int]", "member" : "org.saddle.macros.BinOpMatInPlace.matSclr_DI_Power", "link" : "org\/saddle\/macros\/BinOpMatInPlace.html#matSclr_DI_Power:org.saddle.ops.BinOpInPlace[org.saddle.ops.Power,org.saddle.Mat[Double],Int]", "kind" : "implicit val"}, {"label" : "matSclr_DL_Power", "tail" : ": BinOpInPlace[Power, Mat[Double], Long]", "member" : "org.saddle.macros.BinOpMatInPlace.matSclr_DL_Power", "link" : "org\/saddle\/macros\/BinOpMatInPlace.html#matSclr_DL_Power:org.saddle.ops.BinOpInPlace[org.saddle.ops.Power,org.saddle.Mat[Double],Long]", "kind" : "implicit val"}, {"label" : "matSclr_DD_Power", "tail" : ": BinOpInPlace[Power, Mat[Double], Double]", "member" : "org.saddle.macros.BinOpMatInPlace.matSclr_DD_Power", "link" : "org\/saddle\/macros\/BinOpMatInPlace.html#matSclr_DD_Power:org.saddle.ops.BinOpInPlace[org.saddle.ops.Power,org.saddle.Mat[Double],Double]", "kind" : "implicit val"}, {"label" : "matSclr_II_Add", "tail" : ": BinOpInPlace[Add, Mat[Int], Int]", "member" : "org.saddle.macros.BinOpMatInPlace.matSclr_II_Add", "link" : "org\/saddle\/macros\/BinOpMatInPlace.html#matSclr_II_Add:org.saddle.ops.BinOpInPlace[org.saddle.ops.Add,org.saddle.Mat[Int],Int]", "kind" : "implicit val"}, {"label" : "matSclr_LI_Add", "tail" : ": BinOpInPlace[Add, Mat[Long], Int]", "member" : "org.saddle.macros.BinOpMatInPlace.matSclr_LI_Add", "link" : "org\/saddle\/macros\/BinOpMatInPlace.html#matSclr_LI_Add:org.saddle.ops.BinOpInPlace[org.saddle.ops.Add,org.saddle.Mat[Long],Int]", "kind" : "implicit val"}, {"label" : "matSclr_LL_Add", "tail" : ": BinOpInPlace[Add, Mat[Long], Long]", "member" : "org.saddle.macros.BinOpMatInPlace.matSclr_LL_Add", "link" : "org\/saddle\/macros\/BinOpMatInPlace.html#matSclr_LL_Add:org.saddle.ops.BinOpInPlace[org.saddle.ops.Add,org.saddle.Mat[Long],Long]", "kind" : "implicit val"}, {"label" : "matSclr_DI_Add", "tail" : ": BinOpInPlace[Add, Mat[Double], Int]", "member" : "org.saddle.macros.BinOpMatInPlace.matSclr_DI_Add", "link" : "org\/saddle\/macros\/BinOpMatInPlace.html#matSclr_DI_Add:org.saddle.ops.BinOpInPlace[org.saddle.ops.Add,org.saddle.Mat[Double],Int]", "kind" : "implicit val"}, {"label" : "matSclr_DL_Add", "tail" : ": BinOpInPlace[Add, Mat[Double], Long]", "member" : "org.saddle.macros.BinOpMatInPlace.matSclr_DL_Add", "link" : "org\/saddle\/macros\/BinOpMatInPlace.html#matSclr_DL_Add:org.saddle.ops.BinOpInPlace[org.saddle.ops.Add,org.saddle.Mat[Double],Long]", "kind" : "implicit val"}, {"label" : "matSclr_DD_Add", "tail" : ": BinOpInPlace[Add, Mat[Double], Double]", "member" : "org.saddle.macros.BinOpMatInPlace.matSclr_DD_Add", "link" : "org\/saddle\/macros\/BinOpMatInPlace.html#matSclr_DD_Add:org.saddle.ops.BinOpInPlace[org.saddle.ops.Add,org.saddle.Mat[Double],Double]", "kind" : "implicit val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/saddle\/macros\/BinOpMatInPlace.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/saddle\/macros\/BinOpMatInPlace.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/saddle\/macros\/BinOpMatInPlace.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/saddle\/macros\/BinOpMatInPlace.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/saddle\/macros\/BinOpMatInPlace.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/saddle\/macros\/BinOpMatInPlace.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/saddle\/macros\/BinOpMatInPlace.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/macros\/BinOpMatInPlace.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/macros\/BinOpMatInPlace.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/macros\/BinOpMatInPlace.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/saddle\/macros\/BinOpMatInPlace.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/saddle\/macros\/BinOpMatInPlace.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/saddle\/macros\/BinOpMatInPlace.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/saddle\/macros\/BinOpMatInPlace.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/saddle\/macros\/BinOpMatInPlace.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/saddle\/macros\/BinOpMatInPlace.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "org\/saddle\/macros\/BinOpMatInPlace.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/saddle\/macros\/BinOpMatInPlace.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/saddle\/macros\/BinOpMatInPlace.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}, {"name" : "org.saddle.macros.BinOpMatMatCopy", "trait" : "org\/saddle\/macros\/BinOpMatMatCopy.html", "kind" : "trait", "members_trait" : [{"label" : "matMat_Copy_BB_Xor", "tail" : ": BinOp[XorOp, Mat[Boolean], Mat[Boolean], Mat[Boolean]]", "member" : "org.saddle.macros.BinOpMatMatCopy.matMat_Copy_BB_Xor", "link" : "org\/saddle\/macros\/BinOpMatMatCopy.html#matMat_Copy_BB_Xor:org.saddle.ops.BinOp[org.saddle.ops.XorOp,org.saddle.Mat[Boolean],org.saddle.Mat[Boolean],org.saddle.Mat[Boolean]]", "kind" : "implicit val"}, {"label" : "matMat_Copy_BB_Or", "tail" : ": BinOp[OrOp, Mat[Boolean], Mat[Boolean], Mat[Boolean]]", "member" : "org.saddle.macros.BinOpMatMatCopy.matMat_Copy_BB_Or", "link" : "org\/saddle\/macros\/BinOpMatMatCopy.html#matMat_Copy_BB_Or:org.saddle.ops.BinOp[org.saddle.ops.OrOp,org.saddle.Mat[Boolean],org.saddle.Mat[Boolean],org.saddle.Mat[Boolean]]", "kind" : "implicit val"}, {"label" : "matMat_Copy_BB_And", "tail" : ": BinOp[AndOp, Mat[Boolean], Mat[Boolean], Mat[Boolean]]", "member" : "org.saddle.macros.BinOpMatMatCopy.matMat_Copy_BB_And", "link" : "org\/saddle\/macros\/BinOpMatMatCopy.html#matMat_Copy_BB_And:org.saddle.ops.BinOp[org.saddle.ops.AndOp,org.saddle.Mat[Boolean],org.saddle.Mat[Boolean],org.saddle.Mat[Boolean]]", "kind" : "implicit val"}, {"label" : "matMat_Copy_II_BitUshr", "tail" : ": BinOp[BitUShr, Mat[Int], Mat[Int], Mat[Int]]", "member" : "org.saddle.macros.BinOpMatMatCopy.matMat_Copy_II_BitUshr", "link" : "org\/saddle\/macros\/BinOpMatMatCopy.html#matMat_Copy_II_BitUshr:org.saddle.ops.BinOp[org.saddle.ops.BitUShr,org.saddle.Mat[Int],org.saddle.Mat[Int],org.saddle.Mat[Int]]", "kind" : "implicit val"}, {"label" : "matMat_Copy_LI_BitUshr", "tail" : ": BinOp[BitUShr, Mat[Long], Mat[Int], Mat[Long]]", "member" : "org.saddle.macros.BinOpMatMatCopy.matMat_Copy_LI_BitUshr", "link" : "org\/saddle\/macros\/BinOpMatMatCopy.html#matMat_Copy_LI_BitUshr:org.saddle.ops.BinOp[org.saddle.ops.BitUShr,org.saddle.Mat[Long],org.saddle.Mat[Int],org.saddle.Mat[Long]]", "kind" : "implicit val"}, {"label" : "matMat_Copy_LL_BitUshr", "tail" : ": BinOp[BitUShr, Mat[Long], Mat[Long], Mat[Long]]", "member" : "org.saddle.macros.BinOpMatMatCopy.matMat_Copy_LL_BitUshr", "link" : "org\/saddle\/macros\/BinOpMatMatCopy.html#matMat_Copy_LL_BitUshr:org.saddle.ops.BinOp[org.saddle.ops.BitUShr,org.saddle.Mat[Long],org.saddle.Mat[Long],org.saddle.Mat[Long]]", "kind" : "implicit val"}, {"label" : "matMat_Copy_II_BitShr", "tail" : ": BinOp[BitShr, Mat[Int], Mat[Int], Mat[Int]]", "member" : "org.saddle.macros.BinOpMatMatCopy.matMat_Copy_II_BitShr", "link" : "org\/saddle\/macros\/BinOpMatMatCopy.html#matMat_Copy_II_BitShr:org.saddle.ops.BinOp[org.saddle.ops.BitShr,org.saddle.Mat[Int],org.saddle.Mat[Int],org.saddle.Mat[Int]]", "kind" : "implicit val"}, {"label" : "matMat_Copy_LI_BitShr", "tail" : ": BinOp[BitShr, Mat[Long], Mat[Int], Mat[Long]]", "member" : "org.saddle.macros.BinOpMatMatCopy.matMat_Copy_LI_BitShr", "link" : "org\/saddle\/macros\/BinOpMatMatCopy.html#matMat_Copy_LI_BitShr:org.saddle.ops.BinOp[org.saddle.ops.BitShr,org.saddle.Mat[Long],org.saddle.Mat[Int],org.saddle.Mat[Long]]", "kind" : "implicit val"}, {"label" : "matMat_Copy_LL_BitShr", "tail" : ": BinOp[BitShr, Mat[Long], Mat[Long], Mat[Long]]", "member" : "org.saddle.macros.BinOpMatMatCopy.matMat_Copy_LL_BitShr", "link" : "org\/saddle\/macros\/BinOpMatMatCopy.html#matMat_Copy_LL_BitShr:org.saddle.ops.BinOp[org.saddle.ops.BitShr,org.saddle.Mat[Long],org.saddle.Mat[Long],org.saddle.Mat[Long]]", "kind" : "implicit val"}, {"label" : "matMat_Copy_II_BitShl", "tail" : ": BinOp[BitShl, Mat[Int], Mat[Int], Mat[Int]]", "member" : "org.saddle.macros.BinOpMatMatCopy.matMat_Copy_II_BitShl", "link" : "org\/saddle\/macros\/BinOpMatMatCopy.html#matMat_Copy_II_BitShl:org.saddle.ops.BinOp[org.saddle.ops.BitShl,org.saddle.Mat[Int],org.saddle.Mat[Int],org.saddle.Mat[Int]]", "kind" : "implicit val"}, {"label" : "matMat_Copy_LI_BitShl", "tail" : ": BinOp[BitShl, Mat[Long], Mat[Int], Mat[Long]]", "member" : "org.saddle.macros.BinOpMatMatCopy.matMat_Copy_LI_BitShl", "link" : "org\/saddle\/macros\/BinOpMatMatCopy.html#matMat_Copy_LI_BitShl:org.saddle.ops.BinOp[org.saddle.ops.BitShl,org.saddle.Mat[Long],org.saddle.Mat[Int],org.saddle.Mat[Long]]", "kind" : "implicit val"}, {"label" : "matMat_Copy_LL_BitShl", "tail" : ": BinOp[BitShl, Mat[Long], Mat[Long], Mat[Long]]", "member" : "org.saddle.macros.BinOpMatMatCopy.matMat_Copy_LL_BitShl", "link" : "org\/saddle\/macros\/BinOpMatMatCopy.html#matMat_Copy_LL_BitShl:org.saddle.ops.BinOp[org.saddle.ops.BitShl,org.saddle.Mat[Long],org.saddle.Mat[Long],org.saddle.Mat[Long]]", "kind" : "implicit val"}, {"label" : "matMat_Copy_II_BitXor", "tail" : ": BinOp[BitXor, Mat[Int], Mat[Int], Mat[Int]]", "member" : "org.saddle.macros.BinOpMatMatCopy.matMat_Copy_II_BitXor", "link" : "org\/saddle\/macros\/BinOpMatMatCopy.html#matMat_Copy_II_BitXor:org.saddle.ops.BinOp[org.saddle.ops.BitXor,org.saddle.Mat[Int],org.saddle.Mat[Int],org.saddle.Mat[Int]]", "kind" : "implicit val"}, {"label" : "matMat_Copy_LI_BitXor", "tail" : ": BinOp[BitXor, Mat[Long], Mat[Int], Mat[Long]]", "member" : "org.saddle.macros.BinOpMatMatCopy.matMat_Copy_LI_BitXor", "link" : "org\/saddle\/macros\/BinOpMatMatCopy.html#matMat_Copy_LI_BitXor:org.saddle.ops.BinOp[org.saddle.ops.BitXor,org.saddle.Mat[Long],org.saddle.Mat[Int],org.saddle.Mat[Long]]", "kind" : "implicit val"}, {"label" : "matMat_Copy_LL_BitXor", "tail" : ": BinOp[BitXor, Mat[Long], Mat[Long], Mat[Long]]", "member" : "org.saddle.macros.BinOpMatMatCopy.matMat_Copy_LL_BitXor", "link" : "org\/saddle\/macros\/BinOpMatMatCopy.html#matMat_Copy_LL_BitXor:org.saddle.ops.BinOp[org.saddle.ops.BitXor,org.saddle.Mat[Long],org.saddle.Mat[Long],org.saddle.Mat[Long]]", "kind" : "implicit val"}, {"label" : "matMat_Copy_II_BitOr", "tail" : ": BinOp[BitOr, Mat[Int], Mat[Int], Mat[Int]]", "member" : "org.saddle.macros.BinOpMatMatCopy.matMat_Copy_II_BitOr", "link" : "org\/saddle\/macros\/BinOpMatMatCopy.html#matMat_Copy_II_BitOr:org.saddle.ops.BinOp[org.saddle.ops.BitOr,org.saddle.Mat[Int],org.saddle.Mat[Int],org.saddle.Mat[Int]]", "kind" : "implicit val"}, {"label" : "matMat_Copy_LI_BitOr", "tail" : ": BinOp[BitOr, Mat[Long], Mat[Int], Mat[Long]]", "member" : "org.saddle.macros.BinOpMatMatCopy.matMat_Copy_LI_BitOr", "link" : "org\/saddle\/macros\/BinOpMatMatCopy.html#matMat_Copy_LI_BitOr:org.saddle.ops.BinOp[org.saddle.ops.BitOr,org.saddle.Mat[Long],org.saddle.Mat[Int],org.saddle.Mat[Long]]", "kind" : "implicit val"}, {"label" : "matMat_Copy_LL_BitOr", "tail" : ": BinOp[BitOr, Mat[Long], Mat[Long], Mat[Long]]", "member" : "org.saddle.macros.BinOpMatMatCopy.matMat_Copy_LL_BitOr", "link" : "org\/saddle\/macros\/BinOpMatMatCopy.html#matMat_Copy_LL_BitOr:org.saddle.ops.BinOp[org.saddle.ops.BitOr,org.saddle.Mat[Long],org.saddle.Mat[Long],org.saddle.Mat[Long]]", "kind" : "implicit val"}, {"label" : "matMat_Copy_II_BitAnd", "tail" : ": BinOp[BitAnd, Mat[Int], Mat[Int], Mat[Int]]", "member" : "org.saddle.macros.BinOpMatMatCopy.matMat_Copy_II_BitAnd", "link" : "org\/saddle\/macros\/BinOpMatMatCopy.html#matMat_Copy_II_BitAnd:org.saddle.ops.BinOp[org.saddle.ops.BitAnd,org.saddle.Mat[Int],org.saddle.Mat[Int],org.saddle.Mat[Int]]", "kind" : "implicit val"}, {"label" : "matMat_Copy_LI_BitAnd", "tail" : ": BinOp[BitAnd, Mat[Long], Mat[Int], Mat[Long]]", "member" : "org.saddle.macros.BinOpMatMatCopy.matMat_Copy_LI_BitAnd", "link" : "org\/saddle\/macros\/BinOpMatMatCopy.html#matMat_Copy_LI_BitAnd:org.saddle.ops.BinOp[org.saddle.ops.BitAnd,org.saddle.Mat[Long],org.saddle.Mat[Int],org.saddle.Mat[Long]]", "kind" : "implicit val"}, {"label" : "matMat_Copy_LL_BitAnd", "tail" : ": BinOp[BitAnd, Mat[Long], Mat[Long], Mat[Long]]", "member" : "org.saddle.macros.BinOpMatMatCopy.matMat_Copy_LL_BitAnd", "link" : "org\/saddle\/macros\/BinOpMatMatCopy.html#matMat_Copy_LL_BitAnd:org.saddle.ops.BinOp[org.saddle.ops.BitAnd,org.saddle.Mat[Long],org.saddle.Mat[Long],org.saddle.Mat[Long]]", "kind" : "implicit val"}, {"label" : "matMat_Copy_II_Mod", "tail" : ": BinOp[Mod, Mat[Int], Mat[Int], Mat[Int]]", "member" : "org.saddle.macros.BinOpMatMatCopy.matMat_Copy_II_Mod", "link" : "org\/saddle\/macros\/BinOpMatMatCopy.html#matMat_Copy_II_Mod:org.saddle.ops.BinOp[org.saddle.ops.Mod,org.saddle.Mat[Int],org.saddle.Mat[Int],org.saddle.Mat[Int]]", "kind" : "implicit val"}, {"label" : "matMat_Copy_IL_Mod", "tail" : ": BinOp[Mod, Mat[Int], Mat[Long], Mat[Long]]", "member" : "org.saddle.macros.BinOpMatMatCopy.matMat_Copy_IL_Mod", "link" : "org\/saddle\/macros\/BinOpMatMatCopy.html#matMat_Copy_IL_Mod:org.saddle.ops.BinOp[org.saddle.ops.Mod,org.saddle.Mat[Int],org.saddle.Mat[Long],org.saddle.Mat[Long]]", "kind" : "implicit val"}, {"label" : "matMat_Copy_LI_Mod", "tail" : ": BinOp[Mod, Mat[Long], Mat[Int], Mat[Long]]", "member" : "org.saddle.macros.BinOpMatMatCopy.matMat_Copy_LI_Mod", "link" : "org\/saddle\/macros\/BinOpMatMatCopy.html#matMat_Copy_LI_Mod:org.saddle.ops.BinOp[org.saddle.ops.Mod,org.saddle.Mat[Long],org.saddle.Mat[Int],org.saddle.Mat[Long]]", "kind" : "implicit val"}, {"label" : "matMat_Copy_LL_Mod", "tail" : ": BinOp[Mod, Mat[Long], Mat[Long], Mat[Long]]", "member" : "org.saddle.macros.BinOpMatMatCopy.matMat_Copy_LL_Mod", "link" : "org\/saddle\/macros\/BinOpMatMatCopy.html#matMat_Copy_LL_Mod:org.saddle.ops.BinOp[org.saddle.ops.Mod,org.saddle.Mat[Long],org.saddle.Mat[Long],org.saddle.Mat[Long]]", "kind" : "implicit val"}, {"label" : "matMat_Copy_ID_Mod", "tail" : ": BinOp[Mod, Mat[Int], Mat[Double], Mat[Double]]", "member" : "org.saddle.macros.BinOpMatMatCopy.matMat_Copy_ID_Mod", "link" : "org\/saddle\/macros\/BinOpMatMatCopy.html#matMat_Copy_ID_Mod:org.saddle.ops.BinOp[org.saddle.ops.Mod,org.saddle.Mat[Int],org.saddle.Mat[Double],org.saddle.Mat[Double]]", "kind" : "implicit val"}, {"label" : "matMat_Copy_DI_Mod", "tail" : ": BinOp[Mod, Mat[Double], Mat[Int], Mat[Double]]", "member" : "org.saddle.macros.BinOpMatMatCopy.matMat_Copy_DI_Mod", "link" : "org\/saddle\/macros\/BinOpMatMatCopy.html#matMat_Copy_DI_Mod:org.saddle.ops.BinOp[org.saddle.ops.Mod,org.saddle.Mat[Double],org.saddle.Mat[Int],org.saddle.Mat[Double]]", "kind" : "implicit val"}, {"label" : "matMat_Copy_DL_Mod", "tail" : ": BinOp[Mod, Mat[Double], Mat[Long], Mat[Double]]", "member" : "org.saddle.macros.BinOpMatMatCopy.matMat_Copy_DL_Mod", "link" : "org\/saddle\/macros\/BinOpMatMatCopy.html#matMat_Copy_DL_Mod:org.saddle.ops.BinOp[org.saddle.ops.Mod,org.saddle.Mat[Double],org.saddle.Mat[Long],org.saddle.Mat[Double]]", "kind" : "implicit val"}, {"label" : "matMat_Copy_LD_Mod", "tail" : ": BinOp[Mod, Mat[Long], Mat[Double], Mat[Double]]", "member" : "org.saddle.macros.BinOpMatMatCopy.matMat_Copy_LD_Mod", "link" : "org\/saddle\/macros\/BinOpMatMatCopy.html#matMat_Copy_LD_Mod:org.saddle.ops.BinOp[org.saddle.ops.Mod,org.saddle.Mat[Long],org.saddle.Mat[Double],org.saddle.Mat[Double]]", "kind" : "implicit val"}, {"label" : "matMat_Copy_DD_Mod", "tail" : ": BinOp[Mod, Mat[Double], Mat[Double], Mat[Double]]", "member" : "org.saddle.macros.BinOpMatMatCopy.matMat_Copy_DD_Mod", "link" : "org\/saddle\/macros\/BinOpMatMatCopy.html#matMat_Copy_DD_Mod:org.saddle.ops.BinOp[org.saddle.ops.Mod,org.saddle.Mat[Double],org.saddle.Mat[Double],org.saddle.Mat[Double]]", "kind" : "implicit val"}, {"label" : "matMat_Copy_II_Div", "tail" : ": BinOp[Divide, Mat[Int], Mat[Int], Mat[Int]]", "member" : "org.saddle.macros.BinOpMatMatCopy.matMat_Copy_II_Div", "link" : "org\/saddle\/macros\/BinOpMatMatCopy.html#matMat_Copy_II_Div:org.saddle.ops.BinOp[org.saddle.ops.Divide,org.saddle.Mat[Int],org.saddle.Mat[Int],org.saddle.Mat[Int]]", "kind" : "implicit val"}, {"label" : "matMat_Copy_IL_Div", "tail" : ": BinOp[Divide, Mat[Int], Mat[Long], Mat[Long]]", "member" : "org.saddle.macros.BinOpMatMatCopy.matMat_Copy_IL_Div", "link" : "org\/saddle\/macros\/BinOpMatMatCopy.html#matMat_Copy_IL_Div:org.saddle.ops.BinOp[org.saddle.ops.Divide,org.saddle.Mat[Int],org.saddle.Mat[Long],org.saddle.Mat[Long]]", "kind" : "implicit val"}, {"label" : "matMat_Copy_LI_Div", "tail" : ": BinOp[Divide, Mat[Long], Mat[Int], Mat[Long]]", "member" : "org.saddle.macros.BinOpMatMatCopy.matMat_Copy_LI_Div", "link" : "org\/saddle\/macros\/BinOpMatMatCopy.html#matMat_Copy_LI_Div:org.saddle.ops.BinOp[org.saddle.ops.Divide,org.saddle.Mat[Long],org.saddle.Mat[Int],org.saddle.Mat[Long]]", "kind" : "implicit val"}, {"label" : "matMat_Copy_LL_Div", "tail" : ": BinOp[Divide, Mat[Long], Mat[Long], Mat[Long]]", "member" : "org.saddle.macros.BinOpMatMatCopy.matMat_Copy_LL_Div", "link" : "org\/saddle\/macros\/BinOpMatMatCopy.html#matMat_Copy_LL_Div:org.saddle.ops.BinOp[org.saddle.ops.Divide,org.saddle.Mat[Long],org.saddle.Mat[Long],org.saddle.Mat[Long]]", "kind" : "implicit val"}, {"label" : "matMat_Copy_ID_Div", "tail" : ": BinOp[Divide, Mat[Int], Mat[Double], Mat[Double]]", "member" : "org.saddle.macros.BinOpMatMatCopy.matMat_Copy_ID_Div", "link" : "org\/saddle\/macros\/BinOpMatMatCopy.html#matMat_Copy_ID_Div:org.saddle.ops.BinOp[org.saddle.ops.Divide,org.saddle.Mat[Int],org.saddle.Mat[Double],org.saddle.Mat[Double]]", "kind" : "implicit val"}, {"label" : "matMat_Copy_DI_Div", "tail" : ": BinOp[Divide, Mat[Double], Mat[Int], Mat[Double]]", "member" : "org.saddle.macros.BinOpMatMatCopy.matMat_Copy_DI_Div", "link" : "org\/saddle\/macros\/BinOpMatMatCopy.html#matMat_Copy_DI_Div:org.saddle.ops.BinOp[org.saddle.ops.Divide,org.saddle.Mat[Double],org.saddle.Mat[Int],org.saddle.Mat[Double]]", "kind" : "implicit val"}, {"label" : "matMat_Copy_DL_Div", "tail" : ": BinOp[Divide, Mat[Double], Mat[Long], Mat[Double]]", "member" : "org.saddle.macros.BinOpMatMatCopy.matMat_Copy_DL_Div", "link" : "org\/saddle\/macros\/BinOpMatMatCopy.html#matMat_Copy_DL_Div:org.saddle.ops.BinOp[org.saddle.ops.Divide,org.saddle.Mat[Double],org.saddle.Mat[Long],org.saddle.Mat[Double]]", "kind" : "implicit val"}, {"label" : "matMat_Copy_LD_Div", "tail" : ": BinOp[Divide, Mat[Long], Mat[Double], Mat[Double]]", "member" : "org.saddle.macros.BinOpMatMatCopy.matMat_Copy_LD_Div", "link" : "org\/saddle\/macros\/BinOpMatMatCopy.html#matMat_Copy_LD_Div:org.saddle.ops.BinOp[org.saddle.ops.Divide,org.saddle.Mat[Long],org.saddle.Mat[Double],org.saddle.Mat[Double]]", "kind" : "implicit val"}, {"label" : "matMat_Copy_DD_Div", "tail" : ": BinOp[Divide, Mat[Double], Mat[Double], Mat[Double]]", "member" : "org.saddle.macros.BinOpMatMatCopy.matMat_Copy_DD_Div", "link" : "org\/saddle\/macros\/BinOpMatMatCopy.html#matMat_Copy_DD_Div:org.saddle.ops.BinOp[org.saddle.ops.Divide,org.saddle.Mat[Double],org.saddle.Mat[Double],org.saddle.Mat[Double]]", "kind" : "implicit val"}, {"label" : "matMat_Copy_II_Mult", "tail" : ": BinOp[Multiply, Mat[Int], Mat[Int], Mat[Int]]", "member" : "org.saddle.macros.BinOpMatMatCopy.matMat_Copy_II_Mult", "link" : "org\/saddle\/macros\/BinOpMatMatCopy.html#matMat_Copy_II_Mult:org.saddle.ops.BinOp[org.saddle.ops.Multiply,org.saddle.Mat[Int],org.saddle.Mat[Int],org.saddle.Mat[Int]]", "kind" : "implicit val"}, {"label" : "matMat_Copy_IL_Mult", "tail" : ": BinOp[Multiply, Mat[Int], Mat[Long], Mat[Long]]", "member" : "org.saddle.macros.BinOpMatMatCopy.matMat_Copy_IL_Mult", "link" : "org\/saddle\/macros\/BinOpMatMatCopy.html#matMat_Copy_IL_Mult:org.saddle.ops.BinOp[org.saddle.ops.Multiply,org.saddle.Mat[Int],org.saddle.Mat[Long],org.saddle.Mat[Long]]", "kind" : "implicit val"}, {"label" : "matMat_Copy_LI_Mult", "tail" : ": BinOp[Multiply, Mat[Long], Mat[Int], Mat[Long]]", "member" : "org.saddle.macros.BinOpMatMatCopy.matMat_Copy_LI_Mult", "link" : "org\/saddle\/macros\/BinOpMatMatCopy.html#matMat_Copy_LI_Mult:org.saddle.ops.BinOp[org.saddle.ops.Multiply,org.saddle.Mat[Long],org.saddle.Mat[Int],org.saddle.Mat[Long]]", "kind" : "implicit val"}, {"label" : "matMat_Copy_LL_Mult", "tail" : ": BinOp[Multiply, Mat[Long], Mat[Long], Mat[Long]]", "member" : "org.saddle.macros.BinOpMatMatCopy.matMat_Copy_LL_Mult", "link" : "org\/saddle\/macros\/BinOpMatMatCopy.html#matMat_Copy_LL_Mult:org.saddle.ops.BinOp[org.saddle.ops.Multiply,org.saddle.Mat[Long],org.saddle.Mat[Long],org.saddle.Mat[Long]]", "kind" : "implicit val"}, {"label" : "matMat_Copy_ID_Mult", "tail" : ": BinOp[Multiply, Mat[Int], Mat[Double], Mat[Double]]", "member" : "org.saddle.macros.BinOpMatMatCopy.matMat_Copy_ID_Mult", "link" : "org\/saddle\/macros\/BinOpMatMatCopy.html#matMat_Copy_ID_Mult:org.saddle.ops.BinOp[org.saddle.ops.Multiply,org.saddle.Mat[Int],org.saddle.Mat[Double],org.saddle.Mat[Double]]", "kind" : "implicit val"}, {"label" : "matMat_Copy_DI_Mult", "tail" : ": BinOp[Multiply, Mat[Double], Mat[Int], Mat[Double]]", "member" : "org.saddle.macros.BinOpMatMatCopy.matMat_Copy_DI_Mult", "link" : "org\/saddle\/macros\/BinOpMatMatCopy.html#matMat_Copy_DI_Mult:org.saddle.ops.BinOp[org.saddle.ops.Multiply,org.saddle.Mat[Double],org.saddle.Mat[Int],org.saddle.Mat[Double]]", "kind" : "implicit val"}, {"label" : "matMat_Copy_DL_Mult", "tail" : ": BinOp[Multiply, Mat[Double], Mat[Long], Mat[Double]]", "member" : "org.saddle.macros.BinOpMatMatCopy.matMat_Copy_DL_Mult", "link" : "org\/saddle\/macros\/BinOpMatMatCopy.html#matMat_Copy_DL_Mult:org.saddle.ops.BinOp[org.saddle.ops.Multiply,org.saddle.Mat[Double],org.saddle.Mat[Long],org.saddle.Mat[Double]]", "kind" : "implicit val"}, {"label" : "matMat_Copy_LD_Mult", "tail" : ": BinOp[Multiply, Mat[Long], Mat[Double], Mat[Double]]", "member" : "org.saddle.macros.BinOpMatMatCopy.matMat_Copy_LD_Mult", "link" : "org\/saddle\/macros\/BinOpMatMatCopy.html#matMat_Copy_LD_Mult:org.saddle.ops.BinOp[org.saddle.ops.Multiply,org.saddle.Mat[Long],org.saddle.Mat[Double],org.saddle.Mat[Double]]", "kind" : "implicit val"}, {"label" : "matMat_Copy_DD_Mult", "tail" : ": BinOp[Multiply, Mat[Double], Mat[Double], Mat[Double]]", "member" : "org.saddle.macros.BinOpMatMatCopy.matMat_Copy_DD_Mult", "link" : "org\/saddle\/macros\/BinOpMatMatCopy.html#matMat_Copy_DD_Mult:org.saddle.ops.BinOp[org.saddle.ops.Multiply,org.saddle.Mat[Double],org.saddle.Mat[Double],org.saddle.Mat[Double]]", "kind" : "implicit val"}, {"label" : "matMat_Copy_II_Sub", "tail" : ": BinOp[Subtract, Mat[Int], Mat[Int], Mat[Int]]", "member" : "org.saddle.macros.BinOpMatMatCopy.matMat_Copy_II_Sub", "link" : "org\/saddle\/macros\/BinOpMatMatCopy.html#matMat_Copy_II_Sub:org.saddle.ops.BinOp[org.saddle.ops.Subtract,org.saddle.Mat[Int],org.saddle.Mat[Int],org.saddle.Mat[Int]]", "kind" : "implicit val"}, {"label" : "matMat_Copy_IL_Sub", "tail" : ": BinOp[Subtract, Mat[Int], Mat[Long], Mat[Long]]", "member" : "org.saddle.macros.BinOpMatMatCopy.matMat_Copy_IL_Sub", "link" : "org\/saddle\/macros\/BinOpMatMatCopy.html#matMat_Copy_IL_Sub:org.saddle.ops.BinOp[org.saddle.ops.Subtract,org.saddle.Mat[Int],org.saddle.Mat[Long],org.saddle.Mat[Long]]", "kind" : "implicit val"}, {"label" : "matMat_Copy_LI_Sub", "tail" : ": BinOp[Subtract, Mat[Long], Mat[Int], Mat[Long]]", "member" : "org.saddle.macros.BinOpMatMatCopy.matMat_Copy_LI_Sub", "link" : "org\/saddle\/macros\/BinOpMatMatCopy.html#matMat_Copy_LI_Sub:org.saddle.ops.BinOp[org.saddle.ops.Subtract,org.saddle.Mat[Long],org.saddle.Mat[Int],org.saddle.Mat[Long]]", "kind" : "implicit val"}, {"label" : "matMat_Copy_LL_Sub", "tail" : ": BinOp[Subtract, Mat[Long], Mat[Long], Mat[Long]]", "member" : "org.saddle.macros.BinOpMatMatCopy.matMat_Copy_LL_Sub", "link" : "org\/saddle\/macros\/BinOpMatMatCopy.html#matMat_Copy_LL_Sub:org.saddle.ops.BinOp[org.saddle.ops.Subtract,org.saddle.Mat[Long],org.saddle.Mat[Long],org.saddle.Mat[Long]]", "kind" : "implicit val"}, {"label" : "matMat_Copy_ID_Sub", "tail" : ": BinOp[Subtract, Mat[Int], Mat[Double], Mat[Double]]", "member" : "org.saddle.macros.BinOpMatMatCopy.matMat_Copy_ID_Sub", "link" : "org\/saddle\/macros\/BinOpMatMatCopy.html#matMat_Copy_ID_Sub:org.saddle.ops.BinOp[org.saddle.ops.Subtract,org.saddle.Mat[Int],org.saddle.Mat[Double],org.saddle.Mat[Double]]", "kind" : "implicit val"}, {"label" : "matMat_Copy_DI_Sub", "tail" : ": BinOp[Subtract, Mat[Double], Mat[Int], Mat[Double]]", "member" : "org.saddle.macros.BinOpMatMatCopy.matMat_Copy_DI_Sub", "link" : "org\/saddle\/macros\/BinOpMatMatCopy.html#matMat_Copy_DI_Sub:org.saddle.ops.BinOp[org.saddle.ops.Subtract,org.saddle.Mat[Double],org.saddle.Mat[Int],org.saddle.Mat[Double]]", "kind" : "implicit val"}, {"label" : "matMat_Copy_DL_Sub", "tail" : ": BinOp[Subtract, Mat[Double], Mat[Long], Mat[Double]]", "member" : "org.saddle.macros.BinOpMatMatCopy.matMat_Copy_DL_Sub", "link" : "org\/saddle\/macros\/BinOpMatMatCopy.html#matMat_Copy_DL_Sub:org.saddle.ops.BinOp[org.saddle.ops.Subtract,org.saddle.Mat[Double],org.saddle.Mat[Long],org.saddle.Mat[Double]]", "kind" : "implicit val"}, {"label" : "matMat_Copy_LD_Sub", "tail" : ": BinOp[Subtract, Mat[Long], Mat[Double], Mat[Double]]", "member" : "org.saddle.macros.BinOpMatMatCopy.matMat_Copy_LD_Sub", "link" : "org\/saddle\/macros\/BinOpMatMatCopy.html#matMat_Copy_LD_Sub:org.saddle.ops.BinOp[org.saddle.ops.Subtract,org.saddle.Mat[Long],org.saddle.Mat[Double],org.saddle.Mat[Double]]", "kind" : "implicit val"}, {"label" : "matMat_Copy_DD_Sub", "tail" : ": BinOp[Subtract, Mat[Double], Mat[Double], Mat[Double]]", "member" : "org.saddle.macros.BinOpMatMatCopy.matMat_Copy_DD_Sub", "link" : "org\/saddle\/macros\/BinOpMatMatCopy.html#matMat_Copy_DD_Sub:org.saddle.ops.BinOp[org.saddle.ops.Subtract,org.saddle.Mat[Double],org.saddle.Mat[Double],org.saddle.Mat[Double]]", "kind" : "implicit val"}, {"label" : "matMat_Copy_II_Power", "tail" : ": BinOp[Power, Mat[Int], Mat[Int], Mat[Int]]", "member" : "org.saddle.macros.BinOpMatMatCopy.matMat_Copy_II_Power", "link" : "org\/saddle\/macros\/BinOpMatMatCopy.html#matMat_Copy_II_Power:org.saddle.ops.BinOp[org.saddle.ops.Power,org.saddle.Mat[Int],org.saddle.Mat[Int],org.saddle.Mat[Int]]", "kind" : "implicit val"}, {"label" : "matMat_Copy_IL_Power", "tail" : ": BinOp[Power, Mat[Int], Mat[Long], Mat[Long]]", "member" : "org.saddle.macros.BinOpMatMatCopy.matMat_Copy_IL_Power", "link" : "org\/saddle\/macros\/BinOpMatMatCopy.html#matMat_Copy_IL_Power:org.saddle.ops.BinOp[org.saddle.ops.Power,org.saddle.Mat[Int],org.saddle.Mat[Long],org.saddle.Mat[Long]]", "kind" : "implicit val"}, {"label" : "matMat_Copy_LI_Power", "tail" : ": BinOp[Power, Mat[Long], Mat[Int], Mat[Long]]", "member" : "org.saddle.macros.BinOpMatMatCopy.matMat_Copy_LI_Power", "link" : "org\/saddle\/macros\/BinOpMatMatCopy.html#matMat_Copy_LI_Power:org.saddle.ops.BinOp[org.saddle.ops.Power,org.saddle.Mat[Long],org.saddle.Mat[Int],org.saddle.Mat[Long]]", "kind" : "implicit val"}, {"label" : "matMat_Copy_LL_Power", "tail" : ": BinOp[Power, Mat[Long], Mat[Long], Mat[Long]]", "member" : "org.saddle.macros.BinOpMatMatCopy.matMat_Copy_LL_Power", "link" : "org\/saddle\/macros\/BinOpMatMatCopy.html#matMat_Copy_LL_Power:org.saddle.ops.BinOp[org.saddle.ops.Power,org.saddle.Mat[Long],org.saddle.Mat[Long],org.saddle.Mat[Long]]", "kind" : "implicit val"}, {"label" : "matMat_Copy_ID_Power", "tail" : ": BinOp[Power, Mat[Int], Mat[Double], Mat[Double]]", "member" : "org.saddle.macros.BinOpMatMatCopy.matMat_Copy_ID_Power", "link" : "org\/saddle\/macros\/BinOpMatMatCopy.html#matMat_Copy_ID_Power:org.saddle.ops.BinOp[org.saddle.ops.Power,org.saddle.Mat[Int],org.saddle.Mat[Double],org.saddle.Mat[Double]]", "kind" : "implicit val"}, {"label" : "matMat_Copy_DI_Power", "tail" : ": BinOp[Power, Mat[Double], Mat[Int], Mat[Double]]", "member" : "org.saddle.macros.BinOpMatMatCopy.matMat_Copy_DI_Power", "link" : "org\/saddle\/macros\/BinOpMatMatCopy.html#matMat_Copy_DI_Power:org.saddle.ops.BinOp[org.saddle.ops.Power,org.saddle.Mat[Double],org.saddle.Mat[Int],org.saddle.Mat[Double]]", "kind" : "implicit val"}, {"label" : "matMat_Copy_DL_Power", "tail" : ": BinOp[Power, Mat[Double], Mat[Long], Mat[Double]]", "member" : "org.saddle.macros.BinOpMatMatCopy.matMat_Copy_DL_Power", "link" : "org\/saddle\/macros\/BinOpMatMatCopy.html#matMat_Copy_DL_Power:org.saddle.ops.BinOp[org.saddle.ops.Power,org.saddle.Mat[Double],org.saddle.Mat[Long],org.saddle.Mat[Double]]", "kind" : "implicit val"}, {"label" : "matMat_Copy_LD_Power", "tail" : ": BinOp[Power, Mat[Long], Mat[Double], Mat[Double]]", "member" : "org.saddle.macros.BinOpMatMatCopy.matMat_Copy_LD_Power", "link" : "org\/saddle\/macros\/BinOpMatMatCopy.html#matMat_Copy_LD_Power:org.saddle.ops.BinOp[org.saddle.ops.Power,org.saddle.Mat[Long],org.saddle.Mat[Double],org.saddle.Mat[Double]]", "kind" : "implicit val"}, {"label" : "matMat_Copy_DD_Power", "tail" : ": BinOp[Power, Mat[Double], Mat[Double], Mat[Double]]", "member" : "org.saddle.macros.BinOpMatMatCopy.matMat_Copy_DD_Power", "link" : "org\/saddle\/macros\/BinOpMatMatCopy.html#matMat_Copy_DD_Power:org.saddle.ops.BinOp[org.saddle.ops.Power,org.saddle.Mat[Double],org.saddle.Mat[Double],org.saddle.Mat[Double]]", "kind" : "implicit val"}, {"label" : "matMat_Copy_II_Add", "tail" : ": BinOp[Add, Mat[Int], Mat[Int], Mat[Int]]", "member" : "org.saddle.macros.BinOpMatMatCopy.matMat_Copy_II_Add", "link" : "org\/saddle\/macros\/BinOpMatMatCopy.html#matMat_Copy_II_Add:org.saddle.ops.BinOp[org.saddle.ops.Add,org.saddle.Mat[Int],org.saddle.Mat[Int],org.saddle.Mat[Int]]", "kind" : "implicit val"}, {"label" : "matMat_Copy_IL_Add", "tail" : ": BinOp[Add, Mat[Int], Mat[Long], Mat[Long]]", "member" : "org.saddle.macros.BinOpMatMatCopy.matMat_Copy_IL_Add", "link" : "org\/saddle\/macros\/BinOpMatMatCopy.html#matMat_Copy_IL_Add:org.saddle.ops.BinOp[org.saddle.ops.Add,org.saddle.Mat[Int],org.saddle.Mat[Long],org.saddle.Mat[Long]]", "kind" : "implicit val"}, {"label" : "matMat_Copy_LI_Add", "tail" : ": BinOp[Add, Mat[Long], Mat[Int], Mat[Long]]", "member" : "org.saddle.macros.BinOpMatMatCopy.matMat_Copy_LI_Add", "link" : "org\/saddle\/macros\/BinOpMatMatCopy.html#matMat_Copy_LI_Add:org.saddle.ops.BinOp[org.saddle.ops.Add,org.saddle.Mat[Long],org.saddle.Mat[Int],org.saddle.Mat[Long]]", "kind" : "implicit val"}, {"label" : "matMat_Copy_LL_Add", "tail" : ": BinOp[Add, Mat[Long], Mat[Long], Mat[Long]]", "member" : "org.saddle.macros.BinOpMatMatCopy.matMat_Copy_LL_Add", "link" : "org\/saddle\/macros\/BinOpMatMatCopy.html#matMat_Copy_LL_Add:org.saddle.ops.BinOp[org.saddle.ops.Add,org.saddle.Mat[Long],org.saddle.Mat[Long],org.saddle.Mat[Long]]", "kind" : "implicit val"}, {"label" : "matMat_Copy_ID_Add", "tail" : ": BinOp[Add, Mat[Int], Mat[Double], Mat[Double]]", "member" : "org.saddle.macros.BinOpMatMatCopy.matMat_Copy_ID_Add", "link" : "org\/saddle\/macros\/BinOpMatMatCopy.html#matMat_Copy_ID_Add:org.saddle.ops.BinOp[org.saddle.ops.Add,org.saddle.Mat[Int],org.saddle.Mat[Double],org.saddle.Mat[Double]]", "kind" : "implicit val"}, {"label" : "matMat_Copy_DI_Add", "tail" : ": BinOp[Add, Mat[Double], Mat[Int], Mat[Double]]", "member" : "org.saddle.macros.BinOpMatMatCopy.matMat_Copy_DI_Add", "link" : "org\/saddle\/macros\/BinOpMatMatCopy.html#matMat_Copy_DI_Add:org.saddle.ops.BinOp[org.saddle.ops.Add,org.saddle.Mat[Double],org.saddle.Mat[Int],org.saddle.Mat[Double]]", "kind" : "implicit val"}, {"label" : "matMat_Copy_DL_Add", "tail" : ": BinOp[Add, Mat[Double], Mat[Long], Mat[Double]]", "member" : "org.saddle.macros.BinOpMatMatCopy.matMat_Copy_DL_Add", "link" : "org\/saddle\/macros\/BinOpMatMatCopy.html#matMat_Copy_DL_Add:org.saddle.ops.BinOp[org.saddle.ops.Add,org.saddle.Mat[Double],org.saddle.Mat[Long],org.saddle.Mat[Double]]", "kind" : "implicit val"}, {"label" : "matMat_Copy_LD_Add", "tail" : ": BinOp[Add, Mat[Long], Mat[Double], Mat[Double]]", "member" : "org.saddle.macros.BinOpMatMatCopy.matMat_Copy_LD_Add", "link" : "org\/saddle\/macros\/BinOpMatMatCopy.html#matMat_Copy_LD_Add:org.saddle.ops.BinOp[org.saddle.ops.Add,org.saddle.Mat[Long],org.saddle.Mat[Double],org.saddle.Mat[Double]]", "kind" : "implicit val"}, {"label" : "matMat_Copy_DD_Add", "tail" : ": BinOp[Add, Mat[Double], Mat[Double], Mat[Double]]", "member" : "org.saddle.macros.BinOpMatMatCopy.matMat_Copy_DD_Add", "link" : "org\/saddle\/macros\/BinOpMatMatCopy.html#matMat_Copy_DD_Add:org.saddle.ops.BinOp[org.saddle.ops.Add,org.saddle.Mat[Double],org.saddle.Mat[Double],org.saddle.Mat[Double]]", "kind" : "implicit val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/saddle\/macros\/BinOpMatMatCopy.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/saddle\/macros\/BinOpMatMatCopy.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/saddle\/macros\/BinOpMatMatCopy.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/saddle\/macros\/BinOpMatMatCopy.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/saddle\/macros\/BinOpMatMatCopy.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/saddle\/macros\/BinOpMatMatCopy.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/saddle\/macros\/BinOpMatMatCopy.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/macros\/BinOpMatMatCopy.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/macros\/BinOpMatMatCopy.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/macros\/BinOpMatMatCopy.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/saddle\/macros\/BinOpMatMatCopy.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/saddle\/macros\/BinOpMatMatCopy.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/saddle\/macros\/BinOpMatMatCopy.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/saddle\/macros\/BinOpMatMatCopy.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/saddle\/macros\/BinOpMatMatCopy.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/saddle\/macros\/BinOpMatMatCopy.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "org\/saddle\/macros\/BinOpMatMatCopy.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/saddle\/macros\/BinOpMatMatCopy.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/saddle\/macros\/BinOpMatMatCopy.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}, {"name" : "org.saddle.macros.BinOpMatMatInPlace", "trait" : "org\/saddle\/macros\/BinOpMatMatInPlace.html", "kind" : "trait", "members_trait" : [{"label" : "matMatIP_BB_Xor", "tail" : ": BinOpInPlace[XorOp, Mat[Boolean], Mat[Boolean]]", "member" : "org.saddle.macros.BinOpMatMatInPlace.matMatIP_BB_Xor", "link" : "org\/saddle\/macros\/BinOpMatMatInPlace.html#matMatIP_BB_Xor:org.saddle.ops.BinOpInPlace[org.saddle.ops.XorOp,org.saddle.Mat[Boolean],org.saddle.Mat[Boolean]]", "kind" : "implicit val"}, {"label" : "matMatIP_BB_Or", "tail" : ": BinOpInPlace[OrOp, Mat[Boolean], Mat[Boolean]]", "member" : "org.saddle.macros.BinOpMatMatInPlace.matMatIP_BB_Or", "link" : "org\/saddle\/macros\/BinOpMatMatInPlace.html#matMatIP_BB_Or:org.saddle.ops.BinOpInPlace[org.saddle.ops.OrOp,org.saddle.Mat[Boolean],org.saddle.Mat[Boolean]]", "kind" : "implicit val"}, {"label" : "matMatIP_BB_And", "tail" : ": BinOpInPlace[AndOp, Mat[Boolean], Mat[Boolean]]", "member" : "org.saddle.macros.BinOpMatMatInPlace.matMatIP_BB_And", "link" : "org\/saddle\/macros\/BinOpMatMatInPlace.html#matMatIP_BB_And:org.saddle.ops.BinOpInPlace[org.saddle.ops.AndOp,org.saddle.Mat[Boolean],org.saddle.Mat[Boolean]]", "kind" : "implicit val"}, {"label" : "matMatIP_BB_EQ", "tail" : ": BinOpInPlace[EqOp, Mat[Boolean], Mat[Boolean]]", "member" : "org.saddle.macros.BinOpMatMatInPlace.matMatIP_BB_EQ", "link" : "org\/saddle\/macros\/BinOpMatMatInPlace.html#matMatIP_BB_EQ:org.saddle.ops.BinOpInPlace[org.saddle.ops.EqOp,org.saddle.Mat[Boolean],org.saddle.Mat[Boolean]]", "kind" : "implicit val"}, {"label" : "matMatIP_BB_NEQ", "tail" : ": BinOpInPlace[NeqOp, Mat[Boolean], Mat[Boolean]]", "member" : "org.saddle.macros.BinOpMatMatInPlace.matMatIP_BB_NEQ", "link" : "org\/saddle\/macros\/BinOpMatMatInPlace.html#matMatIP_BB_NEQ:org.saddle.ops.BinOpInPlace[org.saddle.ops.NeqOp,org.saddle.Mat[Boolean],org.saddle.Mat[Boolean]]", "kind" : "implicit val"}, {"label" : "matMatIP_BB_LTE", "tail" : ": BinOpInPlace[LteOp, Mat[Boolean], Mat[Boolean]]", "member" : "org.saddle.macros.BinOpMatMatInPlace.matMatIP_BB_LTE", "link" : "org\/saddle\/macros\/BinOpMatMatInPlace.html#matMatIP_BB_LTE:org.saddle.ops.BinOpInPlace[org.saddle.ops.LteOp,org.saddle.Mat[Boolean],org.saddle.Mat[Boolean]]", "kind" : "implicit val"}, {"label" : "matMatIP_BB_LT", "tail" : ": BinOpInPlace[LtOp, Mat[Boolean], Mat[Boolean]]", "member" : "org.saddle.macros.BinOpMatMatInPlace.matMatIP_BB_LT", "link" : "org\/saddle\/macros\/BinOpMatMatInPlace.html#matMatIP_BB_LT:org.saddle.ops.BinOpInPlace[org.saddle.ops.LtOp,org.saddle.Mat[Boolean],org.saddle.Mat[Boolean]]", "kind" : "implicit val"}, {"label" : "matMatIP_BB_GTE", "tail" : ": BinOpInPlace[GteOp, Mat[Boolean], Mat[Boolean]]", "member" : "org.saddle.macros.BinOpMatMatInPlace.matMatIP_BB_GTE", "link" : "org\/saddle\/macros\/BinOpMatMatInPlace.html#matMatIP_BB_GTE:org.saddle.ops.BinOpInPlace[org.saddle.ops.GteOp,org.saddle.Mat[Boolean],org.saddle.Mat[Boolean]]", "kind" : "implicit val"}, {"label" : "matMatIP_BB_GT", "tail" : ": BinOpInPlace[GtOp, Mat[Boolean], Mat[Boolean]]", "member" : "org.saddle.macros.BinOpMatMatInPlace.matMatIP_BB_GT", "link" : "org\/saddle\/macros\/BinOpMatMatInPlace.html#matMatIP_BB_GT:org.saddle.ops.BinOpInPlace[org.saddle.ops.GtOp,org.saddle.Mat[Boolean],org.saddle.Mat[Boolean]]", "kind" : "implicit val"}, {"label" : "matMatIP_II_BitUshr", "tail" : ": BinOpInPlace[BitUShr, Mat[Int], Mat[Int]]", "member" : "org.saddle.macros.BinOpMatMatInPlace.matMatIP_II_BitUshr", "link" : "org\/saddle\/macros\/BinOpMatMatInPlace.html#matMatIP_II_BitUshr:org.saddle.ops.BinOpInPlace[org.saddle.ops.BitUShr,org.saddle.Mat[Int],org.saddle.Mat[Int]]", "kind" : "implicit val"}, {"label" : "matMatIP_LI_BitUshr", "tail" : ": BinOpInPlace[BitUShr, Mat[Long], Mat[Int]]", "member" : "org.saddle.macros.BinOpMatMatInPlace.matMatIP_LI_BitUshr", "link" : "org\/saddle\/macros\/BinOpMatMatInPlace.html#matMatIP_LI_BitUshr:org.saddle.ops.BinOpInPlace[org.saddle.ops.BitUShr,org.saddle.Mat[Long],org.saddle.Mat[Int]]", "kind" : "implicit val"}, {"label" : "matMatIP_LL_BitUshr", "tail" : ": BinOpInPlace[BitUShr, Mat[Long], Mat[Long]]", "member" : "org.saddle.macros.BinOpMatMatInPlace.matMatIP_LL_BitUshr", "link" : "org\/saddle\/macros\/BinOpMatMatInPlace.html#matMatIP_LL_BitUshr:org.saddle.ops.BinOpInPlace[org.saddle.ops.BitUShr,org.saddle.Mat[Long],org.saddle.Mat[Long]]", "kind" : "implicit val"}, {"label" : "matMatIP_II_BitShr", "tail" : ": BinOpInPlace[BitShr, Mat[Int], Mat[Int]]", "member" : "org.saddle.macros.BinOpMatMatInPlace.matMatIP_II_BitShr", "link" : "org\/saddle\/macros\/BinOpMatMatInPlace.html#matMatIP_II_BitShr:org.saddle.ops.BinOpInPlace[org.saddle.ops.BitShr,org.saddle.Mat[Int],org.saddle.Mat[Int]]", "kind" : "implicit val"}, {"label" : "matMatIP_LI_BitShr", "tail" : ": BinOpInPlace[BitShr, Mat[Long], Mat[Int]]", "member" : "org.saddle.macros.BinOpMatMatInPlace.matMatIP_LI_BitShr", "link" : "org\/saddle\/macros\/BinOpMatMatInPlace.html#matMatIP_LI_BitShr:org.saddle.ops.BinOpInPlace[org.saddle.ops.BitShr,org.saddle.Mat[Long],org.saddle.Mat[Int]]", "kind" : "implicit val"}, {"label" : "matMatIP_LL_BitShr", "tail" : ": BinOpInPlace[BitShr, Mat[Long], Mat[Long]]", "member" : "org.saddle.macros.BinOpMatMatInPlace.matMatIP_LL_BitShr", "link" : "org\/saddle\/macros\/BinOpMatMatInPlace.html#matMatIP_LL_BitShr:org.saddle.ops.BinOpInPlace[org.saddle.ops.BitShr,org.saddle.Mat[Long],org.saddle.Mat[Long]]", "kind" : "implicit val"}, {"label" : "matMatIP_II_BitShl", "tail" : ": BinOpInPlace[BitShl, Mat[Int], Mat[Int]]", "member" : "org.saddle.macros.BinOpMatMatInPlace.matMatIP_II_BitShl", "link" : "org\/saddle\/macros\/BinOpMatMatInPlace.html#matMatIP_II_BitShl:org.saddle.ops.BinOpInPlace[org.saddle.ops.BitShl,org.saddle.Mat[Int],org.saddle.Mat[Int]]", "kind" : "implicit val"}, {"label" : "matMatIP_LI_BitShl", "tail" : ": BinOpInPlace[BitShl, Mat[Long], Mat[Int]]", "member" : "org.saddle.macros.BinOpMatMatInPlace.matMatIP_LI_BitShl", "link" : "org\/saddle\/macros\/BinOpMatMatInPlace.html#matMatIP_LI_BitShl:org.saddle.ops.BinOpInPlace[org.saddle.ops.BitShl,org.saddle.Mat[Long],org.saddle.Mat[Int]]", "kind" : "implicit val"}, {"label" : "matMatIP_LL_BitShl", "tail" : ": BinOpInPlace[BitShl, Mat[Long], Mat[Long]]", "member" : "org.saddle.macros.BinOpMatMatInPlace.matMatIP_LL_BitShl", "link" : "org\/saddle\/macros\/BinOpMatMatInPlace.html#matMatIP_LL_BitShl:org.saddle.ops.BinOpInPlace[org.saddle.ops.BitShl,org.saddle.Mat[Long],org.saddle.Mat[Long]]", "kind" : "implicit val"}, {"label" : "matMatIP_II_BitXor", "tail" : ": BinOpInPlace[BitXor, Mat[Int], Mat[Int]]", "member" : "org.saddle.macros.BinOpMatMatInPlace.matMatIP_II_BitXor", "link" : "org\/saddle\/macros\/BinOpMatMatInPlace.html#matMatIP_II_BitXor:org.saddle.ops.BinOpInPlace[org.saddle.ops.BitXor,org.saddle.Mat[Int],org.saddle.Mat[Int]]", "kind" : "implicit val"}, {"label" : "matMatIP_LI_BitXor", "tail" : ": BinOpInPlace[BitXor, Mat[Long], Mat[Int]]", "member" : "org.saddle.macros.BinOpMatMatInPlace.matMatIP_LI_BitXor", "link" : "org\/saddle\/macros\/BinOpMatMatInPlace.html#matMatIP_LI_BitXor:org.saddle.ops.BinOpInPlace[org.saddle.ops.BitXor,org.saddle.Mat[Long],org.saddle.Mat[Int]]", "kind" : "implicit val"}, {"label" : "matMatIP_LL_BitXor", "tail" : ": BinOpInPlace[BitXor, Mat[Long], Mat[Long]]", "member" : "org.saddle.macros.BinOpMatMatInPlace.matMatIP_LL_BitXor", "link" : "org\/saddle\/macros\/BinOpMatMatInPlace.html#matMatIP_LL_BitXor:org.saddle.ops.BinOpInPlace[org.saddle.ops.BitXor,org.saddle.Mat[Long],org.saddle.Mat[Long]]", "kind" : "implicit val"}, {"label" : "matMatIP_II_BitOr", "tail" : ": BinOpInPlace[BitOr, Mat[Int], Mat[Int]]", "member" : "org.saddle.macros.BinOpMatMatInPlace.matMatIP_II_BitOr", "link" : "org\/saddle\/macros\/BinOpMatMatInPlace.html#matMatIP_II_BitOr:org.saddle.ops.BinOpInPlace[org.saddle.ops.BitOr,org.saddle.Mat[Int],org.saddle.Mat[Int]]", "kind" : "implicit val"}, {"label" : "matMatIP_LI_BitOr", "tail" : ": BinOpInPlace[BitOr, Mat[Long], Mat[Int]]", "member" : "org.saddle.macros.BinOpMatMatInPlace.matMatIP_LI_BitOr", "link" : "org\/saddle\/macros\/BinOpMatMatInPlace.html#matMatIP_LI_BitOr:org.saddle.ops.BinOpInPlace[org.saddle.ops.BitOr,org.saddle.Mat[Long],org.saddle.Mat[Int]]", "kind" : "implicit val"}, {"label" : "matMatIP_LL_BitOr", "tail" : ": BinOpInPlace[BitOr, Mat[Long], Mat[Long]]", "member" : "org.saddle.macros.BinOpMatMatInPlace.matMatIP_LL_BitOr", "link" : "org\/saddle\/macros\/BinOpMatMatInPlace.html#matMatIP_LL_BitOr:org.saddle.ops.BinOpInPlace[org.saddle.ops.BitOr,org.saddle.Mat[Long],org.saddle.Mat[Long]]", "kind" : "implicit val"}, {"label" : "matMatIP_II_BitAnd", "tail" : ": BinOpInPlace[BitAnd, Mat[Int], Mat[Int]]", "member" : "org.saddle.macros.BinOpMatMatInPlace.matMatIP_II_BitAnd", "link" : "org\/saddle\/macros\/BinOpMatMatInPlace.html#matMatIP_II_BitAnd:org.saddle.ops.BinOpInPlace[org.saddle.ops.BitAnd,org.saddle.Mat[Int],org.saddle.Mat[Int]]", "kind" : "implicit val"}, {"label" : "matMatIP_LI_BitAnd", "tail" : ": BinOpInPlace[BitAnd, Mat[Long], Mat[Int]]", "member" : "org.saddle.macros.BinOpMatMatInPlace.matMatIP_LI_BitAnd", "link" : "org\/saddle\/macros\/BinOpMatMatInPlace.html#matMatIP_LI_BitAnd:org.saddle.ops.BinOpInPlace[org.saddle.ops.BitAnd,org.saddle.Mat[Long],org.saddle.Mat[Int]]", "kind" : "implicit val"}, {"label" : "matMatIP_LL_BitAnd", "tail" : ": BinOpInPlace[BitAnd, Mat[Long], Mat[Long]]", "member" : "org.saddle.macros.BinOpMatMatInPlace.matMatIP_LL_BitAnd", "link" : "org\/saddle\/macros\/BinOpMatMatInPlace.html#matMatIP_LL_BitAnd:org.saddle.ops.BinOpInPlace[org.saddle.ops.BitAnd,org.saddle.Mat[Long],org.saddle.Mat[Long]]", "kind" : "implicit val"}, {"label" : "matMatIP_II_Mod", "tail" : ": BinOpInPlace[Mod, Mat[Int], Mat[Int]]", "member" : "org.saddle.macros.BinOpMatMatInPlace.matMatIP_II_Mod", "link" : "org\/saddle\/macros\/BinOpMatMatInPlace.html#matMatIP_II_Mod:org.saddle.ops.BinOpInPlace[org.saddle.ops.Mod,org.saddle.Mat[Int],org.saddle.Mat[Int]]", "kind" : "implicit val"}, {"label" : "matMatIP_LI_Mod", "tail" : ": BinOpInPlace[Mod, Mat[Long], Mat[Int]]", "member" : "org.saddle.macros.BinOpMatMatInPlace.matMatIP_LI_Mod", "link" : "org\/saddle\/macros\/BinOpMatMatInPlace.html#matMatIP_LI_Mod:org.saddle.ops.BinOpInPlace[org.saddle.ops.Mod,org.saddle.Mat[Long],org.saddle.Mat[Int]]", "kind" : "implicit val"}, {"label" : "matMatIP_LL_Mod", "tail" : ": BinOpInPlace[Mod, Mat[Long], Mat[Long]]", "member" : "org.saddle.macros.BinOpMatMatInPlace.matMatIP_LL_Mod", "link" : "org\/saddle\/macros\/BinOpMatMatInPlace.html#matMatIP_LL_Mod:org.saddle.ops.BinOpInPlace[org.saddle.ops.Mod,org.saddle.Mat[Long],org.saddle.Mat[Long]]", "kind" : "implicit val"}, {"label" : "matMatIP_DI_Mod", "tail" : ": BinOpInPlace[Mod, Mat[Double], Mat[Int]]", "member" : "org.saddle.macros.BinOpMatMatInPlace.matMatIP_DI_Mod", "link" : "org\/saddle\/macros\/BinOpMatMatInPlace.html#matMatIP_DI_Mod:org.saddle.ops.BinOpInPlace[org.saddle.ops.Mod,org.saddle.Mat[Double],org.saddle.Mat[Int]]", "kind" : "implicit val"}, {"label" : "matMatIP_DL_Mod", "tail" : ": BinOpInPlace[Mod, Mat[Double], Mat[Long]]", "member" : "org.saddle.macros.BinOpMatMatInPlace.matMatIP_DL_Mod", "link" : "org\/saddle\/macros\/BinOpMatMatInPlace.html#matMatIP_DL_Mod:org.saddle.ops.BinOpInPlace[org.saddle.ops.Mod,org.saddle.Mat[Double],org.saddle.Mat[Long]]", "kind" : "implicit val"}, {"label" : "matMatIP_DD_Mod", "tail" : ": BinOpInPlace[Mod, Mat[Double], Mat[Double]]", "member" : "org.saddle.macros.BinOpMatMatInPlace.matMatIP_DD_Mod", "link" : "org\/saddle\/macros\/BinOpMatMatInPlace.html#matMatIP_DD_Mod:org.saddle.ops.BinOpInPlace[org.saddle.ops.Mod,org.saddle.Mat[Double],org.saddle.Mat[Double]]", "kind" : "implicit val"}, {"label" : "matMatIP_II_Div", "tail" : ": BinOpInPlace[Divide, Mat[Int], Mat[Int]]", "member" : "org.saddle.macros.BinOpMatMatInPlace.matMatIP_II_Div", "link" : "org\/saddle\/macros\/BinOpMatMatInPlace.html#matMatIP_II_Div:org.saddle.ops.BinOpInPlace[org.saddle.ops.Divide,org.saddle.Mat[Int],org.saddle.Mat[Int]]", "kind" : "implicit val"}, {"label" : "matMatIP_LI_Div", "tail" : ": BinOpInPlace[Divide, Mat[Long], Mat[Int]]", "member" : "org.saddle.macros.BinOpMatMatInPlace.matMatIP_LI_Div", "link" : "org\/saddle\/macros\/BinOpMatMatInPlace.html#matMatIP_LI_Div:org.saddle.ops.BinOpInPlace[org.saddle.ops.Divide,org.saddle.Mat[Long],org.saddle.Mat[Int]]", "kind" : "implicit val"}, {"label" : "matMatIP_LL_Div", "tail" : ": BinOpInPlace[Divide, Mat[Long], Mat[Long]]", "member" : "org.saddle.macros.BinOpMatMatInPlace.matMatIP_LL_Div", "link" : "org\/saddle\/macros\/BinOpMatMatInPlace.html#matMatIP_LL_Div:org.saddle.ops.BinOpInPlace[org.saddle.ops.Divide,org.saddle.Mat[Long],org.saddle.Mat[Long]]", "kind" : "implicit val"}, {"label" : "matMatIP_DI_Div", "tail" : ": BinOpInPlace[Divide, Mat[Double], Mat[Int]]", "member" : "org.saddle.macros.BinOpMatMatInPlace.matMatIP_DI_Div", "link" : "org\/saddle\/macros\/BinOpMatMatInPlace.html#matMatIP_DI_Div:org.saddle.ops.BinOpInPlace[org.saddle.ops.Divide,org.saddle.Mat[Double],org.saddle.Mat[Int]]", "kind" : "implicit val"}, {"label" : "matMatIP_DL_Div", "tail" : ": BinOpInPlace[Divide, Mat[Double], Mat[Long]]", "member" : "org.saddle.macros.BinOpMatMatInPlace.matMatIP_DL_Div", "link" : "org\/saddle\/macros\/BinOpMatMatInPlace.html#matMatIP_DL_Div:org.saddle.ops.BinOpInPlace[org.saddle.ops.Divide,org.saddle.Mat[Double],org.saddle.Mat[Long]]", "kind" : "implicit val"}, {"label" : "matMatIP_DD_Div", "tail" : ": BinOpInPlace[Divide, Mat[Double], Mat[Double]]", "member" : "org.saddle.macros.BinOpMatMatInPlace.matMatIP_DD_Div", "link" : "org\/saddle\/macros\/BinOpMatMatInPlace.html#matMatIP_DD_Div:org.saddle.ops.BinOpInPlace[org.saddle.ops.Divide,org.saddle.Mat[Double],org.saddle.Mat[Double]]", "kind" : "implicit val"}, {"label" : "matMatIP_II_Mult", "tail" : ": BinOpInPlace[Multiply, Mat[Int], Mat[Int]]", "member" : "org.saddle.macros.BinOpMatMatInPlace.matMatIP_II_Mult", "link" : "org\/saddle\/macros\/BinOpMatMatInPlace.html#matMatIP_II_Mult:org.saddle.ops.BinOpInPlace[org.saddle.ops.Multiply,org.saddle.Mat[Int],org.saddle.Mat[Int]]", "kind" : "implicit val"}, {"label" : "matMatIP_LI_Mult", "tail" : ": BinOpInPlace[Multiply, Mat[Long], Mat[Int]]", "member" : "org.saddle.macros.BinOpMatMatInPlace.matMatIP_LI_Mult", "link" : "org\/saddle\/macros\/BinOpMatMatInPlace.html#matMatIP_LI_Mult:org.saddle.ops.BinOpInPlace[org.saddle.ops.Multiply,org.saddle.Mat[Long],org.saddle.Mat[Int]]", "kind" : "implicit val"}, {"label" : "matMatIP_LL_Mult", "tail" : ": BinOpInPlace[Multiply, Mat[Long], Mat[Long]]", "member" : "org.saddle.macros.BinOpMatMatInPlace.matMatIP_LL_Mult", "link" : "org\/saddle\/macros\/BinOpMatMatInPlace.html#matMatIP_LL_Mult:org.saddle.ops.BinOpInPlace[org.saddle.ops.Multiply,org.saddle.Mat[Long],org.saddle.Mat[Long]]", "kind" : "implicit val"}, {"label" : "matMatIP_DI_Mult", "tail" : ": BinOpInPlace[Multiply, Mat[Double], Mat[Int]]", "member" : "org.saddle.macros.BinOpMatMatInPlace.matMatIP_DI_Mult", "link" : "org\/saddle\/macros\/BinOpMatMatInPlace.html#matMatIP_DI_Mult:org.saddle.ops.BinOpInPlace[org.saddle.ops.Multiply,org.saddle.Mat[Double],org.saddle.Mat[Int]]", "kind" : "implicit val"}, {"label" : "matMatIP_DL_Mult", "tail" : ": BinOpInPlace[Multiply, Mat[Double], Mat[Long]]", "member" : "org.saddle.macros.BinOpMatMatInPlace.matMatIP_DL_Mult", "link" : "org\/saddle\/macros\/BinOpMatMatInPlace.html#matMatIP_DL_Mult:org.saddle.ops.BinOpInPlace[org.saddle.ops.Multiply,org.saddle.Mat[Double],org.saddle.Mat[Long]]", "kind" : "implicit val"}, {"label" : "matMatIP_DD_Mult", "tail" : ": BinOpInPlace[Multiply, Mat[Double], Mat[Double]]", "member" : "org.saddle.macros.BinOpMatMatInPlace.matMatIP_DD_Mult", "link" : "org\/saddle\/macros\/BinOpMatMatInPlace.html#matMatIP_DD_Mult:org.saddle.ops.BinOpInPlace[org.saddle.ops.Multiply,org.saddle.Mat[Double],org.saddle.Mat[Double]]", "kind" : "implicit val"}, {"label" : "matMatIP_II_Sub", "tail" : ": BinOpInPlace[Subtract, Mat[Int], Mat[Int]]", "member" : "org.saddle.macros.BinOpMatMatInPlace.matMatIP_II_Sub", "link" : "org\/saddle\/macros\/BinOpMatMatInPlace.html#matMatIP_II_Sub:org.saddle.ops.BinOpInPlace[org.saddle.ops.Subtract,org.saddle.Mat[Int],org.saddle.Mat[Int]]", "kind" : "implicit val"}, {"label" : "matMatIP_LI_Sub", "tail" : ": BinOpInPlace[Subtract, Mat[Long], Mat[Int]]", "member" : "org.saddle.macros.BinOpMatMatInPlace.matMatIP_LI_Sub", "link" : "org\/saddle\/macros\/BinOpMatMatInPlace.html#matMatIP_LI_Sub:org.saddle.ops.BinOpInPlace[org.saddle.ops.Subtract,org.saddle.Mat[Long],org.saddle.Mat[Int]]", "kind" : "implicit val"}, {"label" : "matMatIP_LL_Sub", "tail" : ": BinOpInPlace[Subtract, Mat[Long], Mat[Long]]", "member" : "org.saddle.macros.BinOpMatMatInPlace.matMatIP_LL_Sub", "link" : "org\/saddle\/macros\/BinOpMatMatInPlace.html#matMatIP_LL_Sub:org.saddle.ops.BinOpInPlace[org.saddle.ops.Subtract,org.saddle.Mat[Long],org.saddle.Mat[Long]]", "kind" : "implicit val"}, {"label" : "matMatIP_DI_Sub", "tail" : ": BinOpInPlace[Subtract, Mat[Double], Mat[Int]]", "member" : "org.saddle.macros.BinOpMatMatInPlace.matMatIP_DI_Sub", "link" : "org\/saddle\/macros\/BinOpMatMatInPlace.html#matMatIP_DI_Sub:org.saddle.ops.BinOpInPlace[org.saddle.ops.Subtract,org.saddle.Mat[Double],org.saddle.Mat[Int]]", "kind" : "implicit val"}, {"label" : "matMatIP_DL_Sub", "tail" : ": BinOpInPlace[Subtract, Mat[Double], Mat[Long]]", "member" : "org.saddle.macros.BinOpMatMatInPlace.matMatIP_DL_Sub", "link" : "org\/saddle\/macros\/BinOpMatMatInPlace.html#matMatIP_DL_Sub:org.saddle.ops.BinOpInPlace[org.saddle.ops.Subtract,org.saddle.Mat[Double],org.saddle.Mat[Long]]", "kind" : "implicit val"}, {"label" : "matMatIP_DD_Sub", "tail" : ": BinOpInPlace[Subtract, Mat[Double], Mat[Double]]", "member" : "org.saddle.macros.BinOpMatMatInPlace.matMatIP_DD_Sub", "link" : "org\/saddle\/macros\/BinOpMatMatInPlace.html#matMatIP_DD_Sub:org.saddle.ops.BinOpInPlace[org.saddle.ops.Subtract,org.saddle.Mat[Double],org.saddle.Mat[Double]]", "kind" : "implicit val"}, {"label" : "matMatIP_II_Power", "tail" : ": BinOpInPlace[Power, Mat[Int], Mat[Int]]", "member" : "org.saddle.macros.BinOpMatMatInPlace.matMatIP_II_Power", "link" : "org\/saddle\/macros\/BinOpMatMatInPlace.html#matMatIP_II_Power:org.saddle.ops.BinOpInPlace[org.saddle.ops.Power,org.saddle.Mat[Int],org.saddle.Mat[Int]]", "kind" : "implicit val"}, {"label" : "matMatIP_LI_Power", "tail" : ": BinOpInPlace[Power, Mat[Long], Mat[Int]]", "member" : "org.saddle.macros.BinOpMatMatInPlace.matMatIP_LI_Power", "link" : "org\/saddle\/macros\/BinOpMatMatInPlace.html#matMatIP_LI_Power:org.saddle.ops.BinOpInPlace[org.saddle.ops.Power,org.saddle.Mat[Long],org.saddle.Mat[Int]]", "kind" : "implicit val"}, {"label" : "matMatIP_LL_Power", "tail" : ": BinOpInPlace[Power, Mat[Long], Mat[Long]]", "member" : "org.saddle.macros.BinOpMatMatInPlace.matMatIP_LL_Power", "link" : "org\/saddle\/macros\/BinOpMatMatInPlace.html#matMatIP_LL_Power:org.saddle.ops.BinOpInPlace[org.saddle.ops.Power,org.saddle.Mat[Long],org.saddle.Mat[Long]]", "kind" : "implicit val"}, {"label" : "matMatIP_DI_Power", "tail" : ": BinOpInPlace[Power, Mat[Double], Mat[Int]]", "member" : "org.saddle.macros.BinOpMatMatInPlace.matMatIP_DI_Power", "link" : "org\/saddle\/macros\/BinOpMatMatInPlace.html#matMatIP_DI_Power:org.saddle.ops.BinOpInPlace[org.saddle.ops.Power,org.saddle.Mat[Double],org.saddle.Mat[Int]]", "kind" : "implicit val"}, {"label" : "matMatIP_DL_Power", "tail" : ": BinOpInPlace[Power, Mat[Double], Mat[Long]]", "member" : "org.saddle.macros.BinOpMatMatInPlace.matMatIP_DL_Power", "link" : "org\/saddle\/macros\/BinOpMatMatInPlace.html#matMatIP_DL_Power:org.saddle.ops.BinOpInPlace[org.saddle.ops.Power,org.saddle.Mat[Double],org.saddle.Mat[Long]]", "kind" : "implicit val"}, {"label" : "matMatIP_DD_Power", "tail" : ": BinOpInPlace[Power, Mat[Double], Mat[Double]]", "member" : "org.saddle.macros.BinOpMatMatInPlace.matMatIP_DD_Power", "link" : "org\/saddle\/macros\/BinOpMatMatInPlace.html#matMatIP_DD_Power:org.saddle.ops.BinOpInPlace[org.saddle.ops.Power,org.saddle.Mat[Double],org.saddle.Mat[Double]]", "kind" : "implicit val"}, {"label" : "matMatIP_II_Add", "tail" : ": BinOpInPlace[Add, Mat[Int], Mat[Int]]", "member" : "org.saddle.macros.BinOpMatMatInPlace.matMatIP_II_Add", "link" : "org\/saddle\/macros\/BinOpMatMatInPlace.html#matMatIP_II_Add:org.saddle.ops.BinOpInPlace[org.saddle.ops.Add,org.saddle.Mat[Int],org.saddle.Mat[Int]]", "kind" : "implicit val"}, {"label" : "matMatIP_LI_Add", "tail" : ": BinOpInPlace[Add, Mat[Long], Mat[Int]]", "member" : "org.saddle.macros.BinOpMatMatInPlace.matMatIP_LI_Add", "link" : "org\/saddle\/macros\/BinOpMatMatInPlace.html#matMatIP_LI_Add:org.saddle.ops.BinOpInPlace[org.saddle.ops.Add,org.saddle.Mat[Long],org.saddle.Mat[Int]]", "kind" : "implicit val"}, {"label" : "matMatIP_LL_Add", "tail" : ": BinOpInPlace[Add, Mat[Long], Mat[Long]]", "member" : "org.saddle.macros.BinOpMatMatInPlace.matMatIP_LL_Add", "link" : "org\/saddle\/macros\/BinOpMatMatInPlace.html#matMatIP_LL_Add:org.saddle.ops.BinOpInPlace[org.saddle.ops.Add,org.saddle.Mat[Long],org.saddle.Mat[Long]]", "kind" : "implicit val"}, {"label" : "matMatIP_DI_Add", "tail" : ": BinOpInPlace[Add, Mat[Double], Mat[Int]]", "member" : "org.saddle.macros.BinOpMatMatInPlace.matMatIP_DI_Add", "link" : "org\/saddle\/macros\/BinOpMatMatInPlace.html#matMatIP_DI_Add:org.saddle.ops.BinOpInPlace[org.saddle.ops.Add,org.saddle.Mat[Double],org.saddle.Mat[Int]]", "kind" : "implicit val"}, {"label" : "matMatIP_DL_Add", "tail" : ": BinOpInPlace[Add, Mat[Double], Mat[Long]]", "member" : "org.saddle.macros.BinOpMatMatInPlace.matMatIP_DL_Add", "link" : "org\/saddle\/macros\/BinOpMatMatInPlace.html#matMatIP_DL_Add:org.saddle.ops.BinOpInPlace[org.saddle.ops.Add,org.saddle.Mat[Double],org.saddle.Mat[Long]]", "kind" : "implicit val"}, {"label" : "matMatIP_DD_Add", "tail" : ": BinOpInPlace[Add, Mat[Double], Mat[Double]]", "member" : "org.saddle.macros.BinOpMatMatInPlace.matMatIP_DD_Add", "link" : "org\/saddle\/macros\/BinOpMatMatInPlace.html#matMatIP_DD_Add:org.saddle.ops.BinOpInPlace[org.saddle.ops.Add,org.saddle.Mat[Double],org.saddle.Mat[Double]]", "kind" : "implicit val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/saddle\/macros\/BinOpMatMatInPlace.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/saddle\/macros\/BinOpMatMatInPlace.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/saddle\/macros\/BinOpMatMatInPlace.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/saddle\/macros\/BinOpMatMatInPlace.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/saddle\/macros\/BinOpMatMatInPlace.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/saddle\/macros\/BinOpMatMatInPlace.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/saddle\/macros\/BinOpMatMatInPlace.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/macros\/BinOpMatMatInPlace.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/macros\/BinOpMatMatInPlace.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/macros\/BinOpMatMatInPlace.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/saddle\/macros\/BinOpMatMatInPlace.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/saddle\/macros\/BinOpMatMatInPlace.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/saddle\/macros\/BinOpMatMatInPlace.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/saddle\/macros\/BinOpMatMatInPlace.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/saddle\/macros\/BinOpMatMatInPlace.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/saddle\/macros\/BinOpMatMatInPlace.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "org\/saddle\/macros\/BinOpMatMatInPlace.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/saddle\/macros\/BinOpMatMatInPlace.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/saddle\/macros\/BinOpMatMatInPlace.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}, {"name" : "org.saddle.macros.BinOps", "shortDescription" : "", "object" : "org\/saddle\/macros\/BinOps$.html", "members_object" : [{"label" : "SrSrEOp", "tail" : "", "member" : "org.saddle.ops.BinOpSeries.SrSrEOp", "link" : "org\/saddle\/ops\/BinOpSeries.html#SrSrEOp[OP<:org.saddle.ops.ScalarOp,X,A,B,C]extendsBinOp[OP,org.saddle.Series[X,A],org.saddle.Series[X,B],org.saddle.Series[X,C]]", "kind" : "final class"}, {"label" : "SrScEOp", "tail" : "", "member" : "org.saddle.ops.BinOpSeries.SrScEOp", "link" : "org\/saddle\/ops\/BinOpSeries.html#SrScEOp[OP<:org.saddle.ops.ScalarOp,X,A,B,C]extendsBinOp[OP,org.saddle.Series[X,A],B,org.saddle.Series[X,C]]", "kind" : "final class"}, {"label" : "FrFrEOp", "tail" : "", "member" : "org.saddle.ops.BinOpFrame.FrFrEOp", "link" : "org\/saddle\/ops\/BinOpFrame.html#FrFrEOp[OP<:org.saddle.ops.ScalarOp,X,Y,A,B,C]extendsBinOp[OP,org.saddle.Frame[X,Y,A],org.saddle.Frame[X,Y,B],org.saddle.Frame[X,Y,C]]", "kind" : "final class"}, {"label" : "FrScEOp", "tail" : "", "member" : "org.saddle.ops.BinOpFrame.FrScEOp", "link" : "org\/saddle\/ops\/BinOpFrame.html#FrScEOp[OP<:org.saddle.ops.ScalarOp,X,Y,A,B,C]extendsBinOp[OP,org.saddle.Frame[X,Y,A],B,org.saddle.Frame[X,Y,C]]", "kind" : "final class"}, {"label" : "SrSrEOpBBB", "tail" : "(cm: ST[X], cmp: ORD[X], opv: BinOp[Op, Vec[Boolean], Vec[Boolean], Vec[Boolean]]): SrSrEOp[Op, X, Boolean, Boolean, Boolean]", "member" : "org.saddle.ops.BinOpSeries.SrSrEOpBBB", "link" : "org\/saddle\/macros\/BinOps$.html#SrSrEOpBBB[Op<:org.saddle.ops.ScalarOp,X](implicitcm:org.saddle.ST[X],implicitcmp:org.saddle.ORD[X],implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Boolean],org.saddle.Vec[Boolean],org.saddle.Vec[Boolean]]):BinOpSeries.this.SrSrEOp[Op,X,Boolean,Boolean,Boolean]", "kind" : "implicit def"}, {"label" : "SrSrEOpIIB", "tail" : "(cm: ST[X], cmp: ORD[X], opv: BinOp[Op, Vec[Int], Vec[Int], Vec[Boolean]]): SrSrEOp[Op, X, Int, Int, Boolean]", "member" : "org.saddle.ops.BinOpSeries.SrSrEOpIIB", "link" : "org\/saddle\/macros\/BinOps$.html#SrSrEOpIIB[Op<:org.saddle.ops.ScalarOp,X](implicitcm:org.saddle.ST[X],implicitcmp:org.saddle.ORD[X],implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Int],org.saddle.Vec[Int],org.saddle.Vec[Boolean]]):BinOpSeries.this.SrSrEOp[Op,X,Int,Int,Boolean]", "kind" : "implicit def"}, {"label" : "SrSrEOpILB", "tail" : "(cm: ST[X], cmp: ORD[X], opv: BinOp[Op, Vec[Int], Vec[Long], Vec[Boolean]]): SrSrEOp[Op, X, Int, Long, Boolean]", "member" : "org.saddle.ops.BinOpSeries.SrSrEOpILB", "link" : "org\/saddle\/macros\/BinOps$.html#SrSrEOpILB[Op<:org.saddle.ops.ScalarOp,X](implicitcm:org.saddle.ST[X],implicitcmp:org.saddle.ORD[X],implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Int],org.saddle.Vec[Long],org.saddle.Vec[Boolean]]):BinOpSeries.this.SrSrEOp[Op,X,Int,Long,Boolean]", "kind" : "implicit def"}, {"label" : "SrSrEOpIDB", "tail" : "(cm: ST[X], cmp: ORD[X], opv: BinOp[Op, Vec[Int], Vec[Double], Vec[Boolean]]): SrSrEOp[Op, X, Int, Double, Boolean]", "member" : "org.saddle.ops.BinOpSeries.SrSrEOpIDB", "link" : "org\/saddle\/macros\/BinOps$.html#SrSrEOpIDB[Op<:org.saddle.ops.ScalarOp,X](implicitcm:org.saddle.ST[X],implicitcmp:org.saddle.ORD[X],implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Int],org.saddle.Vec[Double],org.saddle.Vec[Boolean]]):BinOpSeries.this.SrSrEOp[Op,X,Int,Double,Boolean]", "kind" : "implicit def"}, {"label" : "SrSrEOpLIB", "tail" : "(cm: ST[X], cmp: ORD[X], opv: BinOp[Op, Vec[Long], Vec[Int], Vec[Boolean]]): SrSrEOp[Op, X, Long, Int, Boolean]", "member" : "org.saddle.ops.BinOpSeries.SrSrEOpLIB", "link" : "org\/saddle\/macros\/BinOps$.html#SrSrEOpLIB[Op<:org.saddle.ops.ScalarOp,X](implicitcm:org.saddle.ST[X],implicitcmp:org.saddle.ORD[X],implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Long],org.saddle.Vec[Int],org.saddle.Vec[Boolean]]):BinOpSeries.this.SrSrEOp[Op,X,Long,Int,Boolean]", "kind" : "implicit def"}, {"label" : "SrSrEOpLLB", "tail" : "(cm: ST[X], cmp: ORD[X], opv: BinOp[Op, Vec[Long], Vec[Long], Vec[Boolean]]): SrSrEOp[Op, X, Long, Long, Boolean]", "member" : "org.saddle.ops.BinOpSeries.SrSrEOpLLB", "link" : "org\/saddle\/macros\/BinOps$.html#SrSrEOpLLB[Op<:org.saddle.ops.ScalarOp,X](implicitcm:org.saddle.ST[X],implicitcmp:org.saddle.ORD[X],implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Long],org.saddle.Vec[Long],org.saddle.Vec[Boolean]]):BinOpSeries.this.SrSrEOp[Op,X,Long,Long,Boolean]", "kind" : "implicit def"}, {"label" : "SrSrEOpLDB", "tail" : "(cm: ST[X], cmp: ORD[X], opv: BinOp[Op, Vec[Long], Vec[Double], Vec[Boolean]]): SrSrEOp[Op, X, Long, Double, Boolean]", "member" : "org.saddle.ops.BinOpSeries.SrSrEOpLDB", "link" : "org\/saddle\/macros\/BinOps$.html#SrSrEOpLDB[Op<:org.saddle.ops.ScalarOp,X](implicitcm:org.saddle.ST[X],implicitcmp:org.saddle.ORD[X],implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Long],org.saddle.Vec[Double],org.saddle.Vec[Boolean]]):BinOpSeries.this.SrSrEOp[Op,X,Long,Double,Boolean]", "kind" : "implicit def"}, {"label" : "SrSrEOpDIB", "tail" : "(cm: ST[X], cmp: ORD[X], opv: BinOp[Op, Vec[Double], Vec[Int], Vec[Boolean]]): SrSrEOp[Op, X, Double, Int, Boolean]", "member" : "org.saddle.ops.BinOpSeries.SrSrEOpDIB", "link" : "org\/saddle\/macros\/BinOps$.html#SrSrEOpDIB[Op<:org.saddle.ops.ScalarOp,X](implicitcm:org.saddle.ST[X],implicitcmp:org.saddle.ORD[X],implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Double],org.saddle.Vec[Int],org.saddle.Vec[Boolean]]):BinOpSeries.this.SrSrEOp[Op,X,Double,Int,Boolean]", "kind" : "implicit def"}, {"label" : "SrSrEOpDLB", "tail" : "(cm: ST[X], cmp: ORD[X], opv: BinOp[Op, Vec[Double], Vec[Long], Vec[Boolean]]): SrSrEOp[Op, X, Double, Long, Boolean]", "member" : "org.saddle.ops.BinOpSeries.SrSrEOpDLB", "link" : "org\/saddle\/macros\/BinOps$.html#SrSrEOpDLB[Op<:org.saddle.ops.ScalarOp,X](implicitcm:org.saddle.ST[X],implicitcmp:org.saddle.ORD[X],implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Double],org.saddle.Vec[Long],org.saddle.Vec[Boolean]]):BinOpSeries.this.SrSrEOp[Op,X,Double,Long,Boolean]", "kind" : "implicit def"}, {"label" : "SrSrEOpDDB", "tail" : "(cm: ST[X], cmp: ORD[X], opv: BinOp[Op, Vec[Double], Vec[Double], Vec[Boolean]]): SrSrEOp[Op, X, Double, Double, Boolean]", "member" : "org.saddle.ops.BinOpSeries.SrSrEOpDDB", "link" : "org\/saddle\/macros\/BinOps$.html#SrSrEOpDDB[Op<:org.saddle.ops.ScalarOp,X](implicitcm:org.saddle.ST[X],implicitcmp:org.saddle.ORD[X],implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Double],org.saddle.Vec[Double],org.saddle.Vec[Boolean]]):BinOpSeries.this.SrSrEOp[Op,X,Double,Double,Boolean]", "kind" : "implicit def"}, {"label" : "SrSrEOpIII", "tail" : "(cm: ST[X], cmp: ORD[X], opv: BinOp[Op, Vec[Int], Vec[Int], Vec[Int]]): SrSrEOp[Op, X, Int, Int, Int]", "member" : "org.saddle.ops.BinOpSeries.SrSrEOpIII", "link" : "org\/saddle\/macros\/BinOps$.html#SrSrEOpIII[Op<:org.saddle.ops.ScalarOp,X](implicitcm:org.saddle.ST[X],implicitcmp:org.saddle.ORD[X],implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Int],org.saddle.Vec[Int],org.saddle.Vec[Int]]):BinOpSeries.this.SrSrEOp[Op,X,Int,Int,Int]", "kind" : "implicit def"}, {"label" : "SrSrEOpILL", "tail" : "(cm: ST[X], cmp: ORD[X], opv: BinOp[Op, Vec[Int], Vec[Long], Vec[Long]]): SrSrEOp[Op, X, Int, Long, Long]", "member" : "org.saddle.ops.BinOpSeries.SrSrEOpILL", "link" : "org\/saddle\/macros\/BinOps$.html#SrSrEOpILL[Op<:org.saddle.ops.ScalarOp,X](implicitcm:org.saddle.ST[X],implicitcmp:org.saddle.ORD[X],implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Int],org.saddle.Vec[Long],org.saddle.Vec[Long]]):BinOpSeries.this.SrSrEOp[Op,X,Int,Long,Long]", "kind" : "implicit def"}, {"label" : "SrSrEOpIDD", "tail" : "(cm: ST[X], cmp: ORD[X], opv: BinOp[Op, Vec[Int], Vec[Double], Vec[Double]]): SrSrEOp[Op, X, Int, Double, Double]", "member" : "org.saddle.ops.BinOpSeries.SrSrEOpIDD", "link" : "org\/saddle\/macros\/BinOps$.html#SrSrEOpIDD[Op<:org.saddle.ops.ScalarOp,X](implicitcm:org.saddle.ST[X],implicitcmp:org.saddle.ORD[X],implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Int],org.saddle.Vec[Double],org.saddle.Vec[Double]]):BinOpSeries.this.SrSrEOp[Op,X,Int,Double,Double]", "kind" : "implicit def"}, {"label" : "SrSrEOpLIL", "tail" : "(cm: ST[X], cmp: ORD[X], opv: BinOp[Op, Vec[Long], Vec[Int], Vec[Long]]): SrSrEOp[Op, X, Long, Int, Long]", "member" : "org.saddle.ops.BinOpSeries.SrSrEOpLIL", "link" : "org\/saddle\/macros\/BinOps$.html#SrSrEOpLIL[Op<:org.saddle.ops.ScalarOp,X](implicitcm:org.saddle.ST[X],implicitcmp:org.saddle.ORD[X],implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Long],org.saddle.Vec[Int],org.saddle.Vec[Long]]):BinOpSeries.this.SrSrEOp[Op,X,Long,Int,Long]", "kind" : "implicit def"}, {"label" : "SrSrEOpLLL", "tail" : "(cm: ST[X], cmp: ORD[X], opv: BinOp[Op, Vec[Long], Vec[Long], Vec[Long]]): SrSrEOp[Op, X, Long, Long, Long]", "member" : "org.saddle.ops.BinOpSeries.SrSrEOpLLL", "link" : "org\/saddle\/macros\/BinOps$.html#SrSrEOpLLL[Op<:org.saddle.ops.ScalarOp,X](implicitcm:org.saddle.ST[X],implicitcmp:org.saddle.ORD[X],implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Long],org.saddle.Vec[Long],org.saddle.Vec[Long]]):BinOpSeries.this.SrSrEOp[Op,X,Long,Long,Long]", "kind" : "implicit def"}, {"label" : "SrSrEOpLDD", "tail" : "(cm: ST[X], cmp: ORD[X], opv: BinOp[Op, Vec[Long], Vec[Double], Vec[Double]]): SrSrEOp[Op, X, Long, Double, Double]", "member" : "org.saddle.ops.BinOpSeries.SrSrEOpLDD", "link" : "org\/saddle\/macros\/BinOps$.html#SrSrEOpLDD[Op<:org.saddle.ops.ScalarOp,X](implicitcm:org.saddle.ST[X],implicitcmp:org.saddle.ORD[X],implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Long],org.saddle.Vec[Double],org.saddle.Vec[Double]]):BinOpSeries.this.SrSrEOp[Op,X,Long,Double,Double]", "kind" : "implicit def"}, {"label" : "SrSrEOpDLD", "tail" : "(cm: ST[X], cmp: ORD[X], opv: BinOp[Op, Vec[Double], Vec[Long], Vec[Double]]): SrSrEOp[Op, X, Double, Long, Double]", "member" : "org.saddle.ops.BinOpSeries.SrSrEOpDLD", "link" : "org\/saddle\/macros\/BinOps$.html#SrSrEOpDLD[Op<:org.saddle.ops.ScalarOp,X](implicitcm:org.saddle.ST[X],implicitcmp:org.saddle.ORD[X],implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Double],org.saddle.Vec[Long],org.saddle.Vec[Double]]):BinOpSeries.this.SrSrEOp[Op,X,Double,Long,Double]", "kind" : "implicit def"}, {"label" : "SrSrEOpDID", "tail" : "(cm: ST[X], cmp: ORD[X], opv: BinOp[Op, Vec[Double], Vec[Int], Vec[Double]]): SrSrEOp[Op, X, Double, Int, Double]", "member" : "org.saddle.ops.BinOpSeries.SrSrEOpDID", "link" : "org\/saddle\/macros\/BinOps$.html#SrSrEOpDID[Op<:org.saddle.ops.ScalarOp,X](implicitcm:org.saddle.ST[X],implicitcmp:org.saddle.ORD[X],implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Double],org.saddle.Vec[Int],org.saddle.Vec[Double]]):BinOpSeries.this.SrSrEOp[Op,X,Double,Int,Double]", "kind" : "implicit def"}, {"label" : "SrSrEOpDDD", "tail" : "(cm: ST[X], cmp: ORD[X], opv: BinOp[Op, Vec[Double], Vec[Double], Vec[Double]]): SrSrEOp[Op, X, Double, Double, Double]", "member" : "org.saddle.ops.BinOpSeries.SrSrEOpDDD", "link" : "org\/saddle\/macros\/BinOps$.html#SrSrEOpDDD[Op<:org.saddle.ops.ScalarOp,X](implicitcm:org.saddle.ST[X],implicitcmp:org.saddle.ORD[X],implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Double],org.saddle.Vec[Double],org.saddle.Vec[Double]]):BinOpSeries.this.SrSrEOp[Op,X,Double,Double,Double]", "kind" : "implicit def"}, {"label" : "SrScEOpBBB", "tail" : "(cm: ST[X], cmp: ORD[X], opv: BinOp[Op, Vec[Boolean], Boolean, Vec[Boolean]]): SrScEOp[Op, X, Boolean, Boolean, Boolean]", "member" : "org.saddle.ops.BinOpSeries.SrScEOpBBB", "link" : "org\/saddle\/macros\/BinOps$.html#SrScEOpBBB[Op<:org.saddle.ops.ScalarOp,X](implicitcm:org.saddle.ST[X],implicitcmp:org.saddle.ORD[X],implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Boolean],Boolean,org.saddle.Vec[Boolean]]):BinOpSeries.this.SrScEOp[Op,X,Boolean,Boolean,Boolean]", "kind" : "implicit def"}, {"label" : "SrScEOpIIB", "tail" : "(cm: ST[X], cmp: ORD[X], opv: BinOp[Op, Vec[Int], Int, Vec[Boolean]]): SrScEOp[Op, X, Int, Int, Boolean]", "member" : "org.saddle.ops.BinOpSeries.SrScEOpIIB", "link" : "org\/saddle\/macros\/BinOps$.html#SrScEOpIIB[Op<:org.saddle.ops.ScalarOp,X](implicitcm:org.saddle.ST[X],implicitcmp:org.saddle.ORD[X],implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Int],Int,org.saddle.Vec[Boolean]]):BinOpSeries.this.SrScEOp[Op,X,Int,Int,Boolean]", "kind" : "implicit def"}, {"label" : "SrScEOpILB", "tail" : "(cm: ST[X], cmp: ORD[X], opv: BinOp[Op, Vec[Int], Long, Vec[Boolean]]): SrScEOp[Op, X, Int, Long, Boolean]", "member" : "org.saddle.ops.BinOpSeries.SrScEOpILB", "link" : "org\/saddle\/macros\/BinOps$.html#SrScEOpILB[Op<:org.saddle.ops.ScalarOp,X](implicitcm:org.saddle.ST[X],implicitcmp:org.saddle.ORD[X],implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Int],Long,org.saddle.Vec[Boolean]]):BinOpSeries.this.SrScEOp[Op,X,Int,Long,Boolean]", "kind" : "implicit def"}, {"label" : "SrScEOpIDB", "tail" : "(cm: ST[X], cmp: ORD[X], opv: BinOp[Op, Vec[Int], Double, Vec[Boolean]]): SrScEOp[Op, X, Int, Double, Boolean]", "member" : "org.saddle.ops.BinOpSeries.SrScEOpIDB", "link" : "org\/saddle\/macros\/BinOps$.html#SrScEOpIDB[Op<:org.saddle.ops.ScalarOp,X](implicitcm:org.saddle.ST[X],implicitcmp:org.saddle.ORD[X],implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Int],Double,org.saddle.Vec[Boolean]]):BinOpSeries.this.SrScEOp[Op,X,Int,Double,Boolean]", "kind" : "implicit def"}, {"label" : "SrScEOpLIB", "tail" : "(cm: ST[X], cmp: ORD[X], opv: BinOp[Op, Vec[Long], Int, Vec[Boolean]]): SrScEOp[Op, X, Long, Int, Boolean]", "member" : "org.saddle.ops.BinOpSeries.SrScEOpLIB", "link" : "org\/saddle\/macros\/BinOps$.html#SrScEOpLIB[Op<:org.saddle.ops.ScalarOp,X](implicitcm:org.saddle.ST[X],implicitcmp:org.saddle.ORD[X],implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Long],Int,org.saddle.Vec[Boolean]]):BinOpSeries.this.SrScEOp[Op,X,Long,Int,Boolean]", "kind" : "implicit def"}, {"label" : "SrScEOpLLB", "tail" : "(cm: ST[X], cmp: ORD[X], opv: BinOp[Op, Vec[Long], Long, Vec[Boolean]]): SrScEOp[Op, X, Long, Long, Boolean]", "member" : "org.saddle.ops.BinOpSeries.SrScEOpLLB", "link" : "org\/saddle\/macros\/BinOps$.html#SrScEOpLLB[Op<:org.saddle.ops.ScalarOp,X](implicitcm:org.saddle.ST[X],implicitcmp:org.saddle.ORD[X],implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Long],Long,org.saddle.Vec[Boolean]]):BinOpSeries.this.SrScEOp[Op,X,Long,Long,Boolean]", "kind" : "implicit def"}, {"label" : "SrScEOpLDB", "tail" : "(cm: ST[X], cmp: ORD[X], opv: BinOp[Op, Vec[Long], Double, Vec[Boolean]]): SrScEOp[Op, X, Long, Double, Boolean]", "member" : "org.saddle.ops.BinOpSeries.SrScEOpLDB", "link" : "org\/saddle\/macros\/BinOps$.html#SrScEOpLDB[Op<:org.saddle.ops.ScalarOp,X](implicitcm:org.saddle.ST[X],implicitcmp:org.saddle.ORD[X],implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Long],Double,org.saddle.Vec[Boolean]]):BinOpSeries.this.SrScEOp[Op,X,Long,Double,Boolean]", "kind" : "implicit def"}, {"label" : "SrScEOpDIB", "tail" : "(cm: ST[X], cmp: ORD[X], opv: BinOp[Op, Vec[Double], Int, Vec[Boolean]]): SrScEOp[Op, X, Double, Int, Boolean]", "member" : "org.saddle.ops.BinOpSeries.SrScEOpDIB", "link" : "org\/saddle\/macros\/BinOps$.html#SrScEOpDIB[Op<:org.saddle.ops.ScalarOp,X](implicitcm:org.saddle.ST[X],implicitcmp:org.saddle.ORD[X],implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Double],Int,org.saddle.Vec[Boolean]]):BinOpSeries.this.SrScEOp[Op,X,Double,Int,Boolean]", "kind" : "implicit def"}, {"label" : "SrScEOpDLB", "tail" : "(cm: ST[X], cmp: ORD[X], opv: BinOp[Op, Vec[Double], Long, Vec[Boolean]]): SrScEOp[Op, X, Double, Long, Boolean]", "member" : "org.saddle.ops.BinOpSeries.SrScEOpDLB", "link" : "org\/saddle\/macros\/BinOps$.html#SrScEOpDLB[Op<:org.saddle.ops.ScalarOp,X](implicitcm:org.saddle.ST[X],implicitcmp:org.saddle.ORD[X],implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Double],Long,org.saddle.Vec[Boolean]]):BinOpSeries.this.SrScEOp[Op,X,Double,Long,Boolean]", "kind" : "implicit def"}, {"label" : "SrScEOpDDB", "tail" : "(cm: ST[X], cmp: ORD[X], opv: BinOp[Op, Vec[Double], Double, Vec[Boolean]]): SrScEOp[Op, X, Double, Double, Boolean]", "member" : "org.saddle.ops.BinOpSeries.SrScEOpDDB", "link" : "org\/saddle\/macros\/BinOps$.html#SrScEOpDDB[Op<:org.saddle.ops.ScalarOp,X](implicitcm:org.saddle.ST[X],implicitcmp:org.saddle.ORD[X],implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Double],Double,org.saddle.Vec[Boolean]]):BinOpSeries.this.SrScEOp[Op,X,Double,Double,Boolean]", "kind" : "implicit def"}, {"label" : "SrScEOpIII", "tail" : "(cm: ST[X], cmp: ORD[X], opv: BinOp[Op, Vec[Int], Int, Vec[Int]]): SrScEOp[Op, X, Int, Int, Int]", "member" : "org.saddle.ops.BinOpSeries.SrScEOpIII", "link" : "org\/saddle\/macros\/BinOps$.html#SrScEOpIII[Op<:org.saddle.ops.ScalarOp,X](implicitcm:org.saddle.ST[X],implicitcmp:org.saddle.ORD[X],implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Int],Int,org.saddle.Vec[Int]]):BinOpSeries.this.SrScEOp[Op,X,Int,Int,Int]", "kind" : "implicit def"}, {"label" : "SrScEOpILL", "tail" : "(cm: ST[X], cmp: ORD[X], opv: BinOp[Op, Vec[Int], Long, Vec[Long]]): SrScEOp[Op, X, Int, Long, Long]", "member" : "org.saddle.ops.BinOpSeries.SrScEOpILL", "link" : "org\/saddle\/macros\/BinOps$.html#SrScEOpILL[Op<:org.saddle.ops.ScalarOp,X](implicitcm:org.saddle.ST[X],implicitcmp:org.saddle.ORD[X],implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Int],Long,org.saddle.Vec[Long]]):BinOpSeries.this.SrScEOp[Op,X,Int,Long,Long]", "kind" : "implicit def"}, {"label" : "SrScEOpIDD", "tail" : "(cm: ST[X], cmp: ORD[X], opv: BinOp[Op, Vec[Int], Double, Vec[Double]]): SrScEOp[Op, X, Int, Double, Double]", "member" : "org.saddle.ops.BinOpSeries.SrScEOpIDD", "link" : "org\/saddle\/macros\/BinOps$.html#SrScEOpIDD[Op<:org.saddle.ops.ScalarOp,X](implicitcm:org.saddle.ST[X],implicitcmp:org.saddle.ORD[X],implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Int],Double,org.saddle.Vec[Double]]):BinOpSeries.this.SrScEOp[Op,X,Int,Double,Double]", "kind" : "implicit def"}, {"label" : "SrScEOpLIL", "tail" : "(cm: ST[X], cmp: ORD[X], opv: BinOp[Op, Vec[Long], Int, Vec[Long]]): SrScEOp[Op, X, Long, Int, Long]", "member" : "org.saddle.ops.BinOpSeries.SrScEOpLIL", "link" : "org\/saddle\/macros\/BinOps$.html#SrScEOpLIL[Op<:org.saddle.ops.ScalarOp,X](implicitcm:org.saddle.ST[X],implicitcmp:org.saddle.ORD[X],implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Long],Int,org.saddle.Vec[Long]]):BinOpSeries.this.SrScEOp[Op,X,Long,Int,Long]", "kind" : "implicit def"}, {"label" : "SrScEOpLLL", "tail" : "(cm: ST[X], cmp: ORD[X], opv: BinOp[Op, Vec[Long], Long, Vec[Long]]): SrScEOp[Op, X, Long, Long, Long]", "member" : "org.saddle.ops.BinOpSeries.SrScEOpLLL", "link" : "org\/saddle\/macros\/BinOps$.html#SrScEOpLLL[Op<:org.saddle.ops.ScalarOp,X](implicitcm:org.saddle.ST[X],implicitcmp:org.saddle.ORD[X],implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Long],Long,org.saddle.Vec[Long]]):BinOpSeries.this.SrScEOp[Op,X,Long,Long,Long]", "kind" : "implicit def"}, {"label" : "SrScEOpLDD", "tail" : "(cm: ST[X], cmp: ORD[X], opv: BinOp[Op, Vec[Long], Double, Vec[Double]]): SrScEOp[Op, X, Long, Double, Double]", "member" : "org.saddle.ops.BinOpSeries.SrScEOpLDD", "link" : "org\/saddle\/macros\/BinOps$.html#SrScEOpLDD[Op<:org.saddle.ops.ScalarOp,X](implicitcm:org.saddle.ST[X],implicitcmp:org.saddle.ORD[X],implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Long],Double,org.saddle.Vec[Double]]):BinOpSeries.this.SrScEOp[Op,X,Long,Double,Double]", "kind" : "implicit def"}, {"label" : "SrScEOpDID", "tail" : "(cm: ST[X], cmp: ORD[X], opv: BinOp[Op, Vec[Double], Int, Vec[Double]]): SrScEOp[Op, X, Double, Int, Double]", "member" : "org.saddle.ops.BinOpSeries.SrScEOpDID", "link" : "org\/saddle\/macros\/BinOps$.html#SrScEOpDID[Op<:org.saddle.ops.ScalarOp,X](implicitcm:org.saddle.ST[X],implicitcmp:org.saddle.ORD[X],implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Double],Int,org.saddle.Vec[Double]]):BinOpSeries.this.SrScEOp[Op,X,Double,Int,Double]", "kind" : "implicit def"}, {"label" : "SrScEOpDLD", "tail" : "(cm: ST[X], cmp: ORD[X], opv: BinOp[Op, Vec[Double], Long, Vec[Double]]): SrScEOp[Op, X, Double, Long, Double]", "member" : "org.saddle.ops.BinOpSeries.SrScEOpDLD", "link" : "org\/saddle\/macros\/BinOps$.html#SrScEOpDLD[Op<:org.saddle.ops.ScalarOp,X](implicitcm:org.saddle.ST[X],implicitcmp:org.saddle.ORD[X],implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Double],Long,org.saddle.Vec[Double]]):BinOpSeries.this.SrScEOp[Op,X,Double,Long,Double]", "kind" : "implicit def"}, {"label" : "SrScEOpDDD", "tail" : "(cm: ST[X], cmp: ORD[X], opv: BinOp[Op, Vec[Double], Double, Vec[Double]]): SrScEOp[Op, X, Double, Double, Double]", "member" : "org.saddle.ops.BinOpSeries.SrScEOpDDD", "link" : "org\/saddle\/macros\/BinOps$.html#SrScEOpDDD[Op<:org.saddle.ops.ScalarOp,X](implicitcm:org.saddle.ST[X],implicitcmp:org.saddle.ORD[X],implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Double],Double,org.saddle.Vec[Double]]):BinOpSeries.this.SrScEOp[Op,X,Double,Double,Double]", "kind" : "implicit def"}, {"label" : "FrFrEOpBBB", "tail" : "(cm: ST[X], cmp: ORD[X], my: ST[Y], cmpY: ORD[Y], opv: BinOp[Op, Vec[Boolean], Vec[Boolean], Vec[Boolean]]): FrFrEOp[Op, X, Y, Boolean, Boolean, Boolean]", "member" : "org.saddle.ops.BinOpFrame.FrFrEOpBBB", "link" : "org\/saddle\/macros\/BinOps$.html#FrFrEOpBBB[Op<:org.saddle.ops.ScalarOp,X,Y](implicitcm:org.saddle.ST[X],implicitcmp:org.saddle.ORD[X],implicitmy:org.saddle.ST[Y],implicitcmpY:org.saddle.ORD[Y],implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Boolean],org.saddle.Vec[Boolean],org.saddle.Vec[Boolean]]):BinOpFrame.this.FrFrEOp[Op,X,Y,Boolean,Boolean,Boolean]", "kind" : "implicit def"}, {"label" : "FrFrEOpIIB", "tail" : "(cm: ST[X], cmp: ORD[X], my: ST[Y], cmpY: ORD[Y], opv: BinOp[Op, Vec[Int], Vec[Int], Vec[Boolean]]): FrFrEOp[Op, X, Y, Int, Int, Boolean]", "member" : "org.saddle.ops.BinOpFrame.FrFrEOpIIB", "link" : "org\/saddle\/macros\/BinOps$.html#FrFrEOpIIB[Op<:org.saddle.ops.ScalarOp,X,Y](implicitcm:org.saddle.ST[X],implicitcmp:org.saddle.ORD[X],implicitmy:org.saddle.ST[Y],implicitcmpY:org.saddle.ORD[Y],implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Int],org.saddle.Vec[Int],org.saddle.Vec[Boolean]]):BinOpFrame.this.FrFrEOp[Op,X,Y,Int,Int,Boolean]", "kind" : "implicit def"}, {"label" : "FrFrEOpILB", "tail" : "(cm: ST[X], cmp: ORD[X], my: ST[Y], cmpY: ORD[Y], opv: BinOp[Op, Vec[Int], Vec[Long], Vec[Boolean]]): FrFrEOp[Op, X, Y, Int, Long, Boolean]", "member" : "org.saddle.ops.BinOpFrame.FrFrEOpILB", "link" : "org\/saddle\/macros\/BinOps$.html#FrFrEOpILB[Op<:org.saddle.ops.ScalarOp,X,Y](implicitcm:org.saddle.ST[X],implicitcmp:org.saddle.ORD[X],implicitmy:org.saddle.ST[Y],implicitcmpY:org.saddle.ORD[Y],implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Int],org.saddle.Vec[Long],org.saddle.Vec[Boolean]]):BinOpFrame.this.FrFrEOp[Op,X,Y,Int,Long,Boolean]", "kind" : "implicit def"}, {"label" : "FrFrEOpIDB", "tail" : "(cm: ST[X], cmp: ORD[X], my: ST[Y], cmpY: ORD[Y], opv: BinOp[Op, Vec[Int], Vec[Double], Vec[Boolean]]): FrFrEOp[Op, X, Y, Int, Double, Boolean]", "member" : "org.saddle.ops.BinOpFrame.FrFrEOpIDB", "link" : "org\/saddle\/macros\/BinOps$.html#FrFrEOpIDB[Op<:org.saddle.ops.ScalarOp,X,Y](implicitcm:org.saddle.ST[X],implicitcmp:org.saddle.ORD[X],implicitmy:org.saddle.ST[Y],implicitcmpY:org.saddle.ORD[Y],implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Int],org.saddle.Vec[Double],org.saddle.Vec[Boolean]]):BinOpFrame.this.FrFrEOp[Op,X,Y,Int,Double,Boolean]", "kind" : "implicit def"}, {"label" : "FrFrEOpLIB", "tail" : "(cm: ST[X], cmp: ORD[X], my: ST[Y], cmpY: ORD[Y], opv: BinOp[Op, Vec[Long], Vec[Int], Vec[Boolean]]): FrFrEOp[Op, X, Y, Long, Int, Boolean]", "member" : "org.saddle.ops.BinOpFrame.FrFrEOpLIB", "link" : "org\/saddle\/macros\/BinOps$.html#FrFrEOpLIB[Op<:org.saddle.ops.ScalarOp,X,Y](implicitcm:org.saddle.ST[X],implicitcmp:org.saddle.ORD[X],implicitmy:org.saddle.ST[Y],implicitcmpY:org.saddle.ORD[Y],implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Long],org.saddle.Vec[Int],org.saddle.Vec[Boolean]]):BinOpFrame.this.FrFrEOp[Op,X,Y,Long,Int,Boolean]", "kind" : "implicit def"}, {"label" : "FrFrEOpLLB", "tail" : "(cm: ST[X], cmp: ORD[X], my: ST[Y], cmpY: ORD[Y], opv: BinOp[Op, Vec[Long], Vec[Long], Vec[Boolean]]): FrFrEOp[Op, X, Y, Long, Long, Boolean]", "member" : "org.saddle.ops.BinOpFrame.FrFrEOpLLB", "link" : "org\/saddle\/macros\/BinOps$.html#FrFrEOpLLB[Op<:org.saddle.ops.ScalarOp,X,Y](implicitcm:org.saddle.ST[X],implicitcmp:org.saddle.ORD[X],implicitmy:org.saddle.ST[Y],implicitcmpY:org.saddle.ORD[Y],implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Long],org.saddle.Vec[Long],org.saddle.Vec[Boolean]]):BinOpFrame.this.FrFrEOp[Op,X,Y,Long,Long,Boolean]", "kind" : "implicit def"}, {"label" : "FrFrEOpLDB", "tail" : "(cm: ST[X], cmp: ORD[X], my: ST[Y], cmpY: ORD[Y], opv: BinOp[Op, Vec[Long], Vec[Double], Vec[Boolean]]): FrFrEOp[Op, X, Y, Long, Double, Boolean]", "member" : "org.saddle.ops.BinOpFrame.FrFrEOpLDB", "link" : "org\/saddle\/macros\/BinOps$.html#FrFrEOpLDB[Op<:org.saddle.ops.ScalarOp,X,Y](implicitcm:org.saddle.ST[X],implicitcmp:org.saddle.ORD[X],implicitmy:org.saddle.ST[Y],implicitcmpY:org.saddle.ORD[Y],implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Long],org.saddle.Vec[Double],org.saddle.Vec[Boolean]]):BinOpFrame.this.FrFrEOp[Op,X,Y,Long,Double,Boolean]", "kind" : "implicit def"}, {"label" : "FrFrEOpDIB", "tail" : "(cm: ST[X], cmp: ORD[X], my: ST[Y], cmpY: ORD[Y], opv: BinOp[Op, Vec[Double], Vec[Int], Vec[Boolean]]): FrFrEOp[Op, X, Y, Double, Int, Boolean]", "member" : "org.saddle.ops.BinOpFrame.FrFrEOpDIB", "link" : "org\/saddle\/macros\/BinOps$.html#FrFrEOpDIB[Op<:org.saddle.ops.ScalarOp,X,Y](implicitcm:org.saddle.ST[X],implicitcmp:org.saddle.ORD[X],implicitmy:org.saddle.ST[Y],implicitcmpY:org.saddle.ORD[Y],implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Double],org.saddle.Vec[Int],org.saddle.Vec[Boolean]]):BinOpFrame.this.FrFrEOp[Op,X,Y,Double,Int,Boolean]", "kind" : "implicit def"}, {"label" : "FrFrEOpDLB", "tail" : "(cm: ST[X], cmp: ORD[X], my: ST[Y], cmpY: ORD[Y], opv: BinOp[Op, Vec[Double], Vec[Long], Vec[Boolean]]): FrFrEOp[Op, X, Y, Double, Long, Boolean]", "member" : "org.saddle.ops.BinOpFrame.FrFrEOpDLB", "link" : "org\/saddle\/macros\/BinOps$.html#FrFrEOpDLB[Op<:org.saddle.ops.ScalarOp,X,Y](implicitcm:org.saddle.ST[X],implicitcmp:org.saddle.ORD[X],implicitmy:org.saddle.ST[Y],implicitcmpY:org.saddle.ORD[Y],implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Double],org.saddle.Vec[Long],org.saddle.Vec[Boolean]]):BinOpFrame.this.FrFrEOp[Op,X,Y,Double,Long,Boolean]", "kind" : "implicit def"}, {"label" : "FrFrEOpDDB", "tail" : "(cm: ST[X], cmp: ORD[X], my: ST[Y], cmpY: ORD[Y], opv: BinOp[Op, Vec[Double], Vec[Double], Vec[Boolean]]): FrFrEOp[Op, X, Y, Double, Double, Boolean]", "member" : "org.saddle.ops.BinOpFrame.FrFrEOpDDB", "link" : "org\/saddle\/macros\/BinOps$.html#FrFrEOpDDB[Op<:org.saddle.ops.ScalarOp,X,Y](implicitcm:org.saddle.ST[X],implicitcmp:org.saddle.ORD[X],implicitmy:org.saddle.ST[Y],implicitcmpY:org.saddle.ORD[Y],implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Double],org.saddle.Vec[Double],org.saddle.Vec[Boolean]]):BinOpFrame.this.FrFrEOp[Op,X,Y,Double,Double,Boolean]", "kind" : "implicit def"}, {"label" : "FrFrEOpIII", "tail" : "(cm: ST[X], cmp: ORD[X], my: ST[Y], cmpY: ORD[Y], opv: BinOp[Op, Vec[Int], Vec[Int], Vec[Int]]): FrFrEOp[Op, X, Y, Int, Int, Int]", "member" : "org.saddle.ops.BinOpFrame.FrFrEOpIII", "link" : "org\/saddle\/macros\/BinOps$.html#FrFrEOpIII[Op<:org.saddle.ops.ScalarOp,X,Y](implicitcm:org.saddle.ST[X],implicitcmp:org.saddle.ORD[X],implicitmy:org.saddle.ST[Y],implicitcmpY:org.saddle.ORD[Y],implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Int],org.saddle.Vec[Int],org.saddle.Vec[Int]]):BinOpFrame.this.FrFrEOp[Op,X,Y,Int,Int,Int]", "kind" : "implicit def"}, {"label" : "FrFrEOpILL", "tail" : "(cm: ST[X], cmp: ORD[X], my: ST[Y], cmpY: ORD[Y], opv: BinOp[Op, Vec[Int], Vec[Long], Vec[Long]]): FrFrEOp[Op, X, Y, Int, Long, Long]", "member" : "org.saddle.ops.BinOpFrame.FrFrEOpILL", "link" : "org\/saddle\/macros\/BinOps$.html#FrFrEOpILL[Op<:org.saddle.ops.ScalarOp,X,Y](implicitcm:org.saddle.ST[X],implicitcmp:org.saddle.ORD[X],implicitmy:org.saddle.ST[Y],implicitcmpY:org.saddle.ORD[Y],implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Int],org.saddle.Vec[Long],org.saddle.Vec[Long]]):BinOpFrame.this.FrFrEOp[Op,X,Y,Int,Long,Long]", "kind" : "implicit def"}, {"label" : "FrFrEOpIDD", "tail" : "(cm: ST[X], cmp: ORD[X], my: ST[Y], cmpY: ORD[Y], opv: BinOp[Op, Vec[Int], Vec[Double], Vec[Double]]): FrFrEOp[Op, X, Y, Int, Double, Double]", "member" : "org.saddle.ops.BinOpFrame.FrFrEOpIDD", "link" : "org\/saddle\/macros\/BinOps$.html#FrFrEOpIDD[Op<:org.saddle.ops.ScalarOp,X,Y](implicitcm:org.saddle.ST[X],implicitcmp:org.saddle.ORD[X],implicitmy:org.saddle.ST[Y],implicitcmpY:org.saddle.ORD[Y],implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Int],org.saddle.Vec[Double],org.saddle.Vec[Double]]):BinOpFrame.this.FrFrEOp[Op,X,Y,Int,Double,Double]", "kind" : "implicit def"}, {"label" : "FrFrEOpLIL", "tail" : "(cm: ST[X], cmp: ORD[X], my: ST[Y], cmpY: ORD[Y], opv: BinOp[Op, Vec[Long], Vec[Int], Vec[Long]]): FrFrEOp[Op, X, Y, Long, Int, Long]", "member" : "org.saddle.ops.BinOpFrame.FrFrEOpLIL", "link" : "org\/saddle\/macros\/BinOps$.html#FrFrEOpLIL[Op<:org.saddle.ops.ScalarOp,X,Y](implicitcm:org.saddle.ST[X],implicitcmp:org.saddle.ORD[X],implicitmy:org.saddle.ST[Y],implicitcmpY:org.saddle.ORD[Y],implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Long],org.saddle.Vec[Int],org.saddle.Vec[Long]]):BinOpFrame.this.FrFrEOp[Op,X,Y,Long,Int,Long]", "kind" : "implicit def"}, {"label" : "FrFrEOpLLL", "tail" : "(cm: ST[X], cmp: ORD[X], my: ST[Y], cmpY: ORD[Y], opv: BinOp[Op, Vec[Long], Vec[Long], Vec[Long]]): FrFrEOp[Op, X, Y, Long, Long, Long]", "member" : "org.saddle.ops.BinOpFrame.FrFrEOpLLL", "link" : "org\/saddle\/macros\/BinOps$.html#FrFrEOpLLL[Op<:org.saddle.ops.ScalarOp,X,Y](implicitcm:org.saddle.ST[X],implicitcmp:org.saddle.ORD[X],implicitmy:org.saddle.ST[Y],implicitcmpY:org.saddle.ORD[Y],implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Long],org.saddle.Vec[Long],org.saddle.Vec[Long]]):BinOpFrame.this.FrFrEOp[Op,X,Y,Long,Long,Long]", "kind" : "implicit def"}, {"label" : "FrFrEOpLDD", "tail" : "(cm: ST[X], cmp: ORD[X], my: ST[Y], cmpY: ORD[Y], opv: BinOp[Op, Vec[Long], Vec[Double], Vec[Double]]): FrFrEOp[Op, X, Y, Long, Double, Double]", "member" : "org.saddle.ops.BinOpFrame.FrFrEOpLDD", "link" : "org\/saddle\/macros\/BinOps$.html#FrFrEOpLDD[Op<:org.saddle.ops.ScalarOp,X,Y](implicitcm:org.saddle.ST[X],implicitcmp:org.saddle.ORD[X],implicitmy:org.saddle.ST[Y],implicitcmpY:org.saddle.ORD[Y],implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Long],org.saddle.Vec[Double],org.saddle.Vec[Double]]):BinOpFrame.this.FrFrEOp[Op,X,Y,Long,Double,Double]", "kind" : "implicit def"}, {"label" : "FrFrEOpDLD", "tail" : "(cm: ST[X], cmp: ORD[X], my: ST[Y], cmpY: ORD[Y], opv: BinOp[Op, Vec[Double], Vec[Long], Vec[Double]]): FrFrEOp[Op, X, Y, Double, Long, Double]", "member" : "org.saddle.ops.BinOpFrame.FrFrEOpDLD", "link" : "org\/saddle\/macros\/BinOps$.html#FrFrEOpDLD[Op<:org.saddle.ops.ScalarOp,X,Y](implicitcm:org.saddle.ST[X],implicitcmp:org.saddle.ORD[X],implicitmy:org.saddle.ST[Y],implicitcmpY:org.saddle.ORD[Y],implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Double],org.saddle.Vec[Long],org.saddle.Vec[Double]]):BinOpFrame.this.FrFrEOp[Op,X,Y,Double,Long,Double]", "kind" : "implicit def"}, {"label" : "FrFrEOpDID", "tail" : "(cm: ST[X], cmp: ORD[X], my: ST[Y], cmpY: ORD[Y], opv: BinOp[Op, Vec[Double], Vec[Int], Vec[Double]]): FrFrEOp[Op, X, Y, Double, Int, Double]", "member" : "org.saddle.ops.BinOpFrame.FrFrEOpDID", "link" : "org\/saddle\/macros\/BinOps$.html#FrFrEOpDID[Op<:org.saddle.ops.ScalarOp,X,Y](implicitcm:org.saddle.ST[X],implicitcmp:org.saddle.ORD[X],implicitmy:org.saddle.ST[Y],implicitcmpY:org.saddle.ORD[Y],implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Double],org.saddle.Vec[Int],org.saddle.Vec[Double]]):BinOpFrame.this.FrFrEOp[Op,X,Y,Double,Int,Double]", "kind" : "implicit def"}, {"label" : "FrFrEOpDDD", "tail" : "(cm: ST[X], cmp: ORD[X], my: ST[Y], cmpY: ORD[Y], opv: BinOp[Op, Vec[Double], Vec[Double], Vec[Double]]): FrFrEOp[Op, X, Y, Double, Double, Double]", "member" : "org.saddle.ops.BinOpFrame.FrFrEOpDDD", "link" : "org\/saddle\/macros\/BinOps$.html#FrFrEOpDDD[Op<:org.saddle.ops.ScalarOp,X,Y](implicitcm:org.saddle.ST[X],implicitcmp:org.saddle.ORD[X],implicitmy:org.saddle.ST[Y],implicitcmpY:org.saddle.ORD[Y],implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Double],org.saddle.Vec[Double],org.saddle.Vec[Double]]):BinOpFrame.this.FrFrEOp[Op,X,Y,Double,Double,Double]", "kind" : "implicit def"}, {"label" : "FrScEOpBBB", "tail" : "(opv: BinOp[Op, Vec[Boolean], Boolean, Vec[Boolean]]): FrScEOp[Op, X, Y, Boolean, Boolean, Boolean]", "member" : "org.saddle.ops.BinOpFrame.FrScEOpBBB", "link" : "org\/saddle\/macros\/BinOps$.html#FrScEOpBBB[Op<:org.saddle.ops.ScalarOp,X,Y](implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Boolean],Boolean,org.saddle.Vec[Boolean]]):BinOpFrame.this.FrScEOp[Op,X,Y,Boolean,Boolean,Boolean]", "kind" : "implicit def"}, {"label" : "FrScEOpIIB", "tail" : "(opv: BinOp[Op, Vec[Int], Int, Vec[Boolean]]): FrScEOp[Op, X, Y, Int, Int, Boolean]", "member" : "org.saddle.ops.BinOpFrame.FrScEOpIIB", "link" : "org\/saddle\/macros\/BinOps$.html#FrScEOpIIB[Op<:org.saddle.ops.ScalarOp,X,Y](implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Int],Int,org.saddle.Vec[Boolean]]):BinOpFrame.this.FrScEOp[Op,X,Y,Int,Int,Boolean]", "kind" : "implicit def"}, {"label" : "FrScEOpILB", "tail" : "(opv: BinOp[Op, Vec[Int], Long, Vec[Boolean]]): FrScEOp[Op, X, Y, Int, Long, Boolean]", "member" : "org.saddle.ops.BinOpFrame.FrScEOpILB", "link" : "org\/saddle\/macros\/BinOps$.html#FrScEOpILB[Op<:org.saddle.ops.ScalarOp,X,Y](implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Int],Long,org.saddle.Vec[Boolean]]):BinOpFrame.this.FrScEOp[Op,X,Y,Int,Long,Boolean]", "kind" : "implicit def"}, {"label" : "FrScEOpIDB", "tail" : "(opv: BinOp[Op, Vec[Int], Double, Vec[Boolean]]): FrScEOp[Op, X, Y, Int, Double, Boolean]", "member" : "org.saddle.ops.BinOpFrame.FrScEOpIDB", "link" : "org\/saddle\/macros\/BinOps$.html#FrScEOpIDB[Op<:org.saddle.ops.ScalarOp,X,Y](implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Int],Double,org.saddle.Vec[Boolean]]):BinOpFrame.this.FrScEOp[Op,X,Y,Int,Double,Boolean]", "kind" : "implicit def"}, {"label" : "FrScEOpLIB", "tail" : "(opv: BinOp[Op, Vec[Long], Int, Vec[Boolean]]): FrScEOp[Op, X, Y, Long, Int, Boolean]", "member" : "org.saddle.ops.BinOpFrame.FrScEOpLIB", "link" : "org\/saddle\/macros\/BinOps$.html#FrScEOpLIB[Op<:org.saddle.ops.ScalarOp,X,Y](implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Long],Int,org.saddle.Vec[Boolean]]):BinOpFrame.this.FrScEOp[Op,X,Y,Long,Int,Boolean]", "kind" : "implicit def"}, {"label" : "FrScEOpLLB", "tail" : "(opv: BinOp[Op, Vec[Long], Long, Vec[Boolean]]): FrScEOp[Op, X, Y, Long, Long, Boolean]", "member" : "org.saddle.ops.BinOpFrame.FrScEOpLLB", "link" : "org\/saddle\/macros\/BinOps$.html#FrScEOpLLB[Op<:org.saddle.ops.ScalarOp,X,Y](implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Long],Long,org.saddle.Vec[Boolean]]):BinOpFrame.this.FrScEOp[Op,X,Y,Long,Long,Boolean]", "kind" : "implicit def"}, {"label" : "FrScEOpLDB", "tail" : "(opv: BinOp[Op, Vec[Long], Double, Vec[Boolean]]): FrScEOp[Op, X, Y, Long, Double, Boolean]", "member" : "org.saddle.ops.BinOpFrame.FrScEOpLDB", "link" : "org\/saddle\/macros\/BinOps$.html#FrScEOpLDB[Op<:org.saddle.ops.ScalarOp,X,Y](implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Long],Double,org.saddle.Vec[Boolean]]):BinOpFrame.this.FrScEOp[Op,X,Y,Long,Double,Boolean]", "kind" : "implicit def"}, {"label" : "FrScEOpDIB", "tail" : "(opv: BinOp[Op, Vec[Double], Int, Vec[Boolean]]): FrScEOp[Op, X, Y, Double, Int, Boolean]", "member" : "org.saddle.ops.BinOpFrame.FrScEOpDIB", "link" : "org\/saddle\/macros\/BinOps$.html#FrScEOpDIB[Op<:org.saddle.ops.ScalarOp,X,Y](implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Double],Int,org.saddle.Vec[Boolean]]):BinOpFrame.this.FrScEOp[Op,X,Y,Double,Int,Boolean]", "kind" : "implicit def"}, {"label" : "FrScEOpDLB", "tail" : "(opv: BinOp[Op, Vec[Double], Long, Vec[Boolean]]): FrScEOp[Op, X, Y, Double, Long, Boolean]", "member" : "org.saddle.ops.BinOpFrame.FrScEOpDLB", "link" : "org\/saddle\/macros\/BinOps$.html#FrScEOpDLB[Op<:org.saddle.ops.ScalarOp,X,Y](implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Double],Long,org.saddle.Vec[Boolean]]):BinOpFrame.this.FrScEOp[Op,X,Y,Double,Long,Boolean]", "kind" : "implicit def"}, {"label" : "FrScEOpDDB", "tail" : "(opv: BinOp[Op, Vec[Double], Double, Vec[Boolean]]): FrScEOp[Op, X, Y, Double, Double, Boolean]", "member" : "org.saddle.ops.BinOpFrame.FrScEOpDDB", "link" : "org\/saddle\/macros\/BinOps$.html#FrScEOpDDB[Op<:org.saddle.ops.ScalarOp,X,Y](implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Double],Double,org.saddle.Vec[Boolean]]):BinOpFrame.this.FrScEOp[Op,X,Y,Double,Double,Boolean]", "kind" : "implicit def"}, {"label" : "FrScEOpIII", "tail" : "(opv: BinOp[Op, Vec[Int], Int, Vec[Int]]): FrScEOp[Op, X, Y, Int, Int, Int]", "member" : "org.saddle.ops.BinOpFrame.FrScEOpIII", "link" : "org\/saddle\/macros\/BinOps$.html#FrScEOpIII[Op<:org.saddle.ops.ScalarOp,X,Y](implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Int],Int,org.saddle.Vec[Int]]):BinOpFrame.this.FrScEOp[Op,X,Y,Int,Int,Int]", "kind" : "implicit def"}, {"label" : "FrScEOpILL", "tail" : "(opv: BinOp[Op, Vec[Int], Long, Vec[Long]]): FrScEOp[Op, X, Y, Int, Long, Long]", "member" : "org.saddle.ops.BinOpFrame.FrScEOpILL", "link" : "org\/saddle\/macros\/BinOps$.html#FrScEOpILL[Op<:org.saddle.ops.ScalarOp,X,Y](implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Int],Long,org.saddle.Vec[Long]]):BinOpFrame.this.FrScEOp[Op,X,Y,Int,Long,Long]", "kind" : "implicit def"}, {"label" : "FrScEOpIDD", "tail" : "(opv: BinOp[Op, Vec[Int], Double, Vec[Double]]): FrScEOp[Op, X, Y, Int, Double, Double]", "member" : "org.saddle.ops.BinOpFrame.FrScEOpIDD", "link" : "org\/saddle\/macros\/BinOps$.html#FrScEOpIDD[Op<:org.saddle.ops.ScalarOp,X,Y](implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Int],Double,org.saddle.Vec[Double]]):BinOpFrame.this.FrScEOp[Op,X,Y,Int,Double,Double]", "kind" : "implicit def"}, {"label" : "FrScEOpLIL", "tail" : "(opv: BinOp[Op, Vec[Long], Int, Vec[Long]]): FrScEOp[Op, X, Y, Long, Int, Long]", "member" : "org.saddle.ops.BinOpFrame.FrScEOpLIL", "link" : "org\/saddle\/macros\/BinOps$.html#FrScEOpLIL[Op<:org.saddle.ops.ScalarOp,X,Y](implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Long],Int,org.saddle.Vec[Long]]):BinOpFrame.this.FrScEOp[Op,X,Y,Long,Int,Long]", "kind" : "implicit def"}, {"label" : "FrScEOpLLL", "tail" : "(opv: BinOp[Op, Vec[Long], Long, Vec[Long]]): FrScEOp[Op, X, Y, Long, Long, Long]", "member" : "org.saddle.ops.BinOpFrame.FrScEOpLLL", "link" : "org\/saddle\/macros\/BinOps$.html#FrScEOpLLL[Op<:org.saddle.ops.ScalarOp,X,Y](implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Long],Long,org.saddle.Vec[Long]]):BinOpFrame.this.FrScEOp[Op,X,Y,Long,Long,Long]", "kind" : "implicit def"}, {"label" : "FrScEOpLDD", "tail" : "(opv: BinOp[Op, Vec[Long], Double, Vec[Double]]): FrScEOp[Op, X, Y, Long, Double, Double]", "member" : "org.saddle.ops.BinOpFrame.FrScEOpLDD", "link" : "org\/saddle\/macros\/BinOps$.html#FrScEOpLDD[Op<:org.saddle.ops.ScalarOp,X,Y](implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Long],Double,org.saddle.Vec[Double]]):BinOpFrame.this.FrScEOp[Op,X,Y,Long,Double,Double]", "kind" : "implicit def"}, {"label" : "FrScEOpDID", "tail" : "(opv: BinOp[Op, Vec[Double], Int, Vec[Double]]): FrScEOp[Op, X, Y, Double, Int, Double]", "member" : "org.saddle.ops.BinOpFrame.FrScEOpDID", "link" : "org\/saddle\/macros\/BinOps$.html#FrScEOpDID[Op<:org.saddle.ops.ScalarOp,X,Y](implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Double],Int,org.saddle.Vec[Double]]):BinOpFrame.this.FrScEOp[Op,X,Y,Double,Int,Double]", "kind" : "implicit def"}, {"label" : "FrScEOpDLD", "tail" : "(opv: BinOp[Op, Vec[Double], Long, Vec[Double]]): FrScEOp[Op, X, Y, Double, Long, Double]", "member" : "org.saddle.ops.BinOpFrame.FrScEOpDLD", "link" : "org\/saddle\/macros\/BinOps$.html#FrScEOpDLD[Op<:org.saddle.ops.ScalarOp,X,Y](implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Double],Long,org.saddle.Vec[Double]]):BinOpFrame.this.FrScEOp[Op,X,Y,Double,Long,Double]", "kind" : "implicit def"}, {"label" : "FrScEOpDDD", "tail" : "(opv: BinOp[Op, Vec[Double], Double, Vec[Double]]): FrScEOp[Op, X, Y, Double, Double, Double]", "member" : "org.saddle.ops.BinOpFrame.FrScEOpDDD", "link" : "org\/saddle\/macros\/BinOps$.html#FrScEOpDDD[Op<:org.saddle.ops.ScalarOp,X,Y](implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Double],Double,org.saddle.Vec[Double]]):BinOpFrame.this.FrScEOp[Op,X,Y,Double,Double,Double]", "kind" : "implicit def"}, {"label" : "vecVec_Copy_BB_Xor", "tail" : ": BinOp[XorOp, Vec[Boolean], Vec[Boolean], Vec[Boolean]]", "member" : "org.saddle.macros.BinOpVecVecCopy.vecVec_Copy_BB_Xor", "link" : "org\/saddle\/macros\/BinOps$.html#vecVec_Copy_BB_Xor:org.saddle.ops.BinOp[org.saddle.ops.XorOp,org.saddle.Vec[Boolean],org.saddle.Vec[Boolean],org.saddle.Vec[Boolean]]", "kind" : "implicit val"}, {"label" : "vecVec_Copy_BB_Or", "tail" : ": BinOp[OrOp, Vec[Boolean], Vec[Boolean], Vec[Boolean]]", "member" : "org.saddle.macros.BinOpVecVecCopy.vecVec_Copy_BB_Or", "link" : "org\/saddle\/macros\/BinOps$.html#vecVec_Copy_BB_Or:org.saddle.ops.BinOp[org.saddle.ops.OrOp,org.saddle.Vec[Boolean],org.saddle.Vec[Boolean],org.saddle.Vec[Boolean]]", "kind" : "implicit val"}, {"label" : "vecVec_Copy_BB_And", "tail" : ": BinOp[AndOp, Vec[Boolean], Vec[Boolean], Vec[Boolean]]", "member" : "org.saddle.macros.BinOpVecVecCopy.vecVec_Copy_BB_And", "link" : "org\/saddle\/macros\/BinOps$.html#vecVec_Copy_BB_And:org.saddle.ops.BinOp[org.saddle.ops.AndOp,org.saddle.Vec[Boolean],org.saddle.Vec[Boolean],org.saddle.Vec[Boolean]]", "kind" : "implicit val"}, {"label" : "vecVec_Copy_II_BitUshr", "tail" : ": BinOp[BitUShr, Vec[Int], Vec[Int], Vec[Int]]", "member" : "org.saddle.macros.BinOpVecVecCopy.vecVec_Copy_II_BitUshr", "link" : "org\/saddle\/macros\/BinOps$.html#vecVec_Copy_II_BitUshr:org.saddle.ops.BinOp[org.saddle.ops.BitUShr,org.saddle.Vec[Int],org.saddle.Vec[Int],org.saddle.Vec[Int]]", "kind" : "implicit val"}, {"label" : "vecVec_Copy_LI_BitUshr", "tail" : ": BinOp[BitUShr, Vec[Long], Vec[Int], Vec[Long]]", "member" : "org.saddle.macros.BinOpVecVecCopy.vecVec_Copy_LI_BitUshr", "link" : "org\/saddle\/macros\/BinOps$.html#vecVec_Copy_LI_BitUshr:org.saddle.ops.BinOp[org.saddle.ops.BitUShr,org.saddle.Vec[Long],org.saddle.Vec[Int],org.saddle.Vec[Long]]", "kind" : "implicit val"}, {"label" : "vecVec_Copy_LL_BitUshr", "tail" : ": BinOp[BitUShr, Vec[Long], Vec[Long], Vec[Long]]", "member" : "org.saddle.macros.BinOpVecVecCopy.vecVec_Copy_LL_BitUshr", "link" : "org\/saddle\/macros\/BinOps$.html#vecVec_Copy_LL_BitUshr:org.saddle.ops.BinOp[org.saddle.ops.BitUShr,org.saddle.Vec[Long],org.saddle.Vec[Long],org.saddle.Vec[Long]]", "kind" : "implicit val"}, {"label" : "vecVec_Copy_II_BitShr", "tail" : ": BinOp[BitShr, Vec[Int], Vec[Int], Vec[Int]]", "member" : "org.saddle.macros.BinOpVecVecCopy.vecVec_Copy_II_BitShr", "link" : "org\/saddle\/macros\/BinOps$.html#vecVec_Copy_II_BitShr:org.saddle.ops.BinOp[org.saddle.ops.BitShr,org.saddle.Vec[Int],org.saddle.Vec[Int],org.saddle.Vec[Int]]", "kind" : "implicit val"}, {"label" : "vecVec_Copy_LI_BitShr", "tail" : ": BinOp[BitShr, Vec[Long], Vec[Int], Vec[Long]]", "member" : "org.saddle.macros.BinOpVecVecCopy.vecVec_Copy_LI_BitShr", "link" : "org\/saddle\/macros\/BinOps$.html#vecVec_Copy_LI_BitShr:org.saddle.ops.BinOp[org.saddle.ops.BitShr,org.saddle.Vec[Long],org.saddle.Vec[Int],org.saddle.Vec[Long]]", "kind" : "implicit val"}, {"label" : "vecVec_Copy_LL_BitShr", "tail" : ": BinOp[BitShr, Vec[Long], Vec[Long], Vec[Long]]", "member" : "org.saddle.macros.BinOpVecVecCopy.vecVec_Copy_LL_BitShr", "link" : "org\/saddle\/macros\/BinOps$.html#vecVec_Copy_LL_BitShr:org.saddle.ops.BinOp[org.saddle.ops.BitShr,org.saddle.Vec[Long],org.saddle.Vec[Long],org.saddle.Vec[Long]]", "kind" : "implicit val"}, {"label" : "vecVec_Copy_II_BitShl", "tail" : ": BinOp[BitShl, Vec[Int], Vec[Int], Vec[Int]]", "member" : "org.saddle.macros.BinOpVecVecCopy.vecVec_Copy_II_BitShl", "link" : "org\/saddle\/macros\/BinOps$.html#vecVec_Copy_II_BitShl:org.saddle.ops.BinOp[org.saddle.ops.BitShl,org.saddle.Vec[Int],org.saddle.Vec[Int],org.saddle.Vec[Int]]", "kind" : "implicit val"}, {"label" : "vecVec_Copy_LI_BitShl", "tail" : ": BinOp[BitShl, Vec[Long], Vec[Int], Vec[Long]]", "member" : "org.saddle.macros.BinOpVecVecCopy.vecVec_Copy_LI_BitShl", "link" : "org\/saddle\/macros\/BinOps$.html#vecVec_Copy_LI_BitShl:org.saddle.ops.BinOp[org.saddle.ops.BitShl,org.saddle.Vec[Long],org.saddle.Vec[Int],org.saddle.Vec[Long]]", "kind" : "implicit val"}, {"label" : "vecVec_Copy_LL_BitShl", "tail" : ": BinOp[BitShl, Vec[Long], Vec[Long], Vec[Long]]", "member" : "org.saddle.macros.BinOpVecVecCopy.vecVec_Copy_LL_BitShl", "link" : "org\/saddle\/macros\/BinOps$.html#vecVec_Copy_LL_BitShl:org.saddle.ops.BinOp[org.saddle.ops.BitShl,org.saddle.Vec[Long],org.saddle.Vec[Long],org.saddle.Vec[Long]]", "kind" : "implicit val"}, {"label" : "vecVec_Copy_II_BitXor", "tail" : ": BinOp[BitXor, Vec[Int], Vec[Int], Vec[Int]]", "member" : "org.saddle.macros.BinOpVecVecCopy.vecVec_Copy_II_BitXor", "link" : "org\/saddle\/macros\/BinOps$.html#vecVec_Copy_II_BitXor:org.saddle.ops.BinOp[org.saddle.ops.BitXor,org.saddle.Vec[Int],org.saddle.Vec[Int],org.saddle.Vec[Int]]", "kind" : "implicit val"}, {"label" : "vecVec_Copy_LI_BitXor", "tail" : ": BinOp[BitXor, Vec[Long], Vec[Int], Vec[Long]]", "member" : "org.saddle.macros.BinOpVecVecCopy.vecVec_Copy_LI_BitXor", "link" : "org\/saddle\/macros\/BinOps$.html#vecVec_Copy_LI_BitXor:org.saddle.ops.BinOp[org.saddle.ops.BitXor,org.saddle.Vec[Long],org.saddle.Vec[Int],org.saddle.Vec[Long]]", "kind" : "implicit val"}, {"label" : "vecVec_Copy_LL_BitXor", "tail" : ": BinOp[BitXor, Vec[Long], Vec[Long], Vec[Long]]", "member" : "org.saddle.macros.BinOpVecVecCopy.vecVec_Copy_LL_BitXor", "link" : "org\/saddle\/macros\/BinOps$.html#vecVec_Copy_LL_BitXor:org.saddle.ops.BinOp[org.saddle.ops.BitXor,org.saddle.Vec[Long],org.saddle.Vec[Long],org.saddle.Vec[Long]]", "kind" : "implicit val"}, {"label" : "vecVec_Copy_II_BitOr", "tail" : ": BinOp[BitOr, Vec[Int], Vec[Int], Vec[Int]]", "member" : "org.saddle.macros.BinOpVecVecCopy.vecVec_Copy_II_BitOr", "link" : "org\/saddle\/macros\/BinOps$.html#vecVec_Copy_II_BitOr:org.saddle.ops.BinOp[org.saddle.ops.BitOr,org.saddle.Vec[Int],org.saddle.Vec[Int],org.saddle.Vec[Int]]", "kind" : "implicit val"}, {"label" : "vecVec_Copy_LI_BitOr", "tail" : ": BinOp[BitOr, Vec[Long], Vec[Int], Vec[Long]]", "member" : "org.saddle.macros.BinOpVecVecCopy.vecVec_Copy_LI_BitOr", "link" : "org\/saddle\/macros\/BinOps$.html#vecVec_Copy_LI_BitOr:org.saddle.ops.BinOp[org.saddle.ops.BitOr,org.saddle.Vec[Long],org.saddle.Vec[Int],org.saddle.Vec[Long]]", "kind" : "implicit val"}, {"label" : "vecVec_Copy_LL_BitOr", "tail" : ": BinOp[BitOr, Vec[Long], Vec[Long], Vec[Long]]", "member" : "org.saddle.macros.BinOpVecVecCopy.vecVec_Copy_LL_BitOr", "link" : "org\/saddle\/macros\/BinOps$.html#vecVec_Copy_LL_BitOr:org.saddle.ops.BinOp[org.saddle.ops.BitOr,org.saddle.Vec[Long],org.saddle.Vec[Long],org.saddle.Vec[Long]]", "kind" : "implicit val"}, {"label" : "vecVec_Copy_II_BitAnd", "tail" : ": BinOp[BitAnd, Vec[Int], Vec[Int], Vec[Int]]", "member" : "org.saddle.macros.BinOpVecVecCopy.vecVec_Copy_II_BitAnd", "link" : "org\/saddle\/macros\/BinOps$.html#vecVec_Copy_II_BitAnd:org.saddle.ops.BinOp[org.saddle.ops.BitAnd,org.saddle.Vec[Int],org.saddle.Vec[Int],org.saddle.Vec[Int]]", "kind" : "implicit val"}, {"label" : "vecVec_Copy_LI_BitAnd", "tail" : ": BinOp[BitAnd, Vec[Long], Vec[Int], Vec[Long]]", "member" : "org.saddle.macros.BinOpVecVecCopy.vecVec_Copy_LI_BitAnd", "link" : "org\/saddle\/macros\/BinOps$.html#vecVec_Copy_LI_BitAnd:org.saddle.ops.BinOp[org.saddle.ops.BitAnd,org.saddle.Vec[Long],org.saddle.Vec[Int],org.saddle.Vec[Long]]", "kind" : "implicit val"}, {"label" : "vecVec_Copy_LL_BitAnd", "tail" : ": BinOp[BitAnd, Vec[Long], Vec[Long], Vec[Long]]", "member" : "org.saddle.macros.BinOpVecVecCopy.vecVec_Copy_LL_BitAnd", "link" : "org\/saddle\/macros\/BinOps$.html#vecVec_Copy_LL_BitAnd:org.saddle.ops.BinOp[org.saddle.ops.BitAnd,org.saddle.Vec[Long],org.saddle.Vec[Long],org.saddle.Vec[Long]]", "kind" : "implicit val"}, {"label" : "vecVec_Copy_II_Mod", "tail" : ": BinOp[Mod, Vec[Int], Vec[Int], Vec[Int]]", "member" : "org.saddle.macros.BinOpVecVecCopy.vecVec_Copy_II_Mod", "link" : "org\/saddle\/macros\/BinOps$.html#vecVec_Copy_II_Mod:org.saddle.ops.BinOp[org.saddle.ops.Mod,org.saddle.Vec[Int],org.saddle.Vec[Int],org.saddle.Vec[Int]]", "kind" : "implicit val"}, {"label" : "vecVec_Copy_IL_Mod", "tail" : ": BinOp[Mod, Vec[Int], Vec[Long], Vec[Long]]", "member" : "org.saddle.macros.BinOpVecVecCopy.vecVec_Copy_IL_Mod", "link" : "org\/saddle\/macros\/BinOps$.html#vecVec_Copy_IL_Mod:org.saddle.ops.BinOp[org.saddle.ops.Mod,org.saddle.Vec[Int],org.saddle.Vec[Long],org.saddle.Vec[Long]]", "kind" : "implicit val"}, {"label" : "vecVec_Copy_LI_Mod", "tail" : ": BinOp[Mod, Vec[Long], Vec[Int], Vec[Long]]", "member" : "org.saddle.macros.BinOpVecVecCopy.vecVec_Copy_LI_Mod", "link" : "org\/saddle\/macros\/BinOps$.html#vecVec_Copy_LI_Mod:org.saddle.ops.BinOp[org.saddle.ops.Mod,org.saddle.Vec[Long],org.saddle.Vec[Int],org.saddle.Vec[Long]]", "kind" : "implicit val"}, {"label" : "vecVec_Copy_LL_Mod", "tail" : ": BinOp[Mod, Vec[Long], Vec[Long], Vec[Long]]", "member" : "org.saddle.macros.BinOpVecVecCopy.vecVec_Copy_LL_Mod", "link" : "org\/saddle\/macros\/BinOps$.html#vecVec_Copy_LL_Mod:org.saddle.ops.BinOp[org.saddle.ops.Mod,org.saddle.Vec[Long],org.saddle.Vec[Long],org.saddle.Vec[Long]]", "kind" : "implicit val"}, {"label" : "vecVec_Copy_ID_Mod", "tail" : ": BinOp[Mod, Vec[Int], Vec[Double], Vec[Double]]", "member" : "org.saddle.macros.BinOpVecVecCopy.vecVec_Copy_ID_Mod", "link" : "org\/saddle\/macros\/BinOps$.html#vecVec_Copy_ID_Mod:org.saddle.ops.BinOp[org.saddle.ops.Mod,org.saddle.Vec[Int],org.saddle.Vec[Double],org.saddle.Vec[Double]]", "kind" : "implicit val"}, {"label" : "vecVec_Copy_DI_Mod", "tail" : ": BinOp[Mod, Vec[Double], Vec[Int], Vec[Double]]", "member" : "org.saddle.macros.BinOpVecVecCopy.vecVec_Copy_DI_Mod", "link" : "org\/saddle\/macros\/BinOps$.html#vecVec_Copy_DI_Mod:org.saddle.ops.BinOp[org.saddle.ops.Mod,org.saddle.Vec[Double],org.saddle.Vec[Int],org.saddle.Vec[Double]]", "kind" : "implicit val"}, {"label" : "vecVec_Copy_DL_Mod", "tail" : ": BinOp[Mod, Vec[Double], Vec[Long], Vec[Double]]", "member" : "org.saddle.macros.BinOpVecVecCopy.vecVec_Copy_DL_Mod", "link" : "org\/saddle\/macros\/BinOps$.html#vecVec_Copy_DL_Mod:org.saddle.ops.BinOp[org.saddle.ops.Mod,org.saddle.Vec[Double],org.saddle.Vec[Long],org.saddle.Vec[Double]]", "kind" : "implicit val"}, {"label" : "vecVec_Copy_LD_Mod", "tail" : ": BinOp[Mod, Vec[Long], Vec[Double], Vec[Double]]", "member" : "org.saddle.macros.BinOpVecVecCopy.vecVec_Copy_LD_Mod", "link" : "org\/saddle\/macros\/BinOps$.html#vecVec_Copy_LD_Mod:org.saddle.ops.BinOp[org.saddle.ops.Mod,org.saddle.Vec[Long],org.saddle.Vec[Double],org.saddle.Vec[Double]]", "kind" : "implicit val"}, {"label" : "vecVec_Copy_DD_Mod", "tail" : ": BinOp[Mod, Vec[Double], Vec[Double], Vec[Double]]", "member" : "org.saddle.macros.BinOpVecVecCopy.vecVec_Copy_DD_Mod", "link" : "org\/saddle\/macros\/BinOps$.html#vecVec_Copy_DD_Mod:org.saddle.ops.BinOp[org.saddle.ops.Mod,org.saddle.Vec[Double],org.saddle.Vec[Double],org.saddle.Vec[Double]]", "kind" : "implicit val"}, {"label" : "vecVec_Copy_II_Div", "tail" : ": BinOp[Divide, Vec[Int], Vec[Int], Vec[Int]]", "member" : "org.saddle.macros.BinOpVecVecCopy.vecVec_Copy_II_Div", "link" : "org\/saddle\/macros\/BinOps$.html#vecVec_Copy_II_Div:org.saddle.ops.BinOp[org.saddle.ops.Divide,org.saddle.Vec[Int],org.saddle.Vec[Int],org.saddle.Vec[Int]]", "kind" : "implicit val"}, {"label" : "vecVec_Copy_IL_Div", "tail" : ": BinOp[Divide, Vec[Int], Vec[Long], Vec[Long]]", "member" : "org.saddle.macros.BinOpVecVecCopy.vecVec_Copy_IL_Div", "link" : "org\/saddle\/macros\/BinOps$.html#vecVec_Copy_IL_Div:org.saddle.ops.BinOp[org.saddle.ops.Divide,org.saddle.Vec[Int],org.saddle.Vec[Long],org.saddle.Vec[Long]]", "kind" : "implicit val"}, {"label" : "vecVec_Copy_LI_Div", "tail" : ": BinOp[Divide, Vec[Long], Vec[Int], Vec[Long]]", "member" : "org.saddle.macros.BinOpVecVecCopy.vecVec_Copy_LI_Div", "link" : "org\/saddle\/macros\/BinOps$.html#vecVec_Copy_LI_Div:org.saddle.ops.BinOp[org.saddle.ops.Divide,org.saddle.Vec[Long],org.saddle.Vec[Int],org.saddle.Vec[Long]]", "kind" : "implicit val"}, {"label" : "vecVec_Copy_LL_Div", "tail" : ": BinOp[Divide, Vec[Long], Vec[Long], Vec[Long]]", "member" : "org.saddle.macros.BinOpVecVecCopy.vecVec_Copy_LL_Div", "link" : "org\/saddle\/macros\/BinOps$.html#vecVec_Copy_LL_Div:org.saddle.ops.BinOp[org.saddle.ops.Divide,org.saddle.Vec[Long],org.saddle.Vec[Long],org.saddle.Vec[Long]]", "kind" : "implicit val"}, {"label" : "vecVec_Copy_ID_Div", "tail" : ": BinOp[Divide, Vec[Int], Vec[Double], Vec[Double]]", "member" : "org.saddle.macros.BinOpVecVecCopy.vecVec_Copy_ID_Div", "link" : "org\/saddle\/macros\/BinOps$.html#vecVec_Copy_ID_Div:org.saddle.ops.BinOp[org.saddle.ops.Divide,org.saddle.Vec[Int],org.saddle.Vec[Double],org.saddle.Vec[Double]]", "kind" : "implicit val"}, {"label" : "vecVec_Copy_DI_Div", "tail" : ": BinOp[Divide, Vec[Double], Vec[Int], Vec[Double]]", "member" : "org.saddle.macros.BinOpVecVecCopy.vecVec_Copy_DI_Div", "link" : "org\/saddle\/macros\/BinOps$.html#vecVec_Copy_DI_Div:org.saddle.ops.BinOp[org.saddle.ops.Divide,org.saddle.Vec[Double],org.saddle.Vec[Int],org.saddle.Vec[Double]]", "kind" : "implicit val"}, {"label" : "vecVec_Copy_DL_Div", "tail" : ": BinOp[Divide, Vec[Double], Vec[Long], Vec[Double]]", "member" : "org.saddle.macros.BinOpVecVecCopy.vecVec_Copy_DL_Div", "link" : "org\/saddle\/macros\/BinOps$.html#vecVec_Copy_DL_Div:org.saddle.ops.BinOp[org.saddle.ops.Divide,org.saddle.Vec[Double],org.saddle.Vec[Long],org.saddle.Vec[Double]]", "kind" : "implicit val"}, {"label" : "vecVec_Copy_LD_Div", "tail" : ": BinOp[Divide, Vec[Long], Vec[Double], Vec[Double]]", "member" : "org.saddle.macros.BinOpVecVecCopy.vecVec_Copy_LD_Div", "link" : "org\/saddle\/macros\/BinOps$.html#vecVec_Copy_LD_Div:org.saddle.ops.BinOp[org.saddle.ops.Divide,org.saddle.Vec[Long],org.saddle.Vec[Double],org.saddle.Vec[Double]]", "kind" : "implicit val"}, {"label" : "vecVec_Copy_DD_Div", "tail" : ": BinOp[Divide, Vec[Double], Vec[Double], Vec[Double]]", "member" : "org.saddle.macros.BinOpVecVecCopy.vecVec_Copy_DD_Div", "link" : "org\/saddle\/macros\/BinOps$.html#vecVec_Copy_DD_Div:org.saddle.ops.BinOp[org.saddle.ops.Divide,org.saddle.Vec[Double],org.saddle.Vec[Double],org.saddle.Vec[Double]]", "kind" : "implicit val"}, {"label" : "vecVec_Copy_II_Mult", "tail" : ": BinOp[Multiply, Vec[Int], Vec[Int], Vec[Int]]", "member" : "org.saddle.macros.BinOpVecVecCopy.vecVec_Copy_II_Mult", "link" : "org\/saddle\/macros\/BinOps$.html#vecVec_Copy_II_Mult:org.saddle.ops.BinOp[org.saddle.ops.Multiply,org.saddle.Vec[Int],org.saddle.Vec[Int],org.saddle.Vec[Int]]", "kind" : "implicit val"}, {"label" : "vecVec_Copy_IL_Mult", "tail" : ": BinOp[Multiply, Vec[Int], Vec[Long], Vec[Long]]", "member" : "org.saddle.macros.BinOpVecVecCopy.vecVec_Copy_IL_Mult", "link" : "org\/saddle\/macros\/BinOps$.html#vecVec_Copy_IL_Mult:org.saddle.ops.BinOp[org.saddle.ops.Multiply,org.saddle.Vec[Int],org.saddle.Vec[Long],org.saddle.Vec[Long]]", "kind" : "implicit val"}, {"label" : "vecVec_Copy_LI_Mult", "tail" : ": BinOp[Multiply, Vec[Long], Vec[Int], Vec[Long]]", "member" : "org.saddle.macros.BinOpVecVecCopy.vecVec_Copy_LI_Mult", "link" : "org\/saddle\/macros\/BinOps$.html#vecVec_Copy_LI_Mult:org.saddle.ops.BinOp[org.saddle.ops.Multiply,org.saddle.Vec[Long],org.saddle.Vec[Int],org.saddle.Vec[Long]]", "kind" : "implicit val"}, {"label" : "vecVec_Copy_LL_Mult", "tail" : ": BinOp[Multiply, Vec[Long], Vec[Long], Vec[Long]]", "member" : "org.saddle.macros.BinOpVecVecCopy.vecVec_Copy_LL_Mult", "link" : "org\/saddle\/macros\/BinOps$.html#vecVec_Copy_LL_Mult:org.saddle.ops.BinOp[org.saddle.ops.Multiply,org.saddle.Vec[Long],org.saddle.Vec[Long],org.saddle.Vec[Long]]", "kind" : "implicit val"}, {"label" : "vecVec_Copy_ID_Mult", "tail" : ": BinOp[Multiply, Vec[Int], Vec[Double], Vec[Double]]", "member" : "org.saddle.macros.BinOpVecVecCopy.vecVec_Copy_ID_Mult", "link" : "org\/saddle\/macros\/BinOps$.html#vecVec_Copy_ID_Mult:org.saddle.ops.BinOp[org.saddle.ops.Multiply,org.saddle.Vec[Int],org.saddle.Vec[Double],org.saddle.Vec[Double]]", "kind" : "implicit val"}, {"label" : "vecVec_Copy_DI_Mult", "tail" : ": BinOp[Multiply, Vec[Double], Vec[Int], Vec[Double]]", "member" : "org.saddle.macros.BinOpVecVecCopy.vecVec_Copy_DI_Mult", "link" : "org\/saddle\/macros\/BinOps$.html#vecVec_Copy_DI_Mult:org.saddle.ops.BinOp[org.saddle.ops.Multiply,org.saddle.Vec[Double],org.saddle.Vec[Int],org.saddle.Vec[Double]]", "kind" : "implicit val"}, {"label" : "vecVec_Copy_DL_Mult", "tail" : ": BinOp[Multiply, Vec[Double], Vec[Long], Vec[Double]]", "member" : "org.saddle.macros.BinOpVecVecCopy.vecVec_Copy_DL_Mult", "link" : "org\/saddle\/macros\/BinOps$.html#vecVec_Copy_DL_Mult:org.saddle.ops.BinOp[org.saddle.ops.Multiply,org.saddle.Vec[Double],org.saddle.Vec[Long],org.saddle.Vec[Double]]", "kind" : "implicit val"}, {"label" : "vecVec_Copy_LD_Mult", "tail" : ": BinOp[Multiply, Vec[Long], Vec[Double], Vec[Double]]", "member" : "org.saddle.macros.BinOpVecVecCopy.vecVec_Copy_LD_Mult", "link" : "org\/saddle\/macros\/BinOps$.html#vecVec_Copy_LD_Mult:org.saddle.ops.BinOp[org.saddle.ops.Multiply,org.saddle.Vec[Long],org.saddle.Vec[Double],org.saddle.Vec[Double]]", "kind" : "implicit val"}, {"label" : "vecVec_Copy_DD_Mult", "tail" : ": BinOp[Multiply, Vec[Double], Vec[Double], Vec[Double]]", "member" : "org.saddle.macros.BinOpVecVecCopy.vecVec_Copy_DD_Mult", "link" : "org\/saddle\/macros\/BinOps$.html#vecVec_Copy_DD_Mult:org.saddle.ops.BinOp[org.saddle.ops.Multiply,org.saddle.Vec[Double],org.saddle.Vec[Double],org.saddle.Vec[Double]]", "kind" : "implicit val"}, {"label" : "vecVec_Copy_II_Sub", "tail" : ": BinOp[Subtract, Vec[Int], Vec[Int], Vec[Int]]", "member" : "org.saddle.macros.BinOpVecVecCopy.vecVec_Copy_II_Sub", "link" : "org\/saddle\/macros\/BinOps$.html#vecVec_Copy_II_Sub:org.saddle.ops.BinOp[org.saddle.ops.Subtract,org.saddle.Vec[Int],org.saddle.Vec[Int],org.saddle.Vec[Int]]", "kind" : "implicit val"}, {"label" : "vecVec_Copy_IL_Sub", "tail" : ": BinOp[Subtract, Vec[Int], Vec[Long], Vec[Long]]", "member" : "org.saddle.macros.BinOpVecVecCopy.vecVec_Copy_IL_Sub", "link" : "org\/saddle\/macros\/BinOps$.html#vecVec_Copy_IL_Sub:org.saddle.ops.BinOp[org.saddle.ops.Subtract,org.saddle.Vec[Int],org.saddle.Vec[Long],org.saddle.Vec[Long]]", "kind" : "implicit val"}, {"label" : "vecVec_Copy_LI_Sub", "tail" : ": BinOp[Subtract, Vec[Long], Vec[Int], Vec[Long]]", "member" : "org.saddle.macros.BinOpVecVecCopy.vecVec_Copy_LI_Sub", "link" : "org\/saddle\/macros\/BinOps$.html#vecVec_Copy_LI_Sub:org.saddle.ops.BinOp[org.saddle.ops.Subtract,org.saddle.Vec[Long],org.saddle.Vec[Int],org.saddle.Vec[Long]]", "kind" : "implicit val"}, {"label" : "vecVec_Copy_LL_Sub", "tail" : ": BinOp[Subtract, Vec[Long], Vec[Long], Vec[Long]]", "member" : "org.saddle.macros.BinOpVecVecCopy.vecVec_Copy_LL_Sub", "link" : "org\/saddle\/macros\/BinOps$.html#vecVec_Copy_LL_Sub:org.saddle.ops.BinOp[org.saddle.ops.Subtract,org.saddle.Vec[Long],org.saddle.Vec[Long],org.saddle.Vec[Long]]", "kind" : "implicit val"}, {"label" : "vecVec_Copy_ID_Sub", "tail" : ": BinOp[Subtract, Vec[Int], Vec[Double], Vec[Double]]", "member" : "org.saddle.macros.BinOpVecVecCopy.vecVec_Copy_ID_Sub", "link" : "org\/saddle\/macros\/BinOps$.html#vecVec_Copy_ID_Sub:org.saddle.ops.BinOp[org.saddle.ops.Subtract,org.saddle.Vec[Int],org.saddle.Vec[Double],org.saddle.Vec[Double]]", "kind" : "implicit val"}, {"label" : "vecVec_Copy_DI_Sub", "tail" : ": BinOp[Subtract, Vec[Double], Vec[Int], Vec[Double]]", "member" : "org.saddle.macros.BinOpVecVecCopy.vecVec_Copy_DI_Sub", "link" : "org\/saddle\/macros\/BinOps$.html#vecVec_Copy_DI_Sub:org.saddle.ops.BinOp[org.saddle.ops.Subtract,org.saddle.Vec[Double],org.saddle.Vec[Int],org.saddle.Vec[Double]]", "kind" : "implicit val"}, {"label" : "vecVec_Copy_DL_Sub", "tail" : ": BinOp[Subtract, Vec[Double], Vec[Long], Vec[Double]]", "member" : "org.saddle.macros.BinOpVecVecCopy.vecVec_Copy_DL_Sub", "link" : "org\/saddle\/macros\/BinOps$.html#vecVec_Copy_DL_Sub:org.saddle.ops.BinOp[org.saddle.ops.Subtract,org.saddle.Vec[Double],org.saddle.Vec[Long],org.saddle.Vec[Double]]", "kind" : "implicit val"}, {"label" : "vecVec_Copy_LD_Sub", "tail" : ": BinOp[Subtract, Vec[Long], Vec[Double], Vec[Double]]", "member" : "org.saddle.macros.BinOpVecVecCopy.vecVec_Copy_LD_Sub", "link" : "org\/saddle\/macros\/BinOps$.html#vecVec_Copy_LD_Sub:org.saddle.ops.BinOp[org.saddle.ops.Subtract,org.saddle.Vec[Long],org.saddle.Vec[Double],org.saddle.Vec[Double]]", "kind" : "implicit val"}, {"label" : "vecVec_Copy_DD_Sub", "tail" : ": BinOp[Subtract, Vec[Double], Vec[Double], Vec[Double]]", "member" : "org.saddle.macros.BinOpVecVecCopy.vecVec_Copy_DD_Sub", "link" : "org\/saddle\/macros\/BinOps$.html#vecVec_Copy_DD_Sub:org.saddle.ops.BinOp[org.saddle.ops.Subtract,org.saddle.Vec[Double],org.saddle.Vec[Double],org.saddle.Vec[Double]]", "kind" : "implicit val"}, {"label" : "vecVec_Copy_II_Power", "tail" : ": BinOp[Power, Vec[Int], Vec[Int], Vec[Int]]", "member" : "org.saddle.macros.BinOpVecVecCopy.vecVec_Copy_II_Power", "link" : "org\/saddle\/macros\/BinOps$.html#vecVec_Copy_II_Power:org.saddle.ops.BinOp[org.saddle.ops.Power,org.saddle.Vec[Int],org.saddle.Vec[Int],org.saddle.Vec[Int]]", "kind" : "implicit val"}, {"label" : "vecVec_Copy_IL_Power", "tail" : ": BinOp[Power, Vec[Int], Vec[Long], Vec[Long]]", "member" : "org.saddle.macros.BinOpVecVecCopy.vecVec_Copy_IL_Power", "link" : "org\/saddle\/macros\/BinOps$.html#vecVec_Copy_IL_Power:org.saddle.ops.BinOp[org.saddle.ops.Power,org.saddle.Vec[Int],org.saddle.Vec[Long],org.saddle.Vec[Long]]", "kind" : "implicit val"}, {"label" : "vecVec_Copy_LI_Power", "tail" : ": BinOp[Power, Vec[Long], Vec[Int], Vec[Long]]", "member" : "org.saddle.macros.BinOpVecVecCopy.vecVec_Copy_LI_Power", "link" : "org\/saddle\/macros\/BinOps$.html#vecVec_Copy_LI_Power:org.saddle.ops.BinOp[org.saddle.ops.Power,org.saddle.Vec[Long],org.saddle.Vec[Int],org.saddle.Vec[Long]]", "kind" : "implicit val"}, {"label" : "vecVec_Copy_LL_Power", "tail" : ": BinOp[Power, Vec[Long], Vec[Long], Vec[Long]]", "member" : "org.saddle.macros.BinOpVecVecCopy.vecVec_Copy_LL_Power", "link" : "org\/saddle\/macros\/BinOps$.html#vecVec_Copy_LL_Power:org.saddle.ops.BinOp[org.saddle.ops.Power,org.saddle.Vec[Long],org.saddle.Vec[Long],org.saddle.Vec[Long]]", "kind" : "implicit val"}, {"label" : "vecVec_Copy_ID_Power", "tail" : ": BinOp[Power, Vec[Int], Vec[Double], Vec[Double]]", "member" : "org.saddle.macros.BinOpVecVecCopy.vecVec_Copy_ID_Power", "link" : "org\/saddle\/macros\/BinOps$.html#vecVec_Copy_ID_Power:org.saddle.ops.BinOp[org.saddle.ops.Power,org.saddle.Vec[Int],org.saddle.Vec[Double],org.saddle.Vec[Double]]", "kind" : "implicit val"}, {"label" : "vecVec_Copy_DI_Power", "tail" : ": BinOp[Power, Vec[Double], Vec[Int], Vec[Double]]", "member" : "org.saddle.macros.BinOpVecVecCopy.vecVec_Copy_DI_Power", "link" : "org\/saddle\/macros\/BinOps$.html#vecVec_Copy_DI_Power:org.saddle.ops.BinOp[org.saddle.ops.Power,org.saddle.Vec[Double],org.saddle.Vec[Int],org.saddle.Vec[Double]]", "kind" : "implicit val"}, {"label" : "vecVec_Copy_DL_Power", "tail" : ": BinOp[Power, Vec[Double], Vec[Long], Vec[Double]]", "member" : "org.saddle.macros.BinOpVecVecCopy.vecVec_Copy_DL_Power", "link" : "org\/saddle\/macros\/BinOps$.html#vecVec_Copy_DL_Power:org.saddle.ops.BinOp[org.saddle.ops.Power,org.saddle.Vec[Double],org.saddle.Vec[Long],org.saddle.Vec[Double]]", "kind" : "implicit val"}, {"label" : "vecVec_Copy_LD_Power", "tail" : ": BinOp[Power, Vec[Long], Vec[Double], Vec[Double]]", "member" : "org.saddle.macros.BinOpVecVecCopy.vecVec_Copy_LD_Power", "link" : "org\/saddle\/macros\/BinOps$.html#vecVec_Copy_LD_Power:org.saddle.ops.BinOp[org.saddle.ops.Power,org.saddle.Vec[Long],org.saddle.Vec[Double],org.saddle.Vec[Double]]", "kind" : "implicit val"}, {"label" : "vecVec_Copy_DD_Power", "tail" : ": BinOp[Power, Vec[Double], Vec[Double], Vec[Double]]", "member" : "org.saddle.macros.BinOpVecVecCopy.vecVec_Copy_DD_Power", "link" : "org\/saddle\/macros\/BinOps$.html#vecVec_Copy_DD_Power:org.saddle.ops.BinOp[org.saddle.ops.Power,org.saddle.Vec[Double],org.saddle.Vec[Double],org.saddle.Vec[Double]]", "kind" : "implicit val"}, {"label" : "vecVec_Copy_II_Add", "tail" : ": BinOp[Add, Vec[Int], Vec[Int], Vec[Int]]", "member" : "org.saddle.macros.BinOpVecVecCopy.vecVec_Copy_II_Add", "link" : "org\/saddle\/macros\/BinOps$.html#vecVec_Copy_II_Add:org.saddle.ops.BinOp[org.saddle.ops.Add,org.saddle.Vec[Int],org.saddle.Vec[Int],org.saddle.Vec[Int]]", "kind" : "implicit val"}, {"label" : "vecVec_Copy_IL_Add", "tail" : ": BinOp[Add, Vec[Int], Vec[Long], Vec[Long]]", "member" : "org.saddle.macros.BinOpVecVecCopy.vecVec_Copy_IL_Add", "link" : "org\/saddle\/macros\/BinOps$.html#vecVec_Copy_IL_Add:org.saddle.ops.BinOp[org.saddle.ops.Add,org.saddle.Vec[Int],org.saddle.Vec[Long],org.saddle.Vec[Long]]", "kind" : "implicit val"}, {"label" : "vecVec_Copy_LI_Add", "tail" : ": BinOp[Add, Vec[Long], Vec[Int], Vec[Long]]", "member" : "org.saddle.macros.BinOpVecVecCopy.vecVec_Copy_LI_Add", "link" : "org\/saddle\/macros\/BinOps$.html#vecVec_Copy_LI_Add:org.saddle.ops.BinOp[org.saddle.ops.Add,org.saddle.Vec[Long],org.saddle.Vec[Int],org.saddle.Vec[Long]]", "kind" : "implicit val"}, {"label" : "vecVec_Copy_LL_Add", "tail" : ": BinOp[Add, Vec[Long], Vec[Long], Vec[Long]]", "member" : "org.saddle.macros.BinOpVecVecCopy.vecVec_Copy_LL_Add", "link" : "org\/saddle\/macros\/BinOps$.html#vecVec_Copy_LL_Add:org.saddle.ops.BinOp[org.saddle.ops.Add,org.saddle.Vec[Long],org.saddle.Vec[Long],org.saddle.Vec[Long]]", "kind" : "implicit val"}, {"label" : "vecVec_Copy_ID_Add", "tail" : ": BinOp[Add, Vec[Int], Vec[Double], Vec[Double]]", "member" : "org.saddle.macros.BinOpVecVecCopy.vecVec_Copy_ID_Add", "link" : "org\/saddle\/macros\/BinOps$.html#vecVec_Copy_ID_Add:org.saddle.ops.BinOp[org.saddle.ops.Add,org.saddle.Vec[Int],org.saddle.Vec[Double],org.saddle.Vec[Double]]", "kind" : "implicit val"}, {"label" : "vecVec_Copy_DI_Add", "tail" : ": BinOp[Add, Vec[Double], Vec[Int], Vec[Double]]", "member" : "org.saddle.macros.BinOpVecVecCopy.vecVec_Copy_DI_Add", "link" : "org\/saddle\/macros\/BinOps$.html#vecVec_Copy_DI_Add:org.saddle.ops.BinOp[org.saddle.ops.Add,org.saddle.Vec[Double],org.saddle.Vec[Int],org.saddle.Vec[Double]]", "kind" : "implicit val"}, {"label" : "vecVec_Copy_DL_Add", "tail" : ": BinOp[Add, Vec[Double], Vec[Long], Vec[Double]]", "member" : "org.saddle.macros.BinOpVecVecCopy.vecVec_Copy_DL_Add", "link" : "org\/saddle\/macros\/BinOps$.html#vecVec_Copy_DL_Add:org.saddle.ops.BinOp[org.saddle.ops.Add,org.saddle.Vec[Double],org.saddle.Vec[Long],org.saddle.Vec[Double]]", "kind" : "implicit val"}, {"label" : "vecVec_Copy_LD_Add", "tail" : ": BinOp[Add, Vec[Long], Vec[Double], Vec[Double]]", "member" : "org.saddle.macros.BinOpVecVecCopy.vecVec_Copy_LD_Add", "link" : "org\/saddle\/macros\/BinOps$.html#vecVec_Copy_LD_Add:org.saddle.ops.BinOp[org.saddle.ops.Add,org.saddle.Vec[Long],org.saddle.Vec[Double],org.saddle.Vec[Double]]", "kind" : "implicit val"}, {"label" : "vecVec_Copy_DD_Add", "tail" : ": BinOp[Add, Vec[Double], Vec[Double], Vec[Double]]", "member" : "org.saddle.macros.BinOpVecVecCopy.vecVec_Copy_DD_Add", "link" : "org\/saddle\/macros\/BinOps$.html#vecVec_Copy_DD_Add:org.saddle.ops.BinOp[org.saddle.ops.Add,org.saddle.Vec[Double],org.saddle.Vec[Double],org.saddle.Vec[Double]]", "kind" : "implicit val"}, {"label" : "vecSclr_Copy_BB_Xor", "tail" : ": BinOp[XorOp, Vec[Boolean], Boolean, Vec[Boolean]]", "member" : "org.saddle.macros.BinOpVecCopy.vecSclr_Copy_BB_Xor", "link" : "org\/saddle\/macros\/BinOps$.html#vecSclr_Copy_BB_Xor:org.saddle.ops.BinOp[org.saddle.ops.XorOp,org.saddle.Vec[Boolean],Boolean,org.saddle.Vec[Boolean]]", "kind" : "implicit val"}, {"label" : "vecSclr_Copy_BB_Or", "tail" : ": BinOp[OrOp, Vec[Boolean], Boolean, Vec[Boolean]]", "member" : "org.saddle.macros.BinOpVecCopy.vecSclr_Copy_BB_Or", "link" : "org\/saddle\/macros\/BinOps$.html#vecSclr_Copy_BB_Or:org.saddle.ops.BinOp[org.saddle.ops.OrOp,org.saddle.Vec[Boolean],Boolean,org.saddle.Vec[Boolean]]", "kind" : "implicit val"}, {"label" : "vecSclr_Copy_BB_And", "tail" : ": BinOp[AndOp, Vec[Boolean], Boolean, Vec[Boolean]]", "member" : "org.saddle.macros.BinOpVecCopy.vecSclr_Copy_BB_And", "link" : "org\/saddle\/macros\/BinOps$.html#vecSclr_Copy_BB_And:org.saddle.ops.BinOp[org.saddle.ops.AndOp,org.saddle.Vec[Boolean],Boolean,org.saddle.Vec[Boolean]]", "kind" : "implicit val"}, {"label" : "vecSclr_Copy_BB_EQ", "tail" : ": BinOp[EqOp, Vec[Boolean], Boolean, Vec[Boolean]]", "member" : "org.saddle.macros.BinOpVecCopy.vecSclr_Copy_BB_EQ", "link" : "org\/saddle\/macros\/BinOps$.html#vecSclr_Copy_BB_EQ:org.saddle.ops.BinOp[org.saddle.ops.EqOp,org.saddle.Vec[Boolean],Boolean,org.saddle.Vec[Boolean]]", "kind" : "implicit val"}, {"label" : "vecSclr_Copy_II_EQ", "tail" : ": BinOp[EqOp, Vec[Int], Int, Vec[Boolean]]", "member" : "org.saddle.macros.BinOpVecCopy.vecSclr_Copy_II_EQ", "link" : "org\/saddle\/macros\/BinOps$.html#vecSclr_Copy_II_EQ:org.saddle.ops.BinOp[org.saddle.ops.EqOp,org.saddle.Vec[Int],Int,org.saddle.Vec[Boolean]]", "kind" : "implicit val"}, {"label" : "vecSclr_Copy_ID_EQ", "tail" : ": BinOp[EqOp, Vec[Int], Double, Vec[Boolean]]", "member" : "org.saddle.macros.BinOpVecCopy.vecSclr_Copy_ID_EQ", "link" : "org\/saddle\/macros\/BinOps$.html#vecSclr_Copy_ID_EQ:org.saddle.ops.BinOp[org.saddle.ops.EqOp,org.saddle.Vec[Int],Double,org.saddle.Vec[Boolean]]", "kind" : "implicit val"}, {"label" : "vecSclr_Copy_LI_EQ", "tail" : ": BinOp[EqOp, Vec[Long], Int, Vec[Boolean]]", "member" : "org.saddle.macros.BinOpVecCopy.vecSclr_Copy_LI_EQ", "link" : "org\/saddle\/macros\/BinOps$.html#vecSclr_Copy_LI_EQ:org.saddle.ops.BinOp[org.saddle.ops.EqOp,org.saddle.Vec[Long],Int,org.saddle.Vec[Boolean]]", "kind" : "implicit val"}, {"label" : "vecSclr_Copy_LL_EQ", "tail" : ": BinOp[EqOp, Vec[Long], Long, Vec[Boolean]]", "member" : "org.saddle.macros.BinOpVecCopy.vecSclr_Copy_LL_EQ", "link" : "org\/saddle\/macros\/BinOps$.html#vecSclr_Copy_LL_EQ:org.saddle.ops.BinOp[org.saddle.ops.EqOp,org.saddle.Vec[Long],Long,org.saddle.Vec[Boolean]]", "kind" : "implicit val"}, {"label" : "vecSclr_Copy_LD_EQ", "tail" : ": BinOp[EqOp, Vec[Long], Double, Vec[Boolean]]", "member" : "org.saddle.macros.BinOpVecCopy.vecSclr_Copy_LD_EQ", "link" : "org\/saddle\/macros\/BinOps$.html#vecSclr_Copy_LD_EQ:org.saddle.ops.BinOp[org.saddle.ops.EqOp,org.saddle.Vec[Long],Double,org.saddle.Vec[Boolean]]", "kind" : "implicit val"}, {"label" : "vecSclr_Copy_DI_EQ", "tail" : ": BinOp[EqOp, Vec[Double], Int, Vec[Boolean]]", "member" : "org.saddle.macros.BinOpVecCopy.vecSclr_Copy_DI_EQ", "link" : "org\/saddle\/macros\/BinOps$.html#vecSclr_Copy_DI_EQ:org.saddle.ops.BinOp[org.saddle.ops.EqOp,org.saddle.Vec[Double],Int,org.saddle.Vec[Boolean]]", "kind" : "implicit val"}, {"label" : "vecSclr_Copy_DL_EQ", "tail" : ": BinOp[EqOp, Vec[Double], Long, Vec[Boolean]]", "member" : "org.saddle.macros.BinOpVecCopy.vecSclr_Copy_DL_EQ", "link" : "org\/saddle\/macros\/BinOps$.html#vecSclr_Copy_DL_EQ:org.saddle.ops.BinOp[org.saddle.ops.EqOp,org.saddle.Vec[Double],Long,org.saddle.Vec[Boolean]]", "kind" : "implicit val"}, {"label" : "vecSclr_Copy_DD_EQ", "tail" : ": BinOp[EqOp, Vec[Double], Double, Vec[Boolean]]", "member" : "org.saddle.macros.BinOpVecCopy.vecSclr_Copy_DD_EQ", "link" : "org\/saddle\/macros\/BinOps$.html#vecSclr_Copy_DD_EQ:org.saddle.ops.BinOp[org.saddle.ops.EqOp,org.saddle.Vec[Double],Double,org.saddle.Vec[Boolean]]", "kind" : "implicit val"}, {"label" : "vecSclr_Copy_BB_NEQ", "tail" : ": BinOp[NeqOp, Vec[Boolean], Boolean, Vec[Boolean]]", "member" : "org.saddle.macros.BinOpVecCopy.vecSclr_Copy_BB_NEQ", "link" : "org\/saddle\/macros\/BinOps$.html#vecSclr_Copy_BB_NEQ:org.saddle.ops.BinOp[org.saddle.ops.NeqOp,org.saddle.Vec[Boolean],Boolean,org.saddle.Vec[Boolean]]", "kind" : "implicit val"}, {"label" : "vecSclr_Copy_II_NEQ", "tail" : ": BinOp[NeqOp, Vec[Int], Int, Vec[Boolean]]", "member" : "org.saddle.macros.BinOpVecCopy.vecSclr_Copy_II_NEQ", "link" : "org\/saddle\/macros\/BinOps$.html#vecSclr_Copy_II_NEQ:org.saddle.ops.BinOp[org.saddle.ops.NeqOp,org.saddle.Vec[Int],Int,org.saddle.Vec[Boolean]]", "kind" : "implicit val"}, {"label" : "vecSclr_Copy_ID_NEQ", "tail" : ": BinOp[NeqOp, Vec[Int], Double, Vec[Boolean]]", "member" : "org.saddle.macros.BinOpVecCopy.vecSclr_Copy_ID_NEQ", "link" : "org\/saddle\/macros\/BinOps$.html#vecSclr_Copy_ID_NEQ:org.saddle.ops.BinOp[org.saddle.ops.NeqOp,org.saddle.Vec[Int],Double,org.saddle.Vec[Boolean]]", "kind" : "implicit val"}, {"label" : "vecSclr_Copy_LI_NEQ", "tail" : ": BinOp[NeqOp, Vec[Long], Int, Vec[Boolean]]", "member" : "org.saddle.macros.BinOpVecCopy.vecSclr_Copy_LI_NEQ", "link" : "org\/saddle\/macros\/BinOps$.html#vecSclr_Copy_LI_NEQ:org.saddle.ops.BinOp[org.saddle.ops.NeqOp,org.saddle.Vec[Long],Int,org.saddle.Vec[Boolean]]", "kind" : "implicit val"}, {"label" : "vecSclr_Copy_LL_NEQ", "tail" : ": BinOp[NeqOp, Vec[Long], Long, Vec[Boolean]]", "member" : "org.saddle.macros.BinOpVecCopy.vecSclr_Copy_LL_NEQ", "link" : "org\/saddle\/macros\/BinOps$.html#vecSclr_Copy_LL_NEQ:org.saddle.ops.BinOp[org.saddle.ops.NeqOp,org.saddle.Vec[Long],Long,org.saddle.Vec[Boolean]]", "kind" : "implicit val"}, {"label" : "vecSclr_Copy_LD_NEQ", "tail" : ": BinOp[NeqOp, Vec[Long], Double, Vec[Boolean]]", "member" : "org.saddle.macros.BinOpVecCopy.vecSclr_Copy_LD_NEQ", "link" : "org\/saddle\/macros\/BinOps$.html#vecSclr_Copy_LD_NEQ:org.saddle.ops.BinOp[org.saddle.ops.NeqOp,org.saddle.Vec[Long],Double,org.saddle.Vec[Boolean]]", "kind" : "implicit val"}, {"label" : "vecSclr_Copy_DI_NEQ", "tail" : ": BinOp[NeqOp, Vec[Double], Int, Vec[Boolean]]", "member" : "org.saddle.macros.BinOpVecCopy.vecSclr_Copy_DI_NEQ", "link" : "org\/saddle\/macros\/BinOps$.html#vecSclr_Copy_DI_NEQ:org.saddle.ops.BinOp[org.saddle.ops.NeqOp,org.saddle.Vec[Double],Int,org.saddle.Vec[Boolean]]", "kind" : "implicit val"}, {"label" : "vecSclr_Copy_DL_NEQ", "tail" : ": BinOp[NeqOp, Vec[Double], Long, Vec[Boolean]]", "member" : "org.saddle.macros.BinOpVecCopy.vecSclr_Copy_DL_NEQ", "link" : "org\/saddle\/macros\/BinOps$.html#vecSclr_Copy_DL_NEQ:org.saddle.ops.BinOp[org.saddle.ops.NeqOp,org.saddle.Vec[Double],Long,org.saddle.Vec[Boolean]]", "kind" : "implicit val"}, {"label" : "vecSclr_Copy_DD_NEQ", "tail" : ": BinOp[NeqOp, Vec[Double], Double, Vec[Boolean]]", "member" : "org.saddle.macros.BinOpVecCopy.vecSclr_Copy_DD_NEQ", "link" : "org\/saddle\/macros\/BinOps$.html#vecSclr_Copy_DD_NEQ:org.saddle.ops.BinOp[org.saddle.ops.NeqOp,org.saddle.Vec[Double],Double,org.saddle.Vec[Boolean]]", "kind" : "implicit val"}, {"label" : "vecSclr_Copy_BB_LTE", "tail" : ": BinOp[LteOp, Vec[Boolean], Boolean, Vec[Boolean]]", "member" : "org.saddle.macros.BinOpVecCopy.vecSclr_Copy_BB_LTE", "link" : "org\/saddle\/macros\/BinOps$.html#vecSclr_Copy_BB_LTE:org.saddle.ops.BinOp[org.saddle.ops.LteOp,org.saddle.Vec[Boolean],Boolean,org.saddle.Vec[Boolean]]", "kind" : "implicit val"}, {"label" : "vecSclr_Copy_II_LTE", "tail" : ": BinOp[LteOp, Vec[Int], Int, Vec[Boolean]]", "member" : "org.saddle.macros.BinOpVecCopy.vecSclr_Copy_II_LTE", "link" : "org\/saddle\/macros\/BinOps$.html#vecSclr_Copy_II_LTE:org.saddle.ops.BinOp[org.saddle.ops.LteOp,org.saddle.Vec[Int],Int,org.saddle.Vec[Boolean]]", "kind" : "implicit val"}, {"label" : "vecSclr_Copy_ID_LTE", "tail" : ": BinOp[LteOp, Vec[Int], Double, Vec[Boolean]]", "member" : "org.saddle.macros.BinOpVecCopy.vecSclr_Copy_ID_LTE", "link" : "org\/saddle\/macros\/BinOps$.html#vecSclr_Copy_ID_LTE:org.saddle.ops.BinOp[org.saddle.ops.LteOp,org.saddle.Vec[Int],Double,org.saddle.Vec[Boolean]]", "kind" : "implicit val"}, {"label" : "vecSclr_Copy_LI_LTE", "tail" : ": BinOp[LteOp, Vec[Long], Int, Vec[Boolean]]", "member" : "org.saddle.macros.BinOpVecCopy.vecSclr_Copy_LI_LTE", "link" : "org\/saddle\/macros\/BinOps$.html#vecSclr_Copy_LI_LTE:org.saddle.ops.BinOp[org.saddle.ops.LteOp,org.saddle.Vec[Long],Int,org.saddle.Vec[Boolean]]", "kind" : "implicit val"}, {"label" : "vecSclr_Copy_LL_LTE", "tail" : ": BinOp[LteOp, Vec[Long], Long, Vec[Boolean]]", "member" : "org.saddle.macros.BinOpVecCopy.vecSclr_Copy_LL_LTE", "link" : "org\/saddle\/macros\/BinOps$.html#vecSclr_Copy_LL_LTE:org.saddle.ops.BinOp[org.saddle.ops.LteOp,org.saddle.Vec[Long],Long,org.saddle.Vec[Boolean]]", "kind" : "implicit val"}, {"label" : "vecSclr_Copy_LD_LTE", "tail" : ": BinOp[LteOp, Vec[Long], Double, Vec[Boolean]]", "member" : "org.saddle.macros.BinOpVecCopy.vecSclr_Copy_LD_LTE", "link" : "org\/saddle\/macros\/BinOps$.html#vecSclr_Copy_LD_LTE:org.saddle.ops.BinOp[org.saddle.ops.LteOp,org.saddle.Vec[Long],Double,org.saddle.Vec[Boolean]]", "kind" : "implicit val"}, {"label" : "vecSclr_Copy_DI_LTE", "tail" : ": BinOp[LteOp, Vec[Double], Int, Vec[Boolean]]", "member" : "org.saddle.macros.BinOpVecCopy.vecSclr_Copy_DI_LTE", "link" : "org\/saddle\/macros\/BinOps$.html#vecSclr_Copy_DI_LTE:org.saddle.ops.BinOp[org.saddle.ops.LteOp,org.saddle.Vec[Double],Int,org.saddle.Vec[Boolean]]", "kind" : "implicit val"}, {"label" : "vecSclr_Copy_DL_LTE", "tail" : ": BinOp[LteOp, Vec[Double], Long, Vec[Boolean]]", "member" : "org.saddle.macros.BinOpVecCopy.vecSclr_Copy_DL_LTE", "link" : "org\/saddle\/macros\/BinOps$.html#vecSclr_Copy_DL_LTE:org.saddle.ops.BinOp[org.saddle.ops.LteOp,org.saddle.Vec[Double],Long,org.saddle.Vec[Boolean]]", "kind" : "implicit val"}, {"label" : "vecSclr_Copy_DD_LTE", "tail" : ": BinOp[LteOp, Vec[Double], Double, Vec[Boolean]]", "member" : "org.saddle.macros.BinOpVecCopy.vecSclr_Copy_DD_LTE", "link" : "org\/saddle\/macros\/BinOps$.html#vecSclr_Copy_DD_LTE:org.saddle.ops.BinOp[org.saddle.ops.LteOp,org.saddle.Vec[Double],Double,org.saddle.Vec[Boolean]]", "kind" : "implicit val"}, {"label" : "vecSclr_Copy_BB_LT", "tail" : ": BinOp[LtOp, Vec[Boolean], Boolean, Vec[Boolean]]", "member" : "org.saddle.macros.BinOpVecCopy.vecSclr_Copy_BB_LT", "link" : "org\/saddle\/macros\/BinOps$.html#vecSclr_Copy_BB_LT:org.saddle.ops.BinOp[org.saddle.ops.LtOp,org.saddle.Vec[Boolean],Boolean,org.saddle.Vec[Boolean]]", "kind" : "implicit val"}, {"label" : "vecSclr_Copy_II_LT", "tail" : ": BinOp[LtOp, Vec[Int], Int, Vec[Boolean]]", "member" : "org.saddle.macros.BinOpVecCopy.vecSclr_Copy_II_LT", "link" : "org\/saddle\/macros\/BinOps$.html#vecSclr_Copy_II_LT:org.saddle.ops.BinOp[org.saddle.ops.LtOp,org.saddle.Vec[Int],Int,org.saddle.Vec[Boolean]]", "kind" : "implicit val"}, {"label" : "vecSclr_Copy_ID_LT", "tail" : ": BinOp[LtOp, Vec[Int], Double, Vec[Boolean]]", "member" : "org.saddle.macros.BinOpVecCopy.vecSclr_Copy_ID_LT", "link" : "org\/saddle\/macros\/BinOps$.html#vecSclr_Copy_ID_LT:org.saddle.ops.BinOp[org.saddle.ops.LtOp,org.saddle.Vec[Int],Double,org.saddle.Vec[Boolean]]", "kind" : "implicit val"}, {"label" : "vecSclr_Copy_LI_LT", "tail" : ": BinOp[LtOp, Vec[Long], Int, Vec[Boolean]]", "member" : "org.saddle.macros.BinOpVecCopy.vecSclr_Copy_LI_LT", "link" : "org\/saddle\/macros\/BinOps$.html#vecSclr_Copy_LI_LT:org.saddle.ops.BinOp[org.saddle.ops.LtOp,org.saddle.Vec[Long],Int,org.saddle.Vec[Boolean]]", "kind" : "implicit val"}, {"label" : "vecSclr_Copy_LL_LT", "tail" : ": BinOp[LtOp, Vec[Long], Long, Vec[Boolean]]", "member" : "org.saddle.macros.BinOpVecCopy.vecSclr_Copy_LL_LT", "link" : "org\/saddle\/macros\/BinOps$.html#vecSclr_Copy_LL_LT:org.saddle.ops.BinOp[org.saddle.ops.LtOp,org.saddle.Vec[Long],Long,org.saddle.Vec[Boolean]]", "kind" : "implicit val"}, {"label" : "vecSclr_Copy_LD_LT", "tail" : ": BinOp[LtOp, Vec[Long], Double, Vec[Boolean]]", "member" : "org.saddle.macros.BinOpVecCopy.vecSclr_Copy_LD_LT", "link" : "org\/saddle\/macros\/BinOps$.html#vecSclr_Copy_LD_LT:org.saddle.ops.BinOp[org.saddle.ops.LtOp,org.saddle.Vec[Long],Double,org.saddle.Vec[Boolean]]", "kind" : "implicit val"}, {"label" : "vecSclr_Copy_DI_LT", "tail" : ": BinOp[LtOp, Vec[Double], Int, Vec[Boolean]]", "member" : "org.saddle.macros.BinOpVecCopy.vecSclr_Copy_DI_LT", "link" : "org\/saddle\/macros\/BinOps$.html#vecSclr_Copy_DI_LT:org.saddle.ops.BinOp[org.saddle.ops.LtOp,org.saddle.Vec[Double],Int,org.saddle.Vec[Boolean]]", "kind" : "implicit val"}, {"label" : "vecSclr_Copy_DL_LT", "tail" : ": BinOp[LtOp, Vec[Double], Long, Vec[Boolean]]", "member" : "org.saddle.macros.BinOpVecCopy.vecSclr_Copy_DL_LT", "link" : "org\/saddle\/macros\/BinOps$.html#vecSclr_Copy_DL_LT:org.saddle.ops.BinOp[org.saddle.ops.LtOp,org.saddle.Vec[Double],Long,org.saddle.Vec[Boolean]]", "kind" : "implicit val"}, {"label" : "vecSclr_Copy_DD_LT", "tail" : ": BinOp[LtOp, Vec[Double], Double, Vec[Boolean]]", "member" : "org.saddle.macros.BinOpVecCopy.vecSclr_Copy_DD_LT", "link" : "org\/saddle\/macros\/BinOps$.html#vecSclr_Copy_DD_LT:org.saddle.ops.BinOp[org.saddle.ops.LtOp,org.saddle.Vec[Double],Double,org.saddle.Vec[Boolean]]", "kind" : "implicit val"}, {"label" : "vecSclr_Copy_BB_GTE", "tail" : ": BinOp[GteOp, Vec[Boolean], Boolean, Vec[Boolean]]", "member" : "org.saddle.macros.BinOpVecCopy.vecSclr_Copy_BB_GTE", "link" : "org\/saddle\/macros\/BinOps$.html#vecSclr_Copy_BB_GTE:org.saddle.ops.BinOp[org.saddle.ops.GteOp,org.saddle.Vec[Boolean],Boolean,org.saddle.Vec[Boolean]]", "kind" : "implicit val"}, {"label" : "vecSclr_Copy_II_GTE", "tail" : ": BinOp[GteOp, Vec[Int], Int, Vec[Boolean]]", "member" : "org.saddle.macros.BinOpVecCopy.vecSclr_Copy_II_GTE", "link" : "org\/saddle\/macros\/BinOps$.html#vecSclr_Copy_II_GTE:org.saddle.ops.BinOp[org.saddle.ops.GteOp,org.saddle.Vec[Int],Int,org.saddle.Vec[Boolean]]", "kind" : "implicit val"}, {"label" : "vecSclr_Copy_ID_GTE", "tail" : ": BinOp[GteOp, Vec[Int], Double, Vec[Boolean]]", "member" : "org.saddle.macros.BinOpVecCopy.vecSclr_Copy_ID_GTE", "link" : "org\/saddle\/macros\/BinOps$.html#vecSclr_Copy_ID_GTE:org.saddle.ops.BinOp[org.saddle.ops.GteOp,org.saddle.Vec[Int],Double,org.saddle.Vec[Boolean]]", "kind" : "implicit val"}, {"label" : "vecSclr_Copy_LI_GTE", "tail" : ": BinOp[GteOp, Vec[Long], Int, Vec[Boolean]]", "member" : "org.saddle.macros.BinOpVecCopy.vecSclr_Copy_LI_GTE", "link" : "org\/saddle\/macros\/BinOps$.html#vecSclr_Copy_LI_GTE:org.saddle.ops.BinOp[org.saddle.ops.GteOp,org.saddle.Vec[Long],Int,org.saddle.Vec[Boolean]]", "kind" : "implicit val"}, {"label" : "vecSclr_Copy_LL_GTE", "tail" : ": BinOp[GteOp, Vec[Long], Long, Vec[Boolean]]", "member" : "org.saddle.macros.BinOpVecCopy.vecSclr_Copy_LL_GTE", "link" : "org\/saddle\/macros\/BinOps$.html#vecSclr_Copy_LL_GTE:org.saddle.ops.BinOp[org.saddle.ops.GteOp,org.saddle.Vec[Long],Long,org.saddle.Vec[Boolean]]", "kind" : "implicit val"}, {"label" : "vecSclr_Copy_LD_GTE", "tail" : ": BinOp[GteOp, Vec[Long], Double, Vec[Boolean]]", "member" : "org.saddle.macros.BinOpVecCopy.vecSclr_Copy_LD_GTE", "link" : "org\/saddle\/macros\/BinOps$.html#vecSclr_Copy_LD_GTE:org.saddle.ops.BinOp[org.saddle.ops.GteOp,org.saddle.Vec[Long],Double,org.saddle.Vec[Boolean]]", "kind" : "implicit val"}, {"label" : "vecSclr_Copy_DI_GTE", "tail" : ": BinOp[GteOp, Vec[Double], Int, Vec[Boolean]]", "member" : "org.saddle.macros.BinOpVecCopy.vecSclr_Copy_DI_GTE", "link" : "org\/saddle\/macros\/BinOps$.html#vecSclr_Copy_DI_GTE:org.saddle.ops.BinOp[org.saddle.ops.GteOp,org.saddle.Vec[Double],Int,org.saddle.Vec[Boolean]]", "kind" : "implicit val"}, {"label" : "vecSclr_Copy_DL_GTE", "tail" : ": BinOp[GteOp, Vec[Double], Long, Vec[Boolean]]", "member" : "org.saddle.macros.BinOpVecCopy.vecSclr_Copy_DL_GTE", "link" : "org\/saddle\/macros\/BinOps$.html#vecSclr_Copy_DL_GTE:org.saddle.ops.BinOp[org.saddle.ops.GteOp,org.saddle.Vec[Double],Long,org.saddle.Vec[Boolean]]", "kind" : "implicit val"}, {"label" : "vecSclr_Copy_DD_GTE", "tail" : ": BinOp[GteOp, Vec[Double], Double, Vec[Boolean]]", "member" : "org.saddle.macros.BinOpVecCopy.vecSclr_Copy_DD_GTE", "link" : "org\/saddle\/macros\/BinOps$.html#vecSclr_Copy_DD_GTE:org.saddle.ops.BinOp[org.saddle.ops.GteOp,org.saddle.Vec[Double],Double,org.saddle.Vec[Boolean]]", "kind" : "implicit val"}, {"label" : "vecSclr_Copy_BB_GT", "tail" : ": BinOp[GtOp, Vec[Boolean], Boolean, Vec[Boolean]]", "member" : "org.saddle.macros.BinOpVecCopy.vecSclr_Copy_BB_GT", "link" : "org\/saddle\/macros\/BinOps$.html#vecSclr_Copy_BB_GT:org.saddle.ops.BinOp[org.saddle.ops.GtOp,org.saddle.Vec[Boolean],Boolean,org.saddle.Vec[Boolean]]", "kind" : "implicit val"}, {"label" : "vecSclr_Copy_II_GT", "tail" : ": BinOp[GtOp, Vec[Int], Int, Vec[Boolean]]", "member" : "org.saddle.macros.BinOpVecCopy.vecSclr_Copy_II_GT", "link" : "org\/saddle\/macros\/BinOps$.html#vecSclr_Copy_II_GT:org.saddle.ops.BinOp[org.saddle.ops.GtOp,org.saddle.Vec[Int],Int,org.saddle.Vec[Boolean]]", "kind" : "implicit val"}, {"label" : "vecSclr_Copy_ID_GT", "tail" : ": BinOp[GtOp, Vec[Int], Double, Vec[Boolean]]", "member" : "org.saddle.macros.BinOpVecCopy.vecSclr_Copy_ID_GT", "link" : "org\/saddle\/macros\/BinOps$.html#vecSclr_Copy_ID_GT:org.saddle.ops.BinOp[org.saddle.ops.GtOp,org.saddle.Vec[Int],Double,org.saddle.Vec[Boolean]]", "kind" : "implicit val"}, {"label" : "vecSclr_Copy_LI_GT", "tail" : ": BinOp[GtOp, Vec[Long], Int, Vec[Boolean]]", "member" : "org.saddle.macros.BinOpVecCopy.vecSclr_Copy_LI_GT", "link" : "org\/saddle\/macros\/BinOps$.html#vecSclr_Copy_LI_GT:org.saddle.ops.BinOp[org.saddle.ops.GtOp,org.saddle.Vec[Long],Int,org.saddle.Vec[Boolean]]", "kind" : "implicit val"}, {"label" : "vecSclr_Copy_LL_GT", "tail" : ": BinOp[GtOp, Vec[Long], Long, Vec[Boolean]]", "member" : "org.saddle.macros.BinOpVecCopy.vecSclr_Copy_LL_GT", "link" : "org\/saddle\/macros\/BinOps$.html#vecSclr_Copy_LL_GT:org.saddle.ops.BinOp[org.saddle.ops.GtOp,org.saddle.Vec[Long],Long,org.saddle.Vec[Boolean]]", "kind" : "implicit val"}, {"label" : "vecSclr_Copy_LD_GT", "tail" : ": BinOp[GtOp, Vec[Long], Double, Vec[Boolean]]", "member" : "org.saddle.macros.BinOpVecCopy.vecSclr_Copy_LD_GT", "link" : "org\/saddle\/macros\/BinOps$.html#vecSclr_Copy_LD_GT:org.saddle.ops.BinOp[org.saddle.ops.GtOp,org.saddle.Vec[Long],Double,org.saddle.Vec[Boolean]]", "kind" : "implicit val"}, {"label" : "vecSclr_Copy_DI_GT", "tail" : ": BinOp[GtOp, Vec[Double], Int, Vec[Boolean]]", "member" : "org.saddle.macros.BinOpVecCopy.vecSclr_Copy_DI_GT", "link" : "org\/saddle\/macros\/BinOps$.html#vecSclr_Copy_DI_GT:org.saddle.ops.BinOp[org.saddle.ops.GtOp,org.saddle.Vec[Double],Int,org.saddle.Vec[Boolean]]", "kind" : "implicit val"}, {"label" : "vecSclr_Copy_DL_GT", "tail" : ": BinOp[GtOp, Vec[Double], Long, Vec[Boolean]]", "member" : "org.saddle.macros.BinOpVecCopy.vecSclr_Copy_DL_GT", "link" : "org\/saddle\/macros\/BinOps$.html#vecSclr_Copy_DL_GT:org.saddle.ops.BinOp[org.saddle.ops.GtOp,org.saddle.Vec[Double],Long,org.saddle.Vec[Boolean]]", "kind" : "implicit val"}, {"label" : "vecSclr_Copy_DD_GT", "tail" : ": BinOp[GtOp, Vec[Double], Double, Vec[Boolean]]", "member" : "org.saddle.macros.BinOpVecCopy.vecSclr_Copy_DD_GT", "link" : "org\/saddle\/macros\/BinOps$.html#vecSclr_Copy_DD_GT:org.saddle.ops.BinOp[org.saddle.ops.GtOp,org.saddle.Vec[Double],Double,org.saddle.Vec[Boolean]]", "kind" : "implicit val"}, {"label" : "vecSclr_Copy_II_BitUshr", "tail" : ": BinOp[BitUShr, Vec[Int], Int, Vec[Int]]", "member" : "org.saddle.macros.BinOpVecCopy.vecSclr_Copy_II_BitUshr", "link" : "org\/saddle\/macros\/BinOps$.html#vecSclr_Copy_II_BitUshr:org.saddle.ops.BinOp[org.saddle.ops.BitUShr,org.saddle.Vec[Int],Int,org.saddle.Vec[Int]]", "kind" : "implicit val"}, {"label" : "vecSclr_Copy_LI_BitUshr", "tail" : ": BinOp[BitUShr, Vec[Long], Int, Vec[Long]]", "member" : "org.saddle.macros.BinOpVecCopy.vecSclr_Copy_LI_BitUshr", "link" : "org\/saddle\/macros\/BinOps$.html#vecSclr_Copy_LI_BitUshr:org.saddle.ops.BinOp[org.saddle.ops.BitUShr,org.saddle.Vec[Long],Int,org.saddle.Vec[Long]]", "kind" : "implicit val"}, {"label" : "vecSclr_Copy_LL_BitUshr", "tail" : ": BinOp[BitUShr, Vec[Long], Long, Vec[Long]]", "member" : "org.saddle.macros.BinOpVecCopy.vecSclr_Copy_LL_BitUshr", "link" : "org\/saddle\/macros\/BinOps$.html#vecSclr_Copy_LL_BitUshr:org.saddle.ops.BinOp[org.saddle.ops.BitUShr,org.saddle.Vec[Long],Long,org.saddle.Vec[Long]]", "kind" : "implicit val"}, {"label" : "vecSclr_Copy_II_BitShr", "tail" : ": BinOp[BitShr, Vec[Int], Int, Vec[Int]]", "member" : "org.saddle.macros.BinOpVecCopy.vecSclr_Copy_II_BitShr", "link" : "org\/saddle\/macros\/BinOps$.html#vecSclr_Copy_II_BitShr:org.saddle.ops.BinOp[org.saddle.ops.BitShr,org.saddle.Vec[Int],Int,org.saddle.Vec[Int]]", "kind" : "implicit val"}, {"label" : "vecSclr_Copy_LI_BitShr", "tail" : ": BinOp[BitShr, Vec[Long], Int, Vec[Long]]", "member" : "org.saddle.macros.BinOpVecCopy.vecSclr_Copy_LI_BitShr", "link" : "org\/saddle\/macros\/BinOps$.html#vecSclr_Copy_LI_BitShr:org.saddle.ops.BinOp[org.saddle.ops.BitShr,org.saddle.Vec[Long],Int,org.saddle.Vec[Long]]", "kind" : "implicit val"}, {"label" : "vecSclr_Copy_LL_BitShr", "tail" : ": BinOp[BitShr, Vec[Long], Long, Vec[Long]]", "member" : "org.saddle.macros.BinOpVecCopy.vecSclr_Copy_LL_BitShr", "link" : "org\/saddle\/macros\/BinOps$.html#vecSclr_Copy_LL_BitShr:org.saddle.ops.BinOp[org.saddle.ops.BitShr,org.saddle.Vec[Long],Long,org.saddle.Vec[Long]]", "kind" : "implicit val"}, {"label" : "vecSclr_Copy_II_BitShl", "tail" : ": BinOp[BitShl, Vec[Int], Int, Vec[Int]]", "member" : "org.saddle.macros.BinOpVecCopy.vecSclr_Copy_II_BitShl", "link" : "org\/saddle\/macros\/BinOps$.html#vecSclr_Copy_II_BitShl:org.saddle.ops.BinOp[org.saddle.ops.BitShl,org.saddle.Vec[Int],Int,org.saddle.Vec[Int]]", "kind" : "implicit val"}, {"label" : "vecSclr_Copy_LI_BitShl", "tail" : ": BinOp[BitShl, Vec[Long], Int, Vec[Long]]", "member" : "org.saddle.macros.BinOpVecCopy.vecSclr_Copy_LI_BitShl", "link" : "org\/saddle\/macros\/BinOps$.html#vecSclr_Copy_LI_BitShl:org.saddle.ops.BinOp[org.saddle.ops.BitShl,org.saddle.Vec[Long],Int,org.saddle.Vec[Long]]", "kind" : "implicit val"}, {"label" : "vecSclr_Copy_LL_BitShl", "tail" : ": BinOp[BitShl, Vec[Long], Long, Vec[Long]]", "member" : "org.saddle.macros.BinOpVecCopy.vecSclr_Copy_LL_BitShl", "link" : "org\/saddle\/macros\/BinOps$.html#vecSclr_Copy_LL_BitShl:org.saddle.ops.BinOp[org.saddle.ops.BitShl,org.saddle.Vec[Long],Long,org.saddle.Vec[Long]]", "kind" : "implicit val"}, {"label" : "vecSclr_Copy_II_BitXor", "tail" : ": BinOp[BitXor, Vec[Int], Int, Vec[Int]]", "member" : "org.saddle.macros.BinOpVecCopy.vecSclr_Copy_II_BitXor", "link" : "org\/saddle\/macros\/BinOps$.html#vecSclr_Copy_II_BitXor:org.saddle.ops.BinOp[org.saddle.ops.BitXor,org.saddle.Vec[Int],Int,org.saddle.Vec[Int]]", "kind" : "implicit val"}, {"label" : "vecSclr_Copy_LI_BitXor", "tail" : ": BinOp[BitXor, Vec[Long], Int, Vec[Long]]", "member" : "org.saddle.macros.BinOpVecCopy.vecSclr_Copy_LI_BitXor", "link" : "org\/saddle\/macros\/BinOps$.html#vecSclr_Copy_LI_BitXor:org.saddle.ops.BinOp[org.saddle.ops.BitXor,org.saddle.Vec[Long],Int,org.saddle.Vec[Long]]", "kind" : "implicit val"}, {"label" : "vecSclr_Copy_LL_BitXor", "tail" : ": BinOp[BitXor, Vec[Long], Long, Vec[Long]]", "member" : "org.saddle.macros.BinOpVecCopy.vecSclr_Copy_LL_BitXor", "link" : "org\/saddle\/macros\/BinOps$.html#vecSclr_Copy_LL_BitXor:org.saddle.ops.BinOp[org.saddle.ops.BitXor,org.saddle.Vec[Long],Long,org.saddle.Vec[Long]]", "kind" : "implicit val"}, {"label" : "vecSclr_Copy_II_BitOr", "tail" : ": BinOp[BitOr, Vec[Int], Int, Vec[Int]]", "member" : "org.saddle.macros.BinOpVecCopy.vecSclr_Copy_II_BitOr", "link" : "org\/saddle\/macros\/BinOps$.html#vecSclr_Copy_II_BitOr:org.saddle.ops.BinOp[org.saddle.ops.BitOr,org.saddle.Vec[Int],Int,org.saddle.Vec[Int]]", "kind" : "implicit val"}, {"label" : "vecSclr_Copy_LI_BitOr", "tail" : ": BinOp[BitOr, Vec[Long], Int, Vec[Long]]", "member" : "org.saddle.macros.BinOpVecCopy.vecSclr_Copy_LI_BitOr", "link" : "org\/saddle\/macros\/BinOps$.html#vecSclr_Copy_LI_BitOr:org.saddle.ops.BinOp[org.saddle.ops.BitOr,org.saddle.Vec[Long],Int,org.saddle.Vec[Long]]", "kind" : "implicit val"}, {"label" : "vecSclr_Copy_LL_BitOr", "tail" : ": BinOp[BitOr, Vec[Long], Long, Vec[Long]]", "member" : "org.saddle.macros.BinOpVecCopy.vecSclr_Copy_LL_BitOr", "link" : "org\/saddle\/macros\/BinOps$.html#vecSclr_Copy_LL_BitOr:org.saddle.ops.BinOp[org.saddle.ops.BitOr,org.saddle.Vec[Long],Long,org.saddle.Vec[Long]]", "kind" : "implicit val"}, {"label" : "vecSclr_Copy_II_BitAnd", "tail" : ": BinOp[BitAnd, Vec[Int], Int, Vec[Int]]", "member" : "org.saddle.macros.BinOpVecCopy.vecSclr_Copy_II_BitAnd", "link" : "org\/saddle\/macros\/BinOps$.html#vecSclr_Copy_II_BitAnd:org.saddle.ops.BinOp[org.saddle.ops.BitAnd,org.saddle.Vec[Int],Int,org.saddle.Vec[Int]]", "kind" : "implicit val"}, {"label" : "vecSclr_Copy_LI_BitAnd", "tail" : ": BinOp[BitAnd, Vec[Long], Int, Vec[Long]]", "member" : "org.saddle.macros.BinOpVecCopy.vecSclr_Copy_LI_BitAnd", "link" : "org\/saddle\/macros\/BinOps$.html#vecSclr_Copy_LI_BitAnd:org.saddle.ops.BinOp[org.saddle.ops.BitAnd,org.saddle.Vec[Long],Int,org.saddle.Vec[Long]]", "kind" : "implicit val"}, {"label" : "vecSclr_Copy_LL_BitAnd", "tail" : ": BinOp[BitAnd, Vec[Long], Long, Vec[Long]]", "member" : "org.saddle.macros.BinOpVecCopy.vecSclr_Copy_LL_BitAnd", "link" : "org\/saddle\/macros\/BinOps$.html#vecSclr_Copy_LL_BitAnd:org.saddle.ops.BinOp[org.saddle.ops.BitAnd,org.saddle.Vec[Long],Long,org.saddle.Vec[Long]]", "kind" : "implicit val"}, {"label" : "vecSclr_Copy_ID_Mod", "tail" : ": BinOp[Mod, Vec[Int], Double, Vec[Double]]", "member" : "org.saddle.macros.BinOpVecCopy.vecSclr_Copy_ID_Mod", "link" : "org\/saddle\/macros\/BinOps$.html#vecSclr_Copy_ID_Mod:org.saddle.ops.BinOp[org.saddle.ops.Mod,org.saddle.Vec[Int],Double,org.saddle.Vec[Double]]", "kind" : "implicit val"}, {"label" : "vecSclr_Copy_II_Mod", "tail" : ": BinOp[Mod, Vec[Int], Int, Vec[Int]]", "member" : "org.saddle.macros.BinOpVecCopy.vecSclr_Copy_II_Mod", "link" : "org\/saddle\/macros\/BinOps$.html#vecSclr_Copy_II_Mod:org.saddle.ops.BinOp[org.saddle.ops.Mod,org.saddle.Vec[Int],Int,org.saddle.Vec[Int]]", "kind" : "implicit val"}, {"label" : "vecSclr_Copy_IL_Mod", "tail" : ": BinOp[Mod, Vec[Int], Long, Vec[Long]]", "member" : "org.saddle.macros.BinOpVecCopy.vecSclr_Copy_IL_Mod", "link" : "org\/saddle\/macros\/BinOps$.html#vecSclr_Copy_IL_Mod:org.saddle.ops.BinOp[org.saddle.ops.Mod,org.saddle.Vec[Int],Long,org.saddle.Vec[Long]]", "kind" : "implicit val"}, {"label" : "vecSclr_Copy_LI_Mod", "tail" : ": BinOp[Mod, Vec[Long], Int, Vec[Long]]", "member" : "org.saddle.macros.BinOpVecCopy.vecSclr_Copy_LI_Mod", "link" : "org\/saddle\/macros\/BinOps$.html#vecSclr_Copy_LI_Mod:org.saddle.ops.BinOp[org.saddle.ops.Mod,org.saddle.Vec[Long],Int,org.saddle.Vec[Long]]", "kind" : "implicit val"}, {"label" : "vecSclr_Copy_LD_Mod", "tail" : ": BinOp[Mod, Vec[Long], Double, Vec[Double]]", "member" : "org.saddle.macros.BinOpVecCopy.vecSclr_Copy_LD_Mod", "link" : "org\/saddle\/macros\/BinOps$.html#vecSclr_Copy_LD_Mod:org.saddle.ops.BinOp[org.saddle.ops.Mod,org.saddle.Vec[Long],Double,org.saddle.Vec[Double]]", "kind" : "implicit val"}, {"label" : "vecSclr_Copy_LL_Mod", "tail" : ": BinOp[Mod, Vec[Long], Long, Vec[Long]]", "member" : "org.saddle.macros.BinOpVecCopy.vecSclr_Copy_LL_Mod", "link" : "org\/saddle\/macros\/BinOps$.html#vecSclr_Copy_LL_Mod:org.saddle.ops.BinOp[org.saddle.ops.Mod,org.saddle.Vec[Long],Long,org.saddle.Vec[Long]]", "kind" : "implicit val"}, {"label" : "vecSclr_Copy_DI_Mod", "tail" : ": BinOp[Mod, Vec[Double], Int, Vec[Double]]", "member" : "org.saddle.macros.BinOpVecCopy.vecSclr_Copy_DI_Mod", "link" : "org\/saddle\/macros\/BinOps$.html#vecSclr_Copy_DI_Mod:org.saddle.ops.BinOp[org.saddle.ops.Mod,org.saddle.Vec[Double],Int,org.saddle.Vec[Double]]", "kind" : "implicit val"}, {"label" : "vecSclr_Copy_DL_Mod", "tail" : ": BinOp[Mod, Vec[Double], Long, Vec[Double]]", "member" : "org.saddle.macros.BinOpVecCopy.vecSclr_Copy_DL_Mod", "link" : "org\/saddle\/macros\/BinOps$.html#vecSclr_Copy_DL_Mod:org.saddle.ops.BinOp[org.saddle.ops.Mod,org.saddle.Vec[Double],Long,org.saddle.Vec[Double]]", "kind" : "implicit val"}, {"label" : "vecSclr_Copy_DD_Mod", "tail" : ": BinOp[Mod, Vec[Double], Double, Vec[Double]]", "member" : "org.saddle.macros.BinOpVecCopy.vecSclr_Copy_DD_Mod", "link" : "org\/saddle\/macros\/BinOps$.html#vecSclr_Copy_DD_Mod:org.saddle.ops.BinOp[org.saddle.ops.Mod,org.saddle.Vec[Double],Double,org.saddle.Vec[Double]]", "kind" : "implicit val"}, {"label" : "vecSclr_Copy_ID_Div", "tail" : ": BinOp[Divide, Vec[Int], Double, Vec[Double]]", "member" : "org.saddle.macros.BinOpVecCopy.vecSclr_Copy_ID_Div", "link" : "org\/saddle\/macros\/BinOps$.html#vecSclr_Copy_ID_Div:org.saddle.ops.BinOp[org.saddle.ops.Divide,org.saddle.Vec[Int],Double,org.saddle.Vec[Double]]", "kind" : "implicit val"}, {"label" : "vecSclr_Copy_II_Div", "tail" : ": BinOp[Divide, Vec[Int], Int, Vec[Int]]", "member" : "org.saddle.macros.BinOpVecCopy.vecSclr_Copy_II_Div", "link" : "org\/saddle\/macros\/BinOps$.html#vecSclr_Copy_II_Div:org.saddle.ops.BinOp[org.saddle.ops.Divide,org.saddle.Vec[Int],Int,org.saddle.Vec[Int]]", "kind" : "implicit val"}, {"label" : "vecSclr_Copy_IL_Div", "tail" : ": BinOp[Divide, Vec[Int], Long, Vec[Long]]", "member" : "org.saddle.macros.BinOpVecCopy.vecSclr_Copy_IL_Div", "link" : "org\/saddle\/macros\/BinOps$.html#vecSclr_Copy_IL_Div:org.saddle.ops.BinOp[org.saddle.ops.Divide,org.saddle.Vec[Int],Long,org.saddle.Vec[Long]]", "kind" : "implicit val"}, {"label" : "vecSclr_Copy_LI_Div", "tail" : ": BinOp[Divide, Vec[Long], Int, Vec[Long]]", "member" : "org.saddle.macros.BinOpVecCopy.vecSclr_Copy_LI_Div", "link" : "org\/saddle\/macros\/BinOps$.html#vecSclr_Copy_LI_Div:org.saddle.ops.BinOp[org.saddle.ops.Divide,org.saddle.Vec[Long],Int,org.saddle.Vec[Long]]", "kind" : "implicit val"}, {"label" : "vecSclr_Copy_LD_Div", "tail" : ": BinOp[Divide, Vec[Long], Double, Vec[Double]]", "member" : "org.saddle.macros.BinOpVecCopy.vecSclr_Copy_LD_Div", "link" : "org\/saddle\/macros\/BinOps$.html#vecSclr_Copy_LD_Div:org.saddle.ops.BinOp[org.saddle.ops.Divide,org.saddle.Vec[Long],Double,org.saddle.Vec[Double]]", "kind" : "implicit val"}, {"label" : "vecSclr_Copy_LL_Div", "tail" : ": BinOp[Divide, Vec[Long], Long, Vec[Long]]", "member" : "org.saddle.macros.BinOpVecCopy.vecSclr_Copy_LL_Div", "link" : "org\/saddle\/macros\/BinOps$.html#vecSclr_Copy_LL_Div:org.saddle.ops.BinOp[org.saddle.ops.Divide,org.saddle.Vec[Long],Long,org.saddle.Vec[Long]]", "kind" : "implicit val"}, {"label" : "vecSclr_Copy_DI_Div", "tail" : ": BinOp[Divide, Vec[Double], Int, Vec[Double]]", "member" : "org.saddle.macros.BinOpVecCopy.vecSclr_Copy_DI_Div", "link" : "org\/saddle\/macros\/BinOps$.html#vecSclr_Copy_DI_Div:org.saddle.ops.BinOp[org.saddle.ops.Divide,org.saddle.Vec[Double],Int,org.saddle.Vec[Double]]", "kind" : "implicit val"}, {"label" : "vecSclr_Copy_DL_Div", "tail" : ": BinOp[Divide, Vec[Double], Long, Vec[Double]]", "member" : "org.saddle.macros.BinOpVecCopy.vecSclr_Copy_DL_Div", "link" : "org\/saddle\/macros\/BinOps$.html#vecSclr_Copy_DL_Div:org.saddle.ops.BinOp[org.saddle.ops.Divide,org.saddle.Vec[Double],Long,org.saddle.Vec[Double]]", "kind" : "implicit val"}, {"label" : "vecSclr_Copy_DD_Div", "tail" : ": BinOp[Divide, Vec[Double], Double, Vec[Double]]", "member" : "org.saddle.macros.BinOpVecCopy.vecSclr_Copy_DD_Div", "link" : "org\/saddle\/macros\/BinOps$.html#vecSclr_Copy_DD_Div:org.saddle.ops.BinOp[org.saddle.ops.Divide,org.saddle.Vec[Double],Double,org.saddle.Vec[Double]]", "kind" : "implicit val"}, {"label" : "vecSclr_Copy_ID_Mult", "tail" : ": BinOp[Multiply, Vec[Int], Double, Vec[Double]]", "member" : "org.saddle.macros.BinOpVecCopy.vecSclr_Copy_ID_Mult", "link" : "org\/saddle\/macros\/BinOps$.html#vecSclr_Copy_ID_Mult:org.saddle.ops.BinOp[org.saddle.ops.Multiply,org.saddle.Vec[Int],Double,org.saddle.Vec[Double]]", "kind" : "implicit val"}, {"label" : "vecSclr_Copy_II_Mult", "tail" : ": BinOp[Multiply, Vec[Int], Int, Vec[Int]]", "member" : "org.saddle.macros.BinOpVecCopy.vecSclr_Copy_II_Mult", "link" : "org\/saddle\/macros\/BinOps$.html#vecSclr_Copy_II_Mult:org.saddle.ops.BinOp[org.saddle.ops.Multiply,org.saddle.Vec[Int],Int,org.saddle.Vec[Int]]", "kind" : "implicit val"}, {"label" : "vecSclr_Copy_IL_Mult", "tail" : ": BinOp[Multiply, Vec[Int], Long, Vec[Long]]", "member" : "org.saddle.macros.BinOpVecCopy.vecSclr_Copy_IL_Mult", "link" : "org\/saddle\/macros\/BinOps$.html#vecSclr_Copy_IL_Mult:org.saddle.ops.BinOp[org.saddle.ops.Multiply,org.saddle.Vec[Int],Long,org.saddle.Vec[Long]]", "kind" : "implicit val"}, {"label" : "vecSclr_Copy_LI_Mult", "tail" : ": BinOp[Multiply, Vec[Long], Int, Vec[Long]]", "member" : "org.saddle.macros.BinOpVecCopy.vecSclr_Copy_LI_Mult", "link" : "org\/saddle\/macros\/BinOps$.html#vecSclr_Copy_LI_Mult:org.saddle.ops.BinOp[org.saddle.ops.Multiply,org.saddle.Vec[Long],Int,org.saddle.Vec[Long]]", "kind" : "implicit val"}, {"label" : "vecSclr_Copy_LD_Mult", "tail" : ": BinOp[Multiply, Vec[Long], Double, Vec[Double]]", "member" : "org.saddle.macros.BinOpVecCopy.vecSclr_Copy_LD_Mult", "link" : "org\/saddle\/macros\/BinOps$.html#vecSclr_Copy_LD_Mult:org.saddle.ops.BinOp[org.saddle.ops.Multiply,org.saddle.Vec[Long],Double,org.saddle.Vec[Double]]", "kind" : "implicit val"}, {"label" : "vecSclr_Copy_LL_Mult", "tail" : ": BinOp[Multiply, Vec[Long], Long, Vec[Long]]", "member" : "org.saddle.macros.BinOpVecCopy.vecSclr_Copy_LL_Mult", "link" : "org\/saddle\/macros\/BinOps$.html#vecSclr_Copy_LL_Mult:org.saddle.ops.BinOp[org.saddle.ops.Multiply,org.saddle.Vec[Long],Long,org.saddle.Vec[Long]]", "kind" : "implicit val"}, {"label" : "vecSclr_Copy_DI_Mult", "tail" : ": BinOp[Multiply, Vec[Double], Int, Vec[Double]]", "member" : "org.saddle.macros.BinOpVecCopy.vecSclr_Copy_DI_Mult", "link" : "org\/saddle\/macros\/BinOps$.html#vecSclr_Copy_DI_Mult:org.saddle.ops.BinOp[org.saddle.ops.Multiply,org.saddle.Vec[Double],Int,org.saddle.Vec[Double]]", "kind" : "implicit val"}, {"label" : "vecSclr_Copy_DL_Mult", "tail" : ": BinOp[Multiply, Vec[Double], Long, Vec[Double]]", "member" : "org.saddle.macros.BinOpVecCopy.vecSclr_Copy_DL_Mult", "link" : "org\/saddle\/macros\/BinOps$.html#vecSclr_Copy_DL_Mult:org.saddle.ops.BinOp[org.saddle.ops.Multiply,org.saddle.Vec[Double],Long,org.saddle.Vec[Double]]", "kind" : "implicit val"}, {"label" : "vecSclr_Copy_DD_Mult", "tail" : ": BinOp[Multiply, Vec[Double], Double, Vec[Double]]", "member" : "org.saddle.macros.BinOpVecCopy.vecSclr_Copy_DD_Mult", "link" : "org\/saddle\/macros\/BinOps$.html#vecSclr_Copy_DD_Mult:org.saddle.ops.BinOp[org.saddle.ops.Multiply,org.saddle.Vec[Double],Double,org.saddle.Vec[Double]]", "kind" : "implicit val"}, {"label" : "vecSclr_Copy_ID_Sub", "tail" : ": BinOp[Subtract, Vec[Int], Double, Vec[Double]]", "member" : "org.saddle.macros.BinOpVecCopy.vecSclr_Copy_ID_Sub", "link" : "org\/saddle\/macros\/BinOps$.html#vecSclr_Copy_ID_Sub:org.saddle.ops.BinOp[org.saddle.ops.Subtract,org.saddle.Vec[Int],Double,org.saddle.Vec[Double]]", "kind" : "implicit val"}, {"label" : "vecSclr_Copy_II_Sub", "tail" : ": BinOp[Subtract, Vec[Int], Int, Vec[Int]]", "member" : "org.saddle.macros.BinOpVecCopy.vecSclr_Copy_II_Sub", "link" : "org\/saddle\/macros\/BinOps$.html#vecSclr_Copy_II_Sub:org.saddle.ops.BinOp[org.saddle.ops.Subtract,org.saddle.Vec[Int],Int,org.saddle.Vec[Int]]", "kind" : "implicit val"}, {"label" : "vecSclr_Copy_IL_Sub", "tail" : ": BinOp[Subtract, Vec[Int], Long, Vec[Long]]", "member" : "org.saddle.macros.BinOpVecCopy.vecSclr_Copy_IL_Sub", "link" : "org\/saddle\/macros\/BinOps$.html#vecSclr_Copy_IL_Sub:org.saddle.ops.BinOp[org.saddle.ops.Subtract,org.saddle.Vec[Int],Long,org.saddle.Vec[Long]]", "kind" : "implicit val"}, {"label" : "vecSclr_Copy_LI_Sub", "tail" : ": BinOp[Subtract, Vec[Long], Int, Vec[Long]]", "member" : "org.saddle.macros.BinOpVecCopy.vecSclr_Copy_LI_Sub", "link" : "org\/saddle\/macros\/BinOps$.html#vecSclr_Copy_LI_Sub:org.saddle.ops.BinOp[org.saddle.ops.Subtract,org.saddle.Vec[Long],Int,org.saddle.Vec[Long]]", "kind" : "implicit val"}, {"label" : "vecSclr_Copy_LD_Sub", "tail" : ": BinOp[Subtract, Vec[Long], Double, Vec[Double]]", "member" : "org.saddle.macros.BinOpVecCopy.vecSclr_Copy_LD_Sub", "link" : "org\/saddle\/macros\/BinOps$.html#vecSclr_Copy_LD_Sub:org.saddle.ops.BinOp[org.saddle.ops.Subtract,org.saddle.Vec[Long],Double,org.saddle.Vec[Double]]", "kind" : "implicit val"}, {"label" : "vecSclr_Copy_LL_Sub", "tail" : ": BinOp[Subtract, Vec[Long], Long, Vec[Long]]", "member" : "org.saddle.macros.BinOpVecCopy.vecSclr_Copy_LL_Sub", "link" : "org\/saddle\/macros\/BinOps$.html#vecSclr_Copy_LL_Sub:org.saddle.ops.BinOp[org.saddle.ops.Subtract,org.saddle.Vec[Long],Long,org.saddle.Vec[Long]]", "kind" : "implicit val"}, {"label" : "vecSclr_Copy_DI_Sub", "tail" : ": BinOp[Subtract, Vec[Double], Int, Vec[Double]]", "member" : "org.saddle.macros.BinOpVecCopy.vecSclr_Copy_DI_Sub", "link" : "org\/saddle\/macros\/BinOps$.html#vecSclr_Copy_DI_Sub:org.saddle.ops.BinOp[org.saddle.ops.Subtract,org.saddle.Vec[Double],Int,org.saddle.Vec[Double]]", "kind" : "implicit val"}, {"label" : "vecSclr_Copy_DL_Sub", "tail" : ": BinOp[Subtract, Vec[Double], Long, Vec[Double]]", "member" : "org.saddle.macros.BinOpVecCopy.vecSclr_Copy_DL_Sub", "link" : "org\/saddle\/macros\/BinOps$.html#vecSclr_Copy_DL_Sub:org.saddle.ops.BinOp[org.saddle.ops.Subtract,org.saddle.Vec[Double],Long,org.saddle.Vec[Double]]", "kind" : "implicit val"}, {"label" : "vecSclr_Copy_DD_Sub", "tail" : ": BinOp[Subtract, Vec[Double], Double, Vec[Double]]", "member" : "org.saddle.macros.BinOpVecCopy.vecSclr_Copy_DD_Sub", "link" : "org\/saddle\/macros\/BinOps$.html#vecSclr_Copy_DD_Sub:org.saddle.ops.BinOp[org.saddle.ops.Subtract,org.saddle.Vec[Double],Double,org.saddle.Vec[Double]]", "kind" : "implicit val"}, {"label" : "vecSclr_Copy_ID_Power", "tail" : ": BinOp[Power, Vec[Int], Double, Vec[Double]]", "member" : "org.saddle.macros.BinOpVecCopy.vecSclr_Copy_ID_Power", "link" : "org\/saddle\/macros\/BinOps$.html#vecSclr_Copy_ID_Power:org.saddle.ops.BinOp[org.saddle.ops.Power,org.saddle.Vec[Int],Double,org.saddle.Vec[Double]]", "kind" : "implicit val"}, {"label" : "vecSclr_Copy_II_Power", "tail" : ": BinOp[Power, Vec[Int], Int, Vec[Int]]", "member" : "org.saddle.macros.BinOpVecCopy.vecSclr_Copy_II_Power", "link" : "org\/saddle\/macros\/BinOps$.html#vecSclr_Copy_II_Power:org.saddle.ops.BinOp[org.saddle.ops.Power,org.saddle.Vec[Int],Int,org.saddle.Vec[Int]]", "kind" : "implicit val"}, {"label" : "vecSclr_Copy_IL_Power", "tail" : ": BinOp[Power, Vec[Int], Long, Vec[Long]]", "member" : "org.saddle.macros.BinOpVecCopy.vecSclr_Copy_IL_Power", "link" : "org\/saddle\/macros\/BinOps$.html#vecSclr_Copy_IL_Power:org.saddle.ops.BinOp[org.saddle.ops.Power,org.saddle.Vec[Int],Long,org.saddle.Vec[Long]]", "kind" : "implicit val"}, {"label" : "vecSclr_Copy_LI_Power", "tail" : ": BinOp[Power, Vec[Long], Int, Vec[Long]]", "member" : "org.saddle.macros.BinOpVecCopy.vecSclr_Copy_LI_Power", "link" : "org\/saddle\/macros\/BinOps$.html#vecSclr_Copy_LI_Power:org.saddle.ops.BinOp[org.saddle.ops.Power,org.saddle.Vec[Long],Int,org.saddle.Vec[Long]]", "kind" : "implicit val"}, {"label" : "vecSclr_Copy_LD_Power", "tail" : ": BinOp[Power, Vec[Long], Double, Vec[Double]]", "member" : "org.saddle.macros.BinOpVecCopy.vecSclr_Copy_LD_Power", "link" : "org\/saddle\/macros\/BinOps$.html#vecSclr_Copy_LD_Power:org.saddle.ops.BinOp[org.saddle.ops.Power,org.saddle.Vec[Long],Double,org.saddle.Vec[Double]]", "kind" : "implicit val"}, {"label" : "vecSclr_Copy_LL_Power", "tail" : ": BinOp[Power, Vec[Long], Long, Vec[Long]]", "member" : "org.saddle.macros.BinOpVecCopy.vecSclr_Copy_LL_Power", "link" : "org\/saddle\/macros\/BinOps$.html#vecSclr_Copy_LL_Power:org.saddle.ops.BinOp[org.saddle.ops.Power,org.saddle.Vec[Long],Long,org.saddle.Vec[Long]]", "kind" : "implicit val"}, {"label" : "vecSclr_Copy_DI_Power", "tail" : ": BinOp[Power, Vec[Double], Int, Vec[Double]]", "member" : "org.saddle.macros.BinOpVecCopy.vecSclr_Copy_DI_Power", "link" : "org\/saddle\/macros\/BinOps$.html#vecSclr_Copy_DI_Power:org.saddle.ops.BinOp[org.saddle.ops.Power,org.saddle.Vec[Double],Int,org.saddle.Vec[Double]]", "kind" : "implicit val"}, {"label" : "vecSclr_Copy_DL_Power", "tail" : ": BinOp[Power, Vec[Double], Long, Vec[Double]]", "member" : "org.saddle.macros.BinOpVecCopy.vecSclr_Copy_DL_Power", "link" : "org\/saddle\/macros\/BinOps$.html#vecSclr_Copy_DL_Power:org.saddle.ops.BinOp[org.saddle.ops.Power,org.saddle.Vec[Double],Long,org.saddle.Vec[Double]]", "kind" : "implicit val"}, {"label" : "vecSclr_Copy_DD_Power", "tail" : ": BinOp[Power, Vec[Double], Double, Vec[Double]]", "member" : "org.saddle.macros.BinOpVecCopy.vecSclr_Copy_DD_Power", "link" : "org\/saddle\/macros\/BinOps$.html#vecSclr_Copy_DD_Power:org.saddle.ops.BinOp[org.saddle.ops.Power,org.saddle.Vec[Double],Double,org.saddle.Vec[Double]]", "kind" : "implicit val"}, {"label" : "vecSclr_Copy_ID_Add", "tail" : ": BinOp[Add, Vec[Int], Double, Vec[Double]]", "member" : "org.saddle.macros.BinOpVecCopy.vecSclr_Copy_ID_Add", "link" : "org\/saddle\/macros\/BinOps$.html#vecSclr_Copy_ID_Add:org.saddle.ops.BinOp[org.saddle.ops.Add,org.saddle.Vec[Int],Double,org.saddle.Vec[Double]]", "kind" : "implicit val"}, {"label" : "vecSclr_Copy_II_Add", "tail" : ": BinOp[Add, Vec[Int], Int, Vec[Int]]", "member" : "org.saddle.macros.BinOpVecCopy.vecSclr_Copy_II_Add", "link" : "org\/saddle\/macros\/BinOps$.html#vecSclr_Copy_II_Add:org.saddle.ops.BinOp[org.saddle.ops.Add,org.saddle.Vec[Int],Int,org.saddle.Vec[Int]]", "kind" : "implicit val"}, {"label" : "vecSclr_Copy_IL_Add", "tail" : ": BinOp[Add, Vec[Int], Long, Vec[Long]]", "member" : "org.saddle.macros.BinOpVecCopy.vecSclr_Copy_IL_Add", "link" : "org\/saddle\/macros\/BinOps$.html#vecSclr_Copy_IL_Add:org.saddle.ops.BinOp[org.saddle.ops.Add,org.saddle.Vec[Int],Long,org.saddle.Vec[Long]]", "kind" : "implicit val"}, {"label" : "vecSclr_Copy_LI_Add", "tail" : ": BinOp[Add, Vec[Long], Int, Vec[Long]]", "member" : "org.saddle.macros.BinOpVecCopy.vecSclr_Copy_LI_Add", "link" : "org\/saddle\/macros\/BinOps$.html#vecSclr_Copy_LI_Add:org.saddle.ops.BinOp[org.saddle.ops.Add,org.saddle.Vec[Long],Int,org.saddle.Vec[Long]]", "kind" : "implicit val"}, {"label" : "vecSclr_Copy_LD_Add", "tail" : ": BinOp[Add, Vec[Long], Double, Vec[Double]]", "member" : "org.saddle.macros.BinOpVecCopy.vecSclr_Copy_LD_Add", "link" : "org\/saddle\/macros\/BinOps$.html#vecSclr_Copy_LD_Add:org.saddle.ops.BinOp[org.saddle.ops.Add,org.saddle.Vec[Long],Double,org.saddle.Vec[Double]]", "kind" : "implicit val"}, {"label" : "vecSclr_Copy_LL_Add", "tail" : ": BinOp[Add, Vec[Long], Long, Vec[Long]]", "member" : "org.saddle.macros.BinOpVecCopy.vecSclr_Copy_LL_Add", "link" : "org\/saddle\/macros\/BinOps$.html#vecSclr_Copy_LL_Add:org.saddle.ops.BinOp[org.saddle.ops.Add,org.saddle.Vec[Long],Long,org.saddle.Vec[Long]]", "kind" : "implicit val"}, {"label" : "vecSclr_Copy_DI_Add", "tail" : ": BinOp[Add, Vec[Double], Int, Vec[Double]]", "member" : "org.saddle.macros.BinOpVecCopy.vecSclr_Copy_DI_Add", "link" : "org\/saddle\/macros\/BinOps$.html#vecSclr_Copy_DI_Add:org.saddle.ops.BinOp[org.saddle.ops.Add,org.saddle.Vec[Double],Int,org.saddle.Vec[Double]]", "kind" : "implicit val"}, {"label" : "vecSclr_Copy_DL_Add", "tail" : ": BinOp[Add, Vec[Double], Long, Vec[Double]]", "member" : "org.saddle.macros.BinOpVecCopy.vecSclr_Copy_DL_Add", "link" : "org\/saddle\/macros\/BinOps$.html#vecSclr_Copy_DL_Add:org.saddle.ops.BinOp[org.saddle.ops.Add,org.saddle.Vec[Double],Long,org.saddle.Vec[Double]]", "kind" : "implicit val"}, {"label" : "vecSclr_Copy_DD_Add", "tail" : ": BinOp[Add, Vec[Double], Double, Vec[Double]]", "member" : "org.saddle.macros.BinOpVecCopy.vecSclr_Copy_DD_Add", "link" : "org\/saddle\/macros\/BinOps$.html#vecSclr_Copy_DD_Add:org.saddle.ops.BinOp[org.saddle.ops.Add,org.saddle.Vec[Double],Double,org.saddle.Vec[Double]]", "kind" : "implicit val"}, {"label" : "vecVec_BB_Xor", "tail" : ": BinOpInPlace[XorOp, Vec[Boolean], Vec[Boolean]]", "member" : "org.saddle.macros.BinOpVecVecInPlace.vecVec_BB_Xor", "link" : "org\/saddle\/macros\/BinOps$.html#vecVec_BB_Xor:org.saddle.ops.BinOpInPlace[org.saddle.ops.XorOp,org.saddle.Vec[Boolean],org.saddle.Vec[Boolean]]", "kind" : "implicit val"}, {"label" : "vecVec_BB_Or", "tail" : ": BinOpInPlace[OrOp, Vec[Boolean], Vec[Boolean]]", "member" : "org.saddle.macros.BinOpVecVecInPlace.vecVec_BB_Or", "link" : "org\/saddle\/macros\/BinOps$.html#vecVec_BB_Or:org.saddle.ops.BinOpInPlace[org.saddle.ops.OrOp,org.saddle.Vec[Boolean],org.saddle.Vec[Boolean]]", "kind" : "implicit val"}, {"label" : "vecVec_BB_And", "tail" : ": BinOpInPlace[AndOp, Vec[Boolean], Vec[Boolean]]", "member" : "org.saddle.macros.BinOpVecVecInPlace.vecVec_BB_And", "link" : "org\/saddle\/macros\/BinOps$.html#vecVec_BB_And:org.saddle.ops.BinOpInPlace[org.saddle.ops.AndOp,org.saddle.Vec[Boolean],org.saddle.Vec[Boolean]]", "kind" : "implicit val"}, {"label" : "vecVecIP_BB_EQ", "tail" : ": BinOpInPlace[EqOp, Vec[Boolean], Vec[Boolean]]", "member" : "org.saddle.macros.BinOpVecVecInPlace.vecVecIP_BB_EQ", "link" : "org\/saddle\/macros\/BinOps$.html#vecVecIP_BB_EQ:org.saddle.ops.BinOpInPlace[org.saddle.ops.EqOp,org.saddle.Vec[Boolean],org.saddle.Vec[Boolean]]", "kind" : "implicit val"}, {"label" : "vecVecIP_BB_NEQ", "tail" : ": BinOpInPlace[NeqOp, Vec[Boolean], Vec[Boolean]]", "member" : "org.saddle.macros.BinOpVecVecInPlace.vecVecIP_BB_NEQ", "link" : "org\/saddle\/macros\/BinOps$.html#vecVecIP_BB_NEQ:org.saddle.ops.BinOpInPlace[org.saddle.ops.NeqOp,org.saddle.Vec[Boolean],org.saddle.Vec[Boolean]]", "kind" : "implicit val"}, {"label" : "vecVecIP_BB_LTE", "tail" : ": BinOpInPlace[LteOp, Vec[Boolean], Vec[Boolean]]", "member" : "org.saddle.macros.BinOpVecVecInPlace.vecVecIP_BB_LTE", "link" : "org\/saddle\/macros\/BinOps$.html#vecVecIP_BB_LTE:org.saddle.ops.BinOpInPlace[org.saddle.ops.LteOp,org.saddle.Vec[Boolean],org.saddle.Vec[Boolean]]", "kind" : "implicit val"}, {"label" : "vecVecIP_BB_LT", "tail" : ": BinOpInPlace[LtOp, Vec[Boolean], Vec[Boolean]]", "member" : "org.saddle.macros.BinOpVecVecInPlace.vecVecIP_BB_LT", "link" : "org\/saddle\/macros\/BinOps$.html#vecVecIP_BB_LT:org.saddle.ops.BinOpInPlace[org.saddle.ops.LtOp,org.saddle.Vec[Boolean],org.saddle.Vec[Boolean]]", "kind" : "implicit val"}, {"label" : "vecVecIP_BB_GTE", "tail" : ": BinOpInPlace[GteOp, Vec[Boolean], Vec[Boolean]]", "member" : "org.saddle.macros.BinOpVecVecInPlace.vecVecIP_BB_GTE", "link" : "org\/saddle\/macros\/BinOps$.html#vecVecIP_BB_GTE:org.saddle.ops.BinOpInPlace[org.saddle.ops.GteOp,org.saddle.Vec[Boolean],org.saddle.Vec[Boolean]]", "kind" : "implicit val"}, {"label" : "vecVecIP_BB_GT", "tail" : ": BinOpInPlace[GtOp, Vec[Boolean], Vec[Boolean]]", "member" : "org.saddle.macros.BinOpVecVecInPlace.vecVecIP_BB_GT", "link" : "org\/saddle\/macros\/BinOps$.html#vecVecIP_BB_GT:org.saddle.ops.BinOpInPlace[org.saddle.ops.GtOp,org.saddle.Vec[Boolean],org.saddle.Vec[Boolean]]", "kind" : "implicit val"}, {"label" : "vecVecIP_II_BitUshr", "tail" : ": BinOpInPlace[BitUShr, Vec[Int], Vec[Int]]", "member" : "org.saddle.macros.BinOpVecVecInPlace.vecVecIP_II_BitUshr", "link" : "org\/saddle\/macros\/BinOps$.html#vecVecIP_II_BitUshr:org.saddle.ops.BinOpInPlace[org.saddle.ops.BitUShr,org.saddle.Vec[Int],org.saddle.Vec[Int]]", "kind" : "implicit val"}, {"label" : "vecVecIP_LI_BitUshr", "tail" : ": BinOpInPlace[BitUShr, Vec[Long], Vec[Int]]", "member" : "org.saddle.macros.BinOpVecVecInPlace.vecVecIP_LI_BitUshr", "link" : "org\/saddle\/macros\/BinOps$.html#vecVecIP_LI_BitUshr:org.saddle.ops.BinOpInPlace[org.saddle.ops.BitUShr,org.saddle.Vec[Long],org.saddle.Vec[Int]]", "kind" : "implicit val"}, {"label" : "vecVecIP_LL_BitUshr", "tail" : ": BinOpInPlace[BitUShr, Vec[Long], Vec[Long]]", "member" : "org.saddle.macros.BinOpVecVecInPlace.vecVecIP_LL_BitUshr", "link" : "org\/saddle\/macros\/BinOps$.html#vecVecIP_LL_BitUshr:org.saddle.ops.BinOpInPlace[org.saddle.ops.BitUShr,org.saddle.Vec[Long],org.saddle.Vec[Long]]", "kind" : "implicit val"}, {"label" : "vecVecIP_II_BitShr", "tail" : ": BinOpInPlace[BitShr, Vec[Int], Vec[Int]]", "member" : "org.saddle.macros.BinOpVecVecInPlace.vecVecIP_II_BitShr", "link" : "org\/saddle\/macros\/BinOps$.html#vecVecIP_II_BitShr:org.saddle.ops.BinOpInPlace[org.saddle.ops.BitShr,org.saddle.Vec[Int],org.saddle.Vec[Int]]", "kind" : "implicit val"}, {"label" : "vecVecIP_LI_BitShr", "tail" : ": BinOpInPlace[BitShr, Vec[Long], Vec[Int]]", "member" : "org.saddle.macros.BinOpVecVecInPlace.vecVecIP_LI_BitShr", "link" : "org\/saddle\/macros\/BinOps$.html#vecVecIP_LI_BitShr:org.saddle.ops.BinOpInPlace[org.saddle.ops.BitShr,org.saddle.Vec[Long],org.saddle.Vec[Int]]", "kind" : "implicit val"}, {"label" : "vecVecIP_LL_BitShr", "tail" : ": BinOpInPlace[BitShr, Vec[Long], Vec[Long]]", "member" : "org.saddle.macros.BinOpVecVecInPlace.vecVecIP_LL_BitShr", "link" : "org\/saddle\/macros\/BinOps$.html#vecVecIP_LL_BitShr:org.saddle.ops.BinOpInPlace[org.saddle.ops.BitShr,org.saddle.Vec[Long],org.saddle.Vec[Long]]", "kind" : "implicit val"}, {"label" : "vecVecIP_II_BitShl", "tail" : ": BinOpInPlace[BitShl, Vec[Int], Vec[Int]]", "member" : "org.saddle.macros.BinOpVecVecInPlace.vecVecIP_II_BitShl", "link" : "org\/saddle\/macros\/BinOps$.html#vecVecIP_II_BitShl:org.saddle.ops.BinOpInPlace[org.saddle.ops.BitShl,org.saddle.Vec[Int],org.saddle.Vec[Int]]", "kind" : "implicit val"}, {"label" : "vecVecIP_LI_BitShl", "tail" : ": BinOpInPlace[BitShl, Vec[Long], Vec[Int]]", "member" : "org.saddle.macros.BinOpVecVecInPlace.vecVecIP_LI_BitShl", "link" : "org\/saddle\/macros\/BinOps$.html#vecVecIP_LI_BitShl:org.saddle.ops.BinOpInPlace[org.saddle.ops.BitShl,org.saddle.Vec[Long],org.saddle.Vec[Int]]", "kind" : "implicit val"}, {"label" : "vecVecIP_LL_BitShl", "tail" : ": BinOpInPlace[BitShl, Vec[Long], Vec[Long]]", "member" : "org.saddle.macros.BinOpVecVecInPlace.vecVecIP_LL_BitShl", "link" : "org\/saddle\/macros\/BinOps$.html#vecVecIP_LL_BitShl:org.saddle.ops.BinOpInPlace[org.saddle.ops.BitShl,org.saddle.Vec[Long],org.saddle.Vec[Long]]", "kind" : "implicit val"}, {"label" : "vecVecIP_II_BitXor", "tail" : ": BinOpInPlace[BitXor, Vec[Int], Vec[Int]]", "member" : "org.saddle.macros.BinOpVecVecInPlace.vecVecIP_II_BitXor", "link" : "org\/saddle\/macros\/BinOps$.html#vecVecIP_II_BitXor:org.saddle.ops.BinOpInPlace[org.saddle.ops.BitXor,org.saddle.Vec[Int],org.saddle.Vec[Int]]", "kind" : "implicit val"}, {"label" : "vecVecIP_LI_BitXor", "tail" : ": BinOpInPlace[BitXor, Vec[Long], Vec[Int]]", "member" : "org.saddle.macros.BinOpVecVecInPlace.vecVecIP_LI_BitXor", "link" : "org\/saddle\/macros\/BinOps$.html#vecVecIP_LI_BitXor:org.saddle.ops.BinOpInPlace[org.saddle.ops.BitXor,org.saddle.Vec[Long],org.saddle.Vec[Int]]", "kind" : "implicit val"}, {"label" : "vecVecIP_LL_BitXor", "tail" : ": BinOpInPlace[BitXor, Vec[Long], Vec[Long]]", "member" : "org.saddle.macros.BinOpVecVecInPlace.vecVecIP_LL_BitXor", "link" : "org\/saddle\/macros\/BinOps$.html#vecVecIP_LL_BitXor:org.saddle.ops.BinOpInPlace[org.saddle.ops.BitXor,org.saddle.Vec[Long],org.saddle.Vec[Long]]", "kind" : "implicit val"}, {"label" : "vecVecIP_II_BitOr", "tail" : ": BinOpInPlace[BitOr, Vec[Int], Vec[Int]]", "member" : "org.saddle.macros.BinOpVecVecInPlace.vecVecIP_II_BitOr", "link" : "org\/saddle\/macros\/BinOps$.html#vecVecIP_II_BitOr:org.saddle.ops.BinOpInPlace[org.saddle.ops.BitOr,org.saddle.Vec[Int],org.saddle.Vec[Int]]", "kind" : "implicit val"}, {"label" : "vecVecIP_LI_BitOr", "tail" : ": BinOpInPlace[BitOr, Vec[Long], Vec[Int]]", "member" : "org.saddle.macros.BinOpVecVecInPlace.vecVecIP_LI_BitOr", "link" : "org\/saddle\/macros\/BinOps$.html#vecVecIP_LI_BitOr:org.saddle.ops.BinOpInPlace[org.saddle.ops.BitOr,org.saddle.Vec[Long],org.saddle.Vec[Int]]", "kind" : "implicit val"}, {"label" : "vecVecIP_LL_BitOr", "tail" : ": BinOpInPlace[BitOr, Vec[Long], Vec[Long]]", "member" : "org.saddle.macros.BinOpVecVecInPlace.vecVecIP_LL_BitOr", "link" : "org\/saddle\/macros\/BinOps$.html#vecVecIP_LL_BitOr:org.saddle.ops.BinOpInPlace[org.saddle.ops.BitOr,org.saddle.Vec[Long],org.saddle.Vec[Long]]", "kind" : "implicit val"}, {"label" : "vecVecIP_II_BitAnd", "tail" : ": BinOpInPlace[BitAnd, Vec[Int], Vec[Int]]", "member" : "org.saddle.macros.BinOpVecVecInPlace.vecVecIP_II_BitAnd", "link" : "org\/saddle\/macros\/BinOps$.html#vecVecIP_II_BitAnd:org.saddle.ops.BinOpInPlace[org.saddle.ops.BitAnd,org.saddle.Vec[Int],org.saddle.Vec[Int]]", "kind" : "implicit val"}, {"label" : "vecVecIP_LI_BitAnd", "tail" : ": BinOpInPlace[BitAnd, Vec[Long], Vec[Int]]", "member" : "org.saddle.macros.BinOpVecVecInPlace.vecVecIP_LI_BitAnd", "link" : "org\/saddle\/macros\/BinOps$.html#vecVecIP_LI_BitAnd:org.saddle.ops.BinOpInPlace[org.saddle.ops.BitAnd,org.saddle.Vec[Long],org.saddle.Vec[Int]]", "kind" : "implicit val"}, {"label" : "vecVecIP_LL_BitAnd", "tail" : ": BinOpInPlace[BitAnd, Vec[Long], Vec[Long]]", "member" : "org.saddle.macros.BinOpVecVecInPlace.vecVecIP_LL_BitAnd", "link" : "org\/saddle\/macros\/BinOps$.html#vecVecIP_LL_BitAnd:org.saddle.ops.BinOpInPlace[org.saddle.ops.BitAnd,org.saddle.Vec[Long],org.saddle.Vec[Long]]", "kind" : "implicit val"}, {"label" : "vecVecIP_II_Mod", "tail" : ": BinOpInPlace[Mod, Vec[Int], Vec[Int]]", "member" : "org.saddle.macros.BinOpVecVecInPlace.vecVecIP_II_Mod", "link" : "org\/saddle\/macros\/BinOps$.html#vecVecIP_II_Mod:org.saddle.ops.BinOpInPlace[org.saddle.ops.Mod,org.saddle.Vec[Int],org.saddle.Vec[Int]]", "kind" : "implicit val"}, {"label" : "vecVecIP_LI_Mod", "tail" : ": BinOpInPlace[Mod, Vec[Long], Vec[Int]]", "member" : "org.saddle.macros.BinOpVecVecInPlace.vecVecIP_LI_Mod", "link" : "org\/saddle\/macros\/BinOps$.html#vecVecIP_LI_Mod:org.saddle.ops.BinOpInPlace[org.saddle.ops.Mod,org.saddle.Vec[Long],org.saddle.Vec[Int]]", "kind" : "implicit val"}, {"label" : "vecVecIP_LL_Mod", "tail" : ": BinOpInPlace[Mod, Vec[Long], Vec[Long]]", "member" : "org.saddle.macros.BinOpVecVecInPlace.vecVecIP_LL_Mod", "link" : "org\/saddle\/macros\/BinOps$.html#vecVecIP_LL_Mod:org.saddle.ops.BinOpInPlace[org.saddle.ops.Mod,org.saddle.Vec[Long],org.saddle.Vec[Long]]", "kind" : "implicit val"}, {"label" : "vecVecIP_DI_Mod", "tail" : ": BinOpInPlace[Mod, Vec[Double], Vec[Int]]", "member" : "org.saddle.macros.BinOpVecVecInPlace.vecVecIP_DI_Mod", "link" : "org\/saddle\/macros\/BinOps$.html#vecVecIP_DI_Mod:org.saddle.ops.BinOpInPlace[org.saddle.ops.Mod,org.saddle.Vec[Double],org.saddle.Vec[Int]]", "kind" : "implicit val"}, {"label" : "vecVecIP_DL_Mod", "tail" : ": BinOpInPlace[Mod, Vec[Double], Vec[Long]]", "member" : "org.saddle.macros.BinOpVecVecInPlace.vecVecIP_DL_Mod", "link" : "org\/saddle\/macros\/BinOps$.html#vecVecIP_DL_Mod:org.saddle.ops.BinOpInPlace[org.saddle.ops.Mod,org.saddle.Vec[Double],org.saddle.Vec[Long]]", "kind" : "implicit val"}, {"label" : "vecVecIP_DD_Mod", "tail" : ": BinOpInPlace[Mod, Vec[Double], Vec[Double]]", "member" : "org.saddle.macros.BinOpVecVecInPlace.vecVecIP_DD_Mod", "link" : "org\/saddle\/macros\/BinOps$.html#vecVecIP_DD_Mod:org.saddle.ops.BinOpInPlace[org.saddle.ops.Mod,org.saddle.Vec[Double],org.saddle.Vec[Double]]", "kind" : "implicit val"}, {"label" : "vecVecIP_II_Div", "tail" : ": BinOpInPlace[Divide, Vec[Int], Vec[Int]]", "member" : "org.saddle.macros.BinOpVecVecInPlace.vecVecIP_II_Div", "link" : "org\/saddle\/macros\/BinOps$.html#vecVecIP_II_Div:org.saddle.ops.BinOpInPlace[org.saddle.ops.Divide,org.saddle.Vec[Int],org.saddle.Vec[Int]]", "kind" : "implicit val"}, {"label" : "vecVecIP_LI_Div", "tail" : ": BinOpInPlace[Divide, Vec[Long], Vec[Int]]", "member" : "org.saddle.macros.BinOpVecVecInPlace.vecVecIP_LI_Div", "link" : "org\/saddle\/macros\/BinOps$.html#vecVecIP_LI_Div:org.saddle.ops.BinOpInPlace[org.saddle.ops.Divide,org.saddle.Vec[Long],org.saddle.Vec[Int]]", "kind" : "implicit val"}, {"label" : "vecVecIP_LL_Div", "tail" : ": BinOpInPlace[Divide, Vec[Long], Vec[Long]]", "member" : "org.saddle.macros.BinOpVecVecInPlace.vecVecIP_LL_Div", "link" : "org\/saddle\/macros\/BinOps$.html#vecVecIP_LL_Div:org.saddle.ops.BinOpInPlace[org.saddle.ops.Divide,org.saddle.Vec[Long],org.saddle.Vec[Long]]", "kind" : "implicit val"}, {"label" : "vecVecIP_DI_Div", "tail" : ": BinOpInPlace[Divide, Vec[Double], Vec[Int]]", "member" : "org.saddle.macros.BinOpVecVecInPlace.vecVecIP_DI_Div", "link" : "org\/saddle\/macros\/BinOps$.html#vecVecIP_DI_Div:org.saddle.ops.BinOpInPlace[org.saddle.ops.Divide,org.saddle.Vec[Double],org.saddle.Vec[Int]]", "kind" : "implicit val"}, {"label" : "vecVecIP_DL_Div", "tail" : ": BinOpInPlace[Divide, Vec[Double], Vec[Long]]", "member" : "org.saddle.macros.BinOpVecVecInPlace.vecVecIP_DL_Div", "link" : "org\/saddle\/macros\/BinOps$.html#vecVecIP_DL_Div:org.saddle.ops.BinOpInPlace[org.saddle.ops.Divide,org.saddle.Vec[Double],org.saddle.Vec[Long]]", "kind" : "implicit val"}, {"label" : "vecVecIP_DD_Div", "tail" : ": BinOpInPlace[Divide, Vec[Double], Vec[Double]]", "member" : "org.saddle.macros.BinOpVecVecInPlace.vecVecIP_DD_Div", "link" : "org\/saddle\/macros\/BinOps$.html#vecVecIP_DD_Div:org.saddle.ops.BinOpInPlace[org.saddle.ops.Divide,org.saddle.Vec[Double],org.saddle.Vec[Double]]", "kind" : "implicit val"}, {"label" : "vecVecIP_II_Mult", "tail" : ": BinOpInPlace[Multiply, Vec[Int], Vec[Int]]", "member" : "org.saddle.macros.BinOpVecVecInPlace.vecVecIP_II_Mult", "link" : "org\/saddle\/macros\/BinOps$.html#vecVecIP_II_Mult:org.saddle.ops.BinOpInPlace[org.saddle.ops.Multiply,org.saddle.Vec[Int],org.saddle.Vec[Int]]", "kind" : "implicit val"}, {"label" : "vecVecIP_LI_Mult", "tail" : ": BinOpInPlace[Multiply, Vec[Long], Vec[Int]]", "member" : "org.saddle.macros.BinOpVecVecInPlace.vecVecIP_LI_Mult", "link" : "org\/saddle\/macros\/BinOps$.html#vecVecIP_LI_Mult:org.saddle.ops.BinOpInPlace[org.saddle.ops.Multiply,org.saddle.Vec[Long],org.saddle.Vec[Int]]", "kind" : "implicit val"}, {"label" : "vecVecIP_LL_Mult", "tail" : ": BinOpInPlace[Multiply, Vec[Long], Vec[Long]]", "member" : "org.saddle.macros.BinOpVecVecInPlace.vecVecIP_LL_Mult", "link" : "org\/saddle\/macros\/BinOps$.html#vecVecIP_LL_Mult:org.saddle.ops.BinOpInPlace[org.saddle.ops.Multiply,org.saddle.Vec[Long],org.saddle.Vec[Long]]", "kind" : "implicit val"}, {"label" : "vecVecIP_DI_Mult", "tail" : ": BinOpInPlace[Multiply, Vec[Double], Vec[Int]]", "member" : "org.saddle.macros.BinOpVecVecInPlace.vecVecIP_DI_Mult", "link" : "org\/saddle\/macros\/BinOps$.html#vecVecIP_DI_Mult:org.saddle.ops.BinOpInPlace[org.saddle.ops.Multiply,org.saddle.Vec[Double],org.saddle.Vec[Int]]", "kind" : "implicit val"}, {"label" : "vecVecIP_DL_Mult", "tail" : ": BinOpInPlace[Multiply, Vec[Double], Vec[Long]]", "member" : "org.saddle.macros.BinOpVecVecInPlace.vecVecIP_DL_Mult", "link" : "org\/saddle\/macros\/BinOps$.html#vecVecIP_DL_Mult:org.saddle.ops.BinOpInPlace[org.saddle.ops.Multiply,org.saddle.Vec[Double],org.saddle.Vec[Long]]", "kind" : "implicit val"}, {"label" : "vecVecIP_DD_Mult", "tail" : ": BinOpInPlace[Multiply, Vec[Double], Vec[Double]]", "member" : "org.saddle.macros.BinOpVecVecInPlace.vecVecIP_DD_Mult", "link" : "org\/saddle\/macros\/BinOps$.html#vecVecIP_DD_Mult:org.saddle.ops.BinOpInPlace[org.saddle.ops.Multiply,org.saddle.Vec[Double],org.saddle.Vec[Double]]", "kind" : "implicit val"}, {"label" : "vecVecIP_II_Sub", "tail" : ": BinOpInPlace[Subtract, Vec[Int], Vec[Int]]", "member" : "org.saddle.macros.BinOpVecVecInPlace.vecVecIP_II_Sub", "link" : "org\/saddle\/macros\/BinOps$.html#vecVecIP_II_Sub:org.saddle.ops.BinOpInPlace[org.saddle.ops.Subtract,org.saddle.Vec[Int],org.saddle.Vec[Int]]", "kind" : "implicit val"}, {"label" : "vecVecIP_LI_Sub", "tail" : ": BinOpInPlace[Subtract, Vec[Long], Vec[Int]]", "member" : "org.saddle.macros.BinOpVecVecInPlace.vecVecIP_LI_Sub", "link" : "org\/saddle\/macros\/BinOps$.html#vecVecIP_LI_Sub:org.saddle.ops.BinOpInPlace[org.saddle.ops.Subtract,org.saddle.Vec[Long],org.saddle.Vec[Int]]", "kind" : "implicit val"}, {"label" : "vecVecIP_LL_Sub", "tail" : ": BinOpInPlace[Subtract, Vec[Long], Vec[Long]]", "member" : "org.saddle.macros.BinOpVecVecInPlace.vecVecIP_LL_Sub", "link" : "org\/saddle\/macros\/BinOps$.html#vecVecIP_LL_Sub:org.saddle.ops.BinOpInPlace[org.saddle.ops.Subtract,org.saddle.Vec[Long],org.saddle.Vec[Long]]", "kind" : "implicit val"}, {"label" : "vecVecIP_DI_Sub", "tail" : ": BinOpInPlace[Subtract, Vec[Double], Vec[Int]]", "member" : "org.saddle.macros.BinOpVecVecInPlace.vecVecIP_DI_Sub", "link" : "org\/saddle\/macros\/BinOps$.html#vecVecIP_DI_Sub:org.saddle.ops.BinOpInPlace[org.saddle.ops.Subtract,org.saddle.Vec[Double],org.saddle.Vec[Int]]", "kind" : "implicit val"}, {"label" : "vecVecIP_DL_Sub", "tail" : ": BinOpInPlace[Subtract, Vec[Double], Vec[Long]]", "member" : "org.saddle.macros.BinOpVecVecInPlace.vecVecIP_DL_Sub", "link" : "org\/saddle\/macros\/BinOps$.html#vecVecIP_DL_Sub:org.saddle.ops.BinOpInPlace[org.saddle.ops.Subtract,org.saddle.Vec[Double],org.saddle.Vec[Long]]", "kind" : "implicit val"}, {"label" : "vecVecIP_DD_Sub", "tail" : ": BinOpInPlace[Subtract, Vec[Double], Vec[Double]]", "member" : "org.saddle.macros.BinOpVecVecInPlace.vecVecIP_DD_Sub", "link" : "org\/saddle\/macros\/BinOps$.html#vecVecIP_DD_Sub:org.saddle.ops.BinOpInPlace[org.saddle.ops.Subtract,org.saddle.Vec[Double],org.saddle.Vec[Double]]", "kind" : "implicit val"}, {"label" : "vecVecIP_II_Power", "tail" : ": BinOpInPlace[Power, Vec[Int], Vec[Int]]", "member" : "org.saddle.macros.BinOpVecVecInPlace.vecVecIP_II_Power", "link" : "org\/saddle\/macros\/BinOps$.html#vecVecIP_II_Power:org.saddle.ops.BinOpInPlace[org.saddle.ops.Power,org.saddle.Vec[Int],org.saddle.Vec[Int]]", "kind" : "implicit val"}, {"label" : "vecVecIP_LI_Power", "tail" : ": BinOpInPlace[Power, Vec[Long], Vec[Int]]", "member" : "org.saddle.macros.BinOpVecVecInPlace.vecVecIP_LI_Power", "link" : "org\/saddle\/macros\/BinOps$.html#vecVecIP_LI_Power:org.saddle.ops.BinOpInPlace[org.saddle.ops.Power,org.saddle.Vec[Long],org.saddle.Vec[Int]]", "kind" : "implicit val"}, {"label" : "vecVecIP_LL_Power", "tail" : ": BinOpInPlace[Power, Vec[Long], Vec[Long]]", "member" : "org.saddle.macros.BinOpVecVecInPlace.vecVecIP_LL_Power", "link" : "org\/saddle\/macros\/BinOps$.html#vecVecIP_LL_Power:org.saddle.ops.BinOpInPlace[org.saddle.ops.Power,org.saddle.Vec[Long],org.saddle.Vec[Long]]", "kind" : "implicit val"}, {"label" : "vecVecIP_DI_Power", "tail" : ": BinOpInPlace[Power, Vec[Double], Vec[Int]]", "member" : "org.saddle.macros.BinOpVecVecInPlace.vecVecIP_DI_Power", "link" : "org\/saddle\/macros\/BinOps$.html#vecVecIP_DI_Power:org.saddle.ops.BinOpInPlace[org.saddle.ops.Power,org.saddle.Vec[Double],org.saddle.Vec[Int]]", "kind" : "implicit val"}, {"label" : "vecVecIP_DL_Power", "tail" : ": BinOpInPlace[Power, Vec[Double], Vec[Long]]", "member" : "org.saddle.macros.BinOpVecVecInPlace.vecVecIP_DL_Power", "link" : "org\/saddle\/macros\/BinOps$.html#vecVecIP_DL_Power:org.saddle.ops.BinOpInPlace[org.saddle.ops.Power,org.saddle.Vec[Double],org.saddle.Vec[Long]]", "kind" : "implicit val"}, {"label" : "vecVecIP_DD_Power", "tail" : ": BinOpInPlace[Power, Vec[Double], Vec[Double]]", "member" : "org.saddle.macros.BinOpVecVecInPlace.vecVecIP_DD_Power", "link" : "org\/saddle\/macros\/BinOps$.html#vecVecIP_DD_Power:org.saddle.ops.BinOpInPlace[org.saddle.ops.Power,org.saddle.Vec[Double],org.saddle.Vec[Double]]", "kind" : "implicit val"}, {"label" : "vecVecIP_II_Add", "tail" : ": BinOpInPlace[Add, Vec[Int], Vec[Int]]", "member" : "org.saddle.macros.BinOpVecVecInPlace.vecVecIP_II_Add", "link" : "org\/saddle\/macros\/BinOps$.html#vecVecIP_II_Add:org.saddle.ops.BinOpInPlace[org.saddle.ops.Add,org.saddle.Vec[Int],org.saddle.Vec[Int]]", "kind" : "implicit val"}, {"label" : "vecVecIP_LI_Add", "tail" : ": BinOpInPlace[Add, Vec[Long], Vec[Int]]", "member" : "org.saddle.macros.BinOpVecVecInPlace.vecVecIP_LI_Add", "link" : "org\/saddle\/macros\/BinOps$.html#vecVecIP_LI_Add:org.saddle.ops.BinOpInPlace[org.saddle.ops.Add,org.saddle.Vec[Long],org.saddle.Vec[Int]]", "kind" : "implicit val"}, {"label" : "vecVecIP_LL_Add", "tail" : ": BinOpInPlace[Add, Vec[Long], Vec[Long]]", "member" : "org.saddle.macros.BinOpVecVecInPlace.vecVecIP_LL_Add", "link" : "org\/saddle\/macros\/BinOps$.html#vecVecIP_LL_Add:org.saddle.ops.BinOpInPlace[org.saddle.ops.Add,org.saddle.Vec[Long],org.saddle.Vec[Long]]", "kind" : "implicit val"}, {"label" : "vecVecIP_DI_Add", "tail" : ": BinOpInPlace[Add, Vec[Double], Vec[Int]]", "member" : "org.saddle.macros.BinOpVecVecInPlace.vecVecIP_DI_Add", "link" : "org\/saddle\/macros\/BinOps$.html#vecVecIP_DI_Add:org.saddle.ops.BinOpInPlace[org.saddle.ops.Add,org.saddle.Vec[Double],org.saddle.Vec[Int]]", "kind" : "implicit val"}, {"label" : "vecVecIP_DL_Add", "tail" : ": BinOpInPlace[Add, Vec[Double], Vec[Long]]", "member" : "org.saddle.macros.BinOpVecVecInPlace.vecVecIP_DL_Add", "link" : "org\/saddle\/macros\/BinOps$.html#vecVecIP_DL_Add:org.saddle.ops.BinOpInPlace[org.saddle.ops.Add,org.saddle.Vec[Double],org.saddle.Vec[Long]]", "kind" : "implicit val"}, {"label" : "vecVecIP_DD_Add", "tail" : ": BinOpInPlace[Add, Vec[Double], Vec[Double]]", "member" : "org.saddle.macros.BinOpVecVecInPlace.vecVecIP_DD_Add", "link" : "org\/saddle\/macros\/BinOps$.html#vecVecIP_DD_Add:org.saddle.ops.BinOpInPlace[org.saddle.ops.Add,org.saddle.Vec[Double],org.saddle.Vec[Double]]", "kind" : "implicit val"}, {"label" : "vecSclr_BB_Xor", "tail" : ": BinOpInPlace[XorOp, Vec[Boolean], Boolean]", "member" : "org.saddle.macros.BinOpVecInPlace.vecSclr_BB_Xor", "link" : "org\/saddle\/macros\/BinOps$.html#vecSclr_BB_Xor:org.saddle.ops.BinOpInPlace[org.saddle.ops.XorOp,org.saddle.Vec[Boolean],Boolean]", "kind" : "implicit val"}, {"label" : "vecSclr_BB_Or", "tail" : ": BinOpInPlace[OrOp, Vec[Boolean], Boolean]", "member" : "org.saddle.macros.BinOpVecInPlace.vecSclr_BB_Or", "link" : "org\/saddle\/macros\/BinOps$.html#vecSclr_BB_Or:org.saddle.ops.BinOpInPlace[org.saddle.ops.OrOp,org.saddle.Vec[Boolean],Boolean]", "kind" : "implicit val"}, {"label" : "vecSclr_BB_And", "tail" : ": BinOpInPlace[AndOp, Vec[Boolean], Boolean]", "member" : "org.saddle.macros.BinOpVecInPlace.vecSclr_BB_And", "link" : "org\/saddle\/macros\/BinOps$.html#vecSclr_BB_And:org.saddle.ops.BinOpInPlace[org.saddle.ops.AndOp,org.saddle.Vec[Boolean],Boolean]", "kind" : "implicit val"}, {"label" : "vecSclr_BB_EQ", "tail" : ": BinOpInPlace[EqOp, Vec[Boolean], Boolean]", "member" : "org.saddle.macros.BinOpVecInPlace.vecSclr_BB_EQ", "link" : "org\/saddle\/macros\/BinOps$.html#vecSclr_BB_EQ:org.saddle.ops.BinOpInPlace[org.saddle.ops.EqOp,org.saddle.Vec[Boolean],Boolean]", "kind" : "implicit val"}, {"label" : "vecSclr_BB_NEQ", "tail" : ": BinOpInPlace[NeqOp, Vec[Boolean], Boolean]", "member" : "org.saddle.macros.BinOpVecInPlace.vecSclr_BB_NEQ", "link" : "org\/saddle\/macros\/BinOps$.html#vecSclr_BB_NEQ:org.saddle.ops.BinOpInPlace[org.saddle.ops.NeqOp,org.saddle.Vec[Boolean],Boolean]", "kind" : "implicit val"}, {"label" : "vecSclr_BB_LTE", "tail" : ": BinOpInPlace[LteOp, Vec[Boolean], Boolean]", "member" : "org.saddle.macros.BinOpVecInPlace.vecSclr_BB_LTE", "link" : "org\/saddle\/macros\/BinOps$.html#vecSclr_BB_LTE:org.saddle.ops.BinOpInPlace[org.saddle.ops.LteOp,org.saddle.Vec[Boolean],Boolean]", "kind" : "implicit val"}, {"label" : "vecSclr_BB_LT", "tail" : ": BinOpInPlace[LtOp, Vec[Boolean], Boolean]", "member" : "org.saddle.macros.BinOpVecInPlace.vecSclr_BB_LT", "link" : "org\/saddle\/macros\/BinOps$.html#vecSclr_BB_LT:org.saddle.ops.BinOpInPlace[org.saddle.ops.LtOp,org.saddle.Vec[Boolean],Boolean]", "kind" : "implicit val"}, {"label" : "vecSclr_BB_GTE", "tail" : ": BinOpInPlace[GteOp, Vec[Boolean], Boolean]", "member" : "org.saddle.macros.BinOpVecInPlace.vecSclr_BB_GTE", "link" : "org\/saddle\/macros\/BinOps$.html#vecSclr_BB_GTE:org.saddle.ops.BinOpInPlace[org.saddle.ops.GteOp,org.saddle.Vec[Boolean],Boolean]", "kind" : "implicit val"}, {"label" : "vecSclr_BB_GT", "tail" : ": BinOpInPlace[GtOp, Vec[Boolean], Boolean]", "member" : "org.saddle.macros.BinOpVecInPlace.vecSclr_BB_GT", "link" : "org\/saddle\/macros\/BinOps$.html#vecSclr_BB_GT:org.saddle.ops.BinOpInPlace[org.saddle.ops.GtOp,org.saddle.Vec[Boolean],Boolean]", "kind" : "implicit val"}, {"label" : "vecSclr_II_BitUshr", "tail" : ": BinOpInPlace[BitUShr, Vec[Int], Int]", "member" : "org.saddle.macros.BinOpVecInPlace.vecSclr_II_BitUshr", "link" : "org\/saddle\/macros\/BinOps$.html#vecSclr_II_BitUshr:org.saddle.ops.BinOpInPlace[org.saddle.ops.BitUShr,org.saddle.Vec[Int],Int]", "kind" : "implicit val"}, {"label" : "vecSclr_LI_BitUshr", "tail" : ": BinOpInPlace[BitUShr, Vec[Long], Int]", "member" : "org.saddle.macros.BinOpVecInPlace.vecSclr_LI_BitUshr", "link" : "org\/saddle\/macros\/BinOps$.html#vecSclr_LI_BitUshr:org.saddle.ops.BinOpInPlace[org.saddle.ops.BitUShr,org.saddle.Vec[Long],Int]", "kind" : "implicit val"}, {"label" : "vecSclr_LL_BitUshr", "tail" : ": BinOpInPlace[BitUShr, Vec[Long], Long]", "member" : "org.saddle.macros.BinOpVecInPlace.vecSclr_LL_BitUshr", "link" : "org\/saddle\/macros\/BinOps$.html#vecSclr_LL_BitUshr:org.saddle.ops.BinOpInPlace[org.saddle.ops.BitUShr,org.saddle.Vec[Long],Long]", "kind" : "implicit val"}, {"label" : "vecSclr_II_BitShr", "tail" : ": BinOpInPlace[BitShr, Vec[Int], Int]", "member" : "org.saddle.macros.BinOpVecInPlace.vecSclr_II_BitShr", "link" : "org\/saddle\/macros\/BinOps$.html#vecSclr_II_BitShr:org.saddle.ops.BinOpInPlace[org.saddle.ops.BitShr,org.saddle.Vec[Int],Int]", "kind" : "implicit val"}, {"label" : "vecSclr_LI_BitShr", "tail" : ": BinOpInPlace[BitShr, Vec[Long], Int]", "member" : "org.saddle.macros.BinOpVecInPlace.vecSclr_LI_BitShr", "link" : "org\/saddle\/macros\/BinOps$.html#vecSclr_LI_BitShr:org.saddle.ops.BinOpInPlace[org.saddle.ops.BitShr,org.saddle.Vec[Long],Int]", "kind" : "implicit val"}, {"label" : "vecSclr_LL_BitShr", "tail" : ": BinOpInPlace[BitShr, Vec[Long], Long]", "member" : "org.saddle.macros.BinOpVecInPlace.vecSclr_LL_BitShr", "link" : "org\/saddle\/macros\/BinOps$.html#vecSclr_LL_BitShr:org.saddle.ops.BinOpInPlace[org.saddle.ops.BitShr,org.saddle.Vec[Long],Long]", "kind" : "implicit val"}, {"label" : "vecSclr_II_BitShl", "tail" : ": BinOpInPlace[BitShl, Vec[Int], Int]", "member" : "org.saddle.macros.BinOpVecInPlace.vecSclr_II_BitShl", "link" : "org\/saddle\/macros\/BinOps$.html#vecSclr_II_BitShl:org.saddle.ops.BinOpInPlace[org.saddle.ops.BitShl,org.saddle.Vec[Int],Int]", "kind" : "implicit val"}, {"label" : "vecSclr_LI_BitShl", "tail" : ": BinOpInPlace[BitShl, Vec[Long], Int]", "member" : "org.saddle.macros.BinOpVecInPlace.vecSclr_LI_BitShl", "link" : "org\/saddle\/macros\/BinOps$.html#vecSclr_LI_BitShl:org.saddle.ops.BinOpInPlace[org.saddle.ops.BitShl,org.saddle.Vec[Long],Int]", "kind" : "implicit val"}, {"label" : "vecSclr_LL_BitShl", "tail" : ": BinOpInPlace[BitShl, Vec[Long], Long]", "member" : "org.saddle.macros.BinOpVecInPlace.vecSclr_LL_BitShl", "link" : "org\/saddle\/macros\/BinOps$.html#vecSclr_LL_BitShl:org.saddle.ops.BinOpInPlace[org.saddle.ops.BitShl,org.saddle.Vec[Long],Long]", "kind" : "implicit val"}, {"label" : "vecSclr_II_BitXor", "tail" : ": BinOpInPlace[BitXor, Vec[Int], Int]", "member" : "org.saddle.macros.BinOpVecInPlace.vecSclr_II_BitXor", "link" : "org\/saddle\/macros\/BinOps$.html#vecSclr_II_BitXor:org.saddle.ops.BinOpInPlace[org.saddle.ops.BitXor,org.saddle.Vec[Int],Int]", "kind" : "implicit val"}, {"label" : "vecSclr_LI_BitXor", "tail" : ": BinOpInPlace[BitXor, Vec[Long], Int]", "member" : "org.saddle.macros.BinOpVecInPlace.vecSclr_LI_BitXor", "link" : "org\/saddle\/macros\/BinOps$.html#vecSclr_LI_BitXor:org.saddle.ops.BinOpInPlace[org.saddle.ops.BitXor,org.saddle.Vec[Long],Int]", "kind" : "implicit val"}, {"label" : "vecSclr_LL_BitXor", "tail" : ": BinOpInPlace[BitXor, Vec[Long], Long]", "member" : "org.saddle.macros.BinOpVecInPlace.vecSclr_LL_BitXor", "link" : "org\/saddle\/macros\/BinOps$.html#vecSclr_LL_BitXor:org.saddle.ops.BinOpInPlace[org.saddle.ops.BitXor,org.saddle.Vec[Long],Long]", "kind" : "implicit val"}, {"label" : "vecSclr_II_BitOr", "tail" : ": BinOpInPlace[BitOr, Vec[Int], Int]", "member" : "org.saddle.macros.BinOpVecInPlace.vecSclr_II_BitOr", "link" : "org\/saddle\/macros\/BinOps$.html#vecSclr_II_BitOr:org.saddle.ops.BinOpInPlace[org.saddle.ops.BitOr,org.saddle.Vec[Int],Int]", "kind" : "implicit val"}, {"label" : "vecSclr_LI_BitOr", "tail" : ": BinOpInPlace[BitOr, Vec[Long], Int]", "member" : "org.saddle.macros.BinOpVecInPlace.vecSclr_LI_BitOr", "link" : "org\/saddle\/macros\/BinOps$.html#vecSclr_LI_BitOr:org.saddle.ops.BinOpInPlace[org.saddle.ops.BitOr,org.saddle.Vec[Long],Int]", "kind" : "implicit val"}, {"label" : "vecSclr_LL_BitOr", "tail" : ": BinOpInPlace[BitOr, Vec[Long], Long]", "member" : "org.saddle.macros.BinOpVecInPlace.vecSclr_LL_BitOr", "link" : "org\/saddle\/macros\/BinOps$.html#vecSclr_LL_BitOr:org.saddle.ops.BinOpInPlace[org.saddle.ops.BitOr,org.saddle.Vec[Long],Long]", "kind" : "implicit val"}, {"label" : "vecSclr_II_BitAnd", "tail" : ": BinOpInPlace[BitAnd, Vec[Int], Int]", "member" : "org.saddle.macros.BinOpVecInPlace.vecSclr_II_BitAnd", "link" : "org\/saddle\/macros\/BinOps$.html#vecSclr_II_BitAnd:org.saddle.ops.BinOpInPlace[org.saddle.ops.BitAnd,org.saddle.Vec[Int],Int]", "kind" : "implicit val"}, {"label" : "vecSclr_LI_BitAnd", "tail" : ": BinOpInPlace[BitAnd, Vec[Long], Int]", "member" : "org.saddle.macros.BinOpVecInPlace.vecSclr_LI_BitAnd", "link" : "org\/saddle\/macros\/BinOps$.html#vecSclr_LI_BitAnd:org.saddle.ops.BinOpInPlace[org.saddle.ops.BitAnd,org.saddle.Vec[Long],Int]", "kind" : "implicit val"}, {"label" : "vecSclr_LL_BitAnd", "tail" : ": BinOpInPlace[BitAnd, Vec[Long], Long]", "member" : "org.saddle.macros.BinOpVecInPlace.vecSclr_LL_BitAnd", "link" : "org\/saddle\/macros\/BinOps$.html#vecSclr_LL_BitAnd:org.saddle.ops.BinOpInPlace[org.saddle.ops.BitAnd,org.saddle.Vec[Long],Long]", "kind" : "implicit val"}, {"label" : "vecSclr_II_Mod", "tail" : ": BinOpInPlace[Mod, Vec[Int], Int]", "member" : "org.saddle.macros.BinOpVecInPlace.vecSclr_II_Mod", "link" : "org\/saddle\/macros\/BinOps$.html#vecSclr_II_Mod:org.saddle.ops.BinOpInPlace[org.saddle.ops.Mod,org.saddle.Vec[Int],Int]", "kind" : "implicit val"}, {"label" : "vecSclr_LI_Mod", "tail" : ": BinOpInPlace[Mod, Vec[Long], Int]", "member" : "org.saddle.macros.BinOpVecInPlace.vecSclr_LI_Mod", "link" : "org\/saddle\/macros\/BinOps$.html#vecSclr_LI_Mod:org.saddle.ops.BinOpInPlace[org.saddle.ops.Mod,org.saddle.Vec[Long],Int]", "kind" : "implicit val"}, {"label" : "vecSclr_LL_Mod", "tail" : ": BinOpInPlace[Mod, Vec[Long], Long]", "member" : "org.saddle.macros.BinOpVecInPlace.vecSclr_LL_Mod", "link" : "org\/saddle\/macros\/BinOps$.html#vecSclr_LL_Mod:org.saddle.ops.BinOpInPlace[org.saddle.ops.Mod,org.saddle.Vec[Long],Long]", "kind" : "implicit val"}, {"label" : "vecSclr_DI_Mod", "tail" : ": BinOpInPlace[Mod, Vec[Double], Int]", "member" : "org.saddle.macros.BinOpVecInPlace.vecSclr_DI_Mod", "link" : "org\/saddle\/macros\/BinOps$.html#vecSclr_DI_Mod:org.saddle.ops.BinOpInPlace[org.saddle.ops.Mod,org.saddle.Vec[Double],Int]", "kind" : "implicit val"}, {"label" : "vecSclr_DL_Mod", "tail" : ": BinOpInPlace[Mod, Vec[Double], Long]", "member" : "org.saddle.macros.BinOpVecInPlace.vecSclr_DL_Mod", "link" : "org\/saddle\/macros\/BinOps$.html#vecSclr_DL_Mod:org.saddle.ops.BinOpInPlace[org.saddle.ops.Mod,org.saddle.Vec[Double],Long]", "kind" : "implicit val"}, {"label" : "vecSclr_DD_Mod", "tail" : ": BinOpInPlace[Mod, Vec[Double], Double]", "member" : "org.saddle.macros.BinOpVecInPlace.vecSclr_DD_Mod", "link" : "org\/saddle\/macros\/BinOps$.html#vecSclr_DD_Mod:org.saddle.ops.BinOpInPlace[org.saddle.ops.Mod,org.saddle.Vec[Double],Double]", "kind" : "implicit val"}, {"label" : "vecSclr_II_Div", "tail" : ": BinOpInPlace[Divide, Vec[Int], Int]", "member" : "org.saddle.macros.BinOpVecInPlace.vecSclr_II_Div", "link" : "org\/saddle\/macros\/BinOps$.html#vecSclr_II_Div:org.saddle.ops.BinOpInPlace[org.saddle.ops.Divide,org.saddle.Vec[Int],Int]", "kind" : "implicit val"}, {"label" : "vecSclr_LI_Div", "tail" : ": BinOpInPlace[Divide, Vec[Long], Int]", "member" : "org.saddle.macros.BinOpVecInPlace.vecSclr_LI_Div", "link" : "org\/saddle\/macros\/BinOps$.html#vecSclr_LI_Div:org.saddle.ops.BinOpInPlace[org.saddle.ops.Divide,org.saddle.Vec[Long],Int]", "kind" : "implicit val"}, {"label" : "vecSclr_LL_Div", "tail" : ": BinOpInPlace[Divide, Vec[Long], Long]", "member" : "org.saddle.macros.BinOpVecInPlace.vecSclr_LL_Div", "link" : "org\/saddle\/macros\/BinOps$.html#vecSclr_LL_Div:org.saddle.ops.BinOpInPlace[org.saddle.ops.Divide,org.saddle.Vec[Long],Long]", "kind" : "implicit val"}, {"label" : "vecSclr_DI_Div", "tail" : ": BinOpInPlace[Divide, Vec[Double], Int]", "member" : "org.saddle.macros.BinOpVecInPlace.vecSclr_DI_Div", "link" : "org\/saddle\/macros\/BinOps$.html#vecSclr_DI_Div:org.saddle.ops.BinOpInPlace[org.saddle.ops.Divide,org.saddle.Vec[Double],Int]", "kind" : "implicit val"}, {"label" : "vecSclr_DL_Div", "tail" : ": BinOpInPlace[Divide, Vec[Double], Long]", "member" : "org.saddle.macros.BinOpVecInPlace.vecSclr_DL_Div", "link" : "org\/saddle\/macros\/BinOps$.html#vecSclr_DL_Div:org.saddle.ops.BinOpInPlace[org.saddle.ops.Divide,org.saddle.Vec[Double],Long]", "kind" : "implicit val"}, {"label" : "vecSclr_DD_Div", "tail" : ": BinOpInPlace[Divide, Vec[Double], Double]", "member" : "org.saddle.macros.BinOpVecInPlace.vecSclr_DD_Div", "link" : "org\/saddle\/macros\/BinOps$.html#vecSclr_DD_Div:org.saddle.ops.BinOpInPlace[org.saddle.ops.Divide,org.saddle.Vec[Double],Double]", "kind" : "implicit val"}, {"label" : "vecSclr_II_Mult", "tail" : ": BinOpInPlace[Multiply, Vec[Int], Int]", "member" : "org.saddle.macros.BinOpVecInPlace.vecSclr_II_Mult", "link" : "org\/saddle\/macros\/BinOps$.html#vecSclr_II_Mult:org.saddle.ops.BinOpInPlace[org.saddle.ops.Multiply,org.saddle.Vec[Int],Int]", "kind" : "implicit val"}, {"label" : "vecSclr_LI_Mult", "tail" : ": BinOpInPlace[Multiply, Vec[Long], Int]", "member" : "org.saddle.macros.BinOpVecInPlace.vecSclr_LI_Mult", "link" : "org\/saddle\/macros\/BinOps$.html#vecSclr_LI_Mult:org.saddle.ops.BinOpInPlace[org.saddle.ops.Multiply,org.saddle.Vec[Long],Int]", "kind" : "implicit val"}, {"label" : "vecSclr_LL_Mult", "tail" : ": BinOpInPlace[Multiply, Vec[Long], Long]", "member" : "org.saddle.macros.BinOpVecInPlace.vecSclr_LL_Mult", "link" : "org\/saddle\/macros\/BinOps$.html#vecSclr_LL_Mult:org.saddle.ops.BinOpInPlace[org.saddle.ops.Multiply,org.saddle.Vec[Long],Long]", "kind" : "implicit val"}, {"label" : "vecSclr_DI_Mult", "tail" : ": BinOpInPlace[Multiply, Vec[Double], Int]", "member" : "org.saddle.macros.BinOpVecInPlace.vecSclr_DI_Mult", "link" : "org\/saddle\/macros\/BinOps$.html#vecSclr_DI_Mult:org.saddle.ops.BinOpInPlace[org.saddle.ops.Multiply,org.saddle.Vec[Double],Int]", "kind" : "implicit val"}, {"label" : "vecSclr_DL_Mult", "tail" : ": BinOpInPlace[Multiply, Vec[Double], Long]", "member" : "org.saddle.macros.BinOpVecInPlace.vecSclr_DL_Mult", "link" : "org\/saddle\/macros\/BinOps$.html#vecSclr_DL_Mult:org.saddle.ops.BinOpInPlace[org.saddle.ops.Multiply,org.saddle.Vec[Double],Long]", "kind" : "implicit val"}, {"label" : "vecSclr_DD_Mult", "tail" : ": BinOpInPlace[Multiply, Vec[Double], Double]", "member" : "org.saddle.macros.BinOpVecInPlace.vecSclr_DD_Mult", "link" : "org\/saddle\/macros\/BinOps$.html#vecSclr_DD_Mult:org.saddle.ops.BinOpInPlace[org.saddle.ops.Multiply,org.saddle.Vec[Double],Double]", "kind" : "implicit val"}, {"label" : "vecSclr_II_Sub", "tail" : ": BinOpInPlace[Subtract, Vec[Int], Int]", "member" : "org.saddle.macros.BinOpVecInPlace.vecSclr_II_Sub", "link" : "org\/saddle\/macros\/BinOps$.html#vecSclr_II_Sub:org.saddle.ops.BinOpInPlace[org.saddle.ops.Subtract,org.saddle.Vec[Int],Int]", "kind" : "implicit val"}, {"label" : "vecSclr_LI_Sub", "tail" : ": BinOpInPlace[Subtract, Vec[Long], Int]", "member" : "org.saddle.macros.BinOpVecInPlace.vecSclr_LI_Sub", "link" : "org\/saddle\/macros\/BinOps$.html#vecSclr_LI_Sub:org.saddle.ops.BinOpInPlace[org.saddle.ops.Subtract,org.saddle.Vec[Long],Int]", "kind" : "implicit val"}, {"label" : "vecSclr_LL_Sub", "tail" : ": BinOpInPlace[Subtract, Vec[Long], Long]", "member" : "org.saddle.macros.BinOpVecInPlace.vecSclr_LL_Sub", "link" : "org\/saddle\/macros\/BinOps$.html#vecSclr_LL_Sub:org.saddle.ops.BinOpInPlace[org.saddle.ops.Subtract,org.saddle.Vec[Long],Long]", "kind" : "implicit val"}, {"label" : "vecSclr_DI_Sub", "tail" : ": BinOpInPlace[Subtract, Vec[Double], Int]", "member" : "org.saddle.macros.BinOpVecInPlace.vecSclr_DI_Sub", "link" : "org\/saddle\/macros\/BinOps$.html#vecSclr_DI_Sub:org.saddle.ops.BinOpInPlace[org.saddle.ops.Subtract,org.saddle.Vec[Double],Int]", "kind" : "implicit val"}, {"label" : "vecSclr_DL_Sub", "tail" : ": BinOpInPlace[Subtract, Vec[Double], Long]", "member" : "org.saddle.macros.BinOpVecInPlace.vecSclr_DL_Sub", "link" : "org\/saddle\/macros\/BinOps$.html#vecSclr_DL_Sub:org.saddle.ops.BinOpInPlace[org.saddle.ops.Subtract,org.saddle.Vec[Double],Long]", "kind" : "implicit val"}, {"label" : "vecSclr_DD_Sub", "tail" : ": BinOpInPlace[Subtract, Vec[Double], Double]", "member" : "org.saddle.macros.BinOpVecInPlace.vecSclr_DD_Sub", "link" : "org\/saddle\/macros\/BinOps$.html#vecSclr_DD_Sub:org.saddle.ops.BinOpInPlace[org.saddle.ops.Subtract,org.saddle.Vec[Double],Double]", "kind" : "implicit val"}, {"label" : "vecSclr_II_Power", "tail" : ": BinOpInPlace[Power, Vec[Int], Int]", "member" : "org.saddle.macros.BinOpVecInPlace.vecSclr_II_Power", "link" : "org\/saddle\/macros\/BinOps$.html#vecSclr_II_Power:org.saddle.ops.BinOpInPlace[org.saddle.ops.Power,org.saddle.Vec[Int],Int]", "kind" : "implicit val"}, {"label" : "vecSclr_LI_Power", "tail" : ": BinOpInPlace[Power, Vec[Long], Int]", "member" : "org.saddle.macros.BinOpVecInPlace.vecSclr_LI_Power", "link" : "org\/saddle\/macros\/BinOps$.html#vecSclr_LI_Power:org.saddle.ops.BinOpInPlace[org.saddle.ops.Power,org.saddle.Vec[Long],Int]", "kind" : "implicit val"}, {"label" : "vecSclr_LL_Power", "tail" : ": BinOpInPlace[Power, Vec[Long], Long]", "member" : "org.saddle.macros.BinOpVecInPlace.vecSclr_LL_Power", "link" : "org\/saddle\/macros\/BinOps$.html#vecSclr_LL_Power:org.saddle.ops.BinOpInPlace[org.saddle.ops.Power,org.saddle.Vec[Long],Long]", "kind" : "implicit val"}, {"label" : "vecSclr_DI_Power", "tail" : ": BinOpInPlace[Power, Vec[Double], Int]", "member" : "org.saddle.macros.BinOpVecInPlace.vecSclr_DI_Power", "link" : "org\/saddle\/macros\/BinOps$.html#vecSclr_DI_Power:org.saddle.ops.BinOpInPlace[org.saddle.ops.Power,org.saddle.Vec[Double],Int]", "kind" : "implicit val"}, {"label" : "vecSclr_DL_Power", "tail" : ": BinOpInPlace[Power, Vec[Double], Long]", "member" : "org.saddle.macros.BinOpVecInPlace.vecSclr_DL_Power", "link" : "org\/saddle\/macros\/BinOps$.html#vecSclr_DL_Power:org.saddle.ops.BinOpInPlace[org.saddle.ops.Power,org.saddle.Vec[Double],Long]", "kind" : "implicit val"}, {"label" : "vecSclr_DD_Power", "tail" : ": BinOpInPlace[Power, Vec[Double], Double]", "member" : "org.saddle.macros.BinOpVecInPlace.vecSclr_DD_Power", "link" : "org\/saddle\/macros\/BinOps$.html#vecSclr_DD_Power:org.saddle.ops.BinOpInPlace[org.saddle.ops.Power,org.saddle.Vec[Double],Double]", "kind" : "implicit val"}, {"label" : "vecSclr_II_Add", "tail" : ": BinOpInPlace[Add, Vec[Int], Int]", "member" : "org.saddle.macros.BinOpVecInPlace.vecSclr_II_Add", "link" : "org\/saddle\/macros\/BinOps$.html#vecSclr_II_Add:org.saddle.ops.BinOpInPlace[org.saddle.ops.Add,org.saddle.Vec[Int],Int]", "kind" : "implicit val"}, {"label" : "vecSclr_LI_Add", "tail" : ": BinOpInPlace[Add, Vec[Long], Int]", "member" : "org.saddle.macros.BinOpVecInPlace.vecSclr_LI_Add", "link" : "org\/saddle\/macros\/BinOps$.html#vecSclr_LI_Add:org.saddle.ops.BinOpInPlace[org.saddle.ops.Add,org.saddle.Vec[Long],Int]", "kind" : "implicit val"}, {"label" : "vecSclr_LL_Add", "tail" : ": BinOpInPlace[Add, Vec[Long], Long]", "member" : "org.saddle.macros.BinOpVecInPlace.vecSclr_LL_Add", "link" : "org\/saddle\/macros\/BinOps$.html#vecSclr_LL_Add:org.saddle.ops.BinOpInPlace[org.saddle.ops.Add,org.saddle.Vec[Long],Long]", "kind" : "implicit val"}, {"label" : "vecSclr_DI_Add", "tail" : ": BinOpInPlace[Add, Vec[Double], Int]", "member" : "org.saddle.macros.BinOpVecInPlace.vecSclr_DI_Add", "link" : "org\/saddle\/macros\/BinOps$.html#vecSclr_DI_Add:org.saddle.ops.BinOpInPlace[org.saddle.ops.Add,org.saddle.Vec[Double],Int]", "kind" : "implicit val"}, {"label" : "vecSclr_DL_Add", "tail" : ": BinOpInPlace[Add, Vec[Double], Long]", "member" : "org.saddle.macros.BinOpVecInPlace.vecSclr_DL_Add", "link" : "org\/saddle\/macros\/BinOps$.html#vecSclr_DL_Add:org.saddle.ops.BinOpInPlace[org.saddle.ops.Add,org.saddle.Vec[Double],Long]", "kind" : "implicit val"}, {"label" : "vecSclr_DD_Add", "tail" : ": BinOpInPlace[Add, Vec[Double], Double]", "member" : "org.saddle.macros.BinOpVecInPlace.vecSclr_DD_Add", "link" : "org\/saddle\/macros\/BinOps$.html#vecSclr_DD_Add:org.saddle.ops.BinOpInPlace[org.saddle.ops.Add,org.saddle.Vec[Double],Double]", "kind" : "implicit val"}, {"label" : "matMat_Copy_BB_Xor", "tail" : ": BinOp[XorOp, Mat[Boolean], Mat[Boolean], Mat[Boolean]]", "member" : "org.saddle.macros.BinOpMatMatCopy.matMat_Copy_BB_Xor", "link" : "org\/saddle\/macros\/BinOps$.html#matMat_Copy_BB_Xor:org.saddle.ops.BinOp[org.saddle.ops.XorOp,org.saddle.Mat[Boolean],org.saddle.Mat[Boolean],org.saddle.Mat[Boolean]]", "kind" : "implicit val"}, {"label" : "matMat_Copy_BB_Or", "tail" : ": BinOp[OrOp, Mat[Boolean], Mat[Boolean], Mat[Boolean]]", "member" : "org.saddle.macros.BinOpMatMatCopy.matMat_Copy_BB_Or", "link" : "org\/saddle\/macros\/BinOps$.html#matMat_Copy_BB_Or:org.saddle.ops.BinOp[org.saddle.ops.OrOp,org.saddle.Mat[Boolean],org.saddle.Mat[Boolean],org.saddle.Mat[Boolean]]", "kind" : "implicit val"}, {"label" : "matMat_Copy_BB_And", "tail" : ": BinOp[AndOp, Mat[Boolean], Mat[Boolean], Mat[Boolean]]", "member" : "org.saddle.macros.BinOpMatMatCopy.matMat_Copy_BB_And", "link" : "org\/saddle\/macros\/BinOps$.html#matMat_Copy_BB_And:org.saddle.ops.BinOp[org.saddle.ops.AndOp,org.saddle.Mat[Boolean],org.saddle.Mat[Boolean],org.saddle.Mat[Boolean]]", "kind" : "implicit val"}, {"label" : "matMat_Copy_II_BitUshr", "tail" : ": BinOp[BitUShr, Mat[Int], Mat[Int], Mat[Int]]", "member" : "org.saddle.macros.BinOpMatMatCopy.matMat_Copy_II_BitUshr", "link" : "org\/saddle\/macros\/BinOps$.html#matMat_Copy_II_BitUshr:org.saddle.ops.BinOp[org.saddle.ops.BitUShr,org.saddle.Mat[Int],org.saddle.Mat[Int],org.saddle.Mat[Int]]", "kind" : "implicit val"}, {"label" : "matMat_Copy_LI_BitUshr", "tail" : ": BinOp[BitUShr, Mat[Long], Mat[Int], Mat[Long]]", "member" : "org.saddle.macros.BinOpMatMatCopy.matMat_Copy_LI_BitUshr", "link" : "org\/saddle\/macros\/BinOps$.html#matMat_Copy_LI_BitUshr:org.saddle.ops.BinOp[org.saddle.ops.BitUShr,org.saddle.Mat[Long],org.saddle.Mat[Int],org.saddle.Mat[Long]]", "kind" : "implicit val"}, {"label" : "matMat_Copy_LL_BitUshr", "tail" : ": BinOp[BitUShr, Mat[Long], Mat[Long], Mat[Long]]", "member" : "org.saddle.macros.BinOpMatMatCopy.matMat_Copy_LL_BitUshr", "link" : "org\/saddle\/macros\/BinOps$.html#matMat_Copy_LL_BitUshr:org.saddle.ops.BinOp[org.saddle.ops.BitUShr,org.saddle.Mat[Long],org.saddle.Mat[Long],org.saddle.Mat[Long]]", "kind" : "implicit val"}, {"label" : "matMat_Copy_II_BitShr", "tail" : ": BinOp[BitShr, Mat[Int], Mat[Int], Mat[Int]]", "member" : "org.saddle.macros.BinOpMatMatCopy.matMat_Copy_II_BitShr", "link" : "org\/saddle\/macros\/BinOps$.html#matMat_Copy_II_BitShr:org.saddle.ops.BinOp[org.saddle.ops.BitShr,org.saddle.Mat[Int],org.saddle.Mat[Int],org.saddle.Mat[Int]]", "kind" : "implicit val"}, {"label" : "matMat_Copy_LI_BitShr", "tail" : ": BinOp[BitShr, Mat[Long], Mat[Int], Mat[Long]]", "member" : "org.saddle.macros.BinOpMatMatCopy.matMat_Copy_LI_BitShr", "link" : "org\/saddle\/macros\/BinOps$.html#matMat_Copy_LI_BitShr:org.saddle.ops.BinOp[org.saddle.ops.BitShr,org.saddle.Mat[Long],org.saddle.Mat[Int],org.saddle.Mat[Long]]", "kind" : "implicit val"}, {"label" : "matMat_Copy_LL_BitShr", "tail" : ": BinOp[BitShr, Mat[Long], Mat[Long], Mat[Long]]", "member" : "org.saddle.macros.BinOpMatMatCopy.matMat_Copy_LL_BitShr", "link" : "org\/saddle\/macros\/BinOps$.html#matMat_Copy_LL_BitShr:org.saddle.ops.BinOp[org.saddle.ops.BitShr,org.saddle.Mat[Long],org.saddle.Mat[Long],org.saddle.Mat[Long]]", "kind" : "implicit val"}, {"label" : "matMat_Copy_II_BitShl", "tail" : ": BinOp[BitShl, Mat[Int], Mat[Int], Mat[Int]]", "member" : "org.saddle.macros.BinOpMatMatCopy.matMat_Copy_II_BitShl", "link" : "org\/saddle\/macros\/BinOps$.html#matMat_Copy_II_BitShl:org.saddle.ops.BinOp[org.saddle.ops.BitShl,org.saddle.Mat[Int],org.saddle.Mat[Int],org.saddle.Mat[Int]]", "kind" : "implicit val"}, {"label" : "matMat_Copy_LI_BitShl", "tail" : ": BinOp[BitShl, Mat[Long], Mat[Int], Mat[Long]]", "member" : "org.saddle.macros.BinOpMatMatCopy.matMat_Copy_LI_BitShl", "link" : "org\/saddle\/macros\/BinOps$.html#matMat_Copy_LI_BitShl:org.saddle.ops.BinOp[org.saddle.ops.BitShl,org.saddle.Mat[Long],org.saddle.Mat[Int],org.saddle.Mat[Long]]", "kind" : "implicit val"}, {"label" : "matMat_Copy_LL_BitShl", "tail" : ": BinOp[BitShl, Mat[Long], Mat[Long], Mat[Long]]", "member" : "org.saddle.macros.BinOpMatMatCopy.matMat_Copy_LL_BitShl", "link" : "org\/saddle\/macros\/BinOps$.html#matMat_Copy_LL_BitShl:org.saddle.ops.BinOp[org.saddle.ops.BitShl,org.saddle.Mat[Long],org.saddle.Mat[Long],org.saddle.Mat[Long]]", "kind" : "implicit val"}, {"label" : "matMat_Copy_II_BitXor", "tail" : ": BinOp[BitXor, Mat[Int], Mat[Int], Mat[Int]]", "member" : "org.saddle.macros.BinOpMatMatCopy.matMat_Copy_II_BitXor", "link" : "org\/saddle\/macros\/BinOps$.html#matMat_Copy_II_BitXor:org.saddle.ops.BinOp[org.saddle.ops.BitXor,org.saddle.Mat[Int],org.saddle.Mat[Int],org.saddle.Mat[Int]]", "kind" : "implicit val"}, {"label" : "matMat_Copy_LI_BitXor", "tail" : ": BinOp[BitXor, Mat[Long], Mat[Int], Mat[Long]]", "member" : "org.saddle.macros.BinOpMatMatCopy.matMat_Copy_LI_BitXor", "link" : "org\/saddle\/macros\/BinOps$.html#matMat_Copy_LI_BitXor:org.saddle.ops.BinOp[org.saddle.ops.BitXor,org.saddle.Mat[Long],org.saddle.Mat[Int],org.saddle.Mat[Long]]", "kind" : "implicit val"}, {"label" : "matMat_Copy_LL_BitXor", "tail" : ": BinOp[BitXor, Mat[Long], Mat[Long], Mat[Long]]", "member" : "org.saddle.macros.BinOpMatMatCopy.matMat_Copy_LL_BitXor", "link" : "org\/saddle\/macros\/BinOps$.html#matMat_Copy_LL_BitXor:org.saddle.ops.BinOp[org.saddle.ops.BitXor,org.saddle.Mat[Long],org.saddle.Mat[Long],org.saddle.Mat[Long]]", "kind" : "implicit val"}, {"label" : "matMat_Copy_II_BitOr", "tail" : ": BinOp[BitOr, Mat[Int], Mat[Int], Mat[Int]]", "member" : "org.saddle.macros.BinOpMatMatCopy.matMat_Copy_II_BitOr", "link" : "org\/saddle\/macros\/BinOps$.html#matMat_Copy_II_BitOr:org.saddle.ops.BinOp[org.saddle.ops.BitOr,org.saddle.Mat[Int],org.saddle.Mat[Int],org.saddle.Mat[Int]]", "kind" : "implicit val"}, {"label" : "matMat_Copy_LI_BitOr", "tail" : ": BinOp[BitOr, Mat[Long], Mat[Int], Mat[Long]]", "member" : "org.saddle.macros.BinOpMatMatCopy.matMat_Copy_LI_BitOr", "link" : "org\/saddle\/macros\/BinOps$.html#matMat_Copy_LI_BitOr:org.saddle.ops.BinOp[org.saddle.ops.BitOr,org.saddle.Mat[Long],org.saddle.Mat[Int],org.saddle.Mat[Long]]", "kind" : "implicit val"}, {"label" : "matMat_Copy_LL_BitOr", "tail" : ": BinOp[BitOr, Mat[Long], Mat[Long], Mat[Long]]", "member" : "org.saddle.macros.BinOpMatMatCopy.matMat_Copy_LL_BitOr", "link" : "org\/saddle\/macros\/BinOps$.html#matMat_Copy_LL_BitOr:org.saddle.ops.BinOp[org.saddle.ops.BitOr,org.saddle.Mat[Long],org.saddle.Mat[Long],org.saddle.Mat[Long]]", "kind" : "implicit val"}, {"label" : "matMat_Copy_II_BitAnd", "tail" : ": BinOp[BitAnd, Mat[Int], Mat[Int], Mat[Int]]", "member" : "org.saddle.macros.BinOpMatMatCopy.matMat_Copy_II_BitAnd", "link" : "org\/saddle\/macros\/BinOps$.html#matMat_Copy_II_BitAnd:org.saddle.ops.BinOp[org.saddle.ops.BitAnd,org.saddle.Mat[Int],org.saddle.Mat[Int],org.saddle.Mat[Int]]", "kind" : "implicit val"}, {"label" : "matMat_Copy_LI_BitAnd", "tail" : ": BinOp[BitAnd, Mat[Long], Mat[Int], Mat[Long]]", "member" : "org.saddle.macros.BinOpMatMatCopy.matMat_Copy_LI_BitAnd", "link" : "org\/saddle\/macros\/BinOps$.html#matMat_Copy_LI_BitAnd:org.saddle.ops.BinOp[org.saddle.ops.BitAnd,org.saddle.Mat[Long],org.saddle.Mat[Int],org.saddle.Mat[Long]]", "kind" : "implicit val"}, {"label" : "matMat_Copy_LL_BitAnd", "tail" : ": BinOp[BitAnd, Mat[Long], Mat[Long], Mat[Long]]", "member" : "org.saddle.macros.BinOpMatMatCopy.matMat_Copy_LL_BitAnd", "link" : "org\/saddle\/macros\/BinOps$.html#matMat_Copy_LL_BitAnd:org.saddle.ops.BinOp[org.saddle.ops.BitAnd,org.saddle.Mat[Long],org.saddle.Mat[Long],org.saddle.Mat[Long]]", "kind" : "implicit val"}, {"label" : "matMat_Copy_II_Mod", "tail" : ": BinOp[Mod, Mat[Int], Mat[Int], Mat[Int]]", "member" : "org.saddle.macros.BinOpMatMatCopy.matMat_Copy_II_Mod", "link" : "org\/saddle\/macros\/BinOps$.html#matMat_Copy_II_Mod:org.saddle.ops.BinOp[org.saddle.ops.Mod,org.saddle.Mat[Int],org.saddle.Mat[Int],org.saddle.Mat[Int]]", "kind" : "implicit val"}, {"label" : "matMat_Copy_IL_Mod", "tail" : ": BinOp[Mod, Mat[Int], Mat[Long], Mat[Long]]", "member" : "org.saddle.macros.BinOpMatMatCopy.matMat_Copy_IL_Mod", "link" : "org\/saddle\/macros\/BinOps$.html#matMat_Copy_IL_Mod:org.saddle.ops.BinOp[org.saddle.ops.Mod,org.saddle.Mat[Int],org.saddle.Mat[Long],org.saddle.Mat[Long]]", "kind" : "implicit val"}, {"label" : "matMat_Copy_LI_Mod", "tail" : ": BinOp[Mod, Mat[Long], Mat[Int], Mat[Long]]", "member" : "org.saddle.macros.BinOpMatMatCopy.matMat_Copy_LI_Mod", "link" : "org\/saddle\/macros\/BinOps$.html#matMat_Copy_LI_Mod:org.saddle.ops.BinOp[org.saddle.ops.Mod,org.saddle.Mat[Long],org.saddle.Mat[Int],org.saddle.Mat[Long]]", "kind" : "implicit val"}, {"label" : "matMat_Copy_LL_Mod", "tail" : ": BinOp[Mod, Mat[Long], Mat[Long], Mat[Long]]", "member" : "org.saddle.macros.BinOpMatMatCopy.matMat_Copy_LL_Mod", "link" : "org\/saddle\/macros\/BinOps$.html#matMat_Copy_LL_Mod:org.saddle.ops.BinOp[org.saddle.ops.Mod,org.saddle.Mat[Long],org.saddle.Mat[Long],org.saddle.Mat[Long]]", "kind" : "implicit val"}, {"label" : "matMat_Copy_ID_Mod", "tail" : ": BinOp[Mod, Mat[Int], Mat[Double], Mat[Double]]", "member" : "org.saddle.macros.BinOpMatMatCopy.matMat_Copy_ID_Mod", "link" : "org\/saddle\/macros\/BinOps$.html#matMat_Copy_ID_Mod:org.saddle.ops.BinOp[org.saddle.ops.Mod,org.saddle.Mat[Int],org.saddle.Mat[Double],org.saddle.Mat[Double]]", "kind" : "implicit val"}, {"label" : "matMat_Copy_DI_Mod", "tail" : ": BinOp[Mod, Mat[Double], Mat[Int], Mat[Double]]", "member" : "org.saddle.macros.BinOpMatMatCopy.matMat_Copy_DI_Mod", "link" : "org\/saddle\/macros\/BinOps$.html#matMat_Copy_DI_Mod:org.saddle.ops.BinOp[org.saddle.ops.Mod,org.saddle.Mat[Double],org.saddle.Mat[Int],org.saddle.Mat[Double]]", "kind" : "implicit val"}, {"label" : "matMat_Copy_DL_Mod", "tail" : ": BinOp[Mod, Mat[Double], Mat[Long], Mat[Double]]", "member" : "org.saddle.macros.BinOpMatMatCopy.matMat_Copy_DL_Mod", "link" : "org\/saddle\/macros\/BinOps$.html#matMat_Copy_DL_Mod:org.saddle.ops.BinOp[org.saddle.ops.Mod,org.saddle.Mat[Double],org.saddle.Mat[Long],org.saddle.Mat[Double]]", "kind" : "implicit val"}, {"label" : "matMat_Copy_LD_Mod", "tail" : ": BinOp[Mod, Mat[Long], Mat[Double], Mat[Double]]", "member" : "org.saddle.macros.BinOpMatMatCopy.matMat_Copy_LD_Mod", "link" : "org\/saddle\/macros\/BinOps$.html#matMat_Copy_LD_Mod:org.saddle.ops.BinOp[org.saddle.ops.Mod,org.saddle.Mat[Long],org.saddle.Mat[Double],org.saddle.Mat[Double]]", "kind" : "implicit val"}, {"label" : "matMat_Copy_DD_Mod", "tail" : ": BinOp[Mod, Mat[Double], Mat[Double], Mat[Double]]", "member" : "org.saddle.macros.BinOpMatMatCopy.matMat_Copy_DD_Mod", "link" : "org\/saddle\/macros\/BinOps$.html#matMat_Copy_DD_Mod:org.saddle.ops.BinOp[org.saddle.ops.Mod,org.saddle.Mat[Double],org.saddle.Mat[Double],org.saddle.Mat[Double]]", "kind" : "implicit val"}, {"label" : "matMat_Copy_II_Div", "tail" : ": BinOp[Divide, Mat[Int], Mat[Int], Mat[Int]]", "member" : "org.saddle.macros.BinOpMatMatCopy.matMat_Copy_II_Div", "link" : "org\/saddle\/macros\/BinOps$.html#matMat_Copy_II_Div:org.saddle.ops.BinOp[org.saddle.ops.Divide,org.saddle.Mat[Int],org.saddle.Mat[Int],org.saddle.Mat[Int]]", "kind" : "implicit val"}, {"label" : "matMat_Copy_IL_Div", "tail" : ": BinOp[Divide, Mat[Int], Mat[Long], Mat[Long]]", "member" : "org.saddle.macros.BinOpMatMatCopy.matMat_Copy_IL_Div", "link" : "org\/saddle\/macros\/BinOps$.html#matMat_Copy_IL_Div:org.saddle.ops.BinOp[org.saddle.ops.Divide,org.saddle.Mat[Int],org.saddle.Mat[Long],org.saddle.Mat[Long]]", "kind" : "implicit val"}, {"label" : "matMat_Copy_LI_Div", "tail" : ": BinOp[Divide, Mat[Long], Mat[Int], Mat[Long]]", "member" : "org.saddle.macros.BinOpMatMatCopy.matMat_Copy_LI_Div", "link" : "org\/saddle\/macros\/BinOps$.html#matMat_Copy_LI_Div:org.saddle.ops.BinOp[org.saddle.ops.Divide,org.saddle.Mat[Long],org.saddle.Mat[Int],org.saddle.Mat[Long]]", "kind" : "implicit val"}, {"label" : "matMat_Copy_LL_Div", "tail" : ": BinOp[Divide, Mat[Long], Mat[Long], Mat[Long]]", "member" : "org.saddle.macros.BinOpMatMatCopy.matMat_Copy_LL_Div", "link" : "org\/saddle\/macros\/BinOps$.html#matMat_Copy_LL_Div:org.saddle.ops.BinOp[org.saddle.ops.Divide,org.saddle.Mat[Long],org.saddle.Mat[Long],org.saddle.Mat[Long]]", "kind" : "implicit val"}, {"label" : "matMat_Copy_ID_Div", "tail" : ": BinOp[Divide, Mat[Int], Mat[Double], Mat[Double]]", "member" : "org.saddle.macros.BinOpMatMatCopy.matMat_Copy_ID_Div", "link" : "org\/saddle\/macros\/BinOps$.html#matMat_Copy_ID_Div:org.saddle.ops.BinOp[org.saddle.ops.Divide,org.saddle.Mat[Int],org.saddle.Mat[Double],org.saddle.Mat[Double]]", "kind" : "implicit val"}, {"label" : "matMat_Copy_DI_Div", "tail" : ": BinOp[Divide, Mat[Double], Mat[Int], Mat[Double]]", "member" : "org.saddle.macros.BinOpMatMatCopy.matMat_Copy_DI_Div", "link" : "org\/saddle\/macros\/BinOps$.html#matMat_Copy_DI_Div:org.saddle.ops.BinOp[org.saddle.ops.Divide,org.saddle.Mat[Double],org.saddle.Mat[Int],org.saddle.Mat[Double]]", "kind" : "implicit val"}, {"label" : "matMat_Copy_DL_Div", "tail" : ": BinOp[Divide, Mat[Double], Mat[Long], Mat[Double]]", "member" : "org.saddle.macros.BinOpMatMatCopy.matMat_Copy_DL_Div", "link" : "org\/saddle\/macros\/BinOps$.html#matMat_Copy_DL_Div:org.saddle.ops.BinOp[org.saddle.ops.Divide,org.saddle.Mat[Double],org.saddle.Mat[Long],org.saddle.Mat[Double]]", "kind" : "implicit val"}, {"label" : "matMat_Copy_LD_Div", "tail" : ": BinOp[Divide, Mat[Long], Mat[Double], Mat[Double]]", "member" : "org.saddle.macros.BinOpMatMatCopy.matMat_Copy_LD_Div", "link" : "org\/saddle\/macros\/BinOps$.html#matMat_Copy_LD_Div:org.saddle.ops.BinOp[org.saddle.ops.Divide,org.saddle.Mat[Long],org.saddle.Mat[Double],org.saddle.Mat[Double]]", "kind" : "implicit val"}, {"label" : "matMat_Copy_DD_Div", "tail" : ": BinOp[Divide, Mat[Double], Mat[Double], Mat[Double]]", "member" : "org.saddle.macros.BinOpMatMatCopy.matMat_Copy_DD_Div", "link" : "org\/saddle\/macros\/BinOps$.html#matMat_Copy_DD_Div:org.saddle.ops.BinOp[org.saddle.ops.Divide,org.saddle.Mat[Double],org.saddle.Mat[Double],org.saddle.Mat[Double]]", "kind" : "implicit val"}, {"label" : "matMat_Copy_II_Mult", "tail" : ": BinOp[Multiply, Mat[Int], Mat[Int], Mat[Int]]", "member" : "org.saddle.macros.BinOpMatMatCopy.matMat_Copy_II_Mult", "link" : "org\/saddle\/macros\/BinOps$.html#matMat_Copy_II_Mult:org.saddle.ops.BinOp[org.saddle.ops.Multiply,org.saddle.Mat[Int],org.saddle.Mat[Int],org.saddle.Mat[Int]]", "kind" : "implicit val"}, {"label" : "matMat_Copy_IL_Mult", "tail" : ": BinOp[Multiply, Mat[Int], Mat[Long], Mat[Long]]", "member" : "org.saddle.macros.BinOpMatMatCopy.matMat_Copy_IL_Mult", "link" : "org\/saddle\/macros\/BinOps$.html#matMat_Copy_IL_Mult:org.saddle.ops.BinOp[org.saddle.ops.Multiply,org.saddle.Mat[Int],org.saddle.Mat[Long],org.saddle.Mat[Long]]", "kind" : "implicit val"}, {"label" : "matMat_Copy_LI_Mult", "tail" : ": BinOp[Multiply, Mat[Long], Mat[Int], Mat[Long]]", "member" : "org.saddle.macros.BinOpMatMatCopy.matMat_Copy_LI_Mult", "link" : "org\/saddle\/macros\/BinOps$.html#matMat_Copy_LI_Mult:org.saddle.ops.BinOp[org.saddle.ops.Multiply,org.saddle.Mat[Long],org.saddle.Mat[Int],org.saddle.Mat[Long]]", "kind" : "implicit val"}, {"label" : "matMat_Copy_LL_Mult", "tail" : ": BinOp[Multiply, Mat[Long], Mat[Long], Mat[Long]]", "member" : "org.saddle.macros.BinOpMatMatCopy.matMat_Copy_LL_Mult", "link" : "org\/saddle\/macros\/BinOps$.html#matMat_Copy_LL_Mult:org.saddle.ops.BinOp[org.saddle.ops.Multiply,org.saddle.Mat[Long],org.saddle.Mat[Long],org.saddle.Mat[Long]]", "kind" : "implicit val"}, {"label" : "matMat_Copy_ID_Mult", "tail" : ": BinOp[Multiply, Mat[Int], Mat[Double], Mat[Double]]", "member" : "org.saddle.macros.BinOpMatMatCopy.matMat_Copy_ID_Mult", "link" : "org\/saddle\/macros\/BinOps$.html#matMat_Copy_ID_Mult:org.saddle.ops.BinOp[org.saddle.ops.Multiply,org.saddle.Mat[Int],org.saddle.Mat[Double],org.saddle.Mat[Double]]", "kind" : "implicit val"}, {"label" : "matMat_Copy_DI_Mult", "tail" : ": BinOp[Multiply, Mat[Double], Mat[Int], Mat[Double]]", "member" : "org.saddle.macros.BinOpMatMatCopy.matMat_Copy_DI_Mult", "link" : "org\/saddle\/macros\/BinOps$.html#matMat_Copy_DI_Mult:org.saddle.ops.BinOp[org.saddle.ops.Multiply,org.saddle.Mat[Double],org.saddle.Mat[Int],org.saddle.Mat[Double]]", "kind" : "implicit val"}, {"label" : "matMat_Copy_DL_Mult", "tail" : ": BinOp[Multiply, Mat[Double], Mat[Long], Mat[Double]]", "member" : "org.saddle.macros.BinOpMatMatCopy.matMat_Copy_DL_Mult", "link" : "org\/saddle\/macros\/BinOps$.html#matMat_Copy_DL_Mult:org.saddle.ops.BinOp[org.saddle.ops.Multiply,org.saddle.Mat[Double],org.saddle.Mat[Long],org.saddle.Mat[Double]]", "kind" : "implicit val"}, {"label" : "matMat_Copy_LD_Mult", "tail" : ": BinOp[Multiply, Mat[Long], Mat[Double], Mat[Double]]", "member" : "org.saddle.macros.BinOpMatMatCopy.matMat_Copy_LD_Mult", "link" : "org\/saddle\/macros\/BinOps$.html#matMat_Copy_LD_Mult:org.saddle.ops.BinOp[org.saddle.ops.Multiply,org.saddle.Mat[Long],org.saddle.Mat[Double],org.saddle.Mat[Double]]", "kind" : "implicit val"}, {"label" : "matMat_Copy_DD_Mult", "tail" : ": BinOp[Multiply, Mat[Double], Mat[Double], Mat[Double]]", "member" : "org.saddle.macros.BinOpMatMatCopy.matMat_Copy_DD_Mult", "link" : "org\/saddle\/macros\/BinOps$.html#matMat_Copy_DD_Mult:org.saddle.ops.BinOp[org.saddle.ops.Multiply,org.saddle.Mat[Double],org.saddle.Mat[Double],org.saddle.Mat[Double]]", "kind" : "implicit val"}, {"label" : "matMat_Copy_II_Sub", "tail" : ": BinOp[Subtract, Mat[Int], Mat[Int], Mat[Int]]", "member" : "org.saddle.macros.BinOpMatMatCopy.matMat_Copy_II_Sub", "link" : "org\/saddle\/macros\/BinOps$.html#matMat_Copy_II_Sub:org.saddle.ops.BinOp[org.saddle.ops.Subtract,org.saddle.Mat[Int],org.saddle.Mat[Int],org.saddle.Mat[Int]]", "kind" : "implicit val"}, {"label" : "matMat_Copy_IL_Sub", "tail" : ": BinOp[Subtract, Mat[Int], Mat[Long], Mat[Long]]", "member" : "org.saddle.macros.BinOpMatMatCopy.matMat_Copy_IL_Sub", "link" : "org\/saddle\/macros\/BinOps$.html#matMat_Copy_IL_Sub:org.saddle.ops.BinOp[org.saddle.ops.Subtract,org.saddle.Mat[Int],org.saddle.Mat[Long],org.saddle.Mat[Long]]", "kind" : "implicit val"}, {"label" : "matMat_Copy_LI_Sub", "tail" : ": BinOp[Subtract, Mat[Long], Mat[Int], Mat[Long]]", "member" : "org.saddle.macros.BinOpMatMatCopy.matMat_Copy_LI_Sub", "link" : "org\/saddle\/macros\/BinOps$.html#matMat_Copy_LI_Sub:org.saddle.ops.BinOp[org.saddle.ops.Subtract,org.saddle.Mat[Long],org.saddle.Mat[Int],org.saddle.Mat[Long]]", "kind" : "implicit val"}, {"label" : "matMat_Copy_LL_Sub", "tail" : ": BinOp[Subtract, Mat[Long], Mat[Long], Mat[Long]]", "member" : "org.saddle.macros.BinOpMatMatCopy.matMat_Copy_LL_Sub", "link" : "org\/saddle\/macros\/BinOps$.html#matMat_Copy_LL_Sub:org.saddle.ops.BinOp[org.saddle.ops.Subtract,org.saddle.Mat[Long],org.saddle.Mat[Long],org.saddle.Mat[Long]]", "kind" : "implicit val"}, {"label" : "matMat_Copy_ID_Sub", "tail" : ": BinOp[Subtract, Mat[Int], Mat[Double], Mat[Double]]", "member" : "org.saddle.macros.BinOpMatMatCopy.matMat_Copy_ID_Sub", "link" : "org\/saddle\/macros\/BinOps$.html#matMat_Copy_ID_Sub:org.saddle.ops.BinOp[org.saddle.ops.Subtract,org.saddle.Mat[Int],org.saddle.Mat[Double],org.saddle.Mat[Double]]", "kind" : "implicit val"}, {"label" : "matMat_Copy_DI_Sub", "tail" : ": BinOp[Subtract, Mat[Double], Mat[Int], Mat[Double]]", "member" : "org.saddle.macros.BinOpMatMatCopy.matMat_Copy_DI_Sub", "link" : "org\/saddle\/macros\/BinOps$.html#matMat_Copy_DI_Sub:org.saddle.ops.BinOp[org.saddle.ops.Subtract,org.saddle.Mat[Double],org.saddle.Mat[Int],org.saddle.Mat[Double]]", "kind" : "implicit val"}, {"label" : "matMat_Copy_DL_Sub", "tail" : ": BinOp[Subtract, Mat[Double], Mat[Long], Mat[Double]]", "member" : "org.saddle.macros.BinOpMatMatCopy.matMat_Copy_DL_Sub", "link" : "org\/saddle\/macros\/BinOps$.html#matMat_Copy_DL_Sub:org.saddle.ops.BinOp[org.saddle.ops.Subtract,org.saddle.Mat[Double],org.saddle.Mat[Long],org.saddle.Mat[Double]]", "kind" : "implicit val"}, {"label" : "matMat_Copy_LD_Sub", "tail" : ": BinOp[Subtract, Mat[Long], Mat[Double], Mat[Double]]", "member" : "org.saddle.macros.BinOpMatMatCopy.matMat_Copy_LD_Sub", "link" : "org\/saddle\/macros\/BinOps$.html#matMat_Copy_LD_Sub:org.saddle.ops.BinOp[org.saddle.ops.Subtract,org.saddle.Mat[Long],org.saddle.Mat[Double],org.saddle.Mat[Double]]", "kind" : "implicit val"}, {"label" : "matMat_Copy_DD_Sub", "tail" : ": BinOp[Subtract, Mat[Double], Mat[Double], Mat[Double]]", "member" : "org.saddle.macros.BinOpMatMatCopy.matMat_Copy_DD_Sub", "link" : "org\/saddle\/macros\/BinOps$.html#matMat_Copy_DD_Sub:org.saddle.ops.BinOp[org.saddle.ops.Subtract,org.saddle.Mat[Double],org.saddle.Mat[Double],org.saddle.Mat[Double]]", "kind" : "implicit val"}, {"label" : "matMat_Copy_II_Power", "tail" : ": BinOp[Power, Mat[Int], Mat[Int], Mat[Int]]", "member" : "org.saddle.macros.BinOpMatMatCopy.matMat_Copy_II_Power", "link" : "org\/saddle\/macros\/BinOps$.html#matMat_Copy_II_Power:org.saddle.ops.BinOp[org.saddle.ops.Power,org.saddle.Mat[Int],org.saddle.Mat[Int],org.saddle.Mat[Int]]", "kind" : "implicit val"}, {"label" : "matMat_Copy_IL_Power", "tail" : ": BinOp[Power, Mat[Int], Mat[Long], Mat[Long]]", "member" : "org.saddle.macros.BinOpMatMatCopy.matMat_Copy_IL_Power", "link" : "org\/saddle\/macros\/BinOps$.html#matMat_Copy_IL_Power:org.saddle.ops.BinOp[org.saddle.ops.Power,org.saddle.Mat[Int],org.saddle.Mat[Long],org.saddle.Mat[Long]]", "kind" : "implicit val"}, {"label" : "matMat_Copy_LI_Power", "tail" : ": BinOp[Power, Mat[Long], Mat[Int], Mat[Long]]", "member" : "org.saddle.macros.BinOpMatMatCopy.matMat_Copy_LI_Power", "link" : "org\/saddle\/macros\/BinOps$.html#matMat_Copy_LI_Power:org.saddle.ops.BinOp[org.saddle.ops.Power,org.saddle.Mat[Long],org.saddle.Mat[Int],org.saddle.Mat[Long]]", "kind" : "implicit val"}, {"label" : "matMat_Copy_LL_Power", "tail" : ": BinOp[Power, Mat[Long], Mat[Long], Mat[Long]]", "member" : "org.saddle.macros.BinOpMatMatCopy.matMat_Copy_LL_Power", "link" : "org\/saddle\/macros\/BinOps$.html#matMat_Copy_LL_Power:org.saddle.ops.BinOp[org.saddle.ops.Power,org.saddle.Mat[Long],org.saddle.Mat[Long],org.saddle.Mat[Long]]", "kind" : "implicit val"}, {"label" : "matMat_Copy_ID_Power", "tail" : ": BinOp[Power, Mat[Int], Mat[Double], Mat[Double]]", "member" : "org.saddle.macros.BinOpMatMatCopy.matMat_Copy_ID_Power", "link" : "org\/saddle\/macros\/BinOps$.html#matMat_Copy_ID_Power:org.saddle.ops.BinOp[org.saddle.ops.Power,org.saddle.Mat[Int],org.saddle.Mat[Double],org.saddle.Mat[Double]]", "kind" : "implicit val"}, {"label" : "matMat_Copy_DI_Power", "tail" : ": BinOp[Power, Mat[Double], Mat[Int], Mat[Double]]", "member" : "org.saddle.macros.BinOpMatMatCopy.matMat_Copy_DI_Power", "link" : "org\/saddle\/macros\/BinOps$.html#matMat_Copy_DI_Power:org.saddle.ops.BinOp[org.saddle.ops.Power,org.saddle.Mat[Double],org.saddle.Mat[Int],org.saddle.Mat[Double]]", "kind" : "implicit val"}, {"label" : "matMat_Copy_DL_Power", "tail" : ": BinOp[Power, Mat[Double], Mat[Long], Mat[Double]]", "member" : "org.saddle.macros.BinOpMatMatCopy.matMat_Copy_DL_Power", "link" : "org\/saddle\/macros\/BinOps$.html#matMat_Copy_DL_Power:org.saddle.ops.BinOp[org.saddle.ops.Power,org.saddle.Mat[Double],org.saddle.Mat[Long],org.saddle.Mat[Double]]", "kind" : "implicit val"}, {"label" : "matMat_Copy_LD_Power", "tail" : ": BinOp[Power, Mat[Long], Mat[Double], Mat[Double]]", "member" : "org.saddle.macros.BinOpMatMatCopy.matMat_Copy_LD_Power", "link" : "org\/saddle\/macros\/BinOps$.html#matMat_Copy_LD_Power:org.saddle.ops.BinOp[org.saddle.ops.Power,org.saddle.Mat[Long],org.saddle.Mat[Double],org.saddle.Mat[Double]]", "kind" : "implicit val"}, {"label" : "matMat_Copy_DD_Power", "tail" : ": BinOp[Power, Mat[Double], Mat[Double], Mat[Double]]", "member" : "org.saddle.macros.BinOpMatMatCopy.matMat_Copy_DD_Power", "link" : "org\/saddle\/macros\/BinOps$.html#matMat_Copy_DD_Power:org.saddle.ops.BinOp[org.saddle.ops.Power,org.saddle.Mat[Double],org.saddle.Mat[Double],org.saddle.Mat[Double]]", "kind" : "implicit val"}, {"label" : "matMat_Copy_II_Add", "tail" : ": BinOp[Add, Mat[Int], Mat[Int], Mat[Int]]", "member" : "org.saddle.macros.BinOpMatMatCopy.matMat_Copy_II_Add", "link" : "org\/saddle\/macros\/BinOps$.html#matMat_Copy_II_Add:org.saddle.ops.BinOp[org.saddle.ops.Add,org.saddle.Mat[Int],org.saddle.Mat[Int],org.saddle.Mat[Int]]", "kind" : "implicit val"}, {"label" : "matMat_Copy_IL_Add", "tail" : ": BinOp[Add, Mat[Int], Mat[Long], Mat[Long]]", "member" : "org.saddle.macros.BinOpMatMatCopy.matMat_Copy_IL_Add", "link" : "org\/saddle\/macros\/BinOps$.html#matMat_Copy_IL_Add:org.saddle.ops.BinOp[org.saddle.ops.Add,org.saddle.Mat[Int],org.saddle.Mat[Long],org.saddle.Mat[Long]]", "kind" : "implicit val"}, {"label" : "matMat_Copy_LI_Add", "tail" : ": BinOp[Add, Mat[Long], Mat[Int], Mat[Long]]", "member" : "org.saddle.macros.BinOpMatMatCopy.matMat_Copy_LI_Add", "link" : "org\/saddle\/macros\/BinOps$.html#matMat_Copy_LI_Add:org.saddle.ops.BinOp[org.saddle.ops.Add,org.saddle.Mat[Long],org.saddle.Mat[Int],org.saddle.Mat[Long]]", "kind" : "implicit val"}, {"label" : "matMat_Copy_LL_Add", "tail" : ": BinOp[Add, Mat[Long], Mat[Long], Mat[Long]]", "member" : "org.saddle.macros.BinOpMatMatCopy.matMat_Copy_LL_Add", "link" : "org\/saddle\/macros\/BinOps$.html#matMat_Copy_LL_Add:org.saddle.ops.BinOp[org.saddle.ops.Add,org.saddle.Mat[Long],org.saddle.Mat[Long],org.saddle.Mat[Long]]", "kind" : "implicit val"}, {"label" : "matMat_Copy_ID_Add", "tail" : ": BinOp[Add, Mat[Int], Mat[Double], Mat[Double]]", "member" : "org.saddle.macros.BinOpMatMatCopy.matMat_Copy_ID_Add", "link" : "org\/saddle\/macros\/BinOps$.html#matMat_Copy_ID_Add:org.saddle.ops.BinOp[org.saddle.ops.Add,org.saddle.Mat[Int],org.saddle.Mat[Double],org.saddle.Mat[Double]]", "kind" : "implicit val"}, {"label" : "matMat_Copy_DI_Add", "tail" : ": BinOp[Add, Mat[Double], Mat[Int], Mat[Double]]", "member" : "org.saddle.macros.BinOpMatMatCopy.matMat_Copy_DI_Add", "link" : "org\/saddle\/macros\/BinOps$.html#matMat_Copy_DI_Add:org.saddle.ops.BinOp[org.saddle.ops.Add,org.saddle.Mat[Double],org.saddle.Mat[Int],org.saddle.Mat[Double]]", "kind" : "implicit val"}, {"label" : "matMat_Copy_DL_Add", "tail" : ": BinOp[Add, Mat[Double], Mat[Long], Mat[Double]]", "member" : "org.saddle.macros.BinOpMatMatCopy.matMat_Copy_DL_Add", "link" : "org\/saddle\/macros\/BinOps$.html#matMat_Copy_DL_Add:org.saddle.ops.BinOp[org.saddle.ops.Add,org.saddle.Mat[Double],org.saddle.Mat[Long],org.saddle.Mat[Double]]", "kind" : "implicit val"}, {"label" : "matMat_Copy_LD_Add", "tail" : ": BinOp[Add, Mat[Long], Mat[Double], Mat[Double]]", "member" : "org.saddle.macros.BinOpMatMatCopy.matMat_Copy_LD_Add", "link" : "org\/saddle\/macros\/BinOps$.html#matMat_Copy_LD_Add:org.saddle.ops.BinOp[org.saddle.ops.Add,org.saddle.Mat[Long],org.saddle.Mat[Double],org.saddle.Mat[Double]]", "kind" : "implicit val"}, {"label" : "matMat_Copy_DD_Add", "tail" : ": BinOp[Add, Mat[Double], Mat[Double], Mat[Double]]", "member" : "org.saddle.macros.BinOpMatMatCopy.matMat_Copy_DD_Add", "link" : "org\/saddle\/macros\/BinOps$.html#matMat_Copy_DD_Add:org.saddle.ops.BinOp[org.saddle.ops.Add,org.saddle.Mat[Double],org.saddle.Mat[Double],org.saddle.Mat[Double]]", "kind" : "implicit val"}, {"label" : "matMatIP_BB_Xor", "tail" : ": BinOpInPlace[XorOp, Mat[Boolean], Mat[Boolean]]", "member" : "org.saddle.macros.BinOpMatMatInPlace.matMatIP_BB_Xor", "link" : "org\/saddle\/macros\/BinOps$.html#matMatIP_BB_Xor:org.saddle.ops.BinOpInPlace[org.saddle.ops.XorOp,org.saddle.Mat[Boolean],org.saddle.Mat[Boolean]]", "kind" : "implicit val"}, {"label" : "matMatIP_BB_Or", "tail" : ": BinOpInPlace[OrOp, Mat[Boolean], Mat[Boolean]]", "member" : "org.saddle.macros.BinOpMatMatInPlace.matMatIP_BB_Or", "link" : "org\/saddle\/macros\/BinOps$.html#matMatIP_BB_Or:org.saddle.ops.BinOpInPlace[org.saddle.ops.OrOp,org.saddle.Mat[Boolean],org.saddle.Mat[Boolean]]", "kind" : "implicit val"}, {"label" : "matMatIP_BB_And", "tail" : ": BinOpInPlace[AndOp, Mat[Boolean], Mat[Boolean]]", "member" : "org.saddle.macros.BinOpMatMatInPlace.matMatIP_BB_And", "link" : "org\/saddle\/macros\/BinOps$.html#matMatIP_BB_And:org.saddle.ops.BinOpInPlace[org.saddle.ops.AndOp,org.saddle.Mat[Boolean],org.saddle.Mat[Boolean]]", "kind" : "implicit val"}, {"label" : "matMatIP_BB_EQ", "tail" : ": BinOpInPlace[EqOp, Mat[Boolean], Mat[Boolean]]", "member" : "org.saddle.macros.BinOpMatMatInPlace.matMatIP_BB_EQ", "link" : "org\/saddle\/macros\/BinOps$.html#matMatIP_BB_EQ:org.saddle.ops.BinOpInPlace[org.saddle.ops.EqOp,org.saddle.Mat[Boolean],org.saddle.Mat[Boolean]]", "kind" : "implicit val"}, {"label" : "matMatIP_BB_NEQ", "tail" : ": BinOpInPlace[NeqOp, Mat[Boolean], Mat[Boolean]]", "member" : "org.saddle.macros.BinOpMatMatInPlace.matMatIP_BB_NEQ", "link" : "org\/saddle\/macros\/BinOps$.html#matMatIP_BB_NEQ:org.saddle.ops.BinOpInPlace[org.saddle.ops.NeqOp,org.saddle.Mat[Boolean],org.saddle.Mat[Boolean]]", "kind" : "implicit val"}, {"label" : "matMatIP_BB_LTE", "tail" : ": BinOpInPlace[LteOp, Mat[Boolean], Mat[Boolean]]", "member" : "org.saddle.macros.BinOpMatMatInPlace.matMatIP_BB_LTE", "link" : "org\/saddle\/macros\/BinOps$.html#matMatIP_BB_LTE:org.saddle.ops.BinOpInPlace[org.saddle.ops.LteOp,org.saddle.Mat[Boolean],org.saddle.Mat[Boolean]]", "kind" : "implicit val"}, {"label" : "matMatIP_BB_LT", "tail" : ": BinOpInPlace[LtOp, Mat[Boolean], Mat[Boolean]]", "member" : "org.saddle.macros.BinOpMatMatInPlace.matMatIP_BB_LT", "link" : "org\/saddle\/macros\/BinOps$.html#matMatIP_BB_LT:org.saddle.ops.BinOpInPlace[org.saddle.ops.LtOp,org.saddle.Mat[Boolean],org.saddle.Mat[Boolean]]", "kind" : "implicit val"}, {"label" : "matMatIP_BB_GTE", "tail" : ": BinOpInPlace[GteOp, Mat[Boolean], Mat[Boolean]]", "member" : "org.saddle.macros.BinOpMatMatInPlace.matMatIP_BB_GTE", "link" : "org\/saddle\/macros\/BinOps$.html#matMatIP_BB_GTE:org.saddle.ops.BinOpInPlace[org.saddle.ops.GteOp,org.saddle.Mat[Boolean],org.saddle.Mat[Boolean]]", "kind" : "implicit val"}, {"label" : "matMatIP_BB_GT", "tail" : ": BinOpInPlace[GtOp, Mat[Boolean], Mat[Boolean]]", "member" : "org.saddle.macros.BinOpMatMatInPlace.matMatIP_BB_GT", "link" : "org\/saddle\/macros\/BinOps$.html#matMatIP_BB_GT:org.saddle.ops.BinOpInPlace[org.saddle.ops.GtOp,org.saddle.Mat[Boolean],org.saddle.Mat[Boolean]]", "kind" : "implicit val"}, {"label" : "matMatIP_II_BitUshr", "tail" : ": BinOpInPlace[BitUShr, Mat[Int], Mat[Int]]", "member" : "org.saddle.macros.BinOpMatMatInPlace.matMatIP_II_BitUshr", "link" : "org\/saddle\/macros\/BinOps$.html#matMatIP_II_BitUshr:org.saddle.ops.BinOpInPlace[org.saddle.ops.BitUShr,org.saddle.Mat[Int],org.saddle.Mat[Int]]", "kind" : "implicit val"}, {"label" : "matMatIP_LI_BitUshr", "tail" : ": BinOpInPlace[BitUShr, Mat[Long], Mat[Int]]", "member" : "org.saddle.macros.BinOpMatMatInPlace.matMatIP_LI_BitUshr", "link" : "org\/saddle\/macros\/BinOps$.html#matMatIP_LI_BitUshr:org.saddle.ops.BinOpInPlace[org.saddle.ops.BitUShr,org.saddle.Mat[Long],org.saddle.Mat[Int]]", "kind" : "implicit val"}, {"label" : "matMatIP_LL_BitUshr", "tail" : ": BinOpInPlace[BitUShr, Mat[Long], Mat[Long]]", "member" : "org.saddle.macros.BinOpMatMatInPlace.matMatIP_LL_BitUshr", "link" : "org\/saddle\/macros\/BinOps$.html#matMatIP_LL_BitUshr:org.saddle.ops.BinOpInPlace[org.saddle.ops.BitUShr,org.saddle.Mat[Long],org.saddle.Mat[Long]]", "kind" : "implicit val"}, {"label" : "matMatIP_II_BitShr", "tail" : ": BinOpInPlace[BitShr, Mat[Int], Mat[Int]]", "member" : "org.saddle.macros.BinOpMatMatInPlace.matMatIP_II_BitShr", "link" : "org\/saddle\/macros\/BinOps$.html#matMatIP_II_BitShr:org.saddle.ops.BinOpInPlace[org.saddle.ops.BitShr,org.saddle.Mat[Int],org.saddle.Mat[Int]]", "kind" : "implicit val"}, {"label" : "matMatIP_LI_BitShr", "tail" : ": BinOpInPlace[BitShr, Mat[Long], Mat[Int]]", "member" : "org.saddle.macros.BinOpMatMatInPlace.matMatIP_LI_BitShr", "link" : "org\/saddle\/macros\/BinOps$.html#matMatIP_LI_BitShr:org.saddle.ops.BinOpInPlace[org.saddle.ops.BitShr,org.saddle.Mat[Long],org.saddle.Mat[Int]]", "kind" : "implicit val"}, {"label" : "matMatIP_LL_BitShr", "tail" : ": BinOpInPlace[BitShr, Mat[Long], Mat[Long]]", "member" : "org.saddle.macros.BinOpMatMatInPlace.matMatIP_LL_BitShr", "link" : "org\/saddle\/macros\/BinOps$.html#matMatIP_LL_BitShr:org.saddle.ops.BinOpInPlace[org.saddle.ops.BitShr,org.saddle.Mat[Long],org.saddle.Mat[Long]]", "kind" : "implicit val"}, {"label" : "matMatIP_II_BitShl", "tail" : ": BinOpInPlace[BitShl, Mat[Int], Mat[Int]]", "member" : "org.saddle.macros.BinOpMatMatInPlace.matMatIP_II_BitShl", "link" : "org\/saddle\/macros\/BinOps$.html#matMatIP_II_BitShl:org.saddle.ops.BinOpInPlace[org.saddle.ops.BitShl,org.saddle.Mat[Int],org.saddle.Mat[Int]]", "kind" : "implicit val"}, {"label" : "matMatIP_LI_BitShl", "tail" : ": BinOpInPlace[BitShl, Mat[Long], Mat[Int]]", "member" : "org.saddle.macros.BinOpMatMatInPlace.matMatIP_LI_BitShl", "link" : "org\/saddle\/macros\/BinOps$.html#matMatIP_LI_BitShl:org.saddle.ops.BinOpInPlace[org.saddle.ops.BitShl,org.saddle.Mat[Long],org.saddle.Mat[Int]]", "kind" : "implicit val"}, {"label" : "matMatIP_LL_BitShl", "tail" : ": BinOpInPlace[BitShl, Mat[Long], Mat[Long]]", "member" : "org.saddle.macros.BinOpMatMatInPlace.matMatIP_LL_BitShl", "link" : "org\/saddle\/macros\/BinOps$.html#matMatIP_LL_BitShl:org.saddle.ops.BinOpInPlace[org.saddle.ops.BitShl,org.saddle.Mat[Long],org.saddle.Mat[Long]]", "kind" : "implicit val"}, {"label" : "matMatIP_II_BitXor", "tail" : ": BinOpInPlace[BitXor, Mat[Int], Mat[Int]]", "member" : "org.saddle.macros.BinOpMatMatInPlace.matMatIP_II_BitXor", "link" : "org\/saddle\/macros\/BinOps$.html#matMatIP_II_BitXor:org.saddle.ops.BinOpInPlace[org.saddle.ops.BitXor,org.saddle.Mat[Int],org.saddle.Mat[Int]]", "kind" : "implicit val"}, {"label" : "matMatIP_LI_BitXor", "tail" : ": BinOpInPlace[BitXor, Mat[Long], Mat[Int]]", "member" : "org.saddle.macros.BinOpMatMatInPlace.matMatIP_LI_BitXor", "link" : "org\/saddle\/macros\/BinOps$.html#matMatIP_LI_BitXor:org.saddle.ops.BinOpInPlace[org.saddle.ops.BitXor,org.saddle.Mat[Long],org.saddle.Mat[Int]]", "kind" : "implicit val"}, {"label" : "matMatIP_LL_BitXor", "tail" : ": BinOpInPlace[BitXor, Mat[Long], Mat[Long]]", "member" : "org.saddle.macros.BinOpMatMatInPlace.matMatIP_LL_BitXor", "link" : "org\/saddle\/macros\/BinOps$.html#matMatIP_LL_BitXor:org.saddle.ops.BinOpInPlace[org.saddle.ops.BitXor,org.saddle.Mat[Long],org.saddle.Mat[Long]]", "kind" : "implicit val"}, {"label" : "matMatIP_II_BitOr", "tail" : ": BinOpInPlace[BitOr, Mat[Int], Mat[Int]]", "member" : "org.saddle.macros.BinOpMatMatInPlace.matMatIP_II_BitOr", "link" : "org\/saddle\/macros\/BinOps$.html#matMatIP_II_BitOr:org.saddle.ops.BinOpInPlace[org.saddle.ops.BitOr,org.saddle.Mat[Int],org.saddle.Mat[Int]]", "kind" : "implicit val"}, {"label" : "matMatIP_LI_BitOr", "tail" : ": BinOpInPlace[BitOr, Mat[Long], Mat[Int]]", "member" : "org.saddle.macros.BinOpMatMatInPlace.matMatIP_LI_BitOr", "link" : "org\/saddle\/macros\/BinOps$.html#matMatIP_LI_BitOr:org.saddle.ops.BinOpInPlace[org.saddle.ops.BitOr,org.saddle.Mat[Long],org.saddle.Mat[Int]]", "kind" : "implicit val"}, {"label" : "matMatIP_LL_BitOr", "tail" : ": BinOpInPlace[BitOr, Mat[Long], Mat[Long]]", "member" : "org.saddle.macros.BinOpMatMatInPlace.matMatIP_LL_BitOr", "link" : "org\/saddle\/macros\/BinOps$.html#matMatIP_LL_BitOr:org.saddle.ops.BinOpInPlace[org.saddle.ops.BitOr,org.saddle.Mat[Long],org.saddle.Mat[Long]]", "kind" : "implicit val"}, {"label" : "matMatIP_II_BitAnd", "tail" : ": BinOpInPlace[BitAnd, Mat[Int], Mat[Int]]", "member" : "org.saddle.macros.BinOpMatMatInPlace.matMatIP_II_BitAnd", "link" : "org\/saddle\/macros\/BinOps$.html#matMatIP_II_BitAnd:org.saddle.ops.BinOpInPlace[org.saddle.ops.BitAnd,org.saddle.Mat[Int],org.saddle.Mat[Int]]", "kind" : "implicit val"}, {"label" : "matMatIP_LI_BitAnd", "tail" : ": BinOpInPlace[BitAnd, Mat[Long], Mat[Int]]", "member" : "org.saddle.macros.BinOpMatMatInPlace.matMatIP_LI_BitAnd", "link" : "org\/saddle\/macros\/BinOps$.html#matMatIP_LI_BitAnd:org.saddle.ops.BinOpInPlace[org.saddle.ops.BitAnd,org.saddle.Mat[Long],org.saddle.Mat[Int]]", "kind" : "implicit val"}, {"label" : "matMatIP_LL_BitAnd", "tail" : ": BinOpInPlace[BitAnd, Mat[Long], Mat[Long]]", "member" : "org.saddle.macros.BinOpMatMatInPlace.matMatIP_LL_BitAnd", "link" : "org\/saddle\/macros\/BinOps$.html#matMatIP_LL_BitAnd:org.saddle.ops.BinOpInPlace[org.saddle.ops.BitAnd,org.saddle.Mat[Long],org.saddle.Mat[Long]]", "kind" : "implicit val"}, {"label" : "matMatIP_II_Mod", "tail" : ": BinOpInPlace[Mod, Mat[Int], Mat[Int]]", "member" : "org.saddle.macros.BinOpMatMatInPlace.matMatIP_II_Mod", "link" : "org\/saddle\/macros\/BinOps$.html#matMatIP_II_Mod:org.saddle.ops.BinOpInPlace[org.saddle.ops.Mod,org.saddle.Mat[Int],org.saddle.Mat[Int]]", "kind" : "implicit val"}, {"label" : "matMatIP_LI_Mod", "tail" : ": BinOpInPlace[Mod, Mat[Long], Mat[Int]]", "member" : "org.saddle.macros.BinOpMatMatInPlace.matMatIP_LI_Mod", "link" : "org\/saddle\/macros\/BinOps$.html#matMatIP_LI_Mod:org.saddle.ops.BinOpInPlace[org.saddle.ops.Mod,org.saddle.Mat[Long],org.saddle.Mat[Int]]", "kind" : "implicit val"}, {"label" : "matMatIP_LL_Mod", "tail" : ": BinOpInPlace[Mod, Mat[Long], Mat[Long]]", "member" : "org.saddle.macros.BinOpMatMatInPlace.matMatIP_LL_Mod", "link" : "org\/saddle\/macros\/BinOps$.html#matMatIP_LL_Mod:org.saddle.ops.BinOpInPlace[org.saddle.ops.Mod,org.saddle.Mat[Long],org.saddle.Mat[Long]]", "kind" : "implicit val"}, {"label" : "matMatIP_DI_Mod", "tail" : ": BinOpInPlace[Mod, Mat[Double], Mat[Int]]", "member" : "org.saddle.macros.BinOpMatMatInPlace.matMatIP_DI_Mod", "link" : "org\/saddle\/macros\/BinOps$.html#matMatIP_DI_Mod:org.saddle.ops.BinOpInPlace[org.saddle.ops.Mod,org.saddle.Mat[Double],org.saddle.Mat[Int]]", "kind" : "implicit val"}, {"label" : "matMatIP_DL_Mod", "tail" : ": BinOpInPlace[Mod, Mat[Double], Mat[Long]]", "member" : "org.saddle.macros.BinOpMatMatInPlace.matMatIP_DL_Mod", "link" : "org\/saddle\/macros\/BinOps$.html#matMatIP_DL_Mod:org.saddle.ops.BinOpInPlace[org.saddle.ops.Mod,org.saddle.Mat[Double],org.saddle.Mat[Long]]", "kind" : "implicit val"}, {"label" : "matMatIP_DD_Mod", "tail" : ": BinOpInPlace[Mod, Mat[Double], Mat[Double]]", "member" : "org.saddle.macros.BinOpMatMatInPlace.matMatIP_DD_Mod", "link" : "org\/saddle\/macros\/BinOps$.html#matMatIP_DD_Mod:org.saddle.ops.BinOpInPlace[org.saddle.ops.Mod,org.saddle.Mat[Double],org.saddle.Mat[Double]]", "kind" : "implicit val"}, {"label" : "matMatIP_II_Div", "tail" : ": BinOpInPlace[Divide, Mat[Int], Mat[Int]]", "member" : "org.saddle.macros.BinOpMatMatInPlace.matMatIP_II_Div", "link" : "org\/saddle\/macros\/BinOps$.html#matMatIP_II_Div:org.saddle.ops.BinOpInPlace[org.saddle.ops.Divide,org.saddle.Mat[Int],org.saddle.Mat[Int]]", "kind" : "implicit val"}, {"label" : "matMatIP_LI_Div", "tail" : ": BinOpInPlace[Divide, Mat[Long], Mat[Int]]", "member" : "org.saddle.macros.BinOpMatMatInPlace.matMatIP_LI_Div", "link" : "org\/saddle\/macros\/BinOps$.html#matMatIP_LI_Div:org.saddle.ops.BinOpInPlace[org.saddle.ops.Divide,org.saddle.Mat[Long],org.saddle.Mat[Int]]", "kind" : "implicit val"}, {"label" : "matMatIP_LL_Div", "tail" : ": BinOpInPlace[Divide, Mat[Long], Mat[Long]]", "member" : "org.saddle.macros.BinOpMatMatInPlace.matMatIP_LL_Div", "link" : "org\/saddle\/macros\/BinOps$.html#matMatIP_LL_Div:org.saddle.ops.BinOpInPlace[org.saddle.ops.Divide,org.saddle.Mat[Long],org.saddle.Mat[Long]]", "kind" : "implicit val"}, {"label" : "matMatIP_DI_Div", "tail" : ": BinOpInPlace[Divide, Mat[Double], Mat[Int]]", "member" : "org.saddle.macros.BinOpMatMatInPlace.matMatIP_DI_Div", "link" : "org\/saddle\/macros\/BinOps$.html#matMatIP_DI_Div:org.saddle.ops.BinOpInPlace[org.saddle.ops.Divide,org.saddle.Mat[Double],org.saddle.Mat[Int]]", "kind" : "implicit val"}, {"label" : "matMatIP_DL_Div", "tail" : ": BinOpInPlace[Divide, Mat[Double], Mat[Long]]", "member" : "org.saddle.macros.BinOpMatMatInPlace.matMatIP_DL_Div", "link" : "org\/saddle\/macros\/BinOps$.html#matMatIP_DL_Div:org.saddle.ops.BinOpInPlace[org.saddle.ops.Divide,org.saddle.Mat[Double],org.saddle.Mat[Long]]", "kind" : "implicit val"}, {"label" : "matMatIP_DD_Div", "tail" : ": BinOpInPlace[Divide, Mat[Double], Mat[Double]]", "member" : "org.saddle.macros.BinOpMatMatInPlace.matMatIP_DD_Div", "link" : "org\/saddle\/macros\/BinOps$.html#matMatIP_DD_Div:org.saddle.ops.BinOpInPlace[org.saddle.ops.Divide,org.saddle.Mat[Double],org.saddle.Mat[Double]]", "kind" : "implicit val"}, {"label" : "matMatIP_II_Mult", "tail" : ": BinOpInPlace[Multiply, Mat[Int], Mat[Int]]", "member" : "org.saddle.macros.BinOpMatMatInPlace.matMatIP_II_Mult", "link" : "org\/saddle\/macros\/BinOps$.html#matMatIP_II_Mult:org.saddle.ops.BinOpInPlace[org.saddle.ops.Multiply,org.saddle.Mat[Int],org.saddle.Mat[Int]]", "kind" : "implicit val"}, {"label" : "matMatIP_LI_Mult", "tail" : ": BinOpInPlace[Multiply, Mat[Long], Mat[Int]]", "member" : "org.saddle.macros.BinOpMatMatInPlace.matMatIP_LI_Mult", "link" : "org\/saddle\/macros\/BinOps$.html#matMatIP_LI_Mult:org.saddle.ops.BinOpInPlace[org.saddle.ops.Multiply,org.saddle.Mat[Long],org.saddle.Mat[Int]]", "kind" : "implicit val"}, {"label" : "matMatIP_LL_Mult", "tail" : ": BinOpInPlace[Multiply, Mat[Long], Mat[Long]]", "member" : "org.saddle.macros.BinOpMatMatInPlace.matMatIP_LL_Mult", "link" : "org\/saddle\/macros\/BinOps$.html#matMatIP_LL_Mult:org.saddle.ops.BinOpInPlace[org.saddle.ops.Multiply,org.saddle.Mat[Long],org.saddle.Mat[Long]]", "kind" : "implicit val"}, {"label" : "matMatIP_DI_Mult", "tail" : ": BinOpInPlace[Multiply, Mat[Double], Mat[Int]]", "member" : "org.saddle.macros.BinOpMatMatInPlace.matMatIP_DI_Mult", "link" : "org\/saddle\/macros\/BinOps$.html#matMatIP_DI_Mult:org.saddle.ops.BinOpInPlace[org.saddle.ops.Multiply,org.saddle.Mat[Double],org.saddle.Mat[Int]]", "kind" : "implicit val"}, {"label" : "matMatIP_DL_Mult", "tail" : ": BinOpInPlace[Multiply, Mat[Double], Mat[Long]]", "member" : "org.saddle.macros.BinOpMatMatInPlace.matMatIP_DL_Mult", "link" : "org\/saddle\/macros\/BinOps$.html#matMatIP_DL_Mult:org.saddle.ops.BinOpInPlace[org.saddle.ops.Multiply,org.saddle.Mat[Double],org.saddle.Mat[Long]]", "kind" : "implicit val"}, {"label" : "matMatIP_DD_Mult", "tail" : ": BinOpInPlace[Multiply, Mat[Double], Mat[Double]]", "member" : "org.saddle.macros.BinOpMatMatInPlace.matMatIP_DD_Mult", "link" : "org\/saddle\/macros\/BinOps$.html#matMatIP_DD_Mult:org.saddle.ops.BinOpInPlace[org.saddle.ops.Multiply,org.saddle.Mat[Double],org.saddle.Mat[Double]]", "kind" : "implicit val"}, {"label" : "matMatIP_II_Sub", "tail" : ": BinOpInPlace[Subtract, Mat[Int], Mat[Int]]", "member" : "org.saddle.macros.BinOpMatMatInPlace.matMatIP_II_Sub", "link" : "org\/saddle\/macros\/BinOps$.html#matMatIP_II_Sub:org.saddle.ops.BinOpInPlace[org.saddle.ops.Subtract,org.saddle.Mat[Int],org.saddle.Mat[Int]]", "kind" : "implicit val"}, {"label" : "matMatIP_LI_Sub", "tail" : ": BinOpInPlace[Subtract, Mat[Long], Mat[Int]]", "member" : "org.saddle.macros.BinOpMatMatInPlace.matMatIP_LI_Sub", "link" : "org\/saddle\/macros\/BinOps$.html#matMatIP_LI_Sub:org.saddle.ops.BinOpInPlace[org.saddle.ops.Subtract,org.saddle.Mat[Long],org.saddle.Mat[Int]]", "kind" : "implicit val"}, {"label" : "matMatIP_LL_Sub", "tail" : ": BinOpInPlace[Subtract, Mat[Long], Mat[Long]]", "member" : "org.saddle.macros.BinOpMatMatInPlace.matMatIP_LL_Sub", "link" : "org\/saddle\/macros\/BinOps$.html#matMatIP_LL_Sub:org.saddle.ops.BinOpInPlace[org.saddle.ops.Subtract,org.saddle.Mat[Long],org.saddle.Mat[Long]]", "kind" : "implicit val"}, {"label" : "matMatIP_DI_Sub", "tail" : ": BinOpInPlace[Subtract, Mat[Double], Mat[Int]]", "member" : "org.saddle.macros.BinOpMatMatInPlace.matMatIP_DI_Sub", "link" : "org\/saddle\/macros\/BinOps$.html#matMatIP_DI_Sub:org.saddle.ops.BinOpInPlace[org.saddle.ops.Subtract,org.saddle.Mat[Double],org.saddle.Mat[Int]]", "kind" : "implicit val"}, {"label" : "matMatIP_DL_Sub", "tail" : ": BinOpInPlace[Subtract, Mat[Double], Mat[Long]]", "member" : "org.saddle.macros.BinOpMatMatInPlace.matMatIP_DL_Sub", "link" : "org\/saddle\/macros\/BinOps$.html#matMatIP_DL_Sub:org.saddle.ops.BinOpInPlace[org.saddle.ops.Subtract,org.saddle.Mat[Double],org.saddle.Mat[Long]]", "kind" : "implicit val"}, {"label" : "matMatIP_DD_Sub", "tail" : ": BinOpInPlace[Subtract, Mat[Double], Mat[Double]]", "member" : "org.saddle.macros.BinOpMatMatInPlace.matMatIP_DD_Sub", "link" : "org\/saddle\/macros\/BinOps$.html#matMatIP_DD_Sub:org.saddle.ops.BinOpInPlace[org.saddle.ops.Subtract,org.saddle.Mat[Double],org.saddle.Mat[Double]]", "kind" : "implicit val"}, {"label" : "matMatIP_II_Power", "tail" : ": BinOpInPlace[Power, Mat[Int], Mat[Int]]", "member" : "org.saddle.macros.BinOpMatMatInPlace.matMatIP_II_Power", "link" : "org\/saddle\/macros\/BinOps$.html#matMatIP_II_Power:org.saddle.ops.BinOpInPlace[org.saddle.ops.Power,org.saddle.Mat[Int],org.saddle.Mat[Int]]", "kind" : "implicit val"}, {"label" : "matMatIP_LI_Power", "tail" : ": BinOpInPlace[Power, Mat[Long], Mat[Int]]", "member" : "org.saddle.macros.BinOpMatMatInPlace.matMatIP_LI_Power", "link" : "org\/saddle\/macros\/BinOps$.html#matMatIP_LI_Power:org.saddle.ops.BinOpInPlace[org.saddle.ops.Power,org.saddle.Mat[Long],org.saddle.Mat[Int]]", "kind" : "implicit val"}, {"label" : "matMatIP_LL_Power", "tail" : ": BinOpInPlace[Power, Mat[Long], Mat[Long]]", "member" : "org.saddle.macros.BinOpMatMatInPlace.matMatIP_LL_Power", "link" : "org\/saddle\/macros\/BinOps$.html#matMatIP_LL_Power:org.saddle.ops.BinOpInPlace[org.saddle.ops.Power,org.saddle.Mat[Long],org.saddle.Mat[Long]]", "kind" : "implicit val"}, {"label" : "matMatIP_DI_Power", "tail" : ": BinOpInPlace[Power, Mat[Double], Mat[Int]]", "member" : "org.saddle.macros.BinOpMatMatInPlace.matMatIP_DI_Power", "link" : "org\/saddle\/macros\/BinOps$.html#matMatIP_DI_Power:org.saddle.ops.BinOpInPlace[org.saddle.ops.Power,org.saddle.Mat[Double],org.saddle.Mat[Int]]", "kind" : "implicit val"}, {"label" : "matMatIP_DL_Power", "tail" : ": BinOpInPlace[Power, Mat[Double], Mat[Long]]", "member" : "org.saddle.macros.BinOpMatMatInPlace.matMatIP_DL_Power", "link" : "org\/saddle\/macros\/BinOps$.html#matMatIP_DL_Power:org.saddle.ops.BinOpInPlace[org.saddle.ops.Power,org.saddle.Mat[Double],org.saddle.Mat[Long]]", "kind" : "implicit val"}, {"label" : "matMatIP_DD_Power", "tail" : ": BinOpInPlace[Power, Mat[Double], Mat[Double]]", "member" : "org.saddle.macros.BinOpMatMatInPlace.matMatIP_DD_Power", "link" : "org\/saddle\/macros\/BinOps$.html#matMatIP_DD_Power:org.saddle.ops.BinOpInPlace[org.saddle.ops.Power,org.saddle.Mat[Double],org.saddle.Mat[Double]]", "kind" : "implicit val"}, {"label" : "matMatIP_II_Add", "tail" : ": BinOpInPlace[Add, Mat[Int], Mat[Int]]", "member" : "org.saddle.macros.BinOpMatMatInPlace.matMatIP_II_Add", "link" : "org\/saddle\/macros\/BinOps$.html#matMatIP_II_Add:org.saddle.ops.BinOpInPlace[org.saddle.ops.Add,org.saddle.Mat[Int],org.saddle.Mat[Int]]", "kind" : "implicit val"}, {"label" : "matMatIP_LI_Add", "tail" : ": BinOpInPlace[Add, Mat[Long], Mat[Int]]", "member" : "org.saddle.macros.BinOpMatMatInPlace.matMatIP_LI_Add", "link" : "org\/saddle\/macros\/BinOps$.html#matMatIP_LI_Add:org.saddle.ops.BinOpInPlace[org.saddle.ops.Add,org.saddle.Mat[Long],org.saddle.Mat[Int]]", "kind" : "implicit val"}, {"label" : "matMatIP_LL_Add", "tail" : ": BinOpInPlace[Add, Mat[Long], Mat[Long]]", "member" : "org.saddle.macros.BinOpMatMatInPlace.matMatIP_LL_Add", "link" : "org\/saddle\/macros\/BinOps$.html#matMatIP_LL_Add:org.saddle.ops.BinOpInPlace[org.saddle.ops.Add,org.saddle.Mat[Long],org.saddle.Mat[Long]]", "kind" : "implicit val"}, {"label" : "matMatIP_DI_Add", "tail" : ": BinOpInPlace[Add, Mat[Double], Mat[Int]]", "member" : "org.saddle.macros.BinOpMatMatInPlace.matMatIP_DI_Add", "link" : "org\/saddle\/macros\/BinOps$.html#matMatIP_DI_Add:org.saddle.ops.BinOpInPlace[org.saddle.ops.Add,org.saddle.Mat[Double],org.saddle.Mat[Int]]", "kind" : "implicit val"}, {"label" : "matMatIP_DL_Add", "tail" : ": BinOpInPlace[Add, Mat[Double], Mat[Long]]", "member" : "org.saddle.macros.BinOpMatMatInPlace.matMatIP_DL_Add", "link" : "org\/saddle\/macros\/BinOps$.html#matMatIP_DL_Add:org.saddle.ops.BinOpInPlace[org.saddle.ops.Add,org.saddle.Mat[Double],org.saddle.Mat[Long]]", "kind" : "implicit val"}, {"label" : "matMatIP_DD_Add", "tail" : ": BinOpInPlace[Add, Mat[Double], Mat[Double]]", "member" : "org.saddle.macros.BinOpMatMatInPlace.matMatIP_DD_Add", "link" : "org\/saddle\/macros\/BinOps$.html#matMatIP_DD_Add:org.saddle.ops.BinOpInPlace[org.saddle.ops.Add,org.saddle.Mat[Double],org.saddle.Mat[Double]]", "kind" : "implicit val"}, {"label" : "matSclr_Copy_BB_Xor", "tail" : ": BinOp[XorOp, Mat[Boolean], Boolean, Mat[Boolean]]", "member" : "org.saddle.macros.BinOpMatCopy.matSclr_Copy_BB_Xor", "link" : "org\/saddle\/macros\/BinOps$.html#matSclr_Copy_BB_Xor:org.saddle.ops.BinOp[org.saddle.ops.XorOp,org.saddle.Mat[Boolean],Boolean,org.saddle.Mat[Boolean]]", "kind" : "implicit val"}, {"label" : "matSclr_Copy_BB_Or", "tail" : ": BinOp[OrOp, Mat[Boolean], Boolean, Mat[Boolean]]", "member" : "org.saddle.macros.BinOpMatCopy.matSclr_Copy_BB_Or", "link" : "org\/saddle\/macros\/BinOps$.html#matSclr_Copy_BB_Or:org.saddle.ops.BinOp[org.saddle.ops.OrOp,org.saddle.Mat[Boolean],Boolean,org.saddle.Mat[Boolean]]", "kind" : "implicit val"}, {"label" : "matSclr_Copy_BB_And", "tail" : ": BinOp[AndOp, Mat[Boolean], Boolean, Mat[Boolean]]", "member" : "org.saddle.macros.BinOpMatCopy.matSclr_Copy_BB_And", "link" : "org\/saddle\/macros\/BinOps$.html#matSclr_Copy_BB_And:org.saddle.ops.BinOp[org.saddle.ops.AndOp,org.saddle.Mat[Boolean],Boolean,org.saddle.Mat[Boolean]]", "kind" : "implicit val"}, {"label" : "matSclr_Copy_BB_EQ", "tail" : ": BinOp[EqOp, Mat[Boolean], Boolean, Mat[Boolean]]", "member" : "org.saddle.macros.BinOpMatCopy.matSclr_Copy_BB_EQ", "link" : "org\/saddle\/macros\/BinOps$.html#matSclr_Copy_BB_EQ:org.saddle.ops.BinOp[org.saddle.ops.EqOp,org.saddle.Mat[Boolean],Boolean,org.saddle.Mat[Boolean]]", "kind" : "implicit val"}, {"label" : "matSclr_Copy_II_EQ", "tail" : ": BinOp[EqOp, Mat[Int], Int, Mat[Boolean]]", "member" : "org.saddle.macros.BinOpMatCopy.matSclr_Copy_II_EQ", "link" : "org\/saddle\/macros\/BinOps$.html#matSclr_Copy_II_EQ:org.saddle.ops.BinOp[org.saddle.ops.EqOp,org.saddle.Mat[Int],Int,org.saddle.Mat[Boolean]]", "kind" : "implicit val"}, {"label" : "matSclr_Copy_ID_EQ", "tail" : ": BinOp[EqOp, Mat[Int], Double, Mat[Boolean]]", "member" : "org.saddle.macros.BinOpMatCopy.matSclr_Copy_ID_EQ", "link" : "org\/saddle\/macros\/BinOps$.html#matSclr_Copy_ID_EQ:org.saddle.ops.BinOp[org.saddle.ops.EqOp,org.saddle.Mat[Int],Double,org.saddle.Mat[Boolean]]", "kind" : "implicit val"}, {"label" : "matSclr_Copy_LI_EQ", "tail" : ": BinOp[EqOp, Mat[Long], Int, Mat[Boolean]]", "member" : "org.saddle.macros.BinOpMatCopy.matSclr_Copy_LI_EQ", "link" : "org\/saddle\/macros\/BinOps$.html#matSclr_Copy_LI_EQ:org.saddle.ops.BinOp[org.saddle.ops.EqOp,org.saddle.Mat[Long],Int,org.saddle.Mat[Boolean]]", "kind" : "implicit val"}, {"label" : "matSclr_Copy_LL_EQ", "tail" : ": BinOp[EqOp, Mat[Long], Long, Mat[Boolean]]", "member" : "org.saddle.macros.BinOpMatCopy.matSclr_Copy_LL_EQ", "link" : "org\/saddle\/macros\/BinOps$.html#matSclr_Copy_LL_EQ:org.saddle.ops.BinOp[org.saddle.ops.EqOp,org.saddle.Mat[Long],Long,org.saddle.Mat[Boolean]]", "kind" : "implicit val"}, {"label" : "matSclr_Copy_LD_EQ", "tail" : ": BinOp[EqOp, Mat[Long], Double, Mat[Boolean]]", "member" : "org.saddle.macros.BinOpMatCopy.matSclr_Copy_LD_EQ", "link" : "org\/saddle\/macros\/BinOps$.html#matSclr_Copy_LD_EQ:org.saddle.ops.BinOp[org.saddle.ops.EqOp,org.saddle.Mat[Long],Double,org.saddle.Mat[Boolean]]", "kind" : "implicit val"}, {"label" : "matSclr_Copy_DI_EQ", "tail" : ": BinOp[EqOp, Mat[Double], Int, Mat[Boolean]]", "member" : "org.saddle.macros.BinOpMatCopy.matSclr_Copy_DI_EQ", "link" : "org\/saddle\/macros\/BinOps$.html#matSclr_Copy_DI_EQ:org.saddle.ops.BinOp[org.saddle.ops.EqOp,org.saddle.Mat[Double],Int,org.saddle.Mat[Boolean]]", "kind" : "implicit val"}, {"label" : "matSclr_Copy_DL_EQ", "tail" : ": BinOp[EqOp, Mat[Double], Long, Mat[Boolean]]", "member" : "org.saddle.macros.BinOpMatCopy.matSclr_Copy_DL_EQ", "link" : "org\/saddle\/macros\/BinOps$.html#matSclr_Copy_DL_EQ:org.saddle.ops.BinOp[org.saddle.ops.EqOp,org.saddle.Mat[Double],Long,org.saddle.Mat[Boolean]]", "kind" : "implicit val"}, {"label" : "matSclr_Copy_DD_EQ", "tail" : ": BinOp[EqOp, Mat[Double], Double, Mat[Boolean]]", "member" : "org.saddle.macros.BinOpMatCopy.matSclr_Copy_DD_EQ", "link" : "org\/saddle\/macros\/BinOps$.html#matSclr_Copy_DD_EQ:org.saddle.ops.BinOp[org.saddle.ops.EqOp,org.saddle.Mat[Double],Double,org.saddle.Mat[Boolean]]", "kind" : "implicit val"}, {"label" : "matSclr_Copy_BB_NEQ", "tail" : ": BinOp[NeqOp, Mat[Boolean], Boolean, Mat[Boolean]]", "member" : "org.saddle.macros.BinOpMatCopy.matSclr_Copy_BB_NEQ", "link" : "org\/saddle\/macros\/BinOps$.html#matSclr_Copy_BB_NEQ:org.saddle.ops.BinOp[org.saddle.ops.NeqOp,org.saddle.Mat[Boolean],Boolean,org.saddle.Mat[Boolean]]", "kind" : "implicit val"}, {"label" : "matSclr_Copy_II_NEQ", "tail" : ": BinOp[NeqOp, Mat[Int], Int, Mat[Boolean]]", "member" : "org.saddle.macros.BinOpMatCopy.matSclr_Copy_II_NEQ", "link" : "org\/saddle\/macros\/BinOps$.html#matSclr_Copy_II_NEQ:org.saddle.ops.BinOp[org.saddle.ops.NeqOp,org.saddle.Mat[Int],Int,org.saddle.Mat[Boolean]]", "kind" : "implicit val"}, {"label" : "matSclr_Copy_ID_NEQ", "tail" : ": BinOp[NeqOp, Mat[Int], Double, Mat[Boolean]]", "member" : "org.saddle.macros.BinOpMatCopy.matSclr_Copy_ID_NEQ", "link" : "org\/saddle\/macros\/BinOps$.html#matSclr_Copy_ID_NEQ:org.saddle.ops.BinOp[org.saddle.ops.NeqOp,org.saddle.Mat[Int],Double,org.saddle.Mat[Boolean]]", "kind" : "implicit val"}, {"label" : "matSclr_Copy_LI_NEQ", "tail" : ": BinOp[NeqOp, Mat[Long], Int, Mat[Boolean]]", "member" : "org.saddle.macros.BinOpMatCopy.matSclr_Copy_LI_NEQ", "link" : "org\/saddle\/macros\/BinOps$.html#matSclr_Copy_LI_NEQ:org.saddle.ops.BinOp[org.saddle.ops.NeqOp,org.saddle.Mat[Long],Int,org.saddle.Mat[Boolean]]", "kind" : "implicit val"}, {"label" : "matSclr_Copy_LL_NEQ", "tail" : ": BinOp[NeqOp, Mat[Long], Long, Mat[Boolean]]", "member" : "org.saddle.macros.BinOpMatCopy.matSclr_Copy_LL_NEQ", "link" : "org\/saddle\/macros\/BinOps$.html#matSclr_Copy_LL_NEQ:org.saddle.ops.BinOp[org.saddle.ops.NeqOp,org.saddle.Mat[Long],Long,org.saddle.Mat[Boolean]]", "kind" : "implicit val"}, {"label" : "matSclr_Copy_LD_NEQ", "tail" : ": BinOp[NeqOp, Mat[Long], Double, Mat[Boolean]]", "member" : "org.saddle.macros.BinOpMatCopy.matSclr_Copy_LD_NEQ", "link" : "org\/saddle\/macros\/BinOps$.html#matSclr_Copy_LD_NEQ:org.saddle.ops.BinOp[org.saddle.ops.NeqOp,org.saddle.Mat[Long],Double,org.saddle.Mat[Boolean]]", "kind" : "implicit val"}, {"label" : "matSclr_Copy_DI_NEQ", "tail" : ": BinOp[NeqOp, Mat[Double], Int, Mat[Boolean]]", "member" : "org.saddle.macros.BinOpMatCopy.matSclr_Copy_DI_NEQ", "link" : "org\/saddle\/macros\/BinOps$.html#matSclr_Copy_DI_NEQ:org.saddle.ops.BinOp[org.saddle.ops.NeqOp,org.saddle.Mat[Double],Int,org.saddle.Mat[Boolean]]", "kind" : "implicit val"}, {"label" : "matSclr_Copy_DL_NEQ", "tail" : ": BinOp[NeqOp, Mat[Double], Long, Mat[Boolean]]", "member" : "org.saddle.macros.BinOpMatCopy.matSclr_Copy_DL_NEQ", "link" : "org\/saddle\/macros\/BinOps$.html#matSclr_Copy_DL_NEQ:org.saddle.ops.BinOp[org.saddle.ops.NeqOp,org.saddle.Mat[Double],Long,org.saddle.Mat[Boolean]]", "kind" : "implicit val"}, {"label" : "matSclr_Copy_DD_NEQ", "tail" : ": BinOp[NeqOp, Mat[Double], Double, Mat[Boolean]]", "member" : "org.saddle.macros.BinOpMatCopy.matSclr_Copy_DD_NEQ", "link" : "org\/saddle\/macros\/BinOps$.html#matSclr_Copy_DD_NEQ:org.saddle.ops.BinOp[org.saddle.ops.NeqOp,org.saddle.Mat[Double],Double,org.saddle.Mat[Boolean]]", "kind" : "implicit val"}, {"label" : "matSclr_Copy_BB_LTE", "tail" : ": BinOp[LteOp, Mat[Boolean], Boolean, Mat[Boolean]]", "member" : "org.saddle.macros.BinOpMatCopy.matSclr_Copy_BB_LTE", "link" : "org\/saddle\/macros\/BinOps$.html#matSclr_Copy_BB_LTE:org.saddle.ops.BinOp[org.saddle.ops.LteOp,org.saddle.Mat[Boolean],Boolean,org.saddle.Mat[Boolean]]", "kind" : "implicit val"}, {"label" : "matSclr_Copy_II_LTE", "tail" : ": BinOp[LteOp, Mat[Int], Int, Mat[Boolean]]", "member" : "org.saddle.macros.BinOpMatCopy.matSclr_Copy_II_LTE", "link" : "org\/saddle\/macros\/BinOps$.html#matSclr_Copy_II_LTE:org.saddle.ops.BinOp[org.saddle.ops.LteOp,org.saddle.Mat[Int],Int,org.saddle.Mat[Boolean]]", "kind" : "implicit val"}, {"label" : "matSclr_Copy_ID_LTE", "tail" : ": BinOp[LteOp, Mat[Int], Double, Mat[Boolean]]", "member" : "org.saddle.macros.BinOpMatCopy.matSclr_Copy_ID_LTE", "link" : "org\/saddle\/macros\/BinOps$.html#matSclr_Copy_ID_LTE:org.saddle.ops.BinOp[org.saddle.ops.LteOp,org.saddle.Mat[Int],Double,org.saddle.Mat[Boolean]]", "kind" : "implicit val"}, {"label" : "matSclr_Copy_LI_LTE", "tail" : ": BinOp[LteOp, Mat[Long], Int, Mat[Boolean]]", "member" : "org.saddle.macros.BinOpMatCopy.matSclr_Copy_LI_LTE", "link" : "org\/saddle\/macros\/BinOps$.html#matSclr_Copy_LI_LTE:org.saddle.ops.BinOp[org.saddle.ops.LteOp,org.saddle.Mat[Long],Int,org.saddle.Mat[Boolean]]", "kind" : "implicit val"}, {"label" : "matSclr_Copy_LL_LTE", "tail" : ": BinOp[LteOp, Mat[Long], Long, Mat[Boolean]]", "member" : "org.saddle.macros.BinOpMatCopy.matSclr_Copy_LL_LTE", "link" : "org\/saddle\/macros\/BinOps$.html#matSclr_Copy_LL_LTE:org.saddle.ops.BinOp[org.saddle.ops.LteOp,org.saddle.Mat[Long],Long,org.saddle.Mat[Boolean]]", "kind" : "implicit val"}, {"label" : "matSclr_Copy_LD_LTE", "tail" : ": BinOp[LteOp, Mat[Long], Double, Mat[Boolean]]", "member" : "org.saddle.macros.BinOpMatCopy.matSclr_Copy_LD_LTE", "link" : "org\/saddle\/macros\/BinOps$.html#matSclr_Copy_LD_LTE:org.saddle.ops.BinOp[org.saddle.ops.LteOp,org.saddle.Mat[Long],Double,org.saddle.Mat[Boolean]]", "kind" : "implicit val"}, {"label" : "matSclr_Copy_DI_LTE", "tail" : ": BinOp[LteOp, Mat[Double], Int, Mat[Boolean]]", "member" : "org.saddle.macros.BinOpMatCopy.matSclr_Copy_DI_LTE", "link" : "org\/saddle\/macros\/BinOps$.html#matSclr_Copy_DI_LTE:org.saddle.ops.BinOp[org.saddle.ops.LteOp,org.saddle.Mat[Double],Int,org.saddle.Mat[Boolean]]", "kind" : "implicit val"}, {"label" : "matSclr_Copy_DL_LTE", "tail" : ": BinOp[LteOp, Mat[Double], Long, Mat[Boolean]]", "member" : "org.saddle.macros.BinOpMatCopy.matSclr_Copy_DL_LTE", "link" : "org\/saddle\/macros\/BinOps$.html#matSclr_Copy_DL_LTE:org.saddle.ops.BinOp[org.saddle.ops.LteOp,org.saddle.Mat[Double],Long,org.saddle.Mat[Boolean]]", "kind" : "implicit val"}, {"label" : "matSclr_Copy_DD_LTE", "tail" : ": BinOp[LteOp, Mat[Double], Double, Mat[Boolean]]", "member" : "org.saddle.macros.BinOpMatCopy.matSclr_Copy_DD_LTE", "link" : "org\/saddle\/macros\/BinOps$.html#matSclr_Copy_DD_LTE:org.saddle.ops.BinOp[org.saddle.ops.LteOp,org.saddle.Mat[Double],Double,org.saddle.Mat[Boolean]]", "kind" : "implicit val"}, {"label" : "matSclr_Copy_BB_LT", "tail" : ": BinOp[LtOp, Mat[Boolean], Boolean, Mat[Boolean]]", "member" : "org.saddle.macros.BinOpMatCopy.matSclr_Copy_BB_LT", "link" : "org\/saddle\/macros\/BinOps$.html#matSclr_Copy_BB_LT:org.saddle.ops.BinOp[org.saddle.ops.LtOp,org.saddle.Mat[Boolean],Boolean,org.saddle.Mat[Boolean]]", "kind" : "implicit val"}, {"label" : "matSclr_Copy_II_LT", "tail" : ": BinOp[LtOp, Mat[Int], Int, Mat[Boolean]]", "member" : "org.saddle.macros.BinOpMatCopy.matSclr_Copy_II_LT", "link" : "org\/saddle\/macros\/BinOps$.html#matSclr_Copy_II_LT:org.saddle.ops.BinOp[org.saddle.ops.LtOp,org.saddle.Mat[Int],Int,org.saddle.Mat[Boolean]]", "kind" : "implicit val"}, {"label" : "matSclr_Copy_ID_LT", "tail" : ": BinOp[LtOp, Mat[Int], Double, Mat[Boolean]]", "member" : "org.saddle.macros.BinOpMatCopy.matSclr_Copy_ID_LT", "link" : "org\/saddle\/macros\/BinOps$.html#matSclr_Copy_ID_LT:org.saddle.ops.BinOp[org.saddle.ops.LtOp,org.saddle.Mat[Int],Double,org.saddle.Mat[Boolean]]", "kind" : "implicit val"}, {"label" : "matSclr_Copy_LI_LT", "tail" : ": BinOp[LtOp, Mat[Long], Int, Mat[Boolean]]", "member" : "org.saddle.macros.BinOpMatCopy.matSclr_Copy_LI_LT", "link" : "org\/saddle\/macros\/BinOps$.html#matSclr_Copy_LI_LT:org.saddle.ops.BinOp[org.saddle.ops.LtOp,org.saddle.Mat[Long],Int,org.saddle.Mat[Boolean]]", "kind" : "implicit val"}, {"label" : "matSclr_Copy_LL_LT", "tail" : ": BinOp[LtOp, Mat[Long], Long, Mat[Boolean]]", "member" : "org.saddle.macros.BinOpMatCopy.matSclr_Copy_LL_LT", "link" : "org\/saddle\/macros\/BinOps$.html#matSclr_Copy_LL_LT:org.saddle.ops.BinOp[org.saddle.ops.LtOp,org.saddle.Mat[Long],Long,org.saddle.Mat[Boolean]]", "kind" : "implicit val"}, {"label" : "matSclr_Copy_LD_LT", "tail" : ": BinOp[LtOp, Mat[Long], Double, Mat[Boolean]]", "member" : "org.saddle.macros.BinOpMatCopy.matSclr_Copy_LD_LT", "link" : "org\/saddle\/macros\/BinOps$.html#matSclr_Copy_LD_LT:org.saddle.ops.BinOp[org.saddle.ops.LtOp,org.saddle.Mat[Long],Double,org.saddle.Mat[Boolean]]", "kind" : "implicit val"}, {"label" : "matSclr_Copy_DI_LT", "tail" : ": BinOp[LtOp, Mat[Double], Int, Mat[Boolean]]", "member" : "org.saddle.macros.BinOpMatCopy.matSclr_Copy_DI_LT", "link" : "org\/saddle\/macros\/BinOps$.html#matSclr_Copy_DI_LT:org.saddle.ops.BinOp[org.saddle.ops.LtOp,org.saddle.Mat[Double],Int,org.saddle.Mat[Boolean]]", "kind" : "implicit val"}, {"label" : "matSclr_Copy_DL_LT", "tail" : ": BinOp[LtOp, Mat[Double], Long, Mat[Boolean]]", "member" : "org.saddle.macros.BinOpMatCopy.matSclr_Copy_DL_LT", "link" : "org\/saddle\/macros\/BinOps$.html#matSclr_Copy_DL_LT:org.saddle.ops.BinOp[org.saddle.ops.LtOp,org.saddle.Mat[Double],Long,org.saddle.Mat[Boolean]]", "kind" : "implicit val"}, {"label" : "matSclr_Copy_DD_LT", "tail" : ": BinOp[LtOp, Mat[Double], Double, Mat[Boolean]]", "member" : "org.saddle.macros.BinOpMatCopy.matSclr_Copy_DD_LT", "link" : "org\/saddle\/macros\/BinOps$.html#matSclr_Copy_DD_LT:org.saddle.ops.BinOp[org.saddle.ops.LtOp,org.saddle.Mat[Double],Double,org.saddle.Mat[Boolean]]", "kind" : "implicit val"}, {"label" : "matSclr_Copy_BB_GTE", "tail" : ": BinOp[GteOp, Mat[Boolean], Boolean, Mat[Boolean]]", "member" : "org.saddle.macros.BinOpMatCopy.matSclr_Copy_BB_GTE", "link" : "org\/saddle\/macros\/BinOps$.html#matSclr_Copy_BB_GTE:org.saddle.ops.BinOp[org.saddle.ops.GteOp,org.saddle.Mat[Boolean],Boolean,org.saddle.Mat[Boolean]]", "kind" : "implicit val"}, {"label" : "matSclr_Copy_II_GTE", "tail" : ": BinOp[GteOp, Mat[Int], Int, Mat[Boolean]]", "member" : "org.saddle.macros.BinOpMatCopy.matSclr_Copy_II_GTE", "link" : "org\/saddle\/macros\/BinOps$.html#matSclr_Copy_II_GTE:org.saddle.ops.BinOp[org.saddle.ops.GteOp,org.saddle.Mat[Int],Int,org.saddle.Mat[Boolean]]", "kind" : "implicit val"}, {"label" : "matSclr_Copy_ID_GTE", "tail" : ": BinOp[GteOp, Mat[Int], Double, Mat[Boolean]]", "member" : "org.saddle.macros.BinOpMatCopy.matSclr_Copy_ID_GTE", "link" : "org\/saddle\/macros\/BinOps$.html#matSclr_Copy_ID_GTE:org.saddle.ops.BinOp[org.saddle.ops.GteOp,org.saddle.Mat[Int],Double,org.saddle.Mat[Boolean]]", "kind" : "implicit val"}, {"label" : "matSclr_Copy_LI_GTE", "tail" : ": BinOp[GteOp, Mat[Long], Int, Mat[Boolean]]", "member" : "org.saddle.macros.BinOpMatCopy.matSclr_Copy_LI_GTE", "link" : "org\/saddle\/macros\/BinOps$.html#matSclr_Copy_LI_GTE:org.saddle.ops.BinOp[org.saddle.ops.GteOp,org.saddle.Mat[Long],Int,org.saddle.Mat[Boolean]]", "kind" : "implicit val"}, {"label" : "matSclr_Copy_LL_GTE", "tail" : ": BinOp[GteOp, Mat[Long], Long, Mat[Boolean]]", "member" : "org.saddle.macros.BinOpMatCopy.matSclr_Copy_LL_GTE", "link" : "org\/saddle\/macros\/BinOps$.html#matSclr_Copy_LL_GTE:org.saddle.ops.BinOp[org.saddle.ops.GteOp,org.saddle.Mat[Long],Long,org.saddle.Mat[Boolean]]", "kind" : "implicit val"}, {"label" : "matSclr_Copy_LD_GTE", "tail" : ": BinOp[GteOp, Mat[Long], Double, Mat[Boolean]]", "member" : "org.saddle.macros.BinOpMatCopy.matSclr_Copy_LD_GTE", "link" : "org\/saddle\/macros\/BinOps$.html#matSclr_Copy_LD_GTE:org.saddle.ops.BinOp[org.saddle.ops.GteOp,org.saddle.Mat[Long],Double,org.saddle.Mat[Boolean]]", "kind" : "implicit val"}, {"label" : "matSclr_Copy_DI_GTE", "tail" : ": BinOp[GteOp, Mat[Double], Int, Mat[Boolean]]", "member" : "org.saddle.macros.BinOpMatCopy.matSclr_Copy_DI_GTE", "link" : "org\/saddle\/macros\/BinOps$.html#matSclr_Copy_DI_GTE:org.saddle.ops.BinOp[org.saddle.ops.GteOp,org.saddle.Mat[Double],Int,org.saddle.Mat[Boolean]]", "kind" : "implicit val"}, {"label" : "matSclr_Copy_DL_GTE", "tail" : ": BinOp[GteOp, Mat[Double], Long, Mat[Boolean]]", "member" : "org.saddle.macros.BinOpMatCopy.matSclr_Copy_DL_GTE", "link" : "org\/saddle\/macros\/BinOps$.html#matSclr_Copy_DL_GTE:org.saddle.ops.BinOp[org.saddle.ops.GteOp,org.saddle.Mat[Double],Long,org.saddle.Mat[Boolean]]", "kind" : "implicit val"}, {"label" : "matSclr_Copy_DD_GTE", "tail" : ": BinOp[GteOp, Mat[Double], Double, Mat[Boolean]]", "member" : "org.saddle.macros.BinOpMatCopy.matSclr_Copy_DD_GTE", "link" : "org\/saddle\/macros\/BinOps$.html#matSclr_Copy_DD_GTE:org.saddle.ops.BinOp[org.saddle.ops.GteOp,org.saddle.Mat[Double],Double,org.saddle.Mat[Boolean]]", "kind" : "implicit val"}, {"label" : "matSclr_Copy_BB_GT", "tail" : ": BinOp[GtOp, Mat[Boolean], Boolean, Mat[Boolean]]", "member" : "org.saddle.macros.BinOpMatCopy.matSclr_Copy_BB_GT", "link" : "org\/saddle\/macros\/BinOps$.html#matSclr_Copy_BB_GT:org.saddle.ops.BinOp[org.saddle.ops.GtOp,org.saddle.Mat[Boolean],Boolean,org.saddle.Mat[Boolean]]", "kind" : "implicit val"}, {"label" : "matSclr_Copy_II_GT", "tail" : ": BinOp[GtOp, Mat[Int], Int, Mat[Boolean]]", "member" : "org.saddle.macros.BinOpMatCopy.matSclr_Copy_II_GT", "link" : "org\/saddle\/macros\/BinOps$.html#matSclr_Copy_II_GT:org.saddle.ops.BinOp[org.saddle.ops.GtOp,org.saddle.Mat[Int],Int,org.saddle.Mat[Boolean]]", "kind" : "implicit val"}, {"label" : "matSclr_Copy_ID_GT", "tail" : ": BinOp[GtOp, Mat[Int], Double, Mat[Boolean]]", "member" : "org.saddle.macros.BinOpMatCopy.matSclr_Copy_ID_GT", "link" : "org\/saddle\/macros\/BinOps$.html#matSclr_Copy_ID_GT:org.saddle.ops.BinOp[org.saddle.ops.GtOp,org.saddle.Mat[Int],Double,org.saddle.Mat[Boolean]]", "kind" : "implicit val"}, {"label" : "matSclr_Copy_LI_GT", "tail" : ": BinOp[GtOp, Mat[Long], Int, Mat[Boolean]]", "member" : "org.saddle.macros.BinOpMatCopy.matSclr_Copy_LI_GT", "link" : "org\/saddle\/macros\/BinOps$.html#matSclr_Copy_LI_GT:org.saddle.ops.BinOp[org.saddle.ops.GtOp,org.saddle.Mat[Long],Int,org.saddle.Mat[Boolean]]", "kind" : "implicit val"}, {"label" : "matSclr_Copy_LL_GT", "tail" : ": BinOp[GtOp, Mat[Long], Long, Mat[Boolean]]", "member" : "org.saddle.macros.BinOpMatCopy.matSclr_Copy_LL_GT", "link" : "org\/saddle\/macros\/BinOps$.html#matSclr_Copy_LL_GT:org.saddle.ops.BinOp[org.saddle.ops.GtOp,org.saddle.Mat[Long],Long,org.saddle.Mat[Boolean]]", "kind" : "implicit val"}, {"label" : "matSclr_Copy_LD_GT", "tail" : ": BinOp[GtOp, Mat[Long], Double, Mat[Boolean]]", "member" : "org.saddle.macros.BinOpMatCopy.matSclr_Copy_LD_GT", "link" : "org\/saddle\/macros\/BinOps$.html#matSclr_Copy_LD_GT:org.saddle.ops.BinOp[org.saddle.ops.GtOp,org.saddle.Mat[Long],Double,org.saddle.Mat[Boolean]]", "kind" : "implicit val"}, {"label" : "matSclr_Copy_DI_GT", "tail" : ": BinOp[GtOp, Mat[Double], Int, Mat[Boolean]]", "member" : "org.saddle.macros.BinOpMatCopy.matSclr_Copy_DI_GT", "link" : "org\/saddle\/macros\/BinOps$.html#matSclr_Copy_DI_GT:org.saddle.ops.BinOp[org.saddle.ops.GtOp,org.saddle.Mat[Double],Int,org.saddle.Mat[Boolean]]", "kind" : "implicit val"}, {"label" : "matSclr_Copy_DL_GT", "tail" : ": BinOp[GtOp, Mat[Double], Long, Mat[Boolean]]", "member" : "org.saddle.macros.BinOpMatCopy.matSclr_Copy_DL_GT", "link" : "org\/saddle\/macros\/BinOps$.html#matSclr_Copy_DL_GT:org.saddle.ops.BinOp[org.saddle.ops.GtOp,org.saddle.Mat[Double],Long,org.saddle.Mat[Boolean]]", "kind" : "implicit val"}, {"label" : "matSclr_Copy_DD_GT", "tail" : ": BinOp[GtOp, Mat[Double], Double, Mat[Boolean]]", "member" : "org.saddle.macros.BinOpMatCopy.matSclr_Copy_DD_GT", "link" : "org\/saddle\/macros\/BinOps$.html#matSclr_Copy_DD_GT:org.saddle.ops.BinOp[org.saddle.ops.GtOp,org.saddle.Mat[Double],Double,org.saddle.Mat[Boolean]]", "kind" : "implicit val"}, {"label" : "matSclr_Copy_II_BitUshr", "tail" : ": BinOp[BitUShr, Mat[Int], Int, Mat[Int]]", "member" : "org.saddle.macros.BinOpMatCopy.matSclr_Copy_II_BitUshr", "link" : "org\/saddle\/macros\/BinOps$.html#matSclr_Copy_II_BitUshr:org.saddle.ops.BinOp[org.saddle.ops.BitUShr,org.saddle.Mat[Int],Int,org.saddle.Mat[Int]]", "kind" : "implicit val"}, {"label" : "matSclr_Copy_LI_BitUshr", "tail" : ": BinOp[BitUShr, Mat[Long], Int, Mat[Long]]", "member" : "org.saddle.macros.BinOpMatCopy.matSclr_Copy_LI_BitUshr", "link" : "org\/saddle\/macros\/BinOps$.html#matSclr_Copy_LI_BitUshr:org.saddle.ops.BinOp[org.saddle.ops.BitUShr,org.saddle.Mat[Long],Int,org.saddle.Mat[Long]]", "kind" : "implicit val"}, {"label" : "matSclr_Copy_LL_BitUshr", "tail" : ": BinOp[BitUShr, Mat[Long], Long, Mat[Long]]", "member" : "org.saddle.macros.BinOpMatCopy.matSclr_Copy_LL_BitUshr", "link" : "org\/saddle\/macros\/BinOps$.html#matSclr_Copy_LL_BitUshr:org.saddle.ops.BinOp[org.saddle.ops.BitUShr,org.saddle.Mat[Long],Long,org.saddle.Mat[Long]]", "kind" : "implicit val"}, {"label" : "matSclr_Copy_II_BitShr", "tail" : ": BinOp[BitShr, Mat[Int], Int, Mat[Int]]", "member" : "org.saddle.macros.BinOpMatCopy.matSclr_Copy_II_BitShr", "link" : "org\/saddle\/macros\/BinOps$.html#matSclr_Copy_II_BitShr:org.saddle.ops.BinOp[org.saddle.ops.BitShr,org.saddle.Mat[Int],Int,org.saddle.Mat[Int]]", "kind" : "implicit val"}, {"label" : "matSclr_Copy_LI_BitShr", "tail" : ": BinOp[BitShr, Mat[Long], Int, Mat[Long]]", "member" : "org.saddle.macros.BinOpMatCopy.matSclr_Copy_LI_BitShr", "link" : "org\/saddle\/macros\/BinOps$.html#matSclr_Copy_LI_BitShr:org.saddle.ops.BinOp[org.saddle.ops.BitShr,org.saddle.Mat[Long],Int,org.saddle.Mat[Long]]", "kind" : "implicit val"}, {"label" : "matSclr_Copy_LL_BitShr", "tail" : ": BinOp[BitShr, Mat[Long], Long, Mat[Long]]", "member" : "org.saddle.macros.BinOpMatCopy.matSclr_Copy_LL_BitShr", "link" : "org\/saddle\/macros\/BinOps$.html#matSclr_Copy_LL_BitShr:org.saddle.ops.BinOp[org.saddle.ops.BitShr,org.saddle.Mat[Long],Long,org.saddle.Mat[Long]]", "kind" : "implicit val"}, {"label" : "matSclr_Copy_II_BitShl", "tail" : ": BinOp[BitShl, Mat[Int], Int, Mat[Int]]", "member" : "org.saddle.macros.BinOpMatCopy.matSclr_Copy_II_BitShl", "link" : "org\/saddle\/macros\/BinOps$.html#matSclr_Copy_II_BitShl:org.saddle.ops.BinOp[org.saddle.ops.BitShl,org.saddle.Mat[Int],Int,org.saddle.Mat[Int]]", "kind" : "implicit val"}, {"label" : "matSclr_Copy_LI_BitShl", "tail" : ": BinOp[BitShl, Mat[Long], Int, Mat[Long]]", "member" : "org.saddle.macros.BinOpMatCopy.matSclr_Copy_LI_BitShl", "link" : "org\/saddle\/macros\/BinOps$.html#matSclr_Copy_LI_BitShl:org.saddle.ops.BinOp[org.saddle.ops.BitShl,org.saddle.Mat[Long],Int,org.saddle.Mat[Long]]", "kind" : "implicit val"}, {"label" : "matSclr_Copy_LL_BitShl", "tail" : ": BinOp[BitShl, Mat[Long], Long, Mat[Long]]", "member" : "org.saddle.macros.BinOpMatCopy.matSclr_Copy_LL_BitShl", "link" : "org\/saddle\/macros\/BinOps$.html#matSclr_Copy_LL_BitShl:org.saddle.ops.BinOp[org.saddle.ops.BitShl,org.saddle.Mat[Long],Long,org.saddle.Mat[Long]]", "kind" : "implicit val"}, {"label" : "matSclr_Copy_II_BitXor", "tail" : ": BinOp[BitXor, Mat[Int], Int, Mat[Int]]", "member" : "org.saddle.macros.BinOpMatCopy.matSclr_Copy_II_BitXor", "link" : "org\/saddle\/macros\/BinOps$.html#matSclr_Copy_II_BitXor:org.saddle.ops.BinOp[org.saddle.ops.BitXor,org.saddle.Mat[Int],Int,org.saddle.Mat[Int]]", "kind" : "implicit val"}, {"label" : "matSclr_Copy_LI_BitXor", "tail" : ": BinOp[BitXor, Mat[Long], Int, Mat[Long]]", "member" : "org.saddle.macros.BinOpMatCopy.matSclr_Copy_LI_BitXor", "link" : "org\/saddle\/macros\/BinOps$.html#matSclr_Copy_LI_BitXor:org.saddle.ops.BinOp[org.saddle.ops.BitXor,org.saddle.Mat[Long],Int,org.saddle.Mat[Long]]", "kind" : "implicit val"}, {"label" : "matSclr_Copy_LL_BitXor", "tail" : ": BinOp[BitXor, Mat[Long], Long, Mat[Long]]", "member" : "org.saddle.macros.BinOpMatCopy.matSclr_Copy_LL_BitXor", "link" : "org\/saddle\/macros\/BinOps$.html#matSclr_Copy_LL_BitXor:org.saddle.ops.BinOp[org.saddle.ops.BitXor,org.saddle.Mat[Long],Long,org.saddle.Mat[Long]]", "kind" : "implicit val"}, {"label" : "matSclr_Copy_II_BitOr", "tail" : ": BinOp[BitOr, Mat[Int], Int, Mat[Int]]", "member" : "org.saddle.macros.BinOpMatCopy.matSclr_Copy_II_BitOr", "link" : "org\/saddle\/macros\/BinOps$.html#matSclr_Copy_II_BitOr:org.saddle.ops.BinOp[org.saddle.ops.BitOr,org.saddle.Mat[Int],Int,org.saddle.Mat[Int]]", "kind" : "implicit val"}, {"label" : "matSclr_Copy_LI_BitOr", "tail" : ": BinOp[BitOr, Mat[Long], Int, Mat[Long]]", "member" : "org.saddle.macros.BinOpMatCopy.matSclr_Copy_LI_BitOr", "link" : "org\/saddle\/macros\/BinOps$.html#matSclr_Copy_LI_BitOr:org.saddle.ops.BinOp[org.saddle.ops.BitOr,org.saddle.Mat[Long],Int,org.saddle.Mat[Long]]", "kind" : "implicit val"}, {"label" : "matSclr_Copy_LL_BitOr", "tail" : ": BinOp[BitOr, Mat[Long], Long, Mat[Long]]", "member" : "org.saddle.macros.BinOpMatCopy.matSclr_Copy_LL_BitOr", "link" : "org\/saddle\/macros\/BinOps$.html#matSclr_Copy_LL_BitOr:org.saddle.ops.BinOp[org.saddle.ops.BitOr,org.saddle.Mat[Long],Long,org.saddle.Mat[Long]]", "kind" : "implicit val"}, {"label" : "matSclr_Copy_II_BitAnd", "tail" : ": BinOp[BitAnd, Mat[Int], Int, Mat[Int]]", "member" : "org.saddle.macros.BinOpMatCopy.matSclr_Copy_II_BitAnd", "link" : "org\/saddle\/macros\/BinOps$.html#matSclr_Copy_II_BitAnd:org.saddle.ops.BinOp[org.saddle.ops.BitAnd,org.saddle.Mat[Int],Int,org.saddle.Mat[Int]]", "kind" : "implicit val"}, {"label" : "matSclr_Copy_LI_BitAnd", "tail" : ": BinOp[BitAnd, Mat[Long], Int, Mat[Long]]", "member" : "org.saddle.macros.BinOpMatCopy.matSclr_Copy_LI_BitAnd", "link" : "org\/saddle\/macros\/BinOps$.html#matSclr_Copy_LI_BitAnd:org.saddle.ops.BinOp[org.saddle.ops.BitAnd,org.saddle.Mat[Long],Int,org.saddle.Mat[Long]]", "kind" : "implicit val"}, {"label" : "matSclr_Copy_LL_BitAnd", "tail" : ": BinOp[BitAnd, Mat[Long], Long, Mat[Long]]", "member" : "org.saddle.macros.BinOpMatCopy.matSclr_Copy_LL_BitAnd", "link" : "org\/saddle\/macros\/BinOps$.html#matSclr_Copy_LL_BitAnd:org.saddle.ops.BinOp[org.saddle.ops.BitAnd,org.saddle.Mat[Long],Long,org.saddle.Mat[Long]]", "kind" : "implicit val"}, {"label" : "matSclr_Copy_ID_Mod", "tail" : ": BinOp[Mod, Mat[Int], Double, Mat[Double]]", "member" : "org.saddle.macros.BinOpMatCopy.matSclr_Copy_ID_Mod", "link" : "org\/saddle\/macros\/BinOps$.html#matSclr_Copy_ID_Mod:org.saddle.ops.BinOp[org.saddle.ops.Mod,org.saddle.Mat[Int],Double,org.saddle.Mat[Double]]", "kind" : "implicit val"}, {"label" : "matSclr_Copy_II_Mod", "tail" : ": BinOp[Mod, Mat[Int], Int, Mat[Int]]", "member" : "org.saddle.macros.BinOpMatCopy.matSclr_Copy_II_Mod", "link" : "org\/saddle\/macros\/BinOps$.html#matSclr_Copy_II_Mod:org.saddle.ops.BinOp[org.saddle.ops.Mod,org.saddle.Mat[Int],Int,org.saddle.Mat[Int]]", "kind" : "implicit val"}, {"label" : "matSclr_Copy_IL_Mod", "tail" : ": BinOp[Mod, Mat[Int], Long, Mat[Long]]", "member" : "org.saddle.macros.BinOpMatCopy.matSclr_Copy_IL_Mod", "link" : "org\/saddle\/macros\/BinOps$.html#matSclr_Copy_IL_Mod:org.saddle.ops.BinOp[org.saddle.ops.Mod,org.saddle.Mat[Int],Long,org.saddle.Mat[Long]]", "kind" : "implicit val"}, {"label" : "matSclr_Copy_LI_Mod", "tail" : ": BinOp[Mod, Mat[Long], Int, Mat[Long]]", "member" : "org.saddle.macros.BinOpMatCopy.matSclr_Copy_LI_Mod", "link" : "org\/saddle\/macros\/BinOps$.html#matSclr_Copy_LI_Mod:org.saddle.ops.BinOp[org.saddle.ops.Mod,org.saddle.Mat[Long],Int,org.saddle.Mat[Long]]", "kind" : "implicit val"}, {"label" : "matSclr_Copy_LD_Mod", "tail" : ": BinOp[Mod, Mat[Long], Double, Mat[Double]]", "member" : "org.saddle.macros.BinOpMatCopy.matSclr_Copy_LD_Mod", "link" : "org\/saddle\/macros\/BinOps$.html#matSclr_Copy_LD_Mod:org.saddle.ops.BinOp[org.saddle.ops.Mod,org.saddle.Mat[Long],Double,org.saddle.Mat[Double]]", "kind" : "implicit val"}, {"label" : "matSclr_Copy_LL_Mod", "tail" : ": BinOp[Mod, Mat[Long], Long, Mat[Long]]", "member" : "org.saddle.macros.BinOpMatCopy.matSclr_Copy_LL_Mod", "link" : "org\/saddle\/macros\/BinOps$.html#matSclr_Copy_LL_Mod:org.saddle.ops.BinOp[org.saddle.ops.Mod,org.saddle.Mat[Long],Long,org.saddle.Mat[Long]]", "kind" : "implicit val"}, {"label" : "matSclr_Copy_DI_Mod", "tail" : ": BinOp[Mod, Mat[Double], Int, Mat[Double]]", "member" : "org.saddle.macros.BinOpMatCopy.matSclr_Copy_DI_Mod", "link" : "org\/saddle\/macros\/BinOps$.html#matSclr_Copy_DI_Mod:org.saddle.ops.BinOp[org.saddle.ops.Mod,org.saddle.Mat[Double],Int,org.saddle.Mat[Double]]", "kind" : "implicit val"}, {"label" : "matSclr_Copy_DL_Mod", "tail" : ": BinOp[Mod, Mat[Double], Long, Mat[Double]]", "member" : "org.saddle.macros.BinOpMatCopy.matSclr_Copy_DL_Mod", "link" : "org\/saddle\/macros\/BinOps$.html#matSclr_Copy_DL_Mod:org.saddle.ops.BinOp[org.saddle.ops.Mod,org.saddle.Mat[Double],Long,org.saddle.Mat[Double]]", "kind" : "implicit val"}, {"label" : "matSclr_Copy_DD_Mod", "tail" : ": BinOp[Mod, Mat[Double], Double, Mat[Double]]", "member" : "org.saddle.macros.BinOpMatCopy.matSclr_Copy_DD_Mod", "link" : "org\/saddle\/macros\/BinOps$.html#matSclr_Copy_DD_Mod:org.saddle.ops.BinOp[org.saddle.ops.Mod,org.saddle.Mat[Double],Double,org.saddle.Mat[Double]]", "kind" : "implicit val"}, {"label" : "matSclr_Copy_ID_Div", "tail" : ": BinOp[Divide, Mat[Int], Double, Mat[Double]]", "member" : "org.saddle.macros.BinOpMatCopy.matSclr_Copy_ID_Div", "link" : "org\/saddle\/macros\/BinOps$.html#matSclr_Copy_ID_Div:org.saddle.ops.BinOp[org.saddle.ops.Divide,org.saddle.Mat[Int],Double,org.saddle.Mat[Double]]", "kind" : "implicit val"}, {"label" : "matSclr_Copy_II_Div", "tail" : ": BinOp[Divide, Mat[Int], Int, Mat[Int]]", "member" : "org.saddle.macros.BinOpMatCopy.matSclr_Copy_II_Div", "link" : "org\/saddle\/macros\/BinOps$.html#matSclr_Copy_II_Div:org.saddle.ops.BinOp[org.saddle.ops.Divide,org.saddle.Mat[Int],Int,org.saddle.Mat[Int]]", "kind" : "implicit val"}, {"label" : "matSclr_Copy_IL_Div", "tail" : ": BinOp[Divide, Mat[Int], Long, Mat[Long]]", "member" : "org.saddle.macros.BinOpMatCopy.matSclr_Copy_IL_Div", "link" : "org\/saddle\/macros\/BinOps$.html#matSclr_Copy_IL_Div:org.saddle.ops.BinOp[org.saddle.ops.Divide,org.saddle.Mat[Int],Long,org.saddle.Mat[Long]]", "kind" : "implicit val"}, {"label" : "matSclr_Copy_LI_Div", "tail" : ": BinOp[Divide, Mat[Long], Int, Mat[Long]]", "member" : "org.saddle.macros.BinOpMatCopy.matSclr_Copy_LI_Div", "link" : "org\/saddle\/macros\/BinOps$.html#matSclr_Copy_LI_Div:org.saddle.ops.BinOp[org.saddle.ops.Divide,org.saddle.Mat[Long],Int,org.saddle.Mat[Long]]", "kind" : "implicit val"}, {"label" : "matSclr_Copy_LD_Div", "tail" : ": BinOp[Divide, Mat[Long], Double, Mat[Double]]", "member" : "org.saddle.macros.BinOpMatCopy.matSclr_Copy_LD_Div", "link" : "org\/saddle\/macros\/BinOps$.html#matSclr_Copy_LD_Div:org.saddle.ops.BinOp[org.saddle.ops.Divide,org.saddle.Mat[Long],Double,org.saddle.Mat[Double]]", "kind" : "implicit val"}, {"label" : "matSclr_Copy_LL_Div", "tail" : ": BinOp[Divide, Mat[Long], Long, Mat[Long]]", "member" : "org.saddle.macros.BinOpMatCopy.matSclr_Copy_LL_Div", "link" : "org\/saddle\/macros\/BinOps$.html#matSclr_Copy_LL_Div:org.saddle.ops.BinOp[org.saddle.ops.Divide,org.saddle.Mat[Long],Long,org.saddle.Mat[Long]]", "kind" : "implicit val"}, {"label" : "matSclr_Copy_DI_Div", "tail" : ": BinOp[Divide, Mat[Double], Int, Mat[Double]]", "member" : "org.saddle.macros.BinOpMatCopy.matSclr_Copy_DI_Div", "link" : "org\/saddle\/macros\/BinOps$.html#matSclr_Copy_DI_Div:org.saddle.ops.BinOp[org.saddle.ops.Divide,org.saddle.Mat[Double],Int,org.saddle.Mat[Double]]", "kind" : "implicit val"}, {"label" : "matSclr_Copy_DL_Div", "tail" : ": BinOp[Divide, Mat[Double], Long, Mat[Double]]", "member" : "org.saddle.macros.BinOpMatCopy.matSclr_Copy_DL_Div", "link" : "org\/saddle\/macros\/BinOps$.html#matSclr_Copy_DL_Div:org.saddle.ops.BinOp[org.saddle.ops.Divide,org.saddle.Mat[Double],Long,org.saddle.Mat[Double]]", "kind" : "implicit val"}, {"label" : "matSclr_Copy_DD_Div", "tail" : ": BinOp[Divide, Mat[Double], Double, Mat[Double]]", "member" : "org.saddle.macros.BinOpMatCopy.matSclr_Copy_DD_Div", "link" : "org\/saddle\/macros\/BinOps$.html#matSclr_Copy_DD_Div:org.saddle.ops.BinOp[org.saddle.ops.Divide,org.saddle.Mat[Double],Double,org.saddle.Mat[Double]]", "kind" : "implicit val"}, {"label" : "matSclr_Copy_ID_Mult", "tail" : ": BinOp[Multiply, Mat[Int], Double, Mat[Double]]", "member" : "org.saddle.macros.BinOpMatCopy.matSclr_Copy_ID_Mult", "link" : "org\/saddle\/macros\/BinOps$.html#matSclr_Copy_ID_Mult:org.saddle.ops.BinOp[org.saddle.ops.Multiply,org.saddle.Mat[Int],Double,org.saddle.Mat[Double]]", "kind" : "implicit val"}, {"label" : "matSclr_Copy_II_Mult", "tail" : ": BinOp[Multiply, Mat[Int], Int, Mat[Int]]", "member" : "org.saddle.macros.BinOpMatCopy.matSclr_Copy_II_Mult", "link" : "org\/saddle\/macros\/BinOps$.html#matSclr_Copy_II_Mult:org.saddle.ops.BinOp[org.saddle.ops.Multiply,org.saddle.Mat[Int],Int,org.saddle.Mat[Int]]", "kind" : "implicit val"}, {"label" : "matSclr_Copy_IL_Mult", "tail" : ": BinOp[Multiply, Mat[Int], Long, Mat[Long]]", "member" : "org.saddle.macros.BinOpMatCopy.matSclr_Copy_IL_Mult", "link" : "org\/saddle\/macros\/BinOps$.html#matSclr_Copy_IL_Mult:org.saddle.ops.BinOp[org.saddle.ops.Multiply,org.saddle.Mat[Int],Long,org.saddle.Mat[Long]]", "kind" : "implicit val"}, {"label" : "matSclr_Copy_LI_Mult", "tail" : ": BinOp[Multiply, Mat[Long], Int, Mat[Long]]", "member" : "org.saddle.macros.BinOpMatCopy.matSclr_Copy_LI_Mult", "link" : "org\/saddle\/macros\/BinOps$.html#matSclr_Copy_LI_Mult:org.saddle.ops.BinOp[org.saddle.ops.Multiply,org.saddle.Mat[Long],Int,org.saddle.Mat[Long]]", "kind" : "implicit val"}, {"label" : "matSclr_Copy_LD_Mult", "tail" : ": BinOp[Multiply, Mat[Long], Double, Mat[Double]]", "member" : "org.saddle.macros.BinOpMatCopy.matSclr_Copy_LD_Mult", "link" : "org\/saddle\/macros\/BinOps$.html#matSclr_Copy_LD_Mult:org.saddle.ops.BinOp[org.saddle.ops.Multiply,org.saddle.Mat[Long],Double,org.saddle.Mat[Double]]", "kind" : "implicit val"}, {"label" : "matSclr_Copy_LL_Mult", "tail" : ": BinOp[Multiply, Mat[Long], Long, Mat[Long]]", "member" : "org.saddle.macros.BinOpMatCopy.matSclr_Copy_LL_Mult", "link" : "org\/saddle\/macros\/BinOps$.html#matSclr_Copy_LL_Mult:org.saddle.ops.BinOp[org.saddle.ops.Multiply,org.saddle.Mat[Long],Long,org.saddle.Mat[Long]]", "kind" : "implicit val"}, {"label" : "matSclr_Copy_DI_Mult", "tail" : ": BinOp[Multiply, Mat[Double], Int, Mat[Double]]", "member" : "org.saddle.macros.BinOpMatCopy.matSclr_Copy_DI_Mult", "link" : "org\/saddle\/macros\/BinOps$.html#matSclr_Copy_DI_Mult:org.saddle.ops.BinOp[org.saddle.ops.Multiply,org.saddle.Mat[Double],Int,org.saddle.Mat[Double]]", "kind" : "implicit val"}, {"label" : "matSclr_Copy_DL_Mult", "tail" : ": BinOp[Multiply, Mat[Double], Long, Mat[Double]]", "member" : "org.saddle.macros.BinOpMatCopy.matSclr_Copy_DL_Mult", "link" : "org\/saddle\/macros\/BinOps$.html#matSclr_Copy_DL_Mult:org.saddle.ops.BinOp[org.saddle.ops.Multiply,org.saddle.Mat[Double],Long,org.saddle.Mat[Double]]", "kind" : "implicit val"}, {"label" : "matSclr_Copy_DD_Mult", "tail" : ": BinOp[Multiply, Mat[Double], Double, Mat[Double]]", "member" : "org.saddle.macros.BinOpMatCopy.matSclr_Copy_DD_Mult", "link" : "org\/saddle\/macros\/BinOps$.html#matSclr_Copy_DD_Mult:org.saddle.ops.BinOp[org.saddle.ops.Multiply,org.saddle.Mat[Double],Double,org.saddle.Mat[Double]]", "kind" : "implicit val"}, {"label" : "matSclr_Copy_ID_Sub", "tail" : ": BinOp[Subtract, Mat[Int], Double, Mat[Double]]", "member" : "org.saddle.macros.BinOpMatCopy.matSclr_Copy_ID_Sub", "link" : "org\/saddle\/macros\/BinOps$.html#matSclr_Copy_ID_Sub:org.saddle.ops.BinOp[org.saddle.ops.Subtract,org.saddle.Mat[Int],Double,org.saddle.Mat[Double]]", "kind" : "implicit val"}, {"label" : "matSclr_Copy_II_Sub", "tail" : ": BinOp[Subtract, Mat[Int], Int, Mat[Int]]", "member" : "org.saddle.macros.BinOpMatCopy.matSclr_Copy_II_Sub", "link" : "org\/saddle\/macros\/BinOps$.html#matSclr_Copy_II_Sub:org.saddle.ops.BinOp[org.saddle.ops.Subtract,org.saddle.Mat[Int],Int,org.saddle.Mat[Int]]", "kind" : "implicit val"}, {"label" : "matSclr_Copy_IL_Sub", "tail" : ": BinOp[Subtract, Mat[Int], Long, Mat[Long]]", "member" : "org.saddle.macros.BinOpMatCopy.matSclr_Copy_IL_Sub", "link" : "org\/saddle\/macros\/BinOps$.html#matSclr_Copy_IL_Sub:org.saddle.ops.BinOp[org.saddle.ops.Subtract,org.saddle.Mat[Int],Long,org.saddle.Mat[Long]]", "kind" : "implicit val"}, {"label" : "matSclr_Copy_LI_Sub", "tail" : ": BinOp[Subtract, Mat[Long], Int, Mat[Long]]", "member" : "org.saddle.macros.BinOpMatCopy.matSclr_Copy_LI_Sub", "link" : "org\/saddle\/macros\/BinOps$.html#matSclr_Copy_LI_Sub:org.saddle.ops.BinOp[org.saddle.ops.Subtract,org.saddle.Mat[Long],Int,org.saddle.Mat[Long]]", "kind" : "implicit val"}, {"label" : "matSclr_Copy_LD_Sub", "tail" : ": BinOp[Subtract, Mat[Long], Double, Mat[Double]]", "member" : "org.saddle.macros.BinOpMatCopy.matSclr_Copy_LD_Sub", "link" : "org\/saddle\/macros\/BinOps$.html#matSclr_Copy_LD_Sub:org.saddle.ops.BinOp[org.saddle.ops.Subtract,org.saddle.Mat[Long],Double,org.saddle.Mat[Double]]", "kind" : "implicit val"}, {"label" : "matSclr_Copy_LL_Sub", "tail" : ": BinOp[Subtract, Mat[Long], Long, Mat[Long]]", "member" : "org.saddle.macros.BinOpMatCopy.matSclr_Copy_LL_Sub", "link" : "org\/saddle\/macros\/BinOps$.html#matSclr_Copy_LL_Sub:org.saddle.ops.BinOp[org.saddle.ops.Subtract,org.saddle.Mat[Long],Long,org.saddle.Mat[Long]]", "kind" : "implicit val"}, {"label" : "matSclr_Copy_DI_Sub", "tail" : ": BinOp[Subtract, Mat[Double], Int, Mat[Double]]", "member" : "org.saddle.macros.BinOpMatCopy.matSclr_Copy_DI_Sub", "link" : "org\/saddle\/macros\/BinOps$.html#matSclr_Copy_DI_Sub:org.saddle.ops.BinOp[org.saddle.ops.Subtract,org.saddle.Mat[Double],Int,org.saddle.Mat[Double]]", "kind" : "implicit val"}, {"label" : "matSclr_Copy_DL_Sub", "tail" : ": BinOp[Subtract, Mat[Double], Long, Mat[Double]]", "member" : "org.saddle.macros.BinOpMatCopy.matSclr_Copy_DL_Sub", "link" : "org\/saddle\/macros\/BinOps$.html#matSclr_Copy_DL_Sub:org.saddle.ops.BinOp[org.saddle.ops.Subtract,org.saddle.Mat[Double],Long,org.saddle.Mat[Double]]", "kind" : "implicit val"}, {"label" : "matSclr_Copy_DD_Sub", "tail" : ": BinOp[Subtract, Mat[Double], Double, Mat[Double]]", "member" : "org.saddle.macros.BinOpMatCopy.matSclr_Copy_DD_Sub", "link" : "org\/saddle\/macros\/BinOps$.html#matSclr_Copy_DD_Sub:org.saddle.ops.BinOp[org.saddle.ops.Subtract,org.saddle.Mat[Double],Double,org.saddle.Mat[Double]]", "kind" : "implicit val"}, {"label" : "matSclr_Copy_ID_Power", "tail" : ": BinOp[Power, Mat[Int], Double, Mat[Double]]", "member" : "org.saddle.macros.BinOpMatCopy.matSclr_Copy_ID_Power", "link" : "org\/saddle\/macros\/BinOps$.html#matSclr_Copy_ID_Power:org.saddle.ops.BinOp[org.saddle.ops.Power,org.saddle.Mat[Int],Double,org.saddle.Mat[Double]]", "kind" : "implicit val"}, {"label" : "matSclr_Copy_II_Power", "tail" : ": BinOp[Power, Mat[Int], Int, Mat[Int]]", "member" : "org.saddle.macros.BinOpMatCopy.matSclr_Copy_II_Power", "link" : "org\/saddle\/macros\/BinOps$.html#matSclr_Copy_II_Power:org.saddle.ops.BinOp[org.saddle.ops.Power,org.saddle.Mat[Int],Int,org.saddle.Mat[Int]]", "kind" : "implicit val"}, {"label" : "matSclr_Copy_IL_Power", "tail" : ": BinOp[Power, Mat[Int], Long, Mat[Long]]", "member" : "org.saddle.macros.BinOpMatCopy.matSclr_Copy_IL_Power", "link" : "org\/saddle\/macros\/BinOps$.html#matSclr_Copy_IL_Power:org.saddle.ops.BinOp[org.saddle.ops.Power,org.saddle.Mat[Int],Long,org.saddle.Mat[Long]]", "kind" : "implicit val"}, {"label" : "matSclr_Copy_LI_Power", "tail" : ": BinOp[Power, Mat[Long], Int, Mat[Long]]", "member" : "org.saddle.macros.BinOpMatCopy.matSclr_Copy_LI_Power", "link" : "org\/saddle\/macros\/BinOps$.html#matSclr_Copy_LI_Power:org.saddle.ops.BinOp[org.saddle.ops.Power,org.saddle.Mat[Long],Int,org.saddle.Mat[Long]]", "kind" : "implicit val"}, {"label" : "matSclr_Copy_LD_Power", "tail" : ": BinOp[Power, Mat[Long], Double, Mat[Double]]", "member" : "org.saddle.macros.BinOpMatCopy.matSclr_Copy_LD_Power", "link" : "org\/saddle\/macros\/BinOps$.html#matSclr_Copy_LD_Power:org.saddle.ops.BinOp[org.saddle.ops.Power,org.saddle.Mat[Long],Double,org.saddle.Mat[Double]]", "kind" : "implicit val"}, {"label" : "matSclr_Copy_LL_Power", "tail" : ": BinOp[Power, Mat[Long], Long, Mat[Long]]", "member" : "org.saddle.macros.BinOpMatCopy.matSclr_Copy_LL_Power", "link" : "org\/saddle\/macros\/BinOps$.html#matSclr_Copy_LL_Power:org.saddle.ops.BinOp[org.saddle.ops.Power,org.saddle.Mat[Long],Long,org.saddle.Mat[Long]]", "kind" : "implicit val"}, {"label" : "matSclr_Copy_DI_Power", "tail" : ": BinOp[Power, Mat[Double], Int, Mat[Double]]", "member" : "org.saddle.macros.BinOpMatCopy.matSclr_Copy_DI_Power", "link" : "org\/saddle\/macros\/BinOps$.html#matSclr_Copy_DI_Power:org.saddle.ops.BinOp[org.saddle.ops.Power,org.saddle.Mat[Double],Int,org.saddle.Mat[Double]]", "kind" : "implicit val"}, {"label" : "matSclr_Copy_DL_Power", "tail" : ": BinOp[Power, Mat[Double], Long, Mat[Double]]", "member" : "org.saddle.macros.BinOpMatCopy.matSclr_Copy_DL_Power", "link" : "org\/saddle\/macros\/BinOps$.html#matSclr_Copy_DL_Power:org.saddle.ops.BinOp[org.saddle.ops.Power,org.saddle.Mat[Double],Long,org.saddle.Mat[Double]]", "kind" : "implicit val"}, {"label" : "matSclr_Copy_DD_Power", "tail" : ": BinOp[Power, Mat[Double], Double, Mat[Double]]", "member" : "org.saddle.macros.BinOpMatCopy.matSclr_Copy_DD_Power", "link" : "org\/saddle\/macros\/BinOps$.html#matSclr_Copy_DD_Power:org.saddle.ops.BinOp[org.saddle.ops.Power,org.saddle.Mat[Double],Double,org.saddle.Mat[Double]]", "kind" : "implicit val"}, {"label" : "matSclr_Copy_ID_Add", "tail" : ": BinOp[Add, Mat[Int], Double, Mat[Double]]", "member" : "org.saddle.macros.BinOpMatCopy.matSclr_Copy_ID_Add", "link" : "org\/saddle\/macros\/BinOps$.html#matSclr_Copy_ID_Add:org.saddle.ops.BinOp[org.saddle.ops.Add,org.saddle.Mat[Int],Double,org.saddle.Mat[Double]]", "kind" : "implicit val"}, {"label" : "matSclr_Copy_II_Add", "tail" : ": BinOp[Add, Mat[Int], Int, Mat[Int]]", "member" : "org.saddle.macros.BinOpMatCopy.matSclr_Copy_II_Add", "link" : "org\/saddle\/macros\/BinOps$.html#matSclr_Copy_II_Add:org.saddle.ops.BinOp[org.saddle.ops.Add,org.saddle.Mat[Int],Int,org.saddle.Mat[Int]]", "kind" : "implicit val"}, {"label" : "matSclr_Copy_IL_Add", "tail" : ": BinOp[Add, Mat[Int], Long, Mat[Long]]", "member" : "org.saddle.macros.BinOpMatCopy.matSclr_Copy_IL_Add", "link" : "org\/saddle\/macros\/BinOps$.html#matSclr_Copy_IL_Add:org.saddle.ops.BinOp[org.saddle.ops.Add,org.saddle.Mat[Int],Long,org.saddle.Mat[Long]]", "kind" : "implicit val"}, {"label" : "matSclr_Copy_LI_Add", "tail" : ": BinOp[Add, Mat[Long], Int, Mat[Long]]", "member" : "org.saddle.macros.BinOpMatCopy.matSclr_Copy_LI_Add", "link" : "org\/saddle\/macros\/BinOps$.html#matSclr_Copy_LI_Add:org.saddle.ops.BinOp[org.saddle.ops.Add,org.saddle.Mat[Long],Int,org.saddle.Mat[Long]]", "kind" : "implicit val"}, {"label" : "matSclr_Copy_LD_Add", "tail" : ": BinOp[Add, Mat[Long], Double, Mat[Double]]", "member" : "org.saddle.macros.BinOpMatCopy.matSclr_Copy_LD_Add", "link" : "org\/saddle\/macros\/BinOps$.html#matSclr_Copy_LD_Add:org.saddle.ops.BinOp[org.saddle.ops.Add,org.saddle.Mat[Long],Double,org.saddle.Mat[Double]]", "kind" : "implicit val"}, {"label" : "matSclr_Copy_LL_Add", "tail" : ": BinOp[Add, Mat[Long], Long, Mat[Long]]", "member" : "org.saddle.macros.BinOpMatCopy.matSclr_Copy_LL_Add", "link" : "org\/saddle\/macros\/BinOps$.html#matSclr_Copy_LL_Add:org.saddle.ops.BinOp[org.saddle.ops.Add,org.saddle.Mat[Long],Long,org.saddle.Mat[Long]]", "kind" : "implicit val"}, {"label" : "matSclr_Copy_DI_Add", "tail" : ": BinOp[Add, Mat[Double], Int, Mat[Double]]", "member" : "org.saddle.macros.BinOpMatCopy.matSclr_Copy_DI_Add", "link" : "org\/saddle\/macros\/BinOps$.html#matSclr_Copy_DI_Add:org.saddle.ops.BinOp[org.saddle.ops.Add,org.saddle.Mat[Double],Int,org.saddle.Mat[Double]]", "kind" : "implicit val"}, {"label" : "matSclr_Copy_DL_Add", "tail" : ": BinOp[Add, Mat[Double], Long, Mat[Double]]", "member" : "org.saddle.macros.BinOpMatCopy.matSclr_Copy_DL_Add", "link" : "org\/saddle\/macros\/BinOps$.html#matSclr_Copy_DL_Add:org.saddle.ops.BinOp[org.saddle.ops.Add,org.saddle.Mat[Double],Long,org.saddle.Mat[Double]]", "kind" : "implicit val"}, {"label" : "matSclr_Copy_DD_Add", "tail" : ": BinOp[Add, Mat[Double], Double, Mat[Double]]", "member" : "org.saddle.macros.BinOpMatCopy.matSclr_Copy_DD_Add", "link" : "org\/saddle\/macros\/BinOps$.html#matSclr_Copy_DD_Add:org.saddle.ops.BinOp[org.saddle.ops.Add,org.saddle.Mat[Double],Double,org.saddle.Mat[Double]]", "kind" : "implicit val"}, {"label" : "matSclr_BB_Xor", "tail" : ": BinOpInPlace[XorOp, Mat[Boolean], Boolean]", "member" : "org.saddle.macros.BinOpMatInPlace.matSclr_BB_Xor", "link" : "org\/saddle\/macros\/BinOps$.html#matSclr_BB_Xor:org.saddle.ops.BinOpInPlace[org.saddle.ops.XorOp,org.saddle.Mat[Boolean],Boolean]", "kind" : "implicit val"}, {"label" : "matSclr_BB_Or", "tail" : ": BinOpInPlace[OrOp, Mat[Boolean], Boolean]", "member" : "org.saddle.macros.BinOpMatInPlace.matSclr_BB_Or", "link" : "org\/saddle\/macros\/BinOps$.html#matSclr_BB_Or:org.saddle.ops.BinOpInPlace[org.saddle.ops.OrOp,org.saddle.Mat[Boolean],Boolean]", "kind" : "implicit val"}, {"label" : "matSclr_BB_And", "tail" : ": BinOpInPlace[AndOp, Mat[Boolean], Boolean]", "member" : "org.saddle.macros.BinOpMatInPlace.matSclr_BB_And", "link" : "org\/saddle\/macros\/BinOps$.html#matSclr_BB_And:org.saddle.ops.BinOpInPlace[org.saddle.ops.AndOp,org.saddle.Mat[Boolean],Boolean]", "kind" : "implicit val"}, {"label" : "matSclr_BB_EQ", "tail" : ": BinOpInPlace[EqOp, Mat[Boolean], Boolean]", "member" : "org.saddle.macros.BinOpMatInPlace.matSclr_BB_EQ", "link" : "org\/saddle\/macros\/BinOps$.html#matSclr_BB_EQ:org.saddle.ops.BinOpInPlace[org.saddle.ops.EqOp,org.saddle.Mat[Boolean],Boolean]", "kind" : "implicit val"}, {"label" : "matSclr_BB_NEQ", "tail" : ": BinOpInPlace[NeqOp, Mat[Boolean], Boolean]", "member" : "org.saddle.macros.BinOpMatInPlace.matSclr_BB_NEQ", "link" : "org\/saddle\/macros\/BinOps$.html#matSclr_BB_NEQ:org.saddle.ops.BinOpInPlace[org.saddle.ops.NeqOp,org.saddle.Mat[Boolean],Boolean]", "kind" : "implicit val"}, {"label" : "matSclr_BB_LTE", "tail" : ": BinOpInPlace[LteOp, Mat[Boolean], Boolean]", "member" : "org.saddle.macros.BinOpMatInPlace.matSclr_BB_LTE", "link" : "org\/saddle\/macros\/BinOps$.html#matSclr_BB_LTE:org.saddle.ops.BinOpInPlace[org.saddle.ops.LteOp,org.saddle.Mat[Boolean],Boolean]", "kind" : "implicit val"}, {"label" : "matSclr_BB_LT", "tail" : ": BinOpInPlace[LtOp, Mat[Boolean], Boolean]", "member" : "org.saddle.macros.BinOpMatInPlace.matSclr_BB_LT", "link" : "org\/saddle\/macros\/BinOps$.html#matSclr_BB_LT:org.saddle.ops.BinOpInPlace[org.saddle.ops.LtOp,org.saddle.Mat[Boolean],Boolean]", "kind" : "implicit val"}, {"label" : "matSclr_BB_GTE", "tail" : ": BinOpInPlace[GteOp, Mat[Boolean], Boolean]", "member" : "org.saddle.macros.BinOpMatInPlace.matSclr_BB_GTE", "link" : "org\/saddle\/macros\/BinOps$.html#matSclr_BB_GTE:org.saddle.ops.BinOpInPlace[org.saddle.ops.GteOp,org.saddle.Mat[Boolean],Boolean]", "kind" : "implicit val"}, {"label" : "matSclr_BB_GT", "tail" : ": BinOpInPlace[GtOp, Mat[Boolean], Boolean]", "member" : "org.saddle.macros.BinOpMatInPlace.matSclr_BB_GT", "link" : "org\/saddle\/macros\/BinOps$.html#matSclr_BB_GT:org.saddle.ops.BinOpInPlace[org.saddle.ops.GtOp,org.saddle.Mat[Boolean],Boolean]", "kind" : "implicit val"}, {"label" : "matSclr_II_BitUshr", "tail" : ": BinOpInPlace[BitUShr, Mat[Int], Int]", "member" : "org.saddle.macros.BinOpMatInPlace.matSclr_II_BitUshr", "link" : "org\/saddle\/macros\/BinOps$.html#matSclr_II_BitUshr:org.saddle.ops.BinOpInPlace[org.saddle.ops.BitUShr,org.saddle.Mat[Int],Int]", "kind" : "implicit val"}, {"label" : "matSclr_LI_BitUshr", "tail" : ": BinOpInPlace[BitUShr, Mat[Long], Int]", "member" : "org.saddle.macros.BinOpMatInPlace.matSclr_LI_BitUshr", "link" : "org\/saddle\/macros\/BinOps$.html#matSclr_LI_BitUshr:org.saddle.ops.BinOpInPlace[org.saddle.ops.BitUShr,org.saddle.Mat[Long],Int]", "kind" : "implicit val"}, {"label" : "matSclr_LL_BitUshr", "tail" : ": BinOpInPlace[BitUShr, Mat[Long], Long]", "member" : "org.saddle.macros.BinOpMatInPlace.matSclr_LL_BitUshr", "link" : "org\/saddle\/macros\/BinOps$.html#matSclr_LL_BitUshr:org.saddle.ops.BinOpInPlace[org.saddle.ops.BitUShr,org.saddle.Mat[Long],Long]", "kind" : "implicit val"}, {"label" : "matSclr_II_BitShr", "tail" : ": BinOpInPlace[BitShr, Mat[Int], Int]", "member" : "org.saddle.macros.BinOpMatInPlace.matSclr_II_BitShr", "link" : "org\/saddle\/macros\/BinOps$.html#matSclr_II_BitShr:org.saddle.ops.BinOpInPlace[org.saddle.ops.BitShr,org.saddle.Mat[Int],Int]", "kind" : "implicit val"}, {"label" : "matSclr_LI_BitShr", "tail" : ": BinOpInPlace[BitShr, Mat[Long], Int]", "member" : "org.saddle.macros.BinOpMatInPlace.matSclr_LI_BitShr", "link" : "org\/saddle\/macros\/BinOps$.html#matSclr_LI_BitShr:org.saddle.ops.BinOpInPlace[org.saddle.ops.BitShr,org.saddle.Mat[Long],Int]", "kind" : "implicit val"}, {"label" : "matSclr_LL_BitShr", "tail" : ": BinOpInPlace[BitShr, Mat[Long], Long]", "member" : "org.saddle.macros.BinOpMatInPlace.matSclr_LL_BitShr", "link" : "org\/saddle\/macros\/BinOps$.html#matSclr_LL_BitShr:org.saddle.ops.BinOpInPlace[org.saddle.ops.BitShr,org.saddle.Mat[Long],Long]", "kind" : "implicit val"}, {"label" : "matSclr_II_BitShl", "tail" : ": BinOpInPlace[BitShl, Mat[Int], Int]", "member" : "org.saddle.macros.BinOpMatInPlace.matSclr_II_BitShl", "link" : "org\/saddle\/macros\/BinOps$.html#matSclr_II_BitShl:org.saddle.ops.BinOpInPlace[org.saddle.ops.BitShl,org.saddle.Mat[Int],Int]", "kind" : "implicit val"}, {"label" : "matSclr_LI_BitShl", "tail" : ": BinOpInPlace[BitShl, Mat[Long], Int]", "member" : "org.saddle.macros.BinOpMatInPlace.matSclr_LI_BitShl", "link" : "org\/saddle\/macros\/BinOps$.html#matSclr_LI_BitShl:org.saddle.ops.BinOpInPlace[org.saddle.ops.BitShl,org.saddle.Mat[Long],Int]", "kind" : "implicit val"}, {"label" : "matSclr_LL_BitShl", "tail" : ": BinOpInPlace[BitShl, Mat[Long], Long]", "member" : "org.saddle.macros.BinOpMatInPlace.matSclr_LL_BitShl", "link" : "org\/saddle\/macros\/BinOps$.html#matSclr_LL_BitShl:org.saddle.ops.BinOpInPlace[org.saddle.ops.BitShl,org.saddle.Mat[Long],Long]", "kind" : "implicit val"}, {"label" : "matSclr_II_BitXor", "tail" : ": BinOpInPlace[BitXor, Mat[Int], Int]", "member" : "org.saddle.macros.BinOpMatInPlace.matSclr_II_BitXor", "link" : "org\/saddle\/macros\/BinOps$.html#matSclr_II_BitXor:org.saddle.ops.BinOpInPlace[org.saddle.ops.BitXor,org.saddle.Mat[Int],Int]", "kind" : "implicit val"}, {"label" : "matSclr_LI_BitXor", "tail" : ": BinOpInPlace[BitXor, Mat[Long], Int]", "member" : "org.saddle.macros.BinOpMatInPlace.matSclr_LI_BitXor", "link" : "org\/saddle\/macros\/BinOps$.html#matSclr_LI_BitXor:org.saddle.ops.BinOpInPlace[org.saddle.ops.BitXor,org.saddle.Mat[Long],Int]", "kind" : "implicit val"}, {"label" : "matSclr_LL_BitXor", "tail" : ": BinOpInPlace[BitXor, Mat[Long], Long]", "member" : "org.saddle.macros.BinOpMatInPlace.matSclr_LL_BitXor", "link" : "org\/saddle\/macros\/BinOps$.html#matSclr_LL_BitXor:org.saddle.ops.BinOpInPlace[org.saddle.ops.BitXor,org.saddle.Mat[Long],Long]", "kind" : "implicit val"}, {"label" : "matSclr_II_BitOr", "tail" : ": BinOpInPlace[BitOr, Mat[Int], Int]", "member" : "org.saddle.macros.BinOpMatInPlace.matSclr_II_BitOr", "link" : "org\/saddle\/macros\/BinOps$.html#matSclr_II_BitOr:org.saddle.ops.BinOpInPlace[org.saddle.ops.BitOr,org.saddle.Mat[Int],Int]", "kind" : "implicit val"}, {"label" : "matSclr_LI_BitOr", "tail" : ": BinOpInPlace[BitOr, Mat[Long], Int]", "member" : "org.saddle.macros.BinOpMatInPlace.matSclr_LI_BitOr", "link" : "org\/saddle\/macros\/BinOps$.html#matSclr_LI_BitOr:org.saddle.ops.BinOpInPlace[org.saddle.ops.BitOr,org.saddle.Mat[Long],Int]", "kind" : "implicit val"}, {"label" : "matSclr_LL_BitOr", "tail" : ": BinOpInPlace[BitOr, Mat[Long], Long]", "member" : "org.saddle.macros.BinOpMatInPlace.matSclr_LL_BitOr", "link" : "org\/saddle\/macros\/BinOps$.html#matSclr_LL_BitOr:org.saddle.ops.BinOpInPlace[org.saddle.ops.BitOr,org.saddle.Mat[Long],Long]", "kind" : "implicit val"}, {"label" : "matSclr_II_BitAnd", "tail" : ": BinOpInPlace[BitAnd, Mat[Int], Int]", "member" : "org.saddle.macros.BinOpMatInPlace.matSclr_II_BitAnd", "link" : "org\/saddle\/macros\/BinOps$.html#matSclr_II_BitAnd:org.saddle.ops.BinOpInPlace[org.saddle.ops.BitAnd,org.saddle.Mat[Int],Int]", "kind" : "implicit val"}, {"label" : "matSclr_LI_BitAnd", "tail" : ": BinOpInPlace[BitAnd, Mat[Long], Int]", "member" : "org.saddle.macros.BinOpMatInPlace.matSclr_LI_BitAnd", "link" : "org\/saddle\/macros\/BinOps$.html#matSclr_LI_BitAnd:org.saddle.ops.BinOpInPlace[org.saddle.ops.BitAnd,org.saddle.Mat[Long],Int]", "kind" : "implicit val"}, {"label" : "matSclr_LL_BitAnd", "tail" : ": BinOpInPlace[BitAnd, Mat[Long], Long]", "member" : "org.saddle.macros.BinOpMatInPlace.matSclr_LL_BitAnd", "link" : "org\/saddle\/macros\/BinOps$.html#matSclr_LL_BitAnd:org.saddle.ops.BinOpInPlace[org.saddle.ops.BitAnd,org.saddle.Mat[Long],Long]", "kind" : "implicit val"}, {"label" : "matSclr_II_Mod", "tail" : ": BinOpInPlace[Mod, Mat[Int], Int]", "member" : "org.saddle.macros.BinOpMatInPlace.matSclr_II_Mod", "link" : "org\/saddle\/macros\/BinOps$.html#matSclr_II_Mod:org.saddle.ops.BinOpInPlace[org.saddle.ops.Mod,org.saddle.Mat[Int],Int]", "kind" : "implicit val"}, {"label" : "matSclr_LI_Mod", "tail" : ": BinOpInPlace[Mod, Mat[Long], Int]", "member" : "org.saddle.macros.BinOpMatInPlace.matSclr_LI_Mod", "link" : "org\/saddle\/macros\/BinOps$.html#matSclr_LI_Mod:org.saddle.ops.BinOpInPlace[org.saddle.ops.Mod,org.saddle.Mat[Long],Int]", "kind" : "implicit val"}, {"label" : "matSclr_LL_Mod", "tail" : ": BinOpInPlace[Mod, Mat[Long], Long]", "member" : "org.saddle.macros.BinOpMatInPlace.matSclr_LL_Mod", "link" : "org\/saddle\/macros\/BinOps$.html#matSclr_LL_Mod:org.saddle.ops.BinOpInPlace[org.saddle.ops.Mod,org.saddle.Mat[Long],Long]", "kind" : "implicit val"}, {"label" : "matSclr_DI_Mod", "tail" : ": BinOpInPlace[Mod, Mat[Double], Int]", "member" : "org.saddle.macros.BinOpMatInPlace.matSclr_DI_Mod", "link" : "org\/saddle\/macros\/BinOps$.html#matSclr_DI_Mod:org.saddle.ops.BinOpInPlace[org.saddle.ops.Mod,org.saddle.Mat[Double],Int]", "kind" : "implicit val"}, {"label" : "matSclr_DL_Mod", "tail" : ": BinOpInPlace[Mod, Mat[Double], Long]", "member" : "org.saddle.macros.BinOpMatInPlace.matSclr_DL_Mod", "link" : "org\/saddle\/macros\/BinOps$.html#matSclr_DL_Mod:org.saddle.ops.BinOpInPlace[org.saddle.ops.Mod,org.saddle.Mat[Double],Long]", "kind" : "implicit val"}, {"label" : "matSclr_DD_Mod", "tail" : ": BinOpInPlace[Mod, Mat[Double], Double]", "member" : "org.saddle.macros.BinOpMatInPlace.matSclr_DD_Mod", "link" : "org\/saddle\/macros\/BinOps$.html#matSclr_DD_Mod:org.saddle.ops.BinOpInPlace[org.saddle.ops.Mod,org.saddle.Mat[Double],Double]", "kind" : "implicit val"}, {"label" : "matSclr_II_Div", "tail" : ": BinOpInPlace[Divide, Mat[Int], Int]", "member" : "org.saddle.macros.BinOpMatInPlace.matSclr_II_Div", "link" : "org\/saddle\/macros\/BinOps$.html#matSclr_II_Div:org.saddle.ops.BinOpInPlace[org.saddle.ops.Divide,org.saddle.Mat[Int],Int]", "kind" : "implicit val"}, {"label" : "matSclr_LI_Div", "tail" : ": BinOpInPlace[Divide, Mat[Long], Int]", "member" : "org.saddle.macros.BinOpMatInPlace.matSclr_LI_Div", "link" : "org\/saddle\/macros\/BinOps$.html#matSclr_LI_Div:org.saddle.ops.BinOpInPlace[org.saddle.ops.Divide,org.saddle.Mat[Long],Int]", "kind" : "implicit val"}, {"label" : "matSclr_LL_Div", "tail" : ": BinOpInPlace[Divide, Mat[Long], Long]", "member" : "org.saddle.macros.BinOpMatInPlace.matSclr_LL_Div", "link" : "org\/saddle\/macros\/BinOps$.html#matSclr_LL_Div:org.saddle.ops.BinOpInPlace[org.saddle.ops.Divide,org.saddle.Mat[Long],Long]", "kind" : "implicit val"}, {"label" : "matSclr_DI_Div", "tail" : ": BinOpInPlace[Divide, Mat[Double], Int]", "member" : "org.saddle.macros.BinOpMatInPlace.matSclr_DI_Div", "link" : "org\/saddle\/macros\/BinOps$.html#matSclr_DI_Div:org.saddle.ops.BinOpInPlace[org.saddle.ops.Divide,org.saddle.Mat[Double],Int]", "kind" : "implicit val"}, {"label" : "matSclr_DL_Div", "tail" : ": BinOpInPlace[Divide, Mat[Double], Long]", "member" : "org.saddle.macros.BinOpMatInPlace.matSclr_DL_Div", "link" : "org\/saddle\/macros\/BinOps$.html#matSclr_DL_Div:org.saddle.ops.BinOpInPlace[org.saddle.ops.Divide,org.saddle.Mat[Double],Long]", "kind" : "implicit val"}, {"label" : "matSclr_DD_Div", "tail" : ": BinOpInPlace[Divide, Mat[Double], Double]", "member" : "org.saddle.macros.BinOpMatInPlace.matSclr_DD_Div", "link" : "org\/saddle\/macros\/BinOps$.html#matSclr_DD_Div:org.saddle.ops.BinOpInPlace[org.saddle.ops.Divide,org.saddle.Mat[Double],Double]", "kind" : "implicit val"}, {"label" : "matSclr_II_Mult", "tail" : ": BinOpInPlace[Multiply, Mat[Int], Int]", "member" : "org.saddle.macros.BinOpMatInPlace.matSclr_II_Mult", "link" : "org\/saddle\/macros\/BinOps$.html#matSclr_II_Mult:org.saddle.ops.BinOpInPlace[org.saddle.ops.Multiply,org.saddle.Mat[Int],Int]", "kind" : "implicit val"}, {"label" : "matSclr_LI_Mult", "tail" : ": BinOpInPlace[Multiply, Mat[Long], Int]", "member" : "org.saddle.macros.BinOpMatInPlace.matSclr_LI_Mult", "link" : "org\/saddle\/macros\/BinOps$.html#matSclr_LI_Mult:org.saddle.ops.BinOpInPlace[org.saddle.ops.Multiply,org.saddle.Mat[Long],Int]", "kind" : "implicit val"}, {"label" : "matSclr_LL_Mult", "tail" : ": BinOpInPlace[Multiply, Mat[Long], Long]", "member" : "org.saddle.macros.BinOpMatInPlace.matSclr_LL_Mult", "link" : "org\/saddle\/macros\/BinOps$.html#matSclr_LL_Mult:org.saddle.ops.BinOpInPlace[org.saddle.ops.Multiply,org.saddle.Mat[Long],Long]", "kind" : "implicit val"}, {"label" : "matSclr_DI_Mult", "tail" : ": BinOpInPlace[Multiply, Mat[Double], Int]", "member" : "org.saddle.macros.BinOpMatInPlace.matSclr_DI_Mult", "link" : "org\/saddle\/macros\/BinOps$.html#matSclr_DI_Mult:org.saddle.ops.BinOpInPlace[org.saddle.ops.Multiply,org.saddle.Mat[Double],Int]", "kind" : "implicit val"}, {"label" : "matSclr_DL_Mult", "tail" : ": BinOpInPlace[Multiply, Mat[Double], Long]", "member" : "org.saddle.macros.BinOpMatInPlace.matSclr_DL_Mult", "link" : "org\/saddle\/macros\/BinOps$.html#matSclr_DL_Mult:org.saddle.ops.BinOpInPlace[org.saddle.ops.Multiply,org.saddle.Mat[Double],Long]", "kind" : "implicit val"}, {"label" : "matSclr_DD_Mult", "tail" : ": BinOpInPlace[Multiply, Mat[Double], Double]", "member" : "org.saddle.macros.BinOpMatInPlace.matSclr_DD_Mult", "link" : "org\/saddle\/macros\/BinOps$.html#matSclr_DD_Mult:org.saddle.ops.BinOpInPlace[org.saddle.ops.Multiply,org.saddle.Mat[Double],Double]", "kind" : "implicit val"}, {"label" : "matSclr_II_Sub", "tail" : ": BinOpInPlace[Subtract, Mat[Int], Int]", "member" : "org.saddle.macros.BinOpMatInPlace.matSclr_II_Sub", "link" : "org\/saddle\/macros\/BinOps$.html#matSclr_II_Sub:org.saddle.ops.BinOpInPlace[org.saddle.ops.Subtract,org.saddle.Mat[Int],Int]", "kind" : "implicit val"}, {"label" : "matSclr_LI_Sub", "tail" : ": BinOpInPlace[Subtract, Mat[Long], Int]", "member" : "org.saddle.macros.BinOpMatInPlace.matSclr_LI_Sub", "link" : "org\/saddle\/macros\/BinOps$.html#matSclr_LI_Sub:org.saddle.ops.BinOpInPlace[org.saddle.ops.Subtract,org.saddle.Mat[Long],Int]", "kind" : "implicit val"}, {"label" : "matSclr_LL_Sub", "tail" : ": BinOpInPlace[Subtract, Mat[Long], Long]", "member" : "org.saddle.macros.BinOpMatInPlace.matSclr_LL_Sub", "link" : "org\/saddle\/macros\/BinOps$.html#matSclr_LL_Sub:org.saddle.ops.BinOpInPlace[org.saddle.ops.Subtract,org.saddle.Mat[Long],Long]", "kind" : "implicit val"}, {"label" : "matSclr_DI_Sub", "tail" : ": BinOpInPlace[Subtract, Mat[Double], Int]", "member" : "org.saddle.macros.BinOpMatInPlace.matSclr_DI_Sub", "link" : "org\/saddle\/macros\/BinOps$.html#matSclr_DI_Sub:org.saddle.ops.BinOpInPlace[org.saddle.ops.Subtract,org.saddle.Mat[Double],Int]", "kind" : "implicit val"}, {"label" : "matSclr_DL_Sub", "tail" : ": BinOpInPlace[Subtract, Mat[Double], Long]", "member" : "org.saddle.macros.BinOpMatInPlace.matSclr_DL_Sub", "link" : "org\/saddle\/macros\/BinOps$.html#matSclr_DL_Sub:org.saddle.ops.BinOpInPlace[org.saddle.ops.Subtract,org.saddle.Mat[Double],Long]", "kind" : "implicit val"}, {"label" : "matSclr_DD_Sub", "tail" : ": BinOpInPlace[Subtract, Mat[Double], Double]", "member" : "org.saddle.macros.BinOpMatInPlace.matSclr_DD_Sub", "link" : "org\/saddle\/macros\/BinOps$.html#matSclr_DD_Sub:org.saddle.ops.BinOpInPlace[org.saddle.ops.Subtract,org.saddle.Mat[Double],Double]", "kind" : "implicit val"}, {"label" : "matSclr_II_Power", "tail" : ": BinOpInPlace[Power, Mat[Int], Int]", "member" : "org.saddle.macros.BinOpMatInPlace.matSclr_II_Power", "link" : "org\/saddle\/macros\/BinOps$.html#matSclr_II_Power:org.saddle.ops.BinOpInPlace[org.saddle.ops.Power,org.saddle.Mat[Int],Int]", "kind" : "implicit val"}, {"label" : "matSclr_LI_Power", "tail" : ": BinOpInPlace[Power, Mat[Long], Int]", "member" : "org.saddle.macros.BinOpMatInPlace.matSclr_LI_Power", "link" : "org\/saddle\/macros\/BinOps$.html#matSclr_LI_Power:org.saddle.ops.BinOpInPlace[org.saddle.ops.Power,org.saddle.Mat[Long],Int]", "kind" : "implicit val"}, {"label" : "matSclr_LL_Power", "tail" : ": BinOpInPlace[Power, Mat[Long], Long]", "member" : "org.saddle.macros.BinOpMatInPlace.matSclr_LL_Power", "link" : "org\/saddle\/macros\/BinOps$.html#matSclr_LL_Power:org.saddle.ops.BinOpInPlace[org.saddle.ops.Power,org.saddle.Mat[Long],Long]", "kind" : "implicit val"}, {"label" : "matSclr_DI_Power", "tail" : ": BinOpInPlace[Power, Mat[Double], Int]", "member" : "org.saddle.macros.BinOpMatInPlace.matSclr_DI_Power", "link" : "org\/saddle\/macros\/BinOps$.html#matSclr_DI_Power:org.saddle.ops.BinOpInPlace[org.saddle.ops.Power,org.saddle.Mat[Double],Int]", "kind" : "implicit val"}, {"label" : "matSclr_DL_Power", "tail" : ": BinOpInPlace[Power, Mat[Double], Long]", "member" : "org.saddle.macros.BinOpMatInPlace.matSclr_DL_Power", "link" : "org\/saddle\/macros\/BinOps$.html#matSclr_DL_Power:org.saddle.ops.BinOpInPlace[org.saddle.ops.Power,org.saddle.Mat[Double],Long]", "kind" : "implicit val"}, {"label" : "matSclr_DD_Power", "tail" : ": BinOpInPlace[Power, Mat[Double], Double]", "member" : "org.saddle.macros.BinOpMatInPlace.matSclr_DD_Power", "link" : "org\/saddle\/macros\/BinOps$.html#matSclr_DD_Power:org.saddle.ops.BinOpInPlace[org.saddle.ops.Power,org.saddle.Mat[Double],Double]", "kind" : "implicit val"}, {"label" : "matSclr_II_Add", "tail" : ": BinOpInPlace[Add, Mat[Int], Int]", "member" : "org.saddle.macros.BinOpMatInPlace.matSclr_II_Add", "link" : "org\/saddle\/macros\/BinOps$.html#matSclr_II_Add:org.saddle.ops.BinOpInPlace[org.saddle.ops.Add,org.saddle.Mat[Int],Int]", "kind" : "implicit val"}, {"label" : "matSclr_LI_Add", "tail" : ": BinOpInPlace[Add, Mat[Long], Int]", "member" : "org.saddle.macros.BinOpMatInPlace.matSclr_LI_Add", "link" : "org\/saddle\/macros\/BinOps$.html#matSclr_LI_Add:org.saddle.ops.BinOpInPlace[org.saddle.ops.Add,org.saddle.Mat[Long],Int]", "kind" : "implicit val"}, {"label" : "matSclr_LL_Add", "tail" : ": BinOpInPlace[Add, Mat[Long], Long]", "member" : "org.saddle.macros.BinOpMatInPlace.matSclr_LL_Add", "link" : "org\/saddle\/macros\/BinOps$.html#matSclr_LL_Add:org.saddle.ops.BinOpInPlace[org.saddle.ops.Add,org.saddle.Mat[Long],Long]", "kind" : "implicit val"}, {"label" : "matSclr_DI_Add", "tail" : ": BinOpInPlace[Add, Mat[Double], Int]", "member" : "org.saddle.macros.BinOpMatInPlace.matSclr_DI_Add", "link" : "org\/saddle\/macros\/BinOps$.html#matSclr_DI_Add:org.saddle.ops.BinOpInPlace[org.saddle.ops.Add,org.saddle.Mat[Double],Int]", "kind" : "implicit val"}, {"label" : "matSclr_DL_Add", "tail" : ": BinOpInPlace[Add, Mat[Double], Long]", "member" : "org.saddle.macros.BinOpMatInPlace.matSclr_DL_Add", "link" : "org\/saddle\/macros\/BinOps$.html#matSclr_DL_Add:org.saddle.ops.BinOpInPlace[org.saddle.ops.Add,org.saddle.Mat[Double],Long]", "kind" : "implicit val"}, {"label" : "matSclr_DD_Add", "tail" : ": BinOpInPlace[Add, Mat[Double], Double]", "member" : "org.saddle.macros.BinOpMatInPlace.matSclr_DD_Add", "link" : "org\/saddle\/macros\/BinOps$.html#matSclr_DD_Add:org.saddle.ops.BinOpInPlace[org.saddle.ops.Add,org.saddle.Mat[Double],Double]", "kind" : "implicit val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/saddle\/macros\/BinOps$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/saddle\/macros\/BinOps$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/saddle\/macros\/BinOps$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/saddle\/macros\/BinOps$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/saddle\/macros\/BinOps$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/saddle\/macros\/BinOps$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/saddle\/macros\/BinOps$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/macros\/BinOps$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/macros\/BinOps$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/macros\/BinOps$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/saddle\/macros\/BinOps$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/saddle\/macros\/BinOps$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/saddle\/macros\/BinOps$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/saddle\/macros\/BinOps$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/saddle\/macros\/BinOps$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/saddle\/macros\/BinOps$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "org\/saddle\/macros\/BinOps$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/saddle\/macros\/BinOps$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/saddle\/macros\/BinOps$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "org.saddle.macros.BinOpVecCopy", "trait" : "org\/saddle\/macros\/BinOpVecCopy.html", "kind" : "trait", "members_trait" : [{"label" : "vecSclr_Copy_BB_Xor", "tail" : ": BinOp[XorOp, Vec[Boolean], Boolean, Vec[Boolean]]", "member" : "org.saddle.macros.BinOpVecCopy.vecSclr_Copy_BB_Xor", "link" : "org\/saddle\/macros\/BinOpVecCopy.html#vecSclr_Copy_BB_Xor:org.saddle.ops.BinOp[org.saddle.ops.XorOp,org.saddle.Vec[Boolean],Boolean,org.saddle.Vec[Boolean]]", "kind" : "implicit val"}, {"label" : "vecSclr_Copy_BB_Or", "tail" : ": BinOp[OrOp, Vec[Boolean], Boolean, Vec[Boolean]]", "member" : "org.saddle.macros.BinOpVecCopy.vecSclr_Copy_BB_Or", "link" : "org\/saddle\/macros\/BinOpVecCopy.html#vecSclr_Copy_BB_Or:org.saddle.ops.BinOp[org.saddle.ops.OrOp,org.saddle.Vec[Boolean],Boolean,org.saddle.Vec[Boolean]]", "kind" : "implicit val"}, {"label" : "vecSclr_Copy_BB_And", "tail" : ": BinOp[AndOp, Vec[Boolean], Boolean, Vec[Boolean]]", "member" : "org.saddle.macros.BinOpVecCopy.vecSclr_Copy_BB_And", "link" : "org\/saddle\/macros\/BinOpVecCopy.html#vecSclr_Copy_BB_And:org.saddle.ops.BinOp[org.saddle.ops.AndOp,org.saddle.Vec[Boolean],Boolean,org.saddle.Vec[Boolean]]", "kind" : "implicit val"}, {"label" : "vecSclr_Copy_BB_EQ", "tail" : ": BinOp[EqOp, Vec[Boolean], Boolean, Vec[Boolean]]", "member" : "org.saddle.macros.BinOpVecCopy.vecSclr_Copy_BB_EQ", "link" : "org\/saddle\/macros\/BinOpVecCopy.html#vecSclr_Copy_BB_EQ:org.saddle.ops.BinOp[org.saddle.ops.EqOp,org.saddle.Vec[Boolean],Boolean,org.saddle.Vec[Boolean]]", "kind" : "implicit val"}, {"label" : "vecSclr_Copy_II_EQ", "tail" : ": BinOp[EqOp, Vec[Int], Int, Vec[Boolean]]", "member" : "org.saddle.macros.BinOpVecCopy.vecSclr_Copy_II_EQ", "link" : "org\/saddle\/macros\/BinOpVecCopy.html#vecSclr_Copy_II_EQ:org.saddle.ops.BinOp[org.saddle.ops.EqOp,org.saddle.Vec[Int],Int,org.saddle.Vec[Boolean]]", "kind" : "implicit val"}, {"label" : "vecSclr_Copy_ID_EQ", "tail" : ": BinOp[EqOp, Vec[Int], Double, Vec[Boolean]]", "member" : "org.saddle.macros.BinOpVecCopy.vecSclr_Copy_ID_EQ", "link" : "org\/saddle\/macros\/BinOpVecCopy.html#vecSclr_Copy_ID_EQ:org.saddle.ops.BinOp[org.saddle.ops.EqOp,org.saddle.Vec[Int],Double,org.saddle.Vec[Boolean]]", "kind" : "implicit val"}, {"label" : "vecSclr_Copy_LI_EQ", "tail" : ": BinOp[EqOp, Vec[Long], Int, Vec[Boolean]]", "member" : "org.saddle.macros.BinOpVecCopy.vecSclr_Copy_LI_EQ", "link" : "org\/saddle\/macros\/BinOpVecCopy.html#vecSclr_Copy_LI_EQ:org.saddle.ops.BinOp[org.saddle.ops.EqOp,org.saddle.Vec[Long],Int,org.saddle.Vec[Boolean]]", "kind" : "implicit val"}, {"label" : "vecSclr_Copy_LL_EQ", "tail" : ": BinOp[EqOp, Vec[Long], Long, Vec[Boolean]]", "member" : "org.saddle.macros.BinOpVecCopy.vecSclr_Copy_LL_EQ", "link" : "org\/saddle\/macros\/BinOpVecCopy.html#vecSclr_Copy_LL_EQ:org.saddle.ops.BinOp[org.saddle.ops.EqOp,org.saddle.Vec[Long],Long,org.saddle.Vec[Boolean]]", "kind" : "implicit val"}, {"label" : "vecSclr_Copy_LD_EQ", "tail" : ": BinOp[EqOp, Vec[Long], Double, Vec[Boolean]]", "member" : "org.saddle.macros.BinOpVecCopy.vecSclr_Copy_LD_EQ", "link" : "org\/saddle\/macros\/BinOpVecCopy.html#vecSclr_Copy_LD_EQ:org.saddle.ops.BinOp[org.saddle.ops.EqOp,org.saddle.Vec[Long],Double,org.saddle.Vec[Boolean]]", "kind" : "implicit val"}, {"label" : "vecSclr_Copy_DI_EQ", "tail" : ": BinOp[EqOp, Vec[Double], Int, Vec[Boolean]]", "member" : "org.saddle.macros.BinOpVecCopy.vecSclr_Copy_DI_EQ", "link" : "org\/saddle\/macros\/BinOpVecCopy.html#vecSclr_Copy_DI_EQ:org.saddle.ops.BinOp[org.saddle.ops.EqOp,org.saddle.Vec[Double],Int,org.saddle.Vec[Boolean]]", "kind" : "implicit val"}, {"label" : "vecSclr_Copy_DL_EQ", "tail" : ": BinOp[EqOp, Vec[Double], Long, Vec[Boolean]]", "member" : "org.saddle.macros.BinOpVecCopy.vecSclr_Copy_DL_EQ", "link" : "org\/saddle\/macros\/BinOpVecCopy.html#vecSclr_Copy_DL_EQ:org.saddle.ops.BinOp[org.saddle.ops.EqOp,org.saddle.Vec[Double],Long,org.saddle.Vec[Boolean]]", "kind" : "implicit val"}, {"label" : "vecSclr_Copy_DD_EQ", "tail" : ": BinOp[EqOp, Vec[Double], Double, Vec[Boolean]]", "member" : "org.saddle.macros.BinOpVecCopy.vecSclr_Copy_DD_EQ", "link" : "org\/saddle\/macros\/BinOpVecCopy.html#vecSclr_Copy_DD_EQ:org.saddle.ops.BinOp[org.saddle.ops.EqOp,org.saddle.Vec[Double],Double,org.saddle.Vec[Boolean]]", "kind" : "implicit val"}, {"label" : "vecSclr_Copy_BB_NEQ", "tail" : ": BinOp[NeqOp, Vec[Boolean], Boolean, Vec[Boolean]]", "member" : "org.saddle.macros.BinOpVecCopy.vecSclr_Copy_BB_NEQ", "link" : "org\/saddle\/macros\/BinOpVecCopy.html#vecSclr_Copy_BB_NEQ:org.saddle.ops.BinOp[org.saddle.ops.NeqOp,org.saddle.Vec[Boolean],Boolean,org.saddle.Vec[Boolean]]", "kind" : "implicit val"}, {"label" : "vecSclr_Copy_II_NEQ", "tail" : ": BinOp[NeqOp, Vec[Int], Int, Vec[Boolean]]", "member" : "org.saddle.macros.BinOpVecCopy.vecSclr_Copy_II_NEQ", "link" : "org\/saddle\/macros\/BinOpVecCopy.html#vecSclr_Copy_II_NEQ:org.saddle.ops.BinOp[org.saddle.ops.NeqOp,org.saddle.Vec[Int],Int,org.saddle.Vec[Boolean]]", "kind" : "implicit val"}, {"label" : "vecSclr_Copy_ID_NEQ", "tail" : ": BinOp[NeqOp, Vec[Int], Double, Vec[Boolean]]", "member" : "org.saddle.macros.BinOpVecCopy.vecSclr_Copy_ID_NEQ", "link" : "org\/saddle\/macros\/BinOpVecCopy.html#vecSclr_Copy_ID_NEQ:org.saddle.ops.BinOp[org.saddle.ops.NeqOp,org.saddle.Vec[Int],Double,org.saddle.Vec[Boolean]]", "kind" : "implicit val"}, {"label" : "vecSclr_Copy_LI_NEQ", "tail" : ": BinOp[NeqOp, Vec[Long], Int, Vec[Boolean]]", "member" : "org.saddle.macros.BinOpVecCopy.vecSclr_Copy_LI_NEQ", "link" : "org\/saddle\/macros\/BinOpVecCopy.html#vecSclr_Copy_LI_NEQ:org.saddle.ops.BinOp[org.saddle.ops.NeqOp,org.saddle.Vec[Long],Int,org.saddle.Vec[Boolean]]", "kind" : "implicit val"}, {"label" : "vecSclr_Copy_LL_NEQ", "tail" : ": BinOp[NeqOp, Vec[Long], Long, Vec[Boolean]]", "member" : "org.saddle.macros.BinOpVecCopy.vecSclr_Copy_LL_NEQ", "link" : "org\/saddle\/macros\/BinOpVecCopy.html#vecSclr_Copy_LL_NEQ:org.saddle.ops.BinOp[org.saddle.ops.NeqOp,org.saddle.Vec[Long],Long,org.saddle.Vec[Boolean]]", "kind" : "implicit val"}, {"label" : "vecSclr_Copy_LD_NEQ", "tail" : ": BinOp[NeqOp, Vec[Long], Double, Vec[Boolean]]", "member" : "org.saddle.macros.BinOpVecCopy.vecSclr_Copy_LD_NEQ", "link" : "org\/saddle\/macros\/BinOpVecCopy.html#vecSclr_Copy_LD_NEQ:org.saddle.ops.BinOp[org.saddle.ops.NeqOp,org.saddle.Vec[Long],Double,org.saddle.Vec[Boolean]]", "kind" : "implicit val"}, {"label" : "vecSclr_Copy_DI_NEQ", "tail" : ": BinOp[NeqOp, Vec[Double], Int, Vec[Boolean]]", "member" : "org.saddle.macros.BinOpVecCopy.vecSclr_Copy_DI_NEQ", "link" : "org\/saddle\/macros\/BinOpVecCopy.html#vecSclr_Copy_DI_NEQ:org.saddle.ops.BinOp[org.saddle.ops.NeqOp,org.saddle.Vec[Double],Int,org.saddle.Vec[Boolean]]", "kind" : "implicit val"}, {"label" : "vecSclr_Copy_DL_NEQ", "tail" : ": BinOp[NeqOp, Vec[Double], Long, Vec[Boolean]]", "member" : "org.saddle.macros.BinOpVecCopy.vecSclr_Copy_DL_NEQ", "link" : "org\/saddle\/macros\/BinOpVecCopy.html#vecSclr_Copy_DL_NEQ:org.saddle.ops.BinOp[org.saddle.ops.NeqOp,org.saddle.Vec[Double],Long,org.saddle.Vec[Boolean]]", "kind" : "implicit val"}, {"label" : "vecSclr_Copy_DD_NEQ", "tail" : ": BinOp[NeqOp, Vec[Double], Double, Vec[Boolean]]", "member" : "org.saddle.macros.BinOpVecCopy.vecSclr_Copy_DD_NEQ", "link" : "org\/saddle\/macros\/BinOpVecCopy.html#vecSclr_Copy_DD_NEQ:org.saddle.ops.BinOp[org.saddle.ops.NeqOp,org.saddle.Vec[Double],Double,org.saddle.Vec[Boolean]]", "kind" : "implicit val"}, {"label" : "vecSclr_Copy_BB_LTE", "tail" : ": BinOp[LteOp, Vec[Boolean], Boolean, Vec[Boolean]]", "member" : "org.saddle.macros.BinOpVecCopy.vecSclr_Copy_BB_LTE", "link" : "org\/saddle\/macros\/BinOpVecCopy.html#vecSclr_Copy_BB_LTE:org.saddle.ops.BinOp[org.saddle.ops.LteOp,org.saddle.Vec[Boolean],Boolean,org.saddle.Vec[Boolean]]", "kind" : "implicit val"}, {"label" : "vecSclr_Copy_II_LTE", "tail" : ": BinOp[LteOp, Vec[Int], Int, Vec[Boolean]]", "member" : "org.saddle.macros.BinOpVecCopy.vecSclr_Copy_II_LTE", "link" : "org\/saddle\/macros\/BinOpVecCopy.html#vecSclr_Copy_II_LTE:org.saddle.ops.BinOp[org.saddle.ops.LteOp,org.saddle.Vec[Int],Int,org.saddle.Vec[Boolean]]", "kind" : "implicit val"}, {"label" : "vecSclr_Copy_ID_LTE", "tail" : ": BinOp[LteOp, Vec[Int], Double, Vec[Boolean]]", "member" : "org.saddle.macros.BinOpVecCopy.vecSclr_Copy_ID_LTE", "link" : "org\/saddle\/macros\/BinOpVecCopy.html#vecSclr_Copy_ID_LTE:org.saddle.ops.BinOp[org.saddle.ops.LteOp,org.saddle.Vec[Int],Double,org.saddle.Vec[Boolean]]", "kind" : "implicit val"}, {"label" : "vecSclr_Copy_LI_LTE", "tail" : ": BinOp[LteOp, Vec[Long], Int, Vec[Boolean]]", "member" : "org.saddle.macros.BinOpVecCopy.vecSclr_Copy_LI_LTE", "link" : "org\/saddle\/macros\/BinOpVecCopy.html#vecSclr_Copy_LI_LTE:org.saddle.ops.BinOp[org.saddle.ops.LteOp,org.saddle.Vec[Long],Int,org.saddle.Vec[Boolean]]", "kind" : "implicit val"}, {"label" : "vecSclr_Copy_LL_LTE", "tail" : ": BinOp[LteOp, Vec[Long], Long, Vec[Boolean]]", "member" : "org.saddle.macros.BinOpVecCopy.vecSclr_Copy_LL_LTE", "link" : "org\/saddle\/macros\/BinOpVecCopy.html#vecSclr_Copy_LL_LTE:org.saddle.ops.BinOp[org.saddle.ops.LteOp,org.saddle.Vec[Long],Long,org.saddle.Vec[Boolean]]", "kind" : "implicit val"}, {"label" : "vecSclr_Copy_LD_LTE", "tail" : ": BinOp[LteOp, Vec[Long], Double, Vec[Boolean]]", "member" : "org.saddle.macros.BinOpVecCopy.vecSclr_Copy_LD_LTE", "link" : "org\/saddle\/macros\/BinOpVecCopy.html#vecSclr_Copy_LD_LTE:org.saddle.ops.BinOp[org.saddle.ops.LteOp,org.saddle.Vec[Long],Double,org.saddle.Vec[Boolean]]", "kind" : "implicit val"}, {"label" : "vecSclr_Copy_DI_LTE", "tail" : ": BinOp[LteOp, Vec[Double], Int, Vec[Boolean]]", "member" : "org.saddle.macros.BinOpVecCopy.vecSclr_Copy_DI_LTE", "link" : "org\/saddle\/macros\/BinOpVecCopy.html#vecSclr_Copy_DI_LTE:org.saddle.ops.BinOp[org.saddle.ops.LteOp,org.saddle.Vec[Double],Int,org.saddle.Vec[Boolean]]", "kind" : "implicit val"}, {"label" : "vecSclr_Copy_DL_LTE", "tail" : ": BinOp[LteOp, Vec[Double], Long, Vec[Boolean]]", "member" : "org.saddle.macros.BinOpVecCopy.vecSclr_Copy_DL_LTE", "link" : "org\/saddle\/macros\/BinOpVecCopy.html#vecSclr_Copy_DL_LTE:org.saddle.ops.BinOp[org.saddle.ops.LteOp,org.saddle.Vec[Double],Long,org.saddle.Vec[Boolean]]", "kind" : "implicit val"}, {"label" : "vecSclr_Copy_DD_LTE", "tail" : ": BinOp[LteOp, Vec[Double], Double, Vec[Boolean]]", "member" : "org.saddle.macros.BinOpVecCopy.vecSclr_Copy_DD_LTE", "link" : "org\/saddle\/macros\/BinOpVecCopy.html#vecSclr_Copy_DD_LTE:org.saddle.ops.BinOp[org.saddle.ops.LteOp,org.saddle.Vec[Double],Double,org.saddle.Vec[Boolean]]", "kind" : "implicit val"}, {"label" : "vecSclr_Copy_BB_LT", "tail" : ": BinOp[LtOp, Vec[Boolean], Boolean, Vec[Boolean]]", "member" : "org.saddle.macros.BinOpVecCopy.vecSclr_Copy_BB_LT", "link" : "org\/saddle\/macros\/BinOpVecCopy.html#vecSclr_Copy_BB_LT:org.saddle.ops.BinOp[org.saddle.ops.LtOp,org.saddle.Vec[Boolean],Boolean,org.saddle.Vec[Boolean]]", "kind" : "implicit val"}, {"label" : "vecSclr_Copy_II_LT", "tail" : ": BinOp[LtOp, Vec[Int], Int, Vec[Boolean]]", "member" : "org.saddle.macros.BinOpVecCopy.vecSclr_Copy_II_LT", "link" : "org\/saddle\/macros\/BinOpVecCopy.html#vecSclr_Copy_II_LT:org.saddle.ops.BinOp[org.saddle.ops.LtOp,org.saddle.Vec[Int],Int,org.saddle.Vec[Boolean]]", "kind" : "implicit val"}, {"label" : "vecSclr_Copy_ID_LT", "tail" : ": BinOp[LtOp, Vec[Int], Double, Vec[Boolean]]", "member" : "org.saddle.macros.BinOpVecCopy.vecSclr_Copy_ID_LT", "link" : "org\/saddle\/macros\/BinOpVecCopy.html#vecSclr_Copy_ID_LT:org.saddle.ops.BinOp[org.saddle.ops.LtOp,org.saddle.Vec[Int],Double,org.saddle.Vec[Boolean]]", "kind" : "implicit val"}, {"label" : "vecSclr_Copy_LI_LT", "tail" : ": BinOp[LtOp, Vec[Long], Int, Vec[Boolean]]", "member" : "org.saddle.macros.BinOpVecCopy.vecSclr_Copy_LI_LT", "link" : "org\/saddle\/macros\/BinOpVecCopy.html#vecSclr_Copy_LI_LT:org.saddle.ops.BinOp[org.saddle.ops.LtOp,org.saddle.Vec[Long],Int,org.saddle.Vec[Boolean]]", "kind" : "implicit val"}, {"label" : "vecSclr_Copy_LL_LT", "tail" : ": BinOp[LtOp, Vec[Long], Long, Vec[Boolean]]", "member" : "org.saddle.macros.BinOpVecCopy.vecSclr_Copy_LL_LT", "link" : "org\/saddle\/macros\/BinOpVecCopy.html#vecSclr_Copy_LL_LT:org.saddle.ops.BinOp[org.saddle.ops.LtOp,org.saddle.Vec[Long],Long,org.saddle.Vec[Boolean]]", "kind" : "implicit val"}, {"label" : "vecSclr_Copy_LD_LT", "tail" : ": BinOp[LtOp, Vec[Long], Double, Vec[Boolean]]", "member" : "org.saddle.macros.BinOpVecCopy.vecSclr_Copy_LD_LT", "link" : "org\/saddle\/macros\/BinOpVecCopy.html#vecSclr_Copy_LD_LT:org.saddle.ops.BinOp[org.saddle.ops.LtOp,org.saddle.Vec[Long],Double,org.saddle.Vec[Boolean]]", "kind" : "implicit val"}, {"label" : "vecSclr_Copy_DI_LT", "tail" : ": BinOp[LtOp, Vec[Double], Int, Vec[Boolean]]", "member" : "org.saddle.macros.BinOpVecCopy.vecSclr_Copy_DI_LT", "link" : "org\/saddle\/macros\/BinOpVecCopy.html#vecSclr_Copy_DI_LT:org.saddle.ops.BinOp[org.saddle.ops.LtOp,org.saddle.Vec[Double],Int,org.saddle.Vec[Boolean]]", "kind" : "implicit val"}, {"label" : "vecSclr_Copy_DL_LT", "tail" : ": BinOp[LtOp, Vec[Double], Long, Vec[Boolean]]", "member" : "org.saddle.macros.BinOpVecCopy.vecSclr_Copy_DL_LT", "link" : "org\/saddle\/macros\/BinOpVecCopy.html#vecSclr_Copy_DL_LT:org.saddle.ops.BinOp[org.saddle.ops.LtOp,org.saddle.Vec[Double],Long,org.saddle.Vec[Boolean]]", "kind" : "implicit val"}, {"label" : "vecSclr_Copy_DD_LT", "tail" : ": BinOp[LtOp, Vec[Double], Double, Vec[Boolean]]", "member" : "org.saddle.macros.BinOpVecCopy.vecSclr_Copy_DD_LT", "link" : "org\/saddle\/macros\/BinOpVecCopy.html#vecSclr_Copy_DD_LT:org.saddle.ops.BinOp[org.saddle.ops.LtOp,org.saddle.Vec[Double],Double,org.saddle.Vec[Boolean]]", "kind" : "implicit val"}, {"label" : "vecSclr_Copy_BB_GTE", "tail" : ": BinOp[GteOp, Vec[Boolean], Boolean, Vec[Boolean]]", "member" : "org.saddle.macros.BinOpVecCopy.vecSclr_Copy_BB_GTE", "link" : "org\/saddle\/macros\/BinOpVecCopy.html#vecSclr_Copy_BB_GTE:org.saddle.ops.BinOp[org.saddle.ops.GteOp,org.saddle.Vec[Boolean],Boolean,org.saddle.Vec[Boolean]]", "kind" : "implicit val"}, {"label" : "vecSclr_Copy_II_GTE", "tail" : ": BinOp[GteOp, Vec[Int], Int, Vec[Boolean]]", "member" : "org.saddle.macros.BinOpVecCopy.vecSclr_Copy_II_GTE", "link" : "org\/saddle\/macros\/BinOpVecCopy.html#vecSclr_Copy_II_GTE:org.saddle.ops.BinOp[org.saddle.ops.GteOp,org.saddle.Vec[Int],Int,org.saddle.Vec[Boolean]]", "kind" : "implicit val"}, {"label" : "vecSclr_Copy_ID_GTE", "tail" : ": BinOp[GteOp, Vec[Int], Double, Vec[Boolean]]", "member" : "org.saddle.macros.BinOpVecCopy.vecSclr_Copy_ID_GTE", "link" : "org\/saddle\/macros\/BinOpVecCopy.html#vecSclr_Copy_ID_GTE:org.saddle.ops.BinOp[org.saddle.ops.GteOp,org.saddle.Vec[Int],Double,org.saddle.Vec[Boolean]]", "kind" : "implicit val"}, {"label" : "vecSclr_Copy_LI_GTE", "tail" : ": BinOp[GteOp, Vec[Long], Int, Vec[Boolean]]", "member" : "org.saddle.macros.BinOpVecCopy.vecSclr_Copy_LI_GTE", "link" : "org\/saddle\/macros\/BinOpVecCopy.html#vecSclr_Copy_LI_GTE:org.saddle.ops.BinOp[org.saddle.ops.GteOp,org.saddle.Vec[Long],Int,org.saddle.Vec[Boolean]]", "kind" : "implicit val"}, {"label" : "vecSclr_Copy_LL_GTE", "tail" : ": BinOp[GteOp, Vec[Long], Long, Vec[Boolean]]", "member" : "org.saddle.macros.BinOpVecCopy.vecSclr_Copy_LL_GTE", "link" : "org\/saddle\/macros\/BinOpVecCopy.html#vecSclr_Copy_LL_GTE:org.saddle.ops.BinOp[org.saddle.ops.GteOp,org.saddle.Vec[Long],Long,org.saddle.Vec[Boolean]]", "kind" : "implicit val"}, {"label" : "vecSclr_Copy_LD_GTE", "tail" : ": BinOp[GteOp, Vec[Long], Double, Vec[Boolean]]", "member" : "org.saddle.macros.BinOpVecCopy.vecSclr_Copy_LD_GTE", "link" : "org\/saddle\/macros\/BinOpVecCopy.html#vecSclr_Copy_LD_GTE:org.saddle.ops.BinOp[org.saddle.ops.GteOp,org.saddle.Vec[Long],Double,org.saddle.Vec[Boolean]]", "kind" : "implicit val"}, {"label" : "vecSclr_Copy_DI_GTE", "tail" : ": BinOp[GteOp, Vec[Double], Int, Vec[Boolean]]", "member" : "org.saddle.macros.BinOpVecCopy.vecSclr_Copy_DI_GTE", "link" : "org\/saddle\/macros\/BinOpVecCopy.html#vecSclr_Copy_DI_GTE:org.saddle.ops.BinOp[org.saddle.ops.GteOp,org.saddle.Vec[Double],Int,org.saddle.Vec[Boolean]]", "kind" : "implicit val"}, {"label" : "vecSclr_Copy_DL_GTE", "tail" : ": BinOp[GteOp, Vec[Double], Long, Vec[Boolean]]", "member" : "org.saddle.macros.BinOpVecCopy.vecSclr_Copy_DL_GTE", "link" : "org\/saddle\/macros\/BinOpVecCopy.html#vecSclr_Copy_DL_GTE:org.saddle.ops.BinOp[org.saddle.ops.GteOp,org.saddle.Vec[Double],Long,org.saddle.Vec[Boolean]]", "kind" : "implicit val"}, {"label" : "vecSclr_Copy_DD_GTE", "tail" : ": BinOp[GteOp, Vec[Double], Double, Vec[Boolean]]", "member" : "org.saddle.macros.BinOpVecCopy.vecSclr_Copy_DD_GTE", "link" : "org\/saddle\/macros\/BinOpVecCopy.html#vecSclr_Copy_DD_GTE:org.saddle.ops.BinOp[org.saddle.ops.GteOp,org.saddle.Vec[Double],Double,org.saddle.Vec[Boolean]]", "kind" : "implicit val"}, {"label" : "vecSclr_Copy_BB_GT", "tail" : ": BinOp[GtOp, Vec[Boolean], Boolean, Vec[Boolean]]", "member" : "org.saddle.macros.BinOpVecCopy.vecSclr_Copy_BB_GT", "link" : "org\/saddle\/macros\/BinOpVecCopy.html#vecSclr_Copy_BB_GT:org.saddle.ops.BinOp[org.saddle.ops.GtOp,org.saddle.Vec[Boolean],Boolean,org.saddle.Vec[Boolean]]", "kind" : "implicit val"}, {"label" : "vecSclr_Copy_II_GT", "tail" : ": BinOp[GtOp, Vec[Int], Int, Vec[Boolean]]", "member" : "org.saddle.macros.BinOpVecCopy.vecSclr_Copy_II_GT", "link" : "org\/saddle\/macros\/BinOpVecCopy.html#vecSclr_Copy_II_GT:org.saddle.ops.BinOp[org.saddle.ops.GtOp,org.saddle.Vec[Int],Int,org.saddle.Vec[Boolean]]", "kind" : "implicit val"}, {"label" : "vecSclr_Copy_ID_GT", "tail" : ": BinOp[GtOp, Vec[Int], Double, Vec[Boolean]]", "member" : "org.saddle.macros.BinOpVecCopy.vecSclr_Copy_ID_GT", "link" : "org\/saddle\/macros\/BinOpVecCopy.html#vecSclr_Copy_ID_GT:org.saddle.ops.BinOp[org.saddle.ops.GtOp,org.saddle.Vec[Int],Double,org.saddle.Vec[Boolean]]", "kind" : "implicit val"}, {"label" : "vecSclr_Copy_LI_GT", "tail" : ": BinOp[GtOp, Vec[Long], Int, Vec[Boolean]]", "member" : "org.saddle.macros.BinOpVecCopy.vecSclr_Copy_LI_GT", "link" : "org\/saddle\/macros\/BinOpVecCopy.html#vecSclr_Copy_LI_GT:org.saddle.ops.BinOp[org.saddle.ops.GtOp,org.saddle.Vec[Long],Int,org.saddle.Vec[Boolean]]", "kind" : "implicit val"}, {"label" : "vecSclr_Copy_LL_GT", "tail" : ": BinOp[GtOp, Vec[Long], Long, Vec[Boolean]]", "member" : "org.saddle.macros.BinOpVecCopy.vecSclr_Copy_LL_GT", "link" : "org\/saddle\/macros\/BinOpVecCopy.html#vecSclr_Copy_LL_GT:org.saddle.ops.BinOp[org.saddle.ops.GtOp,org.saddle.Vec[Long],Long,org.saddle.Vec[Boolean]]", "kind" : "implicit val"}, {"label" : "vecSclr_Copy_LD_GT", "tail" : ": BinOp[GtOp, Vec[Long], Double, Vec[Boolean]]", "member" : "org.saddle.macros.BinOpVecCopy.vecSclr_Copy_LD_GT", "link" : "org\/saddle\/macros\/BinOpVecCopy.html#vecSclr_Copy_LD_GT:org.saddle.ops.BinOp[org.saddle.ops.GtOp,org.saddle.Vec[Long],Double,org.saddle.Vec[Boolean]]", "kind" : "implicit val"}, {"label" : "vecSclr_Copy_DI_GT", "tail" : ": BinOp[GtOp, Vec[Double], Int, Vec[Boolean]]", "member" : "org.saddle.macros.BinOpVecCopy.vecSclr_Copy_DI_GT", "link" : "org\/saddle\/macros\/BinOpVecCopy.html#vecSclr_Copy_DI_GT:org.saddle.ops.BinOp[org.saddle.ops.GtOp,org.saddle.Vec[Double],Int,org.saddle.Vec[Boolean]]", "kind" : "implicit val"}, {"label" : "vecSclr_Copy_DL_GT", "tail" : ": BinOp[GtOp, Vec[Double], Long, Vec[Boolean]]", "member" : "org.saddle.macros.BinOpVecCopy.vecSclr_Copy_DL_GT", "link" : "org\/saddle\/macros\/BinOpVecCopy.html#vecSclr_Copy_DL_GT:org.saddle.ops.BinOp[org.saddle.ops.GtOp,org.saddle.Vec[Double],Long,org.saddle.Vec[Boolean]]", "kind" : "implicit val"}, {"label" : "vecSclr_Copy_DD_GT", "tail" : ": BinOp[GtOp, Vec[Double], Double, Vec[Boolean]]", "member" : "org.saddle.macros.BinOpVecCopy.vecSclr_Copy_DD_GT", "link" : "org\/saddle\/macros\/BinOpVecCopy.html#vecSclr_Copy_DD_GT:org.saddle.ops.BinOp[org.saddle.ops.GtOp,org.saddle.Vec[Double],Double,org.saddle.Vec[Boolean]]", "kind" : "implicit val"}, {"label" : "vecSclr_Copy_II_BitUshr", "tail" : ": BinOp[BitUShr, Vec[Int], Int, Vec[Int]]", "member" : "org.saddle.macros.BinOpVecCopy.vecSclr_Copy_II_BitUshr", "link" : "org\/saddle\/macros\/BinOpVecCopy.html#vecSclr_Copy_II_BitUshr:org.saddle.ops.BinOp[org.saddle.ops.BitUShr,org.saddle.Vec[Int],Int,org.saddle.Vec[Int]]", "kind" : "implicit val"}, {"label" : "vecSclr_Copy_LI_BitUshr", "tail" : ": BinOp[BitUShr, Vec[Long], Int, Vec[Long]]", "member" : "org.saddle.macros.BinOpVecCopy.vecSclr_Copy_LI_BitUshr", "link" : "org\/saddle\/macros\/BinOpVecCopy.html#vecSclr_Copy_LI_BitUshr:org.saddle.ops.BinOp[org.saddle.ops.BitUShr,org.saddle.Vec[Long],Int,org.saddle.Vec[Long]]", "kind" : "implicit val"}, {"label" : "vecSclr_Copy_LL_BitUshr", "tail" : ": BinOp[BitUShr, Vec[Long], Long, Vec[Long]]", "member" : "org.saddle.macros.BinOpVecCopy.vecSclr_Copy_LL_BitUshr", "link" : "org\/saddle\/macros\/BinOpVecCopy.html#vecSclr_Copy_LL_BitUshr:org.saddle.ops.BinOp[org.saddle.ops.BitUShr,org.saddle.Vec[Long],Long,org.saddle.Vec[Long]]", "kind" : "implicit val"}, {"label" : "vecSclr_Copy_II_BitShr", "tail" : ": BinOp[BitShr, Vec[Int], Int, Vec[Int]]", "member" : "org.saddle.macros.BinOpVecCopy.vecSclr_Copy_II_BitShr", "link" : "org\/saddle\/macros\/BinOpVecCopy.html#vecSclr_Copy_II_BitShr:org.saddle.ops.BinOp[org.saddle.ops.BitShr,org.saddle.Vec[Int],Int,org.saddle.Vec[Int]]", "kind" : "implicit val"}, {"label" : "vecSclr_Copy_LI_BitShr", "tail" : ": BinOp[BitShr, Vec[Long], Int, Vec[Long]]", "member" : "org.saddle.macros.BinOpVecCopy.vecSclr_Copy_LI_BitShr", "link" : "org\/saddle\/macros\/BinOpVecCopy.html#vecSclr_Copy_LI_BitShr:org.saddle.ops.BinOp[org.saddle.ops.BitShr,org.saddle.Vec[Long],Int,org.saddle.Vec[Long]]", "kind" : "implicit val"}, {"label" : "vecSclr_Copy_LL_BitShr", "tail" : ": BinOp[BitShr, Vec[Long], Long, Vec[Long]]", "member" : "org.saddle.macros.BinOpVecCopy.vecSclr_Copy_LL_BitShr", "link" : "org\/saddle\/macros\/BinOpVecCopy.html#vecSclr_Copy_LL_BitShr:org.saddle.ops.BinOp[org.saddle.ops.BitShr,org.saddle.Vec[Long],Long,org.saddle.Vec[Long]]", "kind" : "implicit val"}, {"label" : "vecSclr_Copy_II_BitShl", "tail" : ": BinOp[BitShl, Vec[Int], Int, Vec[Int]]", "member" : "org.saddle.macros.BinOpVecCopy.vecSclr_Copy_II_BitShl", "link" : "org\/saddle\/macros\/BinOpVecCopy.html#vecSclr_Copy_II_BitShl:org.saddle.ops.BinOp[org.saddle.ops.BitShl,org.saddle.Vec[Int],Int,org.saddle.Vec[Int]]", "kind" : "implicit val"}, {"label" : "vecSclr_Copy_LI_BitShl", "tail" : ": BinOp[BitShl, Vec[Long], Int, Vec[Long]]", "member" : "org.saddle.macros.BinOpVecCopy.vecSclr_Copy_LI_BitShl", "link" : "org\/saddle\/macros\/BinOpVecCopy.html#vecSclr_Copy_LI_BitShl:org.saddle.ops.BinOp[org.saddle.ops.BitShl,org.saddle.Vec[Long],Int,org.saddle.Vec[Long]]", "kind" : "implicit val"}, {"label" : "vecSclr_Copy_LL_BitShl", "tail" : ": BinOp[BitShl, Vec[Long], Long, Vec[Long]]", "member" : "org.saddle.macros.BinOpVecCopy.vecSclr_Copy_LL_BitShl", "link" : "org\/saddle\/macros\/BinOpVecCopy.html#vecSclr_Copy_LL_BitShl:org.saddle.ops.BinOp[org.saddle.ops.BitShl,org.saddle.Vec[Long],Long,org.saddle.Vec[Long]]", "kind" : "implicit val"}, {"label" : "vecSclr_Copy_II_BitXor", "tail" : ": BinOp[BitXor, Vec[Int], Int, Vec[Int]]", "member" : "org.saddle.macros.BinOpVecCopy.vecSclr_Copy_II_BitXor", "link" : "org\/saddle\/macros\/BinOpVecCopy.html#vecSclr_Copy_II_BitXor:org.saddle.ops.BinOp[org.saddle.ops.BitXor,org.saddle.Vec[Int],Int,org.saddle.Vec[Int]]", "kind" : "implicit val"}, {"label" : "vecSclr_Copy_LI_BitXor", "tail" : ": BinOp[BitXor, Vec[Long], Int, Vec[Long]]", "member" : "org.saddle.macros.BinOpVecCopy.vecSclr_Copy_LI_BitXor", "link" : "org\/saddle\/macros\/BinOpVecCopy.html#vecSclr_Copy_LI_BitXor:org.saddle.ops.BinOp[org.saddle.ops.BitXor,org.saddle.Vec[Long],Int,org.saddle.Vec[Long]]", "kind" : "implicit val"}, {"label" : "vecSclr_Copy_LL_BitXor", "tail" : ": BinOp[BitXor, Vec[Long], Long, Vec[Long]]", "member" : "org.saddle.macros.BinOpVecCopy.vecSclr_Copy_LL_BitXor", "link" : "org\/saddle\/macros\/BinOpVecCopy.html#vecSclr_Copy_LL_BitXor:org.saddle.ops.BinOp[org.saddle.ops.BitXor,org.saddle.Vec[Long],Long,org.saddle.Vec[Long]]", "kind" : "implicit val"}, {"label" : "vecSclr_Copy_II_BitOr", "tail" : ": BinOp[BitOr, Vec[Int], Int, Vec[Int]]", "member" : "org.saddle.macros.BinOpVecCopy.vecSclr_Copy_II_BitOr", "link" : "org\/saddle\/macros\/BinOpVecCopy.html#vecSclr_Copy_II_BitOr:org.saddle.ops.BinOp[org.saddle.ops.BitOr,org.saddle.Vec[Int],Int,org.saddle.Vec[Int]]", "kind" : "implicit val"}, {"label" : "vecSclr_Copy_LI_BitOr", "tail" : ": BinOp[BitOr, Vec[Long], Int, Vec[Long]]", "member" : "org.saddle.macros.BinOpVecCopy.vecSclr_Copy_LI_BitOr", "link" : "org\/saddle\/macros\/BinOpVecCopy.html#vecSclr_Copy_LI_BitOr:org.saddle.ops.BinOp[org.saddle.ops.BitOr,org.saddle.Vec[Long],Int,org.saddle.Vec[Long]]", "kind" : "implicit val"}, {"label" : "vecSclr_Copy_LL_BitOr", "tail" : ": BinOp[BitOr, Vec[Long], Long, Vec[Long]]", "member" : "org.saddle.macros.BinOpVecCopy.vecSclr_Copy_LL_BitOr", "link" : "org\/saddle\/macros\/BinOpVecCopy.html#vecSclr_Copy_LL_BitOr:org.saddle.ops.BinOp[org.saddle.ops.BitOr,org.saddle.Vec[Long],Long,org.saddle.Vec[Long]]", "kind" : "implicit val"}, {"label" : "vecSclr_Copy_II_BitAnd", "tail" : ": BinOp[BitAnd, Vec[Int], Int, Vec[Int]]", "member" : "org.saddle.macros.BinOpVecCopy.vecSclr_Copy_II_BitAnd", "link" : "org\/saddle\/macros\/BinOpVecCopy.html#vecSclr_Copy_II_BitAnd:org.saddle.ops.BinOp[org.saddle.ops.BitAnd,org.saddle.Vec[Int],Int,org.saddle.Vec[Int]]", "kind" : "implicit val"}, {"label" : "vecSclr_Copy_LI_BitAnd", "tail" : ": BinOp[BitAnd, Vec[Long], Int, Vec[Long]]", "member" : "org.saddle.macros.BinOpVecCopy.vecSclr_Copy_LI_BitAnd", "link" : "org\/saddle\/macros\/BinOpVecCopy.html#vecSclr_Copy_LI_BitAnd:org.saddle.ops.BinOp[org.saddle.ops.BitAnd,org.saddle.Vec[Long],Int,org.saddle.Vec[Long]]", "kind" : "implicit val"}, {"label" : "vecSclr_Copy_LL_BitAnd", "tail" : ": BinOp[BitAnd, Vec[Long], Long, Vec[Long]]", "member" : "org.saddle.macros.BinOpVecCopy.vecSclr_Copy_LL_BitAnd", "link" : "org\/saddle\/macros\/BinOpVecCopy.html#vecSclr_Copy_LL_BitAnd:org.saddle.ops.BinOp[org.saddle.ops.BitAnd,org.saddle.Vec[Long],Long,org.saddle.Vec[Long]]", "kind" : "implicit val"}, {"label" : "vecSclr_Copy_ID_Mod", "tail" : ": BinOp[Mod, Vec[Int], Double, Vec[Double]]", "member" : "org.saddle.macros.BinOpVecCopy.vecSclr_Copy_ID_Mod", "link" : "org\/saddle\/macros\/BinOpVecCopy.html#vecSclr_Copy_ID_Mod:org.saddle.ops.BinOp[org.saddle.ops.Mod,org.saddle.Vec[Int],Double,org.saddle.Vec[Double]]", "kind" : "implicit val"}, {"label" : "vecSclr_Copy_II_Mod", "tail" : ": BinOp[Mod, Vec[Int], Int, Vec[Int]]", "member" : "org.saddle.macros.BinOpVecCopy.vecSclr_Copy_II_Mod", "link" : "org\/saddle\/macros\/BinOpVecCopy.html#vecSclr_Copy_II_Mod:org.saddle.ops.BinOp[org.saddle.ops.Mod,org.saddle.Vec[Int],Int,org.saddle.Vec[Int]]", "kind" : "implicit val"}, {"label" : "vecSclr_Copy_IL_Mod", "tail" : ": BinOp[Mod, Vec[Int], Long, Vec[Long]]", "member" : "org.saddle.macros.BinOpVecCopy.vecSclr_Copy_IL_Mod", "link" : "org\/saddle\/macros\/BinOpVecCopy.html#vecSclr_Copy_IL_Mod:org.saddle.ops.BinOp[org.saddle.ops.Mod,org.saddle.Vec[Int],Long,org.saddle.Vec[Long]]", "kind" : "implicit val"}, {"label" : "vecSclr_Copy_LI_Mod", "tail" : ": BinOp[Mod, Vec[Long], Int, Vec[Long]]", "member" : "org.saddle.macros.BinOpVecCopy.vecSclr_Copy_LI_Mod", "link" : "org\/saddle\/macros\/BinOpVecCopy.html#vecSclr_Copy_LI_Mod:org.saddle.ops.BinOp[org.saddle.ops.Mod,org.saddle.Vec[Long],Int,org.saddle.Vec[Long]]", "kind" : "implicit val"}, {"label" : "vecSclr_Copy_LD_Mod", "tail" : ": BinOp[Mod, Vec[Long], Double, Vec[Double]]", "member" : "org.saddle.macros.BinOpVecCopy.vecSclr_Copy_LD_Mod", "link" : "org\/saddle\/macros\/BinOpVecCopy.html#vecSclr_Copy_LD_Mod:org.saddle.ops.BinOp[org.saddle.ops.Mod,org.saddle.Vec[Long],Double,org.saddle.Vec[Double]]", "kind" : "implicit val"}, {"label" : "vecSclr_Copy_LL_Mod", "tail" : ": BinOp[Mod, Vec[Long], Long, Vec[Long]]", "member" : "org.saddle.macros.BinOpVecCopy.vecSclr_Copy_LL_Mod", "link" : "org\/saddle\/macros\/BinOpVecCopy.html#vecSclr_Copy_LL_Mod:org.saddle.ops.BinOp[org.saddle.ops.Mod,org.saddle.Vec[Long],Long,org.saddle.Vec[Long]]", "kind" : "implicit val"}, {"label" : "vecSclr_Copy_DI_Mod", "tail" : ": BinOp[Mod, Vec[Double], Int, Vec[Double]]", "member" : "org.saddle.macros.BinOpVecCopy.vecSclr_Copy_DI_Mod", "link" : "org\/saddle\/macros\/BinOpVecCopy.html#vecSclr_Copy_DI_Mod:org.saddle.ops.BinOp[org.saddle.ops.Mod,org.saddle.Vec[Double],Int,org.saddle.Vec[Double]]", "kind" : "implicit val"}, {"label" : "vecSclr_Copy_DL_Mod", "tail" : ": BinOp[Mod, Vec[Double], Long, Vec[Double]]", "member" : "org.saddle.macros.BinOpVecCopy.vecSclr_Copy_DL_Mod", "link" : "org\/saddle\/macros\/BinOpVecCopy.html#vecSclr_Copy_DL_Mod:org.saddle.ops.BinOp[org.saddle.ops.Mod,org.saddle.Vec[Double],Long,org.saddle.Vec[Double]]", "kind" : "implicit val"}, {"label" : "vecSclr_Copy_DD_Mod", "tail" : ": BinOp[Mod, Vec[Double], Double, Vec[Double]]", "member" : "org.saddle.macros.BinOpVecCopy.vecSclr_Copy_DD_Mod", "link" : "org\/saddle\/macros\/BinOpVecCopy.html#vecSclr_Copy_DD_Mod:org.saddle.ops.BinOp[org.saddle.ops.Mod,org.saddle.Vec[Double],Double,org.saddle.Vec[Double]]", "kind" : "implicit val"}, {"label" : "vecSclr_Copy_ID_Div", "tail" : ": BinOp[Divide, Vec[Int], Double, Vec[Double]]", "member" : "org.saddle.macros.BinOpVecCopy.vecSclr_Copy_ID_Div", "link" : "org\/saddle\/macros\/BinOpVecCopy.html#vecSclr_Copy_ID_Div:org.saddle.ops.BinOp[org.saddle.ops.Divide,org.saddle.Vec[Int],Double,org.saddle.Vec[Double]]", "kind" : "implicit val"}, {"label" : "vecSclr_Copy_II_Div", "tail" : ": BinOp[Divide, Vec[Int], Int, Vec[Int]]", "member" : "org.saddle.macros.BinOpVecCopy.vecSclr_Copy_II_Div", "link" : "org\/saddle\/macros\/BinOpVecCopy.html#vecSclr_Copy_II_Div:org.saddle.ops.BinOp[org.saddle.ops.Divide,org.saddle.Vec[Int],Int,org.saddle.Vec[Int]]", "kind" : "implicit val"}, {"label" : "vecSclr_Copy_IL_Div", "tail" : ": BinOp[Divide, Vec[Int], Long, Vec[Long]]", "member" : "org.saddle.macros.BinOpVecCopy.vecSclr_Copy_IL_Div", "link" : "org\/saddle\/macros\/BinOpVecCopy.html#vecSclr_Copy_IL_Div:org.saddle.ops.BinOp[org.saddle.ops.Divide,org.saddle.Vec[Int],Long,org.saddle.Vec[Long]]", "kind" : "implicit val"}, {"label" : "vecSclr_Copy_LI_Div", "tail" : ": BinOp[Divide, Vec[Long], Int, Vec[Long]]", "member" : "org.saddle.macros.BinOpVecCopy.vecSclr_Copy_LI_Div", "link" : "org\/saddle\/macros\/BinOpVecCopy.html#vecSclr_Copy_LI_Div:org.saddle.ops.BinOp[org.saddle.ops.Divide,org.saddle.Vec[Long],Int,org.saddle.Vec[Long]]", "kind" : "implicit val"}, {"label" : "vecSclr_Copy_LD_Div", "tail" : ": BinOp[Divide, Vec[Long], Double, Vec[Double]]", "member" : "org.saddle.macros.BinOpVecCopy.vecSclr_Copy_LD_Div", "link" : "org\/saddle\/macros\/BinOpVecCopy.html#vecSclr_Copy_LD_Div:org.saddle.ops.BinOp[org.saddle.ops.Divide,org.saddle.Vec[Long],Double,org.saddle.Vec[Double]]", "kind" : "implicit val"}, {"label" : "vecSclr_Copy_LL_Div", "tail" : ": BinOp[Divide, Vec[Long], Long, Vec[Long]]", "member" : "org.saddle.macros.BinOpVecCopy.vecSclr_Copy_LL_Div", "link" : "org\/saddle\/macros\/BinOpVecCopy.html#vecSclr_Copy_LL_Div:org.saddle.ops.BinOp[org.saddle.ops.Divide,org.saddle.Vec[Long],Long,org.saddle.Vec[Long]]", "kind" : "implicit val"}, {"label" : "vecSclr_Copy_DI_Div", "tail" : ": BinOp[Divide, Vec[Double], Int, Vec[Double]]", "member" : "org.saddle.macros.BinOpVecCopy.vecSclr_Copy_DI_Div", "link" : "org\/saddle\/macros\/BinOpVecCopy.html#vecSclr_Copy_DI_Div:org.saddle.ops.BinOp[org.saddle.ops.Divide,org.saddle.Vec[Double],Int,org.saddle.Vec[Double]]", "kind" : "implicit val"}, {"label" : "vecSclr_Copy_DL_Div", "tail" : ": BinOp[Divide, Vec[Double], Long, Vec[Double]]", "member" : "org.saddle.macros.BinOpVecCopy.vecSclr_Copy_DL_Div", "link" : "org\/saddle\/macros\/BinOpVecCopy.html#vecSclr_Copy_DL_Div:org.saddle.ops.BinOp[org.saddle.ops.Divide,org.saddle.Vec[Double],Long,org.saddle.Vec[Double]]", "kind" : "implicit val"}, {"label" : "vecSclr_Copy_DD_Div", "tail" : ": BinOp[Divide, Vec[Double], Double, Vec[Double]]", "member" : "org.saddle.macros.BinOpVecCopy.vecSclr_Copy_DD_Div", "link" : "org\/saddle\/macros\/BinOpVecCopy.html#vecSclr_Copy_DD_Div:org.saddle.ops.BinOp[org.saddle.ops.Divide,org.saddle.Vec[Double],Double,org.saddle.Vec[Double]]", "kind" : "implicit val"}, {"label" : "vecSclr_Copy_ID_Mult", "tail" : ": BinOp[Multiply, Vec[Int], Double, Vec[Double]]", "member" : "org.saddle.macros.BinOpVecCopy.vecSclr_Copy_ID_Mult", "link" : "org\/saddle\/macros\/BinOpVecCopy.html#vecSclr_Copy_ID_Mult:org.saddle.ops.BinOp[org.saddle.ops.Multiply,org.saddle.Vec[Int],Double,org.saddle.Vec[Double]]", "kind" : "implicit val"}, {"label" : "vecSclr_Copy_II_Mult", "tail" : ": BinOp[Multiply, Vec[Int], Int, Vec[Int]]", "member" : "org.saddle.macros.BinOpVecCopy.vecSclr_Copy_II_Mult", "link" : "org\/saddle\/macros\/BinOpVecCopy.html#vecSclr_Copy_II_Mult:org.saddle.ops.BinOp[org.saddle.ops.Multiply,org.saddle.Vec[Int],Int,org.saddle.Vec[Int]]", "kind" : "implicit val"}, {"label" : "vecSclr_Copy_IL_Mult", "tail" : ": BinOp[Multiply, Vec[Int], Long, Vec[Long]]", "member" : "org.saddle.macros.BinOpVecCopy.vecSclr_Copy_IL_Mult", "link" : "org\/saddle\/macros\/BinOpVecCopy.html#vecSclr_Copy_IL_Mult:org.saddle.ops.BinOp[org.saddle.ops.Multiply,org.saddle.Vec[Int],Long,org.saddle.Vec[Long]]", "kind" : "implicit val"}, {"label" : "vecSclr_Copy_LI_Mult", "tail" : ": BinOp[Multiply, Vec[Long], Int, Vec[Long]]", "member" : "org.saddle.macros.BinOpVecCopy.vecSclr_Copy_LI_Mult", "link" : "org\/saddle\/macros\/BinOpVecCopy.html#vecSclr_Copy_LI_Mult:org.saddle.ops.BinOp[org.saddle.ops.Multiply,org.saddle.Vec[Long],Int,org.saddle.Vec[Long]]", "kind" : "implicit val"}, {"label" : "vecSclr_Copy_LD_Mult", "tail" : ": BinOp[Multiply, Vec[Long], Double, Vec[Double]]", "member" : "org.saddle.macros.BinOpVecCopy.vecSclr_Copy_LD_Mult", "link" : "org\/saddle\/macros\/BinOpVecCopy.html#vecSclr_Copy_LD_Mult:org.saddle.ops.BinOp[org.saddle.ops.Multiply,org.saddle.Vec[Long],Double,org.saddle.Vec[Double]]", "kind" : "implicit val"}, {"label" : "vecSclr_Copy_LL_Mult", "tail" : ": BinOp[Multiply, Vec[Long], Long, Vec[Long]]", "member" : "org.saddle.macros.BinOpVecCopy.vecSclr_Copy_LL_Mult", "link" : "org\/saddle\/macros\/BinOpVecCopy.html#vecSclr_Copy_LL_Mult:org.saddle.ops.BinOp[org.saddle.ops.Multiply,org.saddle.Vec[Long],Long,org.saddle.Vec[Long]]", "kind" : "implicit val"}, {"label" : "vecSclr_Copy_DI_Mult", "tail" : ": BinOp[Multiply, Vec[Double], Int, Vec[Double]]", "member" : "org.saddle.macros.BinOpVecCopy.vecSclr_Copy_DI_Mult", "link" : "org\/saddle\/macros\/BinOpVecCopy.html#vecSclr_Copy_DI_Mult:org.saddle.ops.BinOp[org.saddle.ops.Multiply,org.saddle.Vec[Double],Int,org.saddle.Vec[Double]]", "kind" : "implicit val"}, {"label" : "vecSclr_Copy_DL_Mult", "tail" : ": BinOp[Multiply, Vec[Double], Long, Vec[Double]]", "member" : "org.saddle.macros.BinOpVecCopy.vecSclr_Copy_DL_Mult", "link" : "org\/saddle\/macros\/BinOpVecCopy.html#vecSclr_Copy_DL_Mult:org.saddle.ops.BinOp[org.saddle.ops.Multiply,org.saddle.Vec[Double],Long,org.saddle.Vec[Double]]", "kind" : "implicit val"}, {"label" : "vecSclr_Copy_DD_Mult", "tail" : ": BinOp[Multiply, Vec[Double], Double, Vec[Double]]", "member" : "org.saddle.macros.BinOpVecCopy.vecSclr_Copy_DD_Mult", "link" : "org\/saddle\/macros\/BinOpVecCopy.html#vecSclr_Copy_DD_Mult:org.saddle.ops.BinOp[org.saddle.ops.Multiply,org.saddle.Vec[Double],Double,org.saddle.Vec[Double]]", "kind" : "implicit val"}, {"label" : "vecSclr_Copy_ID_Sub", "tail" : ": BinOp[Subtract, Vec[Int], Double, Vec[Double]]", "member" : "org.saddle.macros.BinOpVecCopy.vecSclr_Copy_ID_Sub", "link" : "org\/saddle\/macros\/BinOpVecCopy.html#vecSclr_Copy_ID_Sub:org.saddle.ops.BinOp[org.saddle.ops.Subtract,org.saddle.Vec[Int],Double,org.saddle.Vec[Double]]", "kind" : "implicit val"}, {"label" : "vecSclr_Copy_II_Sub", "tail" : ": BinOp[Subtract, Vec[Int], Int, Vec[Int]]", "member" : "org.saddle.macros.BinOpVecCopy.vecSclr_Copy_II_Sub", "link" : "org\/saddle\/macros\/BinOpVecCopy.html#vecSclr_Copy_II_Sub:org.saddle.ops.BinOp[org.saddle.ops.Subtract,org.saddle.Vec[Int],Int,org.saddle.Vec[Int]]", "kind" : "implicit val"}, {"label" : "vecSclr_Copy_IL_Sub", "tail" : ": BinOp[Subtract, Vec[Int], Long, Vec[Long]]", "member" : "org.saddle.macros.BinOpVecCopy.vecSclr_Copy_IL_Sub", "link" : "org\/saddle\/macros\/BinOpVecCopy.html#vecSclr_Copy_IL_Sub:org.saddle.ops.BinOp[org.saddle.ops.Subtract,org.saddle.Vec[Int],Long,org.saddle.Vec[Long]]", "kind" : "implicit val"}, {"label" : "vecSclr_Copy_LI_Sub", "tail" : ": BinOp[Subtract, Vec[Long], Int, Vec[Long]]", "member" : "org.saddle.macros.BinOpVecCopy.vecSclr_Copy_LI_Sub", "link" : "org\/saddle\/macros\/BinOpVecCopy.html#vecSclr_Copy_LI_Sub:org.saddle.ops.BinOp[org.saddle.ops.Subtract,org.saddle.Vec[Long],Int,org.saddle.Vec[Long]]", "kind" : "implicit val"}, {"label" : "vecSclr_Copy_LD_Sub", "tail" : ": BinOp[Subtract, Vec[Long], Double, Vec[Double]]", "member" : "org.saddle.macros.BinOpVecCopy.vecSclr_Copy_LD_Sub", "link" : "org\/saddle\/macros\/BinOpVecCopy.html#vecSclr_Copy_LD_Sub:org.saddle.ops.BinOp[org.saddle.ops.Subtract,org.saddle.Vec[Long],Double,org.saddle.Vec[Double]]", "kind" : "implicit val"}, {"label" : "vecSclr_Copy_LL_Sub", "tail" : ": BinOp[Subtract, Vec[Long], Long, Vec[Long]]", "member" : "org.saddle.macros.BinOpVecCopy.vecSclr_Copy_LL_Sub", "link" : "org\/saddle\/macros\/BinOpVecCopy.html#vecSclr_Copy_LL_Sub:org.saddle.ops.BinOp[org.saddle.ops.Subtract,org.saddle.Vec[Long],Long,org.saddle.Vec[Long]]", "kind" : "implicit val"}, {"label" : "vecSclr_Copy_DI_Sub", "tail" : ": BinOp[Subtract, Vec[Double], Int, Vec[Double]]", "member" : "org.saddle.macros.BinOpVecCopy.vecSclr_Copy_DI_Sub", "link" : "org\/saddle\/macros\/BinOpVecCopy.html#vecSclr_Copy_DI_Sub:org.saddle.ops.BinOp[org.saddle.ops.Subtract,org.saddle.Vec[Double],Int,org.saddle.Vec[Double]]", "kind" : "implicit val"}, {"label" : "vecSclr_Copy_DL_Sub", "tail" : ": BinOp[Subtract, Vec[Double], Long, Vec[Double]]", "member" : "org.saddle.macros.BinOpVecCopy.vecSclr_Copy_DL_Sub", "link" : "org\/saddle\/macros\/BinOpVecCopy.html#vecSclr_Copy_DL_Sub:org.saddle.ops.BinOp[org.saddle.ops.Subtract,org.saddle.Vec[Double],Long,org.saddle.Vec[Double]]", "kind" : "implicit val"}, {"label" : "vecSclr_Copy_DD_Sub", "tail" : ": BinOp[Subtract, Vec[Double], Double, Vec[Double]]", "member" : "org.saddle.macros.BinOpVecCopy.vecSclr_Copy_DD_Sub", "link" : "org\/saddle\/macros\/BinOpVecCopy.html#vecSclr_Copy_DD_Sub:org.saddle.ops.BinOp[org.saddle.ops.Subtract,org.saddle.Vec[Double],Double,org.saddle.Vec[Double]]", "kind" : "implicit val"}, {"label" : "vecSclr_Copy_ID_Power", "tail" : ": BinOp[Power, Vec[Int], Double, Vec[Double]]", "member" : "org.saddle.macros.BinOpVecCopy.vecSclr_Copy_ID_Power", "link" : "org\/saddle\/macros\/BinOpVecCopy.html#vecSclr_Copy_ID_Power:org.saddle.ops.BinOp[org.saddle.ops.Power,org.saddle.Vec[Int],Double,org.saddle.Vec[Double]]", "kind" : "implicit val"}, {"label" : "vecSclr_Copy_II_Power", "tail" : ": BinOp[Power, Vec[Int], Int, Vec[Int]]", "member" : "org.saddle.macros.BinOpVecCopy.vecSclr_Copy_II_Power", "link" : "org\/saddle\/macros\/BinOpVecCopy.html#vecSclr_Copy_II_Power:org.saddle.ops.BinOp[org.saddle.ops.Power,org.saddle.Vec[Int],Int,org.saddle.Vec[Int]]", "kind" : "implicit val"}, {"label" : "vecSclr_Copy_IL_Power", "tail" : ": BinOp[Power, Vec[Int], Long, Vec[Long]]", "member" : "org.saddle.macros.BinOpVecCopy.vecSclr_Copy_IL_Power", "link" : "org\/saddle\/macros\/BinOpVecCopy.html#vecSclr_Copy_IL_Power:org.saddle.ops.BinOp[org.saddle.ops.Power,org.saddle.Vec[Int],Long,org.saddle.Vec[Long]]", "kind" : "implicit val"}, {"label" : "vecSclr_Copy_LI_Power", "tail" : ": BinOp[Power, Vec[Long], Int, Vec[Long]]", "member" : "org.saddle.macros.BinOpVecCopy.vecSclr_Copy_LI_Power", "link" : "org\/saddle\/macros\/BinOpVecCopy.html#vecSclr_Copy_LI_Power:org.saddle.ops.BinOp[org.saddle.ops.Power,org.saddle.Vec[Long],Int,org.saddle.Vec[Long]]", "kind" : "implicit val"}, {"label" : "vecSclr_Copy_LD_Power", "tail" : ": BinOp[Power, Vec[Long], Double, Vec[Double]]", "member" : "org.saddle.macros.BinOpVecCopy.vecSclr_Copy_LD_Power", "link" : "org\/saddle\/macros\/BinOpVecCopy.html#vecSclr_Copy_LD_Power:org.saddle.ops.BinOp[org.saddle.ops.Power,org.saddle.Vec[Long],Double,org.saddle.Vec[Double]]", "kind" : "implicit val"}, {"label" : "vecSclr_Copy_LL_Power", "tail" : ": BinOp[Power, Vec[Long], Long, Vec[Long]]", "member" : "org.saddle.macros.BinOpVecCopy.vecSclr_Copy_LL_Power", "link" : "org\/saddle\/macros\/BinOpVecCopy.html#vecSclr_Copy_LL_Power:org.saddle.ops.BinOp[org.saddle.ops.Power,org.saddle.Vec[Long],Long,org.saddle.Vec[Long]]", "kind" : "implicit val"}, {"label" : "vecSclr_Copy_DI_Power", "tail" : ": BinOp[Power, Vec[Double], Int, Vec[Double]]", "member" : "org.saddle.macros.BinOpVecCopy.vecSclr_Copy_DI_Power", "link" : "org\/saddle\/macros\/BinOpVecCopy.html#vecSclr_Copy_DI_Power:org.saddle.ops.BinOp[org.saddle.ops.Power,org.saddle.Vec[Double],Int,org.saddle.Vec[Double]]", "kind" : "implicit val"}, {"label" : "vecSclr_Copy_DL_Power", "tail" : ": BinOp[Power, Vec[Double], Long, Vec[Double]]", "member" : "org.saddle.macros.BinOpVecCopy.vecSclr_Copy_DL_Power", "link" : "org\/saddle\/macros\/BinOpVecCopy.html#vecSclr_Copy_DL_Power:org.saddle.ops.BinOp[org.saddle.ops.Power,org.saddle.Vec[Double],Long,org.saddle.Vec[Double]]", "kind" : "implicit val"}, {"label" : "vecSclr_Copy_DD_Power", "tail" : ": BinOp[Power, Vec[Double], Double, Vec[Double]]", "member" : "org.saddle.macros.BinOpVecCopy.vecSclr_Copy_DD_Power", "link" : "org\/saddle\/macros\/BinOpVecCopy.html#vecSclr_Copy_DD_Power:org.saddle.ops.BinOp[org.saddle.ops.Power,org.saddle.Vec[Double],Double,org.saddle.Vec[Double]]", "kind" : "implicit val"}, {"label" : "vecSclr_Copy_ID_Add", "tail" : ": BinOp[Add, Vec[Int], Double, Vec[Double]]", "member" : "org.saddle.macros.BinOpVecCopy.vecSclr_Copy_ID_Add", "link" : "org\/saddle\/macros\/BinOpVecCopy.html#vecSclr_Copy_ID_Add:org.saddle.ops.BinOp[org.saddle.ops.Add,org.saddle.Vec[Int],Double,org.saddle.Vec[Double]]", "kind" : "implicit val"}, {"label" : "vecSclr_Copy_II_Add", "tail" : ": BinOp[Add, Vec[Int], Int, Vec[Int]]", "member" : "org.saddle.macros.BinOpVecCopy.vecSclr_Copy_II_Add", "link" : "org\/saddle\/macros\/BinOpVecCopy.html#vecSclr_Copy_II_Add:org.saddle.ops.BinOp[org.saddle.ops.Add,org.saddle.Vec[Int],Int,org.saddle.Vec[Int]]", "kind" : "implicit val"}, {"label" : "vecSclr_Copy_IL_Add", "tail" : ": BinOp[Add, Vec[Int], Long, Vec[Long]]", "member" : "org.saddle.macros.BinOpVecCopy.vecSclr_Copy_IL_Add", "link" : "org\/saddle\/macros\/BinOpVecCopy.html#vecSclr_Copy_IL_Add:org.saddle.ops.BinOp[org.saddle.ops.Add,org.saddle.Vec[Int],Long,org.saddle.Vec[Long]]", "kind" : "implicit val"}, {"label" : "vecSclr_Copy_LI_Add", "tail" : ": BinOp[Add, Vec[Long], Int, Vec[Long]]", "member" : "org.saddle.macros.BinOpVecCopy.vecSclr_Copy_LI_Add", "link" : "org\/saddle\/macros\/BinOpVecCopy.html#vecSclr_Copy_LI_Add:org.saddle.ops.BinOp[org.saddle.ops.Add,org.saddle.Vec[Long],Int,org.saddle.Vec[Long]]", "kind" : "implicit val"}, {"label" : "vecSclr_Copy_LD_Add", "tail" : ": BinOp[Add, Vec[Long], Double, Vec[Double]]", "member" : "org.saddle.macros.BinOpVecCopy.vecSclr_Copy_LD_Add", "link" : "org\/saddle\/macros\/BinOpVecCopy.html#vecSclr_Copy_LD_Add:org.saddle.ops.BinOp[org.saddle.ops.Add,org.saddle.Vec[Long],Double,org.saddle.Vec[Double]]", "kind" : "implicit val"}, {"label" : "vecSclr_Copy_LL_Add", "tail" : ": BinOp[Add, Vec[Long], Long, Vec[Long]]", "member" : "org.saddle.macros.BinOpVecCopy.vecSclr_Copy_LL_Add", "link" : "org\/saddle\/macros\/BinOpVecCopy.html#vecSclr_Copy_LL_Add:org.saddle.ops.BinOp[org.saddle.ops.Add,org.saddle.Vec[Long],Long,org.saddle.Vec[Long]]", "kind" : "implicit val"}, {"label" : "vecSclr_Copy_DI_Add", "tail" : ": BinOp[Add, Vec[Double], Int, Vec[Double]]", "member" : "org.saddle.macros.BinOpVecCopy.vecSclr_Copy_DI_Add", "link" : "org\/saddle\/macros\/BinOpVecCopy.html#vecSclr_Copy_DI_Add:org.saddle.ops.BinOp[org.saddle.ops.Add,org.saddle.Vec[Double],Int,org.saddle.Vec[Double]]", "kind" : "implicit val"}, {"label" : "vecSclr_Copy_DL_Add", "tail" : ": BinOp[Add, Vec[Double], Long, Vec[Double]]", "member" : "org.saddle.macros.BinOpVecCopy.vecSclr_Copy_DL_Add", "link" : "org\/saddle\/macros\/BinOpVecCopy.html#vecSclr_Copy_DL_Add:org.saddle.ops.BinOp[org.saddle.ops.Add,org.saddle.Vec[Double],Long,org.saddle.Vec[Double]]", "kind" : "implicit val"}, {"label" : "vecSclr_Copy_DD_Add", "tail" : ": BinOp[Add, Vec[Double], Double, Vec[Double]]", "member" : "org.saddle.macros.BinOpVecCopy.vecSclr_Copy_DD_Add", "link" : "org\/saddle\/macros\/BinOpVecCopy.html#vecSclr_Copy_DD_Add:org.saddle.ops.BinOp[org.saddle.ops.Add,org.saddle.Vec[Double],Double,org.saddle.Vec[Double]]", "kind" : "implicit val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/saddle\/macros\/BinOpVecCopy.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/saddle\/macros\/BinOpVecCopy.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/saddle\/macros\/BinOpVecCopy.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/saddle\/macros\/BinOpVecCopy.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/saddle\/macros\/BinOpVecCopy.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/saddle\/macros\/BinOpVecCopy.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/saddle\/macros\/BinOpVecCopy.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/macros\/BinOpVecCopy.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/macros\/BinOpVecCopy.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/macros\/BinOpVecCopy.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/saddle\/macros\/BinOpVecCopy.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/saddle\/macros\/BinOpVecCopy.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/saddle\/macros\/BinOpVecCopy.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/saddle\/macros\/BinOpVecCopy.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/saddle\/macros\/BinOpVecCopy.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/saddle\/macros\/BinOpVecCopy.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "org\/saddle\/macros\/BinOpVecCopy.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/saddle\/macros\/BinOpVecCopy.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/saddle\/macros\/BinOpVecCopy.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}, {"name" : "org.saddle.macros.BinOpVecInPlace", "trait" : "org\/saddle\/macros\/BinOpVecInPlace.html", "kind" : "trait", "members_trait" : [{"label" : "vecSclr_BB_Xor", "tail" : ": BinOpInPlace[XorOp, Vec[Boolean], Boolean]", "member" : "org.saddle.macros.BinOpVecInPlace.vecSclr_BB_Xor", "link" : "org\/saddle\/macros\/BinOpVecInPlace.html#vecSclr_BB_Xor:org.saddle.ops.BinOpInPlace[org.saddle.ops.XorOp,org.saddle.Vec[Boolean],Boolean]", "kind" : "implicit val"}, {"label" : "vecSclr_BB_Or", "tail" : ": BinOpInPlace[OrOp, Vec[Boolean], Boolean]", "member" : "org.saddle.macros.BinOpVecInPlace.vecSclr_BB_Or", "link" : "org\/saddle\/macros\/BinOpVecInPlace.html#vecSclr_BB_Or:org.saddle.ops.BinOpInPlace[org.saddle.ops.OrOp,org.saddle.Vec[Boolean],Boolean]", "kind" : "implicit val"}, {"label" : "vecSclr_BB_And", "tail" : ": BinOpInPlace[AndOp, Vec[Boolean], Boolean]", "member" : "org.saddle.macros.BinOpVecInPlace.vecSclr_BB_And", "link" : "org\/saddle\/macros\/BinOpVecInPlace.html#vecSclr_BB_And:org.saddle.ops.BinOpInPlace[org.saddle.ops.AndOp,org.saddle.Vec[Boolean],Boolean]", "kind" : "implicit val"}, {"label" : "vecSclr_BB_EQ", "tail" : ": BinOpInPlace[EqOp, Vec[Boolean], Boolean]", "member" : "org.saddle.macros.BinOpVecInPlace.vecSclr_BB_EQ", "link" : "org\/saddle\/macros\/BinOpVecInPlace.html#vecSclr_BB_EQ:org.saddle.ops.BinOpInPlace[org.saddle.ops.EqOp,org.saddle.Vec[Boolean],Boolean]", "kind" : "implicit val"}, {"label" : "vecSclr_BB_NEQ", "tail" : ": BinOpInPlace[NeqOp, Vec[Boolean], Boolean]", "member" : "org.saddle.macros.BinOpVecInPlace.vecSclr_BB_NEQ", "link" : "org\/saddle\/macros\/BinOpVecInPlace.html#vecSclr_BB_NEQ:org.saddle.ops.BinOpInPlace[org.saddle.ops.NeqOp,org.saddle.Vec[Boolean],Boolean]", "kind" : "implicit val"}, {"label" : "vecSclr_BB_LTE", "tail" : ": BinOpInPlace[LteOp, Vec[Boolean], Boolean]", "member" : "org.saddle.macros.BinOpVecInPlace.vecSclr_BB_LTE", "link" : "org\/saddle\/macros\/BinOpVecInPlace.html#vecSclr_BB_LTE:org.saddle.ops.BinOpInPlace[org.saddle.ops.LteOp,org.saddle.Vec[Boolean],Boolean]", "kind" : "implicit val"}, {"label" : "vecSclr_BB_LT", "tail" : ": BinOpInPlace[LtOp, Vec[Boolean], Boolean]", "member" : "org.saddle.macros.BinOpVecInPlace.vecSclr_BB_LT", "link" : "org\/saddle\/macros\/BinOpVecInPlace.html#vecSclr_BB_LT:org.saddle.ops.BinOpInPlace[org.saddle.ops.LtOp,org.saddle.Vec[Boolean],Boolean]", "kind" : "implicit val"}, {"label" : "vecSclr_BB_GTE", "tail" : ": BinOpInPlace[GteOp, Vec[Boolean], Boolean]", "member" : "org.saddle.macros.BinOpVecInPlace.vecSclr_BB_GTE", "link" : "org\/saddle\/macros\/BinOpVecInPlace.html#vecSclr_BB_GTE:org.saddle.ops.BinOpInPlace[org.saddle.ops.GteOp,org.saddle.Vec[Boolean],Boolean]", "kind" : "implicit val"}, {"label" : "vecSclr_BB_GT", "tail" : ": BinOpInPlace[GtOp, Vec[Boolean], Boolean]", "member" : "org.saddle.macros.BinOpVecInPlace.vecSclr_BB_GT", "link" : "org\/saddle\/macros\/BinOpVecInPlace.html#vecSclr_BB_GT:org.saddle.ops.BinOpInPlace[org.saddle.ops.GtOp,org.saddle.Vec[Boolean],Boolean]", "kind" : "implicit val"}, {"label" : "vecSclr_II_BitUshr", "tail" : ": BinOpInPlace[BitUShr, Vec[Int], Int]", "member" : "org.saddle.macros.BinOpVecInPlace.vecSclr_II_BitUshr", "link" : "org\/saddle\/macros\/BinOpVecInPlace.html#vecSclr_II_BitUshr:org.saddle.ops.BinOpInPlace[org.saddle.ops.BitUShr,org.saddle.Vec[Int],Int]", "kind" : "implicit val"}, {"label" : "vecSclr_LI_BitUshr", "tail" : ": BinOpInPlace[BitUShr, Vec[Long], Int]", "member" : "org.saddle.macros.BinOpVecInPlace.vecSclr_LI_BitUshr", "link" : "org\/saddle\/macros\/BinOpVecInPlace.html#vecSclr_LI_BitUshr:org.saddle.ops.BinOpInPlace[org.saddle.ops.BitUShr,org.saddle.Vec[Long],Int]", "kind" : "implicit val"}, {"label" : "vecSclr_LL_BitUshr", "tail" : ": BinOpInPlace[BitUShr, Vec[Long], Long]", "member" : "org.saddle.macros.BinOpVecInPlace.vecSclr_LL_BitUshr", "link" : "org\/saddle\/macros\/BinOpVecInPlace.html#vecSclr_LL_BitUshr:org.saddle.ops.BinOpInPlace[org.saddle.ops.BitUShr,org.saddle.Vec[Long],Long]", "kind" : "implicit val"}, {"label" : "vecSclr_II_BitShr", "tail" : ": BinOpInPlace[BitShr, Vec[Int], Int]", "member" : "org.saddle.macros.BinOpVecInPlace.vecSclr_II_BitShr", "link" : "org\/saddle\/macros\/BinOpVecInPlace.html#vecSclr_II_BitShr:org.saddle.ops.BinOpInPlace[org.saddle.ops.BitShr,org.saddle.Vec[Int],Int]", "kind" : "implicit val"}, {"label" : "vecSclr_LI_BitShr", "tail" : ": BinOpInPlace[BitShr, Vec[Long], Int]", "member" : "org.saddle.macros.BinOpVecInPlace.vecSclr_LI_BitShr", "link" : "org\/saddle\/macros\/BinOpVecInPlace.html#vecSclr_LI_BitShr:org.saddle.ops.BinOpInPlace[org.saddle.ops.BitShr,org.saddle.Vec[Long],Int]", "kind" : "implicit val"}, {"label" : "vecSclr_LL_BitShr", "tail" : ": BinOpInPlace[BitShr, Vec[Long], Long]", "member" : "org.saddle.macros.BinOpVecInPlace.vecSclr_LL_BitShr", "link" : "org\/saddle\/macros\/BinOpVecInPlace.html#vecSclr_LL_BitShr:org.saddle.ops.BinOpInPlace[org.saddle.ops.BitShr,org.saddle.Vec[Long],Long]", "kind" : "implicit val"}, {"label" : "vecSclr_II_BitShl", "tail" : ": BinOpInPlace[BitShl, Vec[Int], Int]", "member" : "org.saddle.macros.BinOpVecInPlace.vecSclr_II_BitShl", "link" : "org\/saddle\/macros\/BinOpVecInPlace.html#vecSclr_II_BitShl:org.saddle.ops.BinOpInPlace[org.saddle.ops.BitShl,org.saddle.Vec[Int],Int]", "kind" : "implicit val"}, {"label" : "vecSclr_LI_BitShl", "tail" : ": BinOpInPlace[BitShl, Vec[Long], Int]", "member" : "org.saddle.macros.BinOpVecInPlace.vecSclr_LI_BitShl", "link" : "org\/saddle\/macros\/BinOpVecInPlace.html#vecSclr_LI_BitShl:org.saddle.ops.BinOpInPlace[org.saddle.ops.BitShl,org.saddle.Vec[Long],Int]", "kind" : "implicit val"}, {"label" : "vecSclr_LL_BitShl", "tail" : ": BinOpInPlace[BitShl, Vec[Long], Long]", "member" : "org.saddle.macros.BinOpVecInPlace.vecSclr_LL_BitShl", "link" : "org\/saddle\/macros\/BinOpVecInPlace.html#vecSclr_LL_BitShl:org.saddle.ops.BinOpInPlace[org.saddle.ops.BitShl,org.saddle.Vec[Long],Long]", "kind" : "implicit val"}, {"label" : "vecSclr_II_BitXor", "tail" : ": BinOpInPlace[BitXor, Vec[Int], Int]", "member" : "org.saddle.macros.BinOpVecInPlace.vecSclr_II_BitXor", "link" : "org\/saddle\/macros\/BinOpVecInPlace.html#vecSclr_II_BitXor:org.saddle.ops.BinOpInPlace[org.saddle.ops.BitXor,org.saddle.Vec[Int],Int]", "kind" : "implicit val"}, {"label" : "vecSclr_LI_BitXor", "tail" : ": BinOpInPlace[BitXor, Vec[Long], Int]", "member" : "org.saddle.macros.BinOpVecInPlace.vecSclr_LI_BitXor", "link" : "org\/saddle\/macros\/BinOpVecInPlace.html#vecSclr_LI_BitXor:org.saddle.ops.BinOpInPlace[org.saddle.ops.BitXor,org.saddle.Vec[Long],Int]", "kind" : "implicit val"}, {"label" : "vecSclr_LL_BitXor", "tail" : ": BinOpInPlace[BitXor, Vec[Long], Long]", "member" : "org.saddle.macros.BinOpVecInPlace.vecSclr_LL_BitXor", "link" : "org\/saddle\/macros\/BinOpVecInPlace.html#vecSclr_LL_BitXor:org.saddle.ops.BinOpInPlace[org.saddle.ops.BitXor,org.saddle.Vec[Long],Long]", "kind" : "implicit val"}, {"label" : "vecSclr_II_BitOr", "tail" : ": BinOpInPlace[BitOr, Vec[Int], Int]", "member" : "org.saddle.macros.BinOpVecInPlace.vecSclr_II_BitOr", "link" : "org\/saddle\/macros\/BinOpVecInPlace.html#vecSclr_II_BitOr:org.saddle.ops.BinOpInPlace[org.saddle.ops.BitOr,org.saddle.Vec[Int],Int]", "kind" : "implicit val"}, {"label" : "vecSclr_LI_BitOr", "tail" : ": BinOpInPlace[BitOr, Vec[Long], Int]", "member" : "org.saddle.macros.BinOpVecInPlace.vecSclr_LI_BitOr", "link" : "org\/saddle\/macros\/BinOpVecInPlace.html#vecSclr_LI_BitOr:org.saddle.ops.BinOpInPlace[org.saddle.ops.BitOr,org.saddle.Vec[Long],Int]", "kind" : "implicit val"}, {"label" : "vecSclr_LL_BitOr", "tail" : ": BinOpInPlace[BitOr, Vec[Long], Long]", "member" : "org.saddle.macros.BinOpVecInPlace.vecSclr_LL_BitOr", "link" : "org\/saddle\/macros\/BinOpVecInPlace.html#vecSclr_LL_BitOr:org.saddle.ops.BinOpInPlace[org.saddle.ops.BitOr,org.saddle.Vec[Long],Long]", "kind" : "implicit val"}, {"label" : "vecSclr_II_BitAnd", "tail" : ": BinOpInPlace[BitAnd, Vec[Int], Int]", "member" : "org.saddle.macros.BinOpVecInPlace.vecSclr_II_BitAnd", "link" : "org\/saddle\/macros\/BinOpVecInPlace.html#vecSclr_II_BitAnd:org.saddle.ops.BinOpInPlace[org.saddle.ops.BitAnd,org.saddle.Vec[Int],Int]", "kind" : "implicit val"}, {"label" : "vecSclr_LI_BitAnd", "tail" : ": BinOpInPlace[BitAnd, Vec[Long], Int]", "member" : "org.saddle.macros.BinOpVecInPlace.vecSclr_LI_BitAnd", "link" : "org\/saddle\/macros\/BinOpVecInPlace.html#vecSclr_LI_BitAnd:org.saddle.ops.BinOpInPlace[org.saddle.ops.BitAnd,org.saddle.Vec[Long],Int]", "kind" : "implicit val"}, {"label" : "vecSclr_LL_BitAnd", "tail" : ": BinOpInPlace[BitAnd, Vec[Long], Long]", "member" : "org.saddle.macros.BinOpVecInPlace.vecSclr_LL_BitAnd", "link" : "org\/saddle\/macros\/BinOpVecInPlace.html#vecSclr_LL_BitAnd:org.saddle.ops.BinOpInPlace[org.saddle.ops.BitAnd,org.saddle.Vec[Long],Long]", "kind" : "implicit val"}, {"label" : "vecSclr_II_Mod", "tail" : ": BinOpInPlace[Mod, Vec[Int], Int]", "member" : "org.saddle.macros.BinOpVecInPlace.vecSclr_II_Mod", "link" : "org\/saddle\/macros\/BinOpVecInPlace.html#vecSclr_II_Mod:org.saddle.ops.BinOpInPlace[org.saddle.ops.Mod,org.saddle.Vec[Int],Int]", "kind" : "implicit val"}, {"label" : "vecSclr_LI_Mod", "tail" : ": BinOpInPlace[Mod, Vec[Long], Int]", "member" : "org.saddle.macros.BinOpVecInPlace.vecSclr_LI_Mod", "link" : "org\/saddle\/macros\/BinOpVecInPlace.html#vecSclr_LI_Mod:org.saddle.ops.BinOpInPlace[org.saddle.ops.Mod,org.saddle.Vec[Long],Int]", "kind" : "implicit val"}, {"label" : "vecSclr_LL_Mod", "tail" : ": BinOpInPlace[Mod, Vec[Long], Long]", "member" : "org.saddle.macros.BinOpVecInPlace.vecSclr_LL_Mod", "link" : "org\/saddle\/macros\/BinOpVecInPlace.html#vecSclr_LL_Mod:org.saddle.ops.BinOpInPlace[org.saddle.ops.Mod,org.saddle.Vec[Long],Long]", "kind" : "implicit val"}, {"label" : "vecSclr_DI_Mod", "tail" : ": BinOpInPlace[Mod, Vec[Double], Int]", "member" : "org.saddle.macros.BinOpVecInPlace.vecSclr_DI_Mod", "link" : "org\/saddle\/macros\/BinOpVecInPlace.html#vecSclr_DI_Mod:org.saddle.ops.BinOpInPlace[org.saddle.ops.Mod,org.saddle.Vec[Double],Int]", "kind" : "implicit val"}, {"label" : "vecSclr_DL_Mod", "tail" : ": BinOpInPlace[Mod, Vec[Double], Long]", "member" : "org.saddle.macros.BinOpVecInPlace.vecSclr_DL_Mod", "link" : "org\/saddle\/macros\/BinOpVecInPlace.html#vecSclr_DL_Mod:org.saddle.ops.BinOpInPlace[org.saddle.ops.Mod,org.saddle.Vec[Double],Long]", "kind" : "implicit val"}, {"label" : "vecSclr_DD_Mod", "tail" : ": BinOpInPlace[Mod, Vec[Double], Double]", "member" : "org.saddle.macros.BinOpVecInPlace.vecSclr_DD_Mod", "link" : "org\/saddle\/macros\/BinOpVecInPlace.html#vecSclr_DD_Mod:org.saddle.ops.BinOpInPlace[org.saddle.ops.Mod,org.saddle.Vec[Double],Double]", "kind" : "implicit val"}, {"label" : "vecSclr_II_Div", "tail" : ": BinOpInPlace[Divide, Vec[Int], Int]", "member" : "org.saddle.macros.BinOpVecInPlace.vecSclr_II_Div", "link" : "org\/saddle\/macros\/BinOpVecInPlace.html#vecSclr_II_Div:org.saddle.ops.BinOpInPlace[org.saddle.ops.Divide,org.saddle.Vec[Int],Int]", "kind" : "implicit val"}, {"label" : "vecSclr_LI_Div", "tail" : ": BinOpInPlace[Divide, Vec[Long], Int]", "member" : "org.saddle.macros.BinOpVecInPlace.vecSclr_LI_Div", "link" : "org\/saddle\/macros\/BinOpVecInPlace.html#vecSclr_LI_Div:org.saddle.ops.BinOpInPlace[org.saddle.ops.Divide,org.saddle.Vec[Long],Int]", "kind" : "implicit val"}, {"label" : "vecSclr_LL_Div", "tail" : ": BinOpInPlace[Divide, Vec[Long], Long]", "member" : "org.saddle.macros.BinOpVecInPlace.vecSclr_LL_Div", "link" : "org\/saddle\/macros\/BinOpVecInPlace.html#vecSclr_LL_Div:org.saddle.ops.BinOpInPlace[org.saddle.ops.Divide,org.saddle.Vec[Long],Long]", "kind" : "implicit val"}, {"label" : "vecSclr_DI_Div", "tail" : ": BinOpInPlace[Divide, Vec[Double], Int]", "member" : "org.saddle.macros.BinOpVecInPlace.vecSclr_DI_Div", "link" : "org\/saddle\/macros\/BinOpVecInPlace.html#vecSclr_DI_Div:org.saddle.ops.BinOpInPlace[org.saddle.ops.Divide,org.saddle.Vec[Double],Int]", "kind" : "implicit val"}, {"label" : "vecSclr_DL_Div", "tail" : ": BinOpInPlace[Divide, Vec[Double], Long]", "member" : "org.saddle.macros.BinOpVecInPlace.vecSclr_DL_Div", "link" : "org\/saddle\/macros\/BinOpVecInPlace.html#vecSclr_DL_Div:org.saddle.ops.BinOpInPlace[org.saddle.ops.Divide,org.saddle.Vec[Double],Long]", "kind" : "implicit val"}, {"label" : "vecSclr_DD_Div", "tail" : ": BinOpInPlace[Divide, Vec[Double], Double]", "member" : "org.saddle.macros.BinOpVecInPlace.vecSclr_DD_Div", "link" : "org\/saddle\/macros\/BinOpVecInPlace.html#vecSclr_DD_Div:org.saddle.ops.BinOpInPlace[org.saddle.ops.Divide,org.saddle.Vec[Double],Double]", "kind" : "implicit val"}, {"label" : "vecSclr_II_Mult", "tail" : ": BinOpInPlace[Multiply, Vec[Int], Int]", "member" : "org.saddle.macros.BinOpVecInPlace.vecSclr_II_Mult", "link" : "org\/saddle\/macros\/BinOpVecInPlace.html#vecSclr_II_Mult:org.saddle.ops.BinOpInPlace[org.saddle.ops.Multiply,org.saddle.Vec[Int],Int]", "kind" : "implicit val"}, {"label" : "vecSclr_LI_Mult", "tail" : ": BinOpInPlace[Multiply, Vec[Long], Int]", "member" : "org.saddle.macros.BinOpVecInPlace.vecSclr_LI_Mult", "link" : "org\/saddle\/macros\/BinOpVecInPlace.html#vecSclr_LI_Mult:org.saddle.ops.BinOpInPlace[org.saddle.ops.Multiply,org.saddle.Vec[Long],Int]", "kind" : "implicit val"}, {"label" : "vecSclr_LL_Mult", "tail" : ": BinOpInPlace[Multiply, Vec[Long], Long]", "member" : "org.saddle.macros.BinOpVecInPlace.vecSclr_LL_Mult", "link" : "org\/saddle\/macros\/BinOpVecInPlace.html#vecSclr_LL_Mult:org.saddle.ops.BinOpInPlace[org.saddle.ops.Multiply,org.saddle.Vec[Long],Long]", "kind" : "implicit val"}, {"label" : "vecSclr_DI_Mult", "tail" : ": BinOpInPlace[Multiply, Vec[Double], Int]", "member" : "org.saddle.macros.BinOpVecInPlace.vecSclr_DI_Mult", "link" : "org\/saddle\/macros\/BinOpVecInPlace.html#vecSclr_DI_Mult:org.saddle.ops.BinOpInPlace[org.saddle.ops.Multiply,org.saddle.Vec[Double],Int]", "kind" : "implicit val"}, {"label" : "vecSclr_DL_Mult", "tail" : ": BinOpInPlace[Multiply, Vec[Double], Long]", "member" : "org.saddle.macros.BinOpVecInPlace.vecSclr_DL_Mult", "link" : "org\/saddle\/macros\/BinOpVecInPlace.html#vecSclr_DL_Mult:org.saddle.ops.BinOpInPlace[org.saddle.ops.Multiply,org.saddle.Vec[Double],Long]", "kind" : "implicit val"}, {"label" : "vecSclr_DD_Mult", "tail" : ": BinOpInPlace[Multiply, Vec[Double], Double]", "member" : "org.saddle.macros.BinOpVecInPlace.vecSclr_DD_Mult", "link" : "org\/saddle\/macros\/BinOpVecInPlace.html#vecSclr_DD_Mult:org.saddle.ops.BinOpInPlace[org.saddle.ops.Multiply,org.saddle.Vec[Double],Double]", "kind" : "implicit val"}, {"label" : "vecSclr_II_Sub", "tail" : ": BinOpInPlace[Subtract, Vec[Int], Int]", "member" : "org.saddle.macros.BinOpVecInPlace.vecSclr_II_Sub", "link" : "org\/saddle\/macros\/BinOpVecInPlace.html#vecSclr_II_Sub:org.saddle.ops.BinOpInPlace[org.saddle.ops.Subtract,org.saddle.Vec[Int],Int]", "kind" : "implicit val"}, {"label" : "vecSclr_LI_Sub", "tail" : ": BinOpInPlace[Subtract, Vec[Long], Int]", "member" : "org.saddle.macros.BinOpVecInPlace.vecSclr_LI_Sub", "link" : "org\/saddle\/macros\/BinOpVecInPlace.html#vecSclr_LI_Sub:org.saddle.ops.BinOpInPlace[org.saddle.ops.Subtract,org.saddle.Vec[Long],Int]", "kind" : "implicit val"}, {"label" : "vecSclr_LL_Sub", "tail" : ": BinOpInPlace[Subtract, Vec[Long], Long]", "member" : "org.saddle.macros.BinOpVecInPlace.vecSclr_LL_Sub", "link" : "org\/saddle\/macros\/BinOpVecInPlace.html#vecSclr_LL_Sub:org.saddle.ops.BinOpInPlace[org.saddle.ops.Subtract,org.saddle.Vec[Long],Long]", "kind" : "implicit val"}, {"label" : "vecSclr_DI_Sub", "tail" : ": BinOpInPlace[Subtract, Vec[Double], Int]", "member" : "org.saddle.macros.BinOpVecInPlace.vecSclr_DI_Sub", "link" : "org\/saddle\/macros\/BinOpVecInPlace.html#vecSclr_DI_Sub:org.saddle.ops.BinOpInPlace[org.saddle.ops.Subtract,org.saddle.Vec[Double],Int]", "kind" : "implicit val"}, {"label" : "vecSclr_DL_Sub", "tail" : ": BinOpInPlace[Subtract, Vec[Double], Long]", "member" : "org.saddle.macros.BinOpVecInPlace.vecSclr_DL_Sub", "link" : "org\/saddle\/macros\/BinOpVecInPlace.html#vecSclr_DL_Sub:org.saddle.ops.BinOpInPlace[org.saddle.ops.Subtract,org.saddle.Vec[Double],Long]", "kind" : "implicit val"}, {"label" : "vecSclr_DD_Sub", "tail" : ": BinOpInPlace[Subtract, Vec[Double], Double]", "member" : "org.saddle.macros.BinOpVecInPlace.vecSclr_DD_Sub", "link" : "org\/saddle\/macros\/BinOpVecInPlace.html#vecSclr_DD_Sub:org.saddle.ops.BinOpInPlace[org.saddle.ops.Subtract,org.saddle.Vec[Double],Double]", "kind" : "implicit val"}, {"label" : "vecSclr_II_Power", "tail" : ": BinOpInPlace[Power, Vec[Int], Int]", "member" : "org.saddle.macros.BinOpVecInPlace.vecSclr_II_Power", "link" : "org\/saddle\/macros\/BinOpVecInPlace.html#vecSclr_II_Power:org.saddle.ops.BinOpInPlace[org.saddle.ops.Power,org.saddle.Vec[Int],Int]", "kind" : "implicit val"}, {"label" : "vecSclr_LI_Power", "tail" : ": BinOpInPlace[Power, Vec[Long], Int]", "member" : "org.saddle.macros.BinOpVecInPlace.vecSclr_LI_Power", "link" : "org\/saddle\/macros\/BinOpVecInPlace.html#vecSclr_LI_Power:org.saddle.ops.BinOpInPlace[org.saddle.ops.Power,org.saddle.Vec[Long],Int]", "kind" : "implicit val"}, {"label" : "vecSclr_LL_Power", "tail" : ": BinOpInPlace[Power, Vec[Long], Long]", "member" : "org.saddle.macros.BinOpVecInPlace.vecSclr_LL_Power", "link" : "org\/saddle\/macros\/BinOpVecInPlace.html#vecSclr_LL_Power:org.saddle.ops.BinOpInPlace[org.saddle.ops.Power,org.saddle.Vec[Long],Long]", "kind" : "implicit val"}, {"label" : "vecSclr_DI_Power", "tail" : ": BinOpInPlace[Power, Vec[Double], Int]", "member" : "org.saddle.macros.BinOpVecInPlace.vecSclr_DI_Power", "link" : "org\/saddle\/macros\/BinOpVecInPlace.html#vecSclr_DI_Power:org.saddle.ops.BinOpInPlace[org.saddle.ops.Power,org.saddle.Vec[Double],Int]", "kind" : "implicit val"}, {"label" : "vecSclr_DL_Power", "tail" : ": BinOpInPlace[Power, Vec[Double], Long]", "member" : "org.saddle.macros.BinOpVecInPlace.vecSclr_DL_Power", "link" : "org\/saddle\/macros\/BinOpVecInPlace.html#vecSclr_DL_Power:org.saddle.ops.BinOpInPlace[org.saddle.ops.Power,org.saddle.Vec[Double],Long]", "kind" : "implicit val"}, {"label" : "vecSclr_DD_Power", "tail" : ": BinOpInPlace[Power, Vec[Double], Double]", "member" : "org.saddle.macros.BinOpVecInPlace.vecSclr_DD_Power", "link" : "org\/saddle\/macros\/BinOpVecInPlace.html#vecSclr_DD_Power:org.saddle.ops.BinOpInPlace[org.saddle.ops.Power,org.saddle.Vec[Double],Double]", "kind" : "implicit val"}, {"label" : "vecSclr_II_Add", "tail" : ": BinOpInPlace[Add, Vec[Int], Int]", "member" : "org.saddle.macros.BinOpVecInPlace.vecSclr_II_Add", "link" : "org\/saddle\/macros\/BinOpVecInPlace.html#vecSclr_II_Add:org.saddle.ops.BinOpInPlace[org.saddle.ops.Add,org.saddle.Vec[Int],Int]", "kind" : "implicit val"}, {"label" : "vecSclr_LI_Add", "tail" : ": BinOpInPlace[Add, Vec[Long], Int]", "member" : "org.saddle.macros.BinOpVecInPlace.vecSclr_LI_Add", "link" : "org\/saddle\/macros\/BinOpVecInPlace.html#vecSclr_LI_Add:org.saddle.ops.BinOpInPlace[org.saddle.ops.Add,org.saddle.Vec[Long],Int]", "kind" : "implicit val"}, {"label" : "vecSclr_LL_Add", "tail" : ": BinOpInPlace[Add, Vec[Long], Long]", "member" : "org.saddle.macros.BinOpVecInPlace.vecSclr_LL_Add", "link" : "org\/saddle\/macros\/BinOpVecInPlace.html#vecSclr_LL_Add:org.saddle.ops.BinOpInPlace[org.saddle.ops.Add,org.saddle.Vec[Long],Long]", "kind" : "implicit val"}, {"label" : "vecSclr_DI_Add", "tail" : ": BinOpInPlace[Add, Vec[Double], Int]", "member" : "org.saddle.macros.BinOpVecInPlace.vecSclr_DI_Add", "link" : "org\/saddle\/macros\/BinOpVecInPlace.html#vecSclr_DI_Add:org.saddle.ops.BinOpInPlace[org.saddle.ops.Add,org.saddle.Vec[Double],Int]", "kind" : "implicit val"}, {"label" : "vecSclr_DL_Add", "tail" : ": BinOpInPlace[Add, Vec[Double], Long]", "member" : "org.saddle.macros.BinOpVecInPlace.vecSclr_DL_Add", "link" : "org\/saddle\/macros\/BinOpVecInPlace.html#vecSclr_DL_Add:org.saddle.ops.BinOpInPlace[org.saddle.ops.Add,org.saddle.Vec[Double],Long]", "kind" : "implicit val"}, {"label" : "vecSclr_DD_Add", "tail" : ": BinOpInPlace[Add, Vec[Double], Double]", "member" : "org.saddle.macros.BinOpVecInPlace.vecSclr_DD_Add", "link" : "org\/saddle\/macros\/BinOpVecInPlace.html#vecSclr_DD_Add:org.saddle.ops.BinOpInPlace[org.saddle.ops.Add,org.saddle.Vec[Double],Double]", "kind" : "implicit val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/saddle\/macros\/BinOpVecInPlace.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/saddle\/macros\/BinOpVecInPlace.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/saddle\/macros\/BinOpVecInPlace.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/saddle\/macros\/BinOpVecInPlace.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/saddle\/macros\/BinOpVecInPlace.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/saddle\/macros\/BinOpVecInPlace.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/saddle\/macros\/BinOpVecInPlace.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/macros\/BinOpVecInPlace.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/macros\/BinOpVecInPlace.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/macros\/BinOpVecInPlace.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/saddle\/macros\/BinOpVecInPlace.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/saddle\/macros\/BinOpVecInPlace.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/saddle\/macros\/BinOpVecInPlace.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/saddle\/macros\/BinOpVecInPlace.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/saddle\/macros\/BinOpVecInPlace.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/saddle\/macros\/BinOpVecInPlace.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "org\/saddle\/macros\/BinOpVecInPlace.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/saddle\/macros\/BinOpVecInPlace.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/saddle\/macros\/BinOpVecInPlace.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}, {"name" : "org.saddle.macros.BinOpVecVecCopy", "trait" : "org\/saddle\/macros\/BinOpVecVecCopy.html", "kind" : "trait", "members_trait" : [{"label" : "vecVec_Copy_BB_Xor", "tail" : ": BinOp[XorOp, Vec[Boolean], Vec[Boolean], Vec[Boolean]]", "member" : "org.saddle.macros.BinOpVecVecCopy.vecVec_Copy_BB_Xor", "link" : "org\/saddle\/macros\/BinOpVecVecCopy.html#vecVec_Copy_BB_Xor:org.saddle.ops.BinOp[org.saddle.ops.XorOp,org.saddle.Vec[Boolean],org.saddle.Vec[Boolean],org.saddle.Vec[Boolean]]", "kind" : "implicit val"}, {"label" : "vecVec_Copy_BB_Or", "tail" : ": BinOp[OrOp, Vec[Boolean], Vec[Boolean], Vec[Boolean]]", "member" : "org.saddle.macros.BinOpVecVecCopy.vecVec_Copy_BB_Or", "link" : "org\/saddle\/macros\/BinOpVecVecCopy.html#vecVec_Copy_BB_Or:org.saddle.ops.BinOp[org.saddle.ops.OrOp,org.saddle.Vec[Boolean],org.saddle.Vec[Boolean],org.saddle.Vec[Boolean]]", "kind" : "implicit val"}, {"label" : "vecVec_Copy_BB_And", "tail" : ": BinOp[AndOp, Vec[Boolean], Vec[Boolean], Vec[Boolean]]", "member" : "org.saddle.macros.BinOpVecVecCopy.vecVec_Copy_BB_And", "link" : "org\/saddle\/macros\/BinOpVecVecCopy.html#vecVec_Copy_BB_And:org.saddle.ops.BinOp[org.saddle.ops.AndOp,org.saddle.Vec[Boolean],org.saddle.Vec[Boolean],org.saddle.Vec[Boolean]]", "kind" : "implicit val"}, {"label" : "vecVec_Copy_II_BitUshr", "tail" : ": BinOp[BitUShr, Vec[Int], Vec[Int], Vec[Int]]", "member" : "org.saddle.macros.BinOpVecVecCopy.vecVec_Copy_II_BitUshr", "link" : "org\/saddle\/macros\/BinOpVecVecCopy.html#vecVec_Copy_II_BitUshr:org.saddle.ops.BinOp[org.saddle.ops.BitUShr,org.saddle.Vec[Int],org.saddle.Vec[Int],org.saddle.Vec[Int]]", "kind" : "implicit val"}, {"label" : "vecVec_Copy_LI_BitUshr", "tail" : ": BinOp[BitUShr, Vec[Long], Vec[Int], Vec[Long]]", "member" : "org.saddle.macros.BinOpVecVecCopy.vecVec_Copy_LI_BitUshr", "link" : "org\/saddle\/macros\/BinOpVecVecCopy.html#vecVec_Copy_LI_BitUshr:org.saddle.ops.BinOp[org.saddle.ops.BitUShr,org.saddle.Vec[Long],org.saddle.Vec[Int],org.saddle.Vec[Long]]", "kind" : "implicit val"}, {"label" : "vecVec_Copy_LL_BitUshr", "tail" : ": BinOp[BitUShr, Vec[Long], Vec[Long], Vec[Long]]", "member" : "org.saddle.macros.BinOpVecVecCopy.vecVec_Copy_LL_BitUshr", "link" : "org\/saddle\/macros\/BinOpVecVecCopy.html#vecVec_Copy_LL_BitUshr:org.saddle.ops.BinOp[org.saddle.ops.BitUShr,org.saddle.Vec[Long],org.saddle.Vec[Long],org.saddle.Vec[Long]]", "kind" : "implicit val"}, {"label" : "vecVec_Copy_II_BitShr", "tail" : ": BinOp[BitShr, Vec[Int], Vec[Int], Vec[Int]]", "member" : "org.saddle.macros.BinOpVecVecCopy.vecVec_Copy_II_BitShr", "link" : "org\/saddle\/macros\/BinOpVecVecCopy.html#vecVec_Copy_II_BitShr:org.saddle.ops.BinOp[org.saddle.ops.BitShr,org.saddle.Vec[Int],org.saddle.Vec[Int],org.saddle.Vec[Int]]", "kind" : "implicit val"}, {"label" : "vecVec_Copy_LI_BitShr", "tail" : ": BinOp[BitShr, Vec[Long], Vec[Int], Vec[Long]]", "member" : "org.saddle.macros.BinOpVecVecCopy.vecVec_Copy_LI_BitShr", "link" : "org\/saddle\/macros\/BinOpVecVecCopy.html#vecVec_Copy_LI_BitShr:org.saddle.ops.BinOp[org.saddle.ops.BitShr,org.saddle.Vec[Long],org.saddle.Vec[Int],org.saddle.Vec[Long]]", "kind" : "implicit val"}, {"label" : "vecVec_Copy_LL_BitShr", "tail" : ": BinOp[BitShr, Vec[Long], Vec[Long], Vec[Long]]", "member" : "org.saddle.macros.BinOpVecVecCopy.vecVec_Copy_LL_BitShr", "link" : "org\/saddle\/macros\/BinOpVecVecCopy.html#vecVec_Copy_LL_BitShr:org.saddle.ops.BinOp[org.saddle.ops.BitShr,org.saddle.Vec[Long],org.saddle.Vec[Long],org.saddle.Vec[Long]]", "kind" : "implicit val"}, {"label" : "vecVec_Copy_II_BitShl", "tail" : ": BinOp[BitShl, Vec[Int], Vec[Int], Vec[Int]]", "member" : "org.saddle.macros.BinOpVecVecCopy.vecVec_Copy_II_BitShl", "link" : "org\/saddle\/macros\/BinOpVecVecCopy.html#vecVec_Copy_II_BitShl:org.saddle.ops.BinOp[org.saddle.ops.BitShl,org.saddle.Vec[Int],org.saddle.Vec[Int],org.saddle.Vec[Int]]", "kind" : "implicit val"}, {"label" : "vecVec_Copy_LI_BitShl", "tail" : ": BinOp[BitShl, Vec[Long], Vec[Int], Vec[Long]]", "member" : "org.saddle.macros.BinOpVecVecCopy.vecVec_Copy_LI_BitShl", "link" : "org\/saddle\/macros\/BinOpVecVecCopy.html#vecVec_Copy_LI_BitShl:org.saddle.ops.BinOp[org.saddle.ops.BitShl,org.saddle.Vec[Long],org.saddle.Vec[Int],org.saddle.Vec[Long]]", "kind" : "implicit val"}, {"label" : "vecVec_Copy_LL_BitShl", "tail" : ": BinOp[BitShl, Vec[Long], Vec[Long], Vec[Long]]", "member" : "org.saddle.macros.BinOpVecVecCopy.vecVec_Copy_LL_BitShl", "link" : "org\/saddle\/macros\/BinOpVecVecCopy.html#vecVec_Copy_LL_BitShl:org.saddle.ops.BinOp[org.saddle.ops.BitShl,org.saddle.Vec[Long],org.saddle.Vec[Long],org.saddle.Vec[Long]]", "kind" : "implicit val"}, {"label" : "vecVec_Copy_II_BitXor", "tail" : ": BinOp[BitXor, Vec[Int], Vec[Int], Vec[Int]]", "member" : "org.saddle.macros.BinOpVecVecCopy.vecVec_Copy_II_BitXor", "link" : "org\/saddle\/macros\/BinOpVecVecCopy.html#vecVec_Copy_II_BitXor:org.saddle.ops.BinOp[org.saddle.ops.BitXor,org.saddle.Vec[Int],org.saddle.Vec[Int],org.saddle.Vec[Int]]", "kind" : "implicit val"}, {"label" : "vecVec_Copy_LI_BitXor", "tail" : ": BinOp[BitXor, Vec[Long], Vec[Int], Vec[Long]]", "member" : "org.saddle.macros.BinOpVecVecCopy.vecVec_Copy_LI_BitXor", "link" : "org\/saddle\/macros\/BinOpVecVecCopy.html#vecVec_Copy_LI_BitXor:org.saddle.ops.BinOp[org.saddle.ops.BitXor,org.saddle.Vec[Long],org.saddle.Vec[Int],org.saddle.Vec[Long]]", "kind" : "implicit val"}, {"label" : "vecVec_Copy_LL_BitXor", "tail" : ": BinOp[BitXor, Vec[Long], Vec[Long], Vec[Long]]", "member" : "org.saddle.macros.BinOpVecVecCopy.vecVec_Copy_LL_BitXor", "link" : "org\/saddle\/macros\/BinOpVecVecCopy.html#vecVec_Copy_LL_BitXor:org.saddle.ops.BinOp[org.saddle.ops.BitXor,org.saddle.Vec[Long],org.saddle.Vec[Long],org.saddle.Vec[Long]]", "kind" : "implicit val"}, {"label" : "vecVec_Copy_II_BitOr", "tail" : ": BinOp[BitOr, Vec[Int], Vec[Int], Vec[Int]]", "member" : "org.saddle.macros.BinOpVecVecCopy.vecVec_Copy_II_BitOr", "link" : "org\/saddle\/macros\/BinOpVecVecCopy.html#vecVec_Copy_II_BitOr:org.saddle.ops.BinOp[org.saddle.ops.BitOr,org.saddle.Vec[Int],org.saddle.Vec[Int],org.saddle.Vec[Int]]", "kind" : "implicit val"}, {"label" : "vecVec_Copy_LI_BitOr", "tail" : ": BinOp[BitOr, Vec[Long], Vec[Int], Vec[Long]]", "member" : "org.saddle.macros.BinOpVecVecCopy.vecVec_Copy_LI_BitOr", "link" : "org\/saddle\/macros\/BinOpVecVecCopy.html#vecVec_Copy_LI_BitOr:org.saddle.ops.BinOp[org.saddle.ops.BitOr,org.saddle.Vec[Long],org.saddle.Vec[Int],org.saddle.Vec[Long]]", "kind" : "implicit val"}, {"label" : "vecVec_Copy_LL_BitOr", "tail" : ": BinOp[BitOr, Vec[Long], Vec[Long], Vec[Long]]", "member" : "org.saddle.macros.BinOpVecVecCopy.vecVec_Copy_LL_BitOr", "link" : "org\/saddle\/macros\/BinOpVecVecCopy.html#vecVec_Copy_LL_BitOr:org.saddle.ops.BinOp[org.saddle.ops.BitOr,org.saddle.Vec[Long],org.saddle.Vec[Long],org.saddle.Vec[Long]]", "kind" : "implicit val"}, {"label" : "vecVec_Copy_II_BitAnd", "tail" : ": BinOp[BitAnd, Vec[Int], Vec[Int], Vec[Int]]", "member" : "org.saddle.macros.BinOpVecVecCopy.vecVec_Copy_II_BitAnd", "link" : "org\/saddle\/macros\/BinOpVecVecCopy.html#vecVec_Copy_II_BitAnd:org.saddle.ops.BinOp[org.saddle.ops.BitAnd,org.saddle.Vec[Int],org.saddle.Vec[Int],org.saddle.Vec[Int]]", "kind" : "implicit val"}, {"label" : "vecVec_Copy_LI_BitAnd", "tail" : ": BinOp[BitAnd, Vec[Long], Vec[Int], Vec[Long]]", "member" : "org.saddle.macros.BinOpVecVecCopy.vecVec_Copy_LI_BitAnd", "link" : "org\/saddle\/macros\/BinOpVecVecCopy.html#vecVec_Copy_LI_BitAnd:org.saddle.ops.BinOp[org.saddle.ops.BitAnd,org.saddle.Vec[Long],org.saddle.Vec[Int],org.saddle.Vec[Long]]", "kind" : "implicit val"}, {"label" : "vecVec_Copy_LL_BitAnd", "tail" : ": BinOp[BitAnd, Vec[Long], Vec[Long], Vec[Long]]", "member" : "org.saddle.macros.BinOpVecVecCopy.vecVec_Copy_LL_BitAnd", "link" : "org\/saddle\/macros\/BinOpVecVecCopy.html#vecVec_Copy_LL_BitAnd:org.saddle.ops.BinOp[org.saddle.ops.BitAnd,org.saddle.Vec[Long],org.saddle.Vec[Long],org.saddle.Vec[Long]]", "kind" : "implicit val"}, {"label" : "vecVec_Copy_II_Mod", "tail" : ": BinOp[Mod, Vec[Int], Vec[Int], Vec[Int]]", "member" : "org.saddle.macros.BinOpVecVecCopy.vecVec_Copy_II_Mod", "link" : "org\/saddle\/macros\/BinOpVecVecCopy.html#vecVec_Copy_II_Mod:org.saddle.ops.BinOp[org.saddle.ops.Mod,org.saddle.Vec[Int],org.saddle.Vec[Int],org.saddle.Vec[Int]]", "kind" : "implicit val"}, {"label" : "vecVec_Copy_IL_Mod", "tail" : ": BinOp[Mod, Vec[Int], Vec[Long], Vec[Long]]", "member" : "org.saddle.macros.BinOpVecVecCopy.vecVec_Copy_IL_Mod", "link" : "org\/saddle\/macros\/BinOpVecVecCopy.html#vecVec_Copy_IL_Mod:org.saddle.ops.BinOp[org.saddle.ops.Mod,org.saddle.Vec[Int],org.saddle.Vec[Long],org.saddle.Vec[Long]]", "kind" : "implicit val"}, {"label" : "vecVec_Copy_LI_Mod", "tail" : ": BinOp[Mod, Vec[Long], Vec[Int], Vec[Long]]", "member" : "org.saddle.macros.BinOpVecVecCopy.vecVec_Copy_LI_Mod", "link" : "org\/saddle\/macros\/BinOpVecVecCopy.html#vecVec_Copy_LI_Mod:org.saddle.ops.BinOp[org.saddle.ops.Mod,org.saddle.Vec[Long],org.saddle.Vec[Int],org.saddle.Vec[Long]]", "kind" : "implicit val"}, {"label" : "vecVec_Copy_LL_Mod", "tail" : ": BinOp[Mod, Vec[Long], Vec[Long], Vec[Long]]", "member" : "org.saddle.macros.BinOpVecVecCopy.vecVec_Copy_LL_Mod", "link" : "org\/saddle\/macros\/BinOpVecVecCopy.html#vecVec_Copy_LL_Mod:org.saddle.ops.BinOp[org.saddle.ops.Mod,org.saddle.Vec[Long],org.saddle.Vec[Long],org.saddle.Vec[Long]]", "kind" : "implicit val"}, {"label" : "vecVec_Copy_ID_Mod", "tail" : ": BinOp[Mod, Vec[Int], Vec[Double], Vec[Double]]", "member" : "org.saddle.macros.BinOpVecVecCopy.vecVec_Copy_ID_Mod", "link" : "org\/saddle\/macros\/BinOpVecVecCopy.html#vecVec_Copy_ID_Mod:org.saddle.ops.BinOp[org.saddle.ops.Mod,org.saddle.Vec[Int],org.saddle.Vec[Double],org.saddle.Vec[Double]]", "kind" : "implicit val"}, {"label" : "vecVec_Copy_DI_Mod", "tail" : ": BinOp[Mod, Vec[Double], Vec[Int], Vec[Double]]", "member" : "org.saddle.macros.BinOpVecVecCopy.vecVec_Copy_DI_Mod", "link" : "org\/saddle\/macros\/BinOpVecVecCopy.html#vecVec_Copy_DI_Mod:org.saddle.ops.BinOp[org.saddle.ops.Mod,org.saddle.Vec[Double],org.saddle.Vec[Int],org.saddle.Vec[Double]]", "kind" : "implicit val"}, {"label" : "vecVec_Copy_DL_Mod", "tail" : ": BinOp[Mod, Vec[Double], Vec[Long], Vec[Double]]", "member" : "org.saddle.macros.BinOpVecVecCopy.vecVec_Copy_DL_Mod", "link" : "org\/saddle\/macros\/BinOpVecVecCopy.html#vecVec_Copy_DL_Mod:org.saddle.ops.BinOp[org.saddle.ops.Mod,org.saddle.Vec[Double],org.saddle.Vec[Long],org.saddle.Vec[Double]]", "kind" : "implicit val"}, {"label" : "vecVec_Copy_LD_Mod", "tail" : ": BinOp[Mod, Vec[Long], Vec[Double], Vec[Double]]", "member" : "org.saddle.macros.BinOpVecVecCopy.vecVec_Copy_LD_Mod", "link" : "org\/saddle\/macros\/BinOpVecVecCopy.html#vecVec_Copy_LD_Mod:org.saddle.ops.BinOp[org.saddle.ops.Mod,org.saddle.Vec[Long],org.saddle.Vec[Double],org.saddle.Vec[Double]]", "kind" : "implicit val"}, {"label" : "vecVec_Copy_DD_Mod", "tail" : ": BinOp[Mod, Vec[Double], Vec[Double], Vec[Double]]", "member" : "org.saddle.macros.BinOpVecVecCopy.vecVec_Copy_DD_Mod", "link" : "org\/saddle\/macros\/BinOpVecVecCopy.html#vecVec_Copy_DD_Mod:org.saddle.ops.BinOp[org.saddle.ops.Mod,org.saddle.Vec[Double],org.saddle.Vec[Double],org.saddle.Vec[Double]]", "kind" : "implicit val"}, {"label" : "vecVec_Copy_II_Div", "tail" : ": BinOp[Divide, Vec[Int], Vec[Int], Vec[Int]]", "member" : "org.saddle.macros.BinOpVecVecCopy.vecVec_Copy_II_Div", "link" : "org\/saddle\/macros\/BinOpVecVecCopy.html#vecVec_Copy_II_Div:org.saddle.ops.BinOp[org.saddle.ops.Divide,org.saddle.Vec[Int],org.saddle.Vec[Int],org.saddle.Vec[Int]]", "kind" : "implicit val"}, {"label" : "vecVec_Copy_IL_Div", "tail" : ": BinOp[Divide, Vec[Int], Vec[Long], Vec[Long]]", "member" : "org.saddle.macros.BinOpVecVecCopy.vecVec_Copy_IL_Div", "link" : "org\/saddle\/macros\/BinOpVecVecCopy.html#vecVec_Copy_IL_Div:org.saddle.ops.BinOp[org.saddle.ops.Divide,org.saddle.Vec[Int],org.saddle.Vec[Long],org.saddle.Vec[Long]]", "kind" : "implicit val"}, {"label" : "vecVec_Copy_LI_Div", "tail" : ": BinOp[Divide, Vec[Long], Vec[Int], Vec[Long]]", "member" : "org.saddle.macros.BinOpVecVecCopy.vecVec_Copy_LI_Div", "link" : "org\/saddle\/macros\/BinOpVecVecCopy.html#vecVec_Copy_LI_Div:org.saddle.ops.BinOp[org.saddle.ops.Divide,org.saddle.Vec[Long],org.saddle.Vec[Int],org.saddle.Vec[Long]]", "kind" : "implicit val"}, {"label" : "vecVec_Copy_LL_Div", "tail" : ": BinOp[Divide, Vec[Long], Vec[Long], Vec[Long]]", "member" : "org.saddle.macros.BinOpVecVecCopy.vecVec_Copy_LL_Div", "link" : "org\/saddle\/macros\/BinOpVecVecCopy.html#vecVec_Copy_LL_Div:org.saddle.ops.BinOp[org.saddle.ops.Divide,org.saddle.Vec[Long],org.saddle.Vec[Long],org.saddle.Vec[Long]]", "kind" : "implicit val"}, {"label" : "vecVec_Copy_ID_Div", "tail" : ": BinOp[Divide, Vec[Int], Vec[Double], Vec[Double]]", "member" : "org.saddle.macros.BinOpVecVecCopy.vecVec_Copy_ID_Div", "link" : "org\/saddle\/macros\/BinOpVecVecCopy.html#vecVec_Copy_ID_Div:org.saddle.ops.BinOp[org.saddle.ops.Divide,org.saddle.Vec[Int],org.saddle.Vec[Double],org.saddle.Vec[Double]]", "kind" : "implicit val"}, {"label" : "vecVec_Copy_DI_Div", "tail" : ": BinOp[Divide, Vec[Double], Vec[Int], Vec[Double]]", "member" : "org.saddle.macros.BinOpVecVecCopy.vecVec_Copy_DI_Div", "link" : "org\/saddle\/macros\/BinOpVecVecCopy.html#vecVec_Copy_DI_Div:org.saddle.ops.BinOp[org.saddle.ops.Divide,org.saddle.Vec[Double],org.saddle.Vec[Int],org.saddle.Vec[Double]]", "kind" : "implicit val"}, {"label" : "vecVec_Copy_DL_Div", "tail" : ": BinOp[Divide, Vec[Double], Vec[Long], Vec[Double]]", "member" : "org.saddle.macros.BinOpVecVecCopy.vecVec_Copy_DL_Div", "link" : "org\/saddle\/macros\/BinOpVecVecCopy.html#vecVec_Copy_DL_Div:org.saddle.ops.BinOp[org.saddle.ops.Divide,org.saddle.Vec[Double],org.saddle.Vec[Long],org.saddle.Vec[Double]]", "kind" : "implicit val"}, {"label" : "vecVec_Copy_LD_Div", "tail" : ": BinOp[Divide, Vec[Long], Vec[Double], Vec[Double]]", "member" : "org.saddle.macros.BinOpVecVecCopy.vecVec_Copy_LD_Div", "link" : "org\/saddle\/macros\/BinOpVecVecCopy.html#vecVec_Copy_LD_Div:org.saddle.ops.BinOp[org.saddle.ops.Divide,org.saddle.Vec[Long],org.saddle.Vec[Double],org.saddle.Vec[Double]]", "kind" : "implicit val"}, {"label" : "vecVec_Copy_DD_Div", "tail" : ": BinOp[Divide, Vec[Double], Vec[Double], Vec[Double]]", "member" : "org.saddle.macros.BinOpVecVecCopy.vecVec_Copy_DD_Div", "link" : "org\/saddle\/macros\/BinOpVecVecCopy.html#vecVec_Copy_DD_Div:org.saddle.ops.BinOp[org.saddle.ops.Divide,org.saddle.Vec[Double],org.saddle.Vec[Double],org.saddle.Vec[Double]]", "kind" : "implicit val"}, {"label" : "vecVec_Copy_II_Mult", "tail" : ": BinOp[Multiply, Vec[Int], Vec[Int], Vec[Int]]", "member" : "org.saddle.macros.BinOpVecVecCopy.vecVec_Copy_II_Mult", "link" : "org\/saddle\/macros\/BinOpVecVecCopy.html#vecVec_Copy_II_Mult:org.saddle.ops.BinOp[org.saddle.ops.Multiply,org.saddle.Vec[Int],org.saddle.Vec[Int],org.saddle.Vec[Int]]", "kind" : "implicit val"}, {"label" : "vecVec_Copy_IL_Mult", "tail" : ": BinOp[Multiply, Vec[Int], Vec[Long], Vec[Long]]", "member" : "org.saddle.macros.BinOpVecVecCopy.vecVec_Copy_IL_Mult", "link" : "org\/saddle\/macros\/BinOpVecVecCopy.html#vecVec_Copy_IL_Mult:org.saddle.ops.BinOp[org.saddle.ops.Multiply,org.saddle.Vec[Int],org.saddle.Vec[Long],org.saddle.Vec[Long]]", "kind" : "implicit val"}, {"label" : "vecVec_Copy_LI_Mult", "tail" : ": BinOp[Multiply, Vec[Long], Vec[Int], Vec[Long]]", "member" : "org.saddle.macros.BinOpVecVecCopy.vecVec_Copy_LI_Mult", "link" : "org\/saddle\/macros\/BinOpVecVecCopy.html#vecVec_Copy_LI_Mult:org.saddle.ops.BinOp[org.saddle.ops.Multiply,org.saddle.Vec[Long],org.saddle.Vec[Int],org.saddle.Vec[Long]]", "kind" : "implicit val"}, {"label" : "vecVec_Copy_LL_Mult", "tail" : ": BinOp[Multiply, Vec[Long], Vec[Long], Vec[Long]]", "member" : "org.saddle.macros.BinOpVecVecCopy.vecVec_Copy_LL_Mult", "link" : "org\/saddle\/macros\/BinOpVecVecCopy.html#vecVec_Copy_LL_Mult:org.saddle.ops.BinOp[org.saddle.ops.Multiply,org.saddle.Vec[Long],org.saddle.Vec[Long],org.saddle.Vec[Long]]", "kind" : "implicit val"}, {"label" : "vecVec_Copy_ID_Mult", "tail" : ": BinOp[Multiply, Vec[Int], Vec[Double], Vec[Double]]", "member" : "org.saddle.macros.BinOpVecVecCopy.vecVec_Copy_ID_Mult", "link" : "org\/saddle\/macros\/BinOpVecVecCopy.html#vecVec_Copy_ID_Mult:org.saddle.ops.BinOp[org.saddle.ops.Multiply,org.saddle.Vec[Int],org.saddle.Vec[Double],org.saddle.Vec[Double]]", "kind" : "implicit val"}, {"label" : "vecVec_Copy_DI_Mult", "tail" : ": BinOp[Multiply, Vec[Double], Vec[Int], Vec[Double]]", "member" : "org.saddle.macros.BinOpVecVecCopy.vecVec_Copy_DI_Mult", "link" : "org\/saddle\/macros\/BinOpVecVecCopy.html#vecVec_Copy_DI_Mult:org.saddle.ops.BinOp[org.saddle.ops.Multiply,org.saddle.Vec[Double],org.saddle.Vec[Int],org.saddle.Vec[Double]]", "kind" : "implicit val"}, {"label" : "vecVec_Copy_DL_Mult", "tail" : ": BinOp[Multiply, Vec[Double], Vec[Long], Vec[Double]]", "member" : "org.saddle.macros.BinOpVecVecCopy.vecVec_Copy_DL_Mult", "link" : "org\/saddle\/macros\/BinOpVecVecCopy.html#vecVec_Copy_DL_Mult:org.saddle.ops.BinOp[org.saddle.ops.Multiply,org.saddle.Vec[Double],org.saddle.Vec[Long],org.saddle.Vec[Double]]", "kind" : "implicit val"}, {"label" : "vecVec_Copy_LD_Mult", "tail" : ": BinOp[Multiply, Vec[Long], Vec[Double], Vec[Double]]", "member" : "org.saddle.macros.BinOpVecVecCopy.vecVec_Copy_LD_Mult", "link" : "org\/saddle\/macros\/BinOpVecVecCopy.html#vecVec_Copy_LD_Mult:org.saddle.ops.BinOp[org.saddle.ops.Multiply,org.saddle.Vec[Long],org.saddle.Vec[Double],org.saddle.Vec[Double]]", "kind" : "implicit val"}, {"label" : "vecVec_Copy_DD_Mult", "tail" : ": BinOp[Multiply, Vec[Double], Vec[Double], Vec[Double]]", "member" : "org.saddle.macros.BinOpVecVecCopy.vecVec_Copy_DD_Mult", "link" : "org\/saddle\/macros\/BinOpVecVecCopy.html#vecVec_Copy_DD_Mult:org.saddle.ops.BinOp[org.saddle.ops.Multiply,org.saddle.Vec[Double],org.saddle.Vec[Double],org.saddle.Vec[Double]]", "kind" : "implicit val"}, {"label" : "vecVec_Copy_II_Sub", "tail" : ": BinOp[Subtract, Vec[Int], Vec[Int], Vec[Int]]", "member" : "org.saddle.macros.BinOpVecVecCopy.vecVec_Copy_II_Sub", "link" : "org\/saddle\/macros\/BinOpVecVecCopy.html#vecVec_Copy_II_Sub:org.saddle.ops.BinOp[org.saddle.ops.Subtract,org.saddle.Vec[Int],org.saddle.Vec[Int],org.saddle.Vec[Int]]", "kind" : "implicit val"}, {"label" : "vecVec_Copy_IL_Sub", "tail" : ": BinOp[Subtract, Vec[Int], Vec[Long], Vec[Long]]", "member" : "org.saddle.macros.BinOpVecVecCopy.vecVec_Copy_IL_Sub", "link" : "org\/saddle\/macros\/BinOpVecVecCopy.html#vecVec_Copy_IL_Sub:org.saddle.ops.BinOp[org.saddle.ops.Subtract,org.saddle.Vec[Int],org.saddle.Vec[Long],org.saddle.Vec[Long]]", "kind" : "implicit val"}, {"label" : "vecVec_Copy_LI_Sub", "tail" : ": BinOp[Subtract, Vec[Long], Vec[Int], Vec[Long]]", "member" : "org.saddle.macros.BinOpVecVecCopy.vecVec_Copy_LI_Sub", "link" : "org\/saddle\/macros\/BinOpVecVecCopy.html#vecVec_Copy_LI_Sub:org.saddle.ops.BinOp[org.saddle.ops.Subtract,org.saddle.Vec[Long],org.saddle.Vec[Int],org.saddle.Vec[Long]]", "kind" : "implicit val"}, {"label" : "vecVec_Copy_LL_Sub", "tail" : ": BinOp[Subtract, Vec[Long], Vec[Long], Vec[Long]]", "member" : "org.saddle.macros.BinOpVecVecCopy.vecVec_Copy_LL_Sub", "link" : "org\/saddle\/macros\/BinOpVecVecCopy.html#vecVec_Copy_LL_Sub:org.saddle.ops.BinOp[org.saddle.ops.Subtract,org.saddle.Vec[Long],org.saddle.Vec[Long],org.saddle.Vec[Long]]", "kind" : "implicit val"}, {"label" : "vecVec_Copy_ID_Sub", "tail" : ": BinOp[Subtract, Vec[Int], Vec[Double], Vec[Double]]", "member" : "org.saddle.macros.BinOpVecVecCopy.vecVec_Copy_ID_Sub", "link" : "org\/saddle\/macros\/BinOpVecVecCopy.html#vecVec_Copy_ID_Sub:org.saddle.ops.BinOp[org.saddle.ops.Subtract,org.saddle.Vec[Int],org.saddle.Vec[Double],org.saddle.Vec[Double]]", "kind" : "implicit val"}, {"label" : "vecVec_Copy_DI_Sub", "tail" : ": BinOp[Subtract, Vec[Double], Vec[Int], Vec[Double]]", "member" : "org.saddle.macros.BinOpVecVecCopy.vecVec_Copy_DI_Sub", "link" : "org\/saddle\/macros\/BinOpVecVecCopy.html#vecVec_Copy_DI_Sub:org.saddle.ops.BinOp[org.saddle.ops.Subtract,org.saddle.Vec[Double],org.saddle.Vec[Int],org.saddle.Vec[Double]]", "kind" : "implicit val"}, {"label" : "vecVec_Copy_DL_Sub", "tail" : ": BinOp[Subtract, Vec[Double], Vec[Long], Vec[Double]]", "member" : "org.saddle.macros.BinOpVecVecCopy.vecVec_Copy_DL_Sub", "link" : "org\/saddle\/macros\/BinOpVecVecCopy.html#vecVec_Copy_DL_Sub:org.saddle.ops.BinOp[org.saddle.ops.Subtract,org.saddle.Vec[Double],org.saddle.Vec[Long],org.saddle.Vec[Double]]", "kind" : "implicit val"}, {"label" : "vecVec_Copy_LD_Sub", "tail" : ": BinOp[Subtract, Vec[Long], Vec[Double], Vec[Double]]", "member" : "org.saddle.macros.BinOpVecVecCopy.vecVec_Copy_LD_Sub", "link" : "org\/saddle\/macros\/BinOpVecVecCopy.html#vecVec_Copy_LD_Sub:org.saddle.ops.BinOp[org.saddle.ops.Subtract,org.saddle.Vec[Long],org.saddle.Vec[Double],org.saddle.Vec[Double]]", "kind" : "implicit val"}, {"label" : "vecVec_Copy_DD_Sub", "tail" : ": BinOp[Subtract, Vec[Double], Vec[Double], Vec[Double]]", "member" : "org.saddle.macros.BinOpVecVecCopy.vecVec_Copy_DD_Sub", "link" : "org\/saddle\/macros\/BinOpVecVecCopy.html#vecVec_Copy_DD_Sub:org.saddle.ops.BinOp[org.saddle.ops.Subtract,org.saddle.Vec[Double],org.saddle.Vec[Double],org.saddle.Vec[Double]]", "kind" : "implicit val"}, {"label" : "vecVec_Copy_II_Power", "tail" : ": BinOp[Power, Vec[Int], Vec[Int], Vec[Int]]", "member" : "org.saddle.macros.BinOpVecVecCopy.vecVec_Copy_II_Power", "link" : "org\/saddle\/macros\/BinOpVecVecCopy.html#vecVec_Copy_II_Power:org.saddle.ops.BinOp[org.saddle.ops.Power,org.saddle.Vec[Int],org.saddle.Vec[Int],org.saddle.Vec[Int]]", "kind" : "implicit val"}, {"label" : "vecVec_Copy_IL_Power", "tail" : ": BinOp[Power, Vec[Int], Vec[Long], Vec[Long]]", "member" : "org.saddle.macros.BinOpVecVecCopy.vecVec_Copy_IL_Power", "link" : "org\/saddle\/macros\/BinOpVecVecCopy.html#vecVec_Copy_IL_Power:org.saddle.ops.BinOp[org.saddle.ops.Power,org.saddle.Vec[Int],org.saddle.Vec[Long],org.saddle.Vec[Long]]", "kind" : "implicit val"}, {"label" : "vecVec_Copy_LI_Power", "tail" : ": BinOp[Power, Vec[Long], Vec[Int], Vec[Long]]", "member" : "org.saddle.macros.BinOpVecVecCopy.vecVec_Copy_LI_Power", "link" : "org\/saddle\/macros\/BinOpVecVecCopy.html#vecVec_Copy_LI_Power:org.saddle.ops.BinOp[org.saddle.ops.Power,org.saddle.Vec[Long],org.saddle.Vec[Int],org.saddle.Vec[Long]]", "kind" : "implicit val"}, {"label" : "vecVec_Copy_LL_Power", "tail" : ": BinOp[Power, Vec[Long], Vec[Long], Vec[Long]]", "member" : "org.saddle.macros.BinOpVecVecCopy.vecVec_Copy_LL_Power", "link" : "org\/saddle\/macros\/BinOpVecVecCopy.html#vecVec_Copy_LL_Power:org.saddle.ops.BinOp[org.saddle.ops.Power,org.saddle.Vec[Long],org.saddle.Vec[Long],org.saddle.Vec[Long]]", "kind" : "implicit val"}, {"label" : "vecVec_Copy_ID_Power", "tail" : ": BinOp[Power, Vec[Int], Vec[Double], Vec[Double]]", "member" : "org.saddle.macros.BinOpVecVecCopy.vecVec_Copy_ID_Power", "link" : "org\/saddle\/macros\/BinOpVecVecCopy.html#vecVec_Copy_ID_Power:org.saddle.ops.BinOp[org.saddle.ops.Power,org.saddle.Vec[Int],org.saddle.Vec[Double],org.saddle.Vec[Double]]", "kind" : "implicit val"}, {"label" : "vecVec_Copy_DI_Power", "tail" : ": BinOp[Power, Vec[Double], Vec[Int], Vec[Double]]", "member" : "org.saddle.macros.BinOpVecVecCopy.vecVec_Copy_DI_Power", "link" : "org\/saddle\/macros\/BinOpVecVecCopy.html#vecVec_Copy_DI_Power:org.saddle.ops.BinOp[org.saddle.ops.Power,org.saddle.Vec[Double],org.saddle.Vec[Int],org.saddle.Vec[Double]]", "kind" : "implicit val"}, {"label" : "vecVec_Copy_DL_Power", "tail" : ": BinOp[Power, Vec[Double], Vec[Long], Vec[Double]]", "member" : "org.saddle.macros.BinOpVecVecCopy.vecVec_Copy_DL_Power", "link" : "org\/saddle\/macros\/BinOpVecVecCopy.html#vecVec_Copy_DL_Power:org.saddle.ops.BinOp[org.saddle.ops.Power,org.saddle.Vec[Double],org.saddle.Vec[Long],org.saddle.Vec[Double]]", "kind" : "implicit val"}, {"label" : "vecVec_Copy_LD_Power", "tail" : ": BinOp[Power, Vec[Long], Vec[Double], Vec[Double]]", "member" : "org.saddle.macros.BinOpVecVecCopy.vecVec_Copy_LD_Power", "link" : "org\/saddle\/macros\/BinOpVecVecCopy.html#vecVec_Copy_LD_Power:org.saddle.ops.BinOp[org.saddle.ops.Power,org.saddle.Vec[Long],org.saddle.Vec[Double],org.saddle.Vec[Double]]", "kind" : "implicit val"}, {"label" : "vecVec_Copy_DD_Power", "tail" : ": BinOp[Power, Vec[Double], Vec[Double], Vec[Double]]", "member" : "org.saddle.macros.BinOpVecVecCopy.vecVec_Copy_DD_Power", "link" : "org\/saddle\/macros\/BinOpVecVecCopy.html#vecVec_Copy_DD_Power:org.saddle.ops.BinOp[org.saddle.ops.Power,org.saddle.Vec[Double],org.saddle.Vec[Double],org.saddle.Vec[Double]]", "kind" : "implicit val"}, {"label" : "vecVec_Copy_II_Add", "tail" : ": BinOp[Add, Vec[Int], Vec[Int], Vec[Int]]", "member" : "org.saddle.macros.BinOpVecVecCopy.vecVec_Copy_II_Add", "link" : "org\/saddle\/macros\/BinOpVecVecCopy.html#vecVec_Copy_II_Add:org.saddle.ops.BinOp[org.saddle.ops.Add,org.saddle.Vec[Int],org.saddle.Vec[Int],org.saddle.Vec[Int]]", "kind" : "implicit val"}, {"label" : "vecVec_Copy_IL_Add", "tail" : ": BinOp[Add, Vec[Int], Vec[Long], Vec[Long]]", "member" : "org.saddle.macros.BinOpVecVecCopy.vecVec_Copy_IL_Add", "link" : "org\/saddle\/macros\/BinOpVecVecCopy.html#vecVec_Copy_IL_Add:org.saddle.ops.BinOp[org.saddle.ops.Add,org.saddle.Vec[Int],org.saddle.Vec[Long],org.saddle.Vec[Long]]", "kind" : "implicit val"}, {"label" : "vecVec_Copy_LI_Add", "tail" : ": BinOp[Add, Vec[Long], Vec[Int], Vec[Long]]", "member" : "org.saddle.macros.BinOpVecVecCopy.vecVec_Copy_LI_Add", "link" : "org\/saddle\/macros\/BinOpVecVecCopy.html#vecVec_Copy_LI_Add:org.saddle.ops.BinOp[org.saddle.ops.Add,org.saddle.Vec[Long],org.saddle.Vec[Int],org.saddle.Vec[Long]]", "kind" : "implicit val"}, {"label" : "vecVec_Copy_LL_Add", "tail" : ": BinOp[Add, Vec[Long], Vec[Long], Vec[Long]]", "member" : "org.saddle.macros.BinOpVecVecCopy.vecVec_Copy_LL_Add", "link" : "org\/saddle\/macros\/BinOpVecVecCopy.html#vecVec_Copy_LL_Add:org.saddle.ops.BinOp[org.saddle.ops.Add,org.saddle.Vec[Long],org.saddle.Vec[Long],org.saddle.Vec[Long]]", "kind" : "implicit val"}, {"label" : "vecVec_Copy_ID_Add", "tail" : ": BinOp[Add, Vec[Int], Vec[Double], Vec[Double]]", "member" : "org.saddle.macros.BinOpVecVecCopy.vecVec_Copy_ID_Add", "link" : "org\/saddle\/macros\/BinOpVecVecCopy.html#vecVec_Copy_ID_Add:org.saddle.ops.BinOp[org.saddle.ops.Add,org.saddle.Vec[Int],org.saddle.Vec[Double],org.saddle.Vec[Double]]", "kind" : "implicit val"}, {"label" : "vecVec_Copy_DI_Add", "tail" : ": BinOp[Add, Vec[Double], Vec[Int], Vec[Double]]", "member" : "org.saddle.macros.BinOpVecVecCopy.vecVec_Copy_DI_Add", "link" : "org\/saddle\/macros\/BinOpVecVecCopy.html#vecVec_Copy_DI_Add:org.saddle.ops.BinOp[org.saddle.ops.Add,org.saddle.Vec[Double],org.saddle.Vec[Int],org.saddle.Vec[Double]]", "kind" : "implicit val"}, {"label" : "vecVec_Copy_DL_Add", "tail" : ": BinOp[Add, Vec[Double], Vec[Long], Vec[Double]]", "member" : "org.saddle.macros.BinOpVecVecCopy.vecVec_Copy_DL_Add", "link" : "org\/saddle\/macros\/BinOpVecVecCopy.html#vecVec_Copy_DL_Add:org.saddle.ops.BinOp[org.saddle.ops.Add,org.saddle.Vec[Double],org.saddle.Vec[Long],org.saddle.Vec[Double]]", "kind" : "implicit val"}, {"label" : "vecVec_Copy_LD_Add", "tail" : ": BinOp[Add, Vec[Long], Vec[Double], Vec[Double]]", "member" : "org.saddle.macros.BinOpVecVecCopy.vecVec_Copy_LD_Add", "link" : "org\/saddle\/macros\/BinOpVecVecCopy.html#vecVec_Copy_LD_Add:org.saddle.ops.BinOp[org.saddle.ops.Add,org.saddle.Vec[Long],org.saddle.Vec[Double],org.saddle.Vec[Double]]", "kind" : "implicit val"}, {"label" : "vecVec_Copy_DD_Add", "tail" : ": BinOp[Add, Vec[Double], Vec[Double], Vec[Double]]", "member" : "org.saddle.macros.BinOpVecVecCopy.vecVec_Copy_DD_Add", "link" : "org\/saddle\/macros\/BinOpVecVecCopy.html#vecVec_Copy_DD_Add:org.saddle.ops.BinOp[org.saddle.ops.Add,org.saddle.Vec[Double],org.saddle.Vec[Double],org.saddle.Vec[Double]]", "kind" : "implicit val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/saddle\/macros\/BinOpVecVecCopy.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/saddle\/macros\/BinOpVecVecCopy.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/saddle\/macros\/BinOpVecVecCopy.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/saddle\/macros\/BinOpVecVecCopy.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/saddle\/macros\/BinOpVecVecCopy.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/saddle\/macros\/BinOpVecVecCopy.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/saddle\/macros\/BinOpVecVecCopy.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/macros\/BinOpVecVecCopy.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/macros\/BinOpVecVecCopy.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/macros\/BinOpVecVecCopy.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/saddle\/macros\/BinOpVecVecCopy.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/saddle\/macros\/BinOpVecVecCopy.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/saddle\/macros\/BinOpVecVecCopy.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/saddle\/macros\/BinOpVecVecCopy.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/saddle\/macros\/BinOpVecVecCopy.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/saddle\/macros\/BinOpVecVecCopy.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "org\/saddle\/macros\/BinOpVecVecCopy.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/saddle\/macros\/BinOpVecVecCopy.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/saddle\/macros\/BinOpVecVecCopy.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}, {"name" : "org.saddle.macros.BinOpVecVecInPlace", "trait" : "org\/saddle\/macros\/BinOpVecVecInPlace.html", "kind" : "trait", "members_trait" : [{"label" : "vecVec_BB_Xor", "tail" : ": BinOpInPlace[XorOp, Vec[Boolean], Vec[Boolean]]", "member" : "org.saddle.macros.BinOpVecVecInPlace.vecVec_BB_Xor", "link" : "org\/saddle\/macros\/BinOpVecVecInPlace.html#vecVec_BB_Xor:org.saddle.ops.BinOpInPlace[org.saddle.ops.XorOp,org.saddle.Vec[Boolean],org.saddle.Vec[Boolean]]", "kind" : "implicit val"}, {"label" : "vecVec_BB_Or", "tail" : ": BinOpInPlace[OrOp, Vec[Boolean], Vec[Boolean]]", "member" : "org.saddle.macros.BinOpVecVecInPlace.vecVec_BB_Or", "link" : "org\/saddle\/macros\/BinOpVecVecInPlace.html#vecVec_BB_Or:org.saddle.ops.BinOpInPlace[org.saddle.ops.OrOp,org.saddle.Vec[Boolean],org.saddle.Vec[Boolean]]", "kind" : "implicit val"}, {"label" : "vecVec_BB_And", "tail" : ": BinOpInPlace[AndOp, Vec[Boolean], Vec[Boolean]]", "member" : "org.saddle.macros.BinOpVecVecInPlace.vecVec_BB_And", "link" : "org\/saddle\/macros\/BinOpVecVecInPlace.html#vecVec_BB_And:org.saddle.ops.BinOpInPlace[org.saddle.ops.AndOp,org.saddle.Vec[Boolean],org.saddle.Vec[Boolean]]", "kind" : "implicit val"}, {"label" : "vecVecIP_BB_EQ", "tail" : ": BinOpInPlace[EqOp, Vec[Boolean], Vec[Boolean]]", "member" : "org.saddle.macros.BinOpVecVecInPlace.vecVecIP_BB_EQ", "link" : "org\/saddle\/macros\/BinOpVecVecInPlace.html#vecVecIP_BB_EQ:org.saddle.ops.BinOpInPlace[org.saddle.ops.EqOp,org.saddle.Vec[Boolean],org.saddle.Vec[Boolean]]", "kind" : "implicit val"}, {"label" : "vecVecIP_BB_NEQ", "tail" : ": BinOpInPlace[NeqOp, Vec[Boolean], Vec[Boolean]]", "member" : "org.saddle.macros.BinOpVecVecInPlace.vecVecIP_BB_NEQ", "link" : "org\/saddle\/macros\/BinOpVecVecInPlace.html#vecVecIP_BB_NEQ:org.saddle.ops.BinOpInPlace[org.saddle.ops.NeqOp,org.saddle.Vec[Boolean],org.saddle.Vec[Boolean]]", "kind" : "implicit val"}, {"label" : "vecVecIP_BB_LTE", "tail" : ": BinOpInPlace[LteOp, Vec[Boolean], Vec[Boolean]]", "member" : "org.saddle.macros.BinOpVecVecInPlace.vecVecIP_BB_LTE", "link" : "org\/saddle\/macros\/BinOpVecVecInPlace.html#vecVecIP_BB_LTE:org.saddle.ops.BinOpInPlace[org.saddle.ops.LteOp,org.saddle.Vec[Boolean],org.saddle.Vec[Boolean]]", "kind" : "implicit val"}, {"label" : "vecVecIP_BB_LT", "tail" : ": BinOpInPlace[LtOp, Vec[Boolean], Vec[Boolean]]", "member" : "org.saddle.macros.BinOpVecVecInPlace.vecVecIP_BB_LT", "link" : "org\/saddle\/macros\/BinOpVecVecInPlace.html#vecVecIP_BB_LT:org.saddle.ops.BinOpInPlace[org.saddle.ops.LtOp,org.saddle.Vec[Boolean],org.saddle.Vec[Boolean]]", "kind" : "implicit val"}, {"label" : "vecVecIP_BB_GTE", "tail" : ": BinOpInPlace[GteOp, Vec[Boolean], Vec[Boolean]]", "member" : "org.saddle.macros.BinOpVecVecInPlace.vecVecIP_BB_GTE", "link" : "org\/saddle\/macros\/BinOpVecVecInPlace.html#vecVecIP_BB_GTE:org.saddle.ops.BinOpInPlace[org.saddle.ops.GteOp,org.saddle.Vec[Boolean],org.saddle.Vec[Boolean]]", "kind" : "implicit val"}, {"label" : "vecVecIP_BB_GT", "tail" : ": BinOpInPlace[GtOp, Vec[Boolean], Vec[Boolean]]", "member" : "org.saddle.macros.BinOpVecVecInPlace.vecVecIP_BB_GT", "link" : "org\/saddle\/macros\/BinOpVecVecInPlace.html#vecVecIP_BB_GT:org.saddle.ops.BinOpInPlace[org.saddle.ops.GtOp,org.saddle.Vec[Boolean],org.saddle.Vec[Boolean]]", "kind" : "implicit val"}, {"label" : "vecVecIP_II_BitUshr", "tail" : ": BinOpInPlace[BitUShr, Vec[Int], Vec[Int]]", "member" : "org.saddle.macros.BinOpVecVecInPlace.vecVecIP_II_BitUshr", "link" : "org\/saddle\/macros\/BinOpVecVecInPlace.html#vecVecIP_II_BitUshr:org.saddle.ops.BinOpInPlace[org.saddle.ops.BitUShr,org.saddle.Vec[Int],org.saddle.Vec[Int]]", "kind" : "implicit val"}, {"label" : "vecVecIP_LI_BitUshr", "tail" : ": BinOpInPlace[BitUShr, Vec[Long], Vec[Int]]", "member" : "org.saddle.macros.BinOpVecVecInPlace.vecVecIP_LI_BitUshr", "link" : "org\/saddle\/macros\/BinOpVecVecInPlace.html#vecVecIP_LI_BitUshr:org.saddle.ops.BinOpInPlace[org.saddle.ops.BitUShr,org.saddle.Vec[Long],org.saddle.Vec[Int]]", "kind" : "implicit val"}, {"label" : "vecVecIP_LL_BitUshr", "tail" : ": BinOpInPlace[BitUShr, Vec[Long], Vec[Long]]", "member" : "org.saddle.macros.BinOpVecVecInPlace.vecVecIP_LL_BitUshr", "link" : "org\/saddle\/macros\/BinOpVecVecInPlace.html#vecVecIP_LL_BitUshr:org.saddle.ops.BinOpInPlace[org.saddle.ops.BitUShr,org.saddle.Vec[Long],org.saddle.Vec[Long]]", "kind" : "implicit val"}, {"label" : "vecVecIP_II_BitShr", "tail" : ": BinOpInPlace[BitShr, Vec[Int], Vec[Int]]", "member" : "org.saddle.macros.BinOpVecVecInPlace.vecVecIP_II_BitShr", "link" : "org\/saddle\/macros\/BinOpVecVecInPlace.html#vecVecIP_II_BitShr:org.saddle.ops.BinOpInPlace[org.saddle.ops.BitShr,org.saddle.Vec[Int],org.saddle.Vec[Int]]", "kind" : "implicit val"}, {"label" : "vecVecIP_LI_BitShr", "tail" : ": BinOpInPlace[BitShr, Vec[Long], Vec[Int]]", "member" : "org.saddle.macros.BinOpVecVecInPlace.vecVecIP_LI_BitShr", "link" : "org\/saddle\/macros\/BinOpVecVecInPlace.html#vecVecIP_LI_BitShr:org.saddle.ops.BinOpInPlace[org.saddle.ops.BitShr,org.saddle.Vec[Long],org.saddle.Vec[Int]]", "kind" : "implicit val"}, {"label" : "vecVecIP_LL_BitShr", "tail" : ": BinOpInPlace[BitShr, Vec[Long], Vec[Long]]", "member" : "org.saddle.macros.BinOpVecVecInPlace.vecVecIP_LL_BitShr", "link" : "org\/saddle\/macros\/BinOpVecVecInPlace.html#vecVecIP_LL_BitShr:org.saddle.ops.BinOpInPlace[org.saddle.ops.BitShr,org.saddle.Vec[Long],org.saddle.Vec[Long]]", "kind" : "implicit val"}, {"label" : "vecVecIP_II_BitShl", "tail" : ": BinOpInPlace[BitShl, Vec[Int], Vec[Int]]", "member" : "org.saddle.macros.BinOpVecVecInPlace.vecVecIP_II_BitShl", "link" : "org\/saddle\/macros\/BinOpVecVecInPlace.html#vecVecIP_II_BitShl:org.saddle.ops.BinOpInPlace[org.saddle.ops.BitShl,org.saddle.Vec[Int],org.saddle.Vec[Int]]", "kind" : "implicit val"}, {"label" : "vecVecIP_LI_BitShl", "tail" : ": BinOpInPlace[BitShl, Vec[Long], Vec[Int]]", "member" : "org.saddle.macros.BinOpVecVecInPlace.vecVecIP_LI_BitShl", "link" : "org\/saddle\/macros\/BinOpVecVecInPlace.html#vecVecIP_LI_BitShl:org.saddle.ops.BinOpInPlace[org.saddle.ops.BitShl,org.saddle.Vec[Long],org.saddle.Vec[Int]]", "kind" : "implicit val"}, {"label" : "vecVecIP_LL_BitShl", "tail" : ": BinOpInPlace[BitShl, Vec[Long], Vec[Long]]", "member" : "org.saddle.macros.BinOpVecVecInPlace.vecVecIP_LL_BitShl", "link" : "org\/saddle\/macros\/BinOpVecVecInPlace.html#vecVecIP_LL_BitShl:org.saddle.ops.BinOpInPlace[org.saddle.ops.BitShl,org.saddle.Vec[Long],org.saddle.Vec[Long]]", "kind" : "implicit val"}, {"label" : "vecVecIP_II_BitXor", "tail" : ": BinOpInPlace[BitXor, Vec[Int], Vec[Int]]", "member" : "org.saddle.macros.BinOpVecVecInPlace.vecVecIP_II_BitXor", "link" : "org\/saddle\/macros\/BinOpVecVecInPlace.html#vecVecIP_II_BitXor:org.saddle.ops.BinOpInPlace[org.saddle.ops.BitXor,org.saddle.Vec[Int],org.saddle.Vec[Int]]", "kind" : "implicit val"}, {"label" : "vecVecIP_LI_BitXor", "tail" : ": BinOpInPlace[BitXor, Vec[Long], Vec[Int]]", "member" : "org.saddle.macros.BinOpVecVecInPlace.vecVecIP_LI_BitXor", "link" : "org\/saddle\/macros\/BinOpVecVecInPlace.html#vecVecIP_LI_BitXor:org.saddle.ops.BinOpInPlace[org.saddle.ops.BitXor,org.saddle.Vec[Long],org.saddle.Vec[Int]]", "kind" : "implicit val"}, {"label" : "vecVecIP_LL_BitXor", "tail" : ": BinOpInPlace[BitXor, Vec[Long], Vec[Long]]", "member" : "org.saddle.macros.BinOpVecVecInPlace.vecVecIP_LL_BitXor", "link" : "org\/saddle\/macros\/BinOpVecVecInPlace.html#vecVecIP_LL_BitXor:org.saddle.ops.BinOpInPlace[org.saddle.ops.BitXor,org.saddle.Vec[Long],org.saddle.Vec[Long]]", "kind" : "implicit val"}, {"label" : "vecVecIP_II_BitOr", "tail" : ": BinOpInPlace[BitOr, Vec[Int], Vec[Int]]", "member" : "org.saddle.macros.BinOpVecVecInPlace.vecVecIP_II_BitOr", "link" : "org\/saddle\/macros\/BinOpVecVecInPlace.html#vecVecIP_II_BitOr:org.saddle.ops.BinOpInPlace[org.saddle.ops.BitOr,org.saddle.Vec[Int],org.saddle.Vec[Int]]", "kind" : "implicit val"}, {"label" : "vecVecIP_LI_BitOr", "tail" : ": BinOpInPlace[BitOr, Vec[Long], Vec[Int]]", "member" : "org.saddle.macros.BinOpVecVecInPlace.vecVecIP_LI_BitOr", "link" : "org\/saddle\/macros\/BinOpVecVecInPlace.html#vecVecIP_LI_BitOr:org.saddle.ops.BinOpInPlace[org.saddle.ops.BitOr,org.saddle.Vec[Long],org.saddle.Vec[Int]]", "kind" : "implicit val"}, {"label" : "vecVecIP_LL_BitOr", "tail" : ": BinOpInPlace[BitOr, Vec[Long], Vec[Long]]", "member" : "org.saddle.macros.BinOpVecVecInPlace.vecVecIP_LL_BitOr", "link" : "org\/saddle\/macros\/BinOpVecVecInPlace.html#vecVecIP_LL_BitOr:org.saddle.ops.BinOpInPlace[org.saddle.ops.BitOr,org.saddle.Vec[Long],org.saddle.Vec[Long]]", "kind" : "implicit val"}, {"label" : "vecVecIP_II_BitAnd", "tail" : ": BinOpInPlace[BitAnd, Vec[Int], Vec[Int]]", "member" : "org.saddle.macros.BinOpVecVecInPlace.vecVecIP_II_BitAnd", "link" : "org\/saddle\/macros\/BinOpVecVecInPlace.html#vecVecIP_II_BitAnd:org.saddle.ops.BinOpInPlace[org.saddle.ops.BitAnd,org.saddle.Vec[Int],org.saddle.Vec[Int]]", "kind" : "implicit val"}, {"label" : "vecVecIP_LI_BitAnd", "tail" : ": BinOpInPlace[BitAnd, Vec[Long], Vec[Int]]", "member" : "org.saddle.macros.BinOpVecVecInPlace.vecVecIP_LI_BitAnd", "link" : "org\/saddle\/macros\/BinOpVecVecInPlace.html#vecVecIP_LI_BitAnd:org.saddle.ops.BinOpInPlace[org.saddle.ops.BitAnd,org.saddle.Vec[Long],org.saddle.Vec[Int]]", "kind" : "implicit val"}, {"label" : "vecVecIP_LL_BitAnd", "tail" : ": BinOpInPlace[BitAnd, Vec[Long], Vec[Long]]", "member" : "org.saddle.macros.BinOpVecVecInPlace.vecVecIP_LL_BitAnd", "link" : "org\/saddle\/macros\/BinOpVecVecInPlace.html#vecVecIP_LL_BitAnd:org.saddle.ops.BinOpInPlace[org.saddle.ops.BitAnd,org.saddle.Vec[Long],org.saddle.Vec[Long]]", "kind" : "implicit val"}, {"label" : "vecVecIP_II_Mod", "tail" : ": BinOpInPlace[Mod, Vec[Int], Vec[Int]]", "member" : "org.saddle.macros.BinOpVecVecInPlace.vecVecIP_II_Mod", "link" : "org\/saddle\/macros\/BinOpVecVecInPlace.html#vecVecIP_II_Mod:org.saddle.ops.BinOpInPlace[org.saddle.ops.Mod,org.saddle.Vec[Int],org.saddle.Vec[Int]]", "kind" : "implicit val"}, {"label" : "vecVecIP_LI_Mod", "tail" : ": BinOpInPlace[Mod, Vec[Long], Vec[Int]]", "member" : "org.saddle.macros.BinOpVecVecInPlace.vecVecIP_LI_Mod", "link" : "org\/saddle\/macros\/BinOpVecVecInPlace.html#vecVecIP_LI_Mod:org.saddle.ops.BinOpInPlace[org.saddle.ops.Mod,org.saddle.Vec[Long],org.saddle.Vec[Int]]", "kind" : "implicit val"}, {"label" : "vecVecIP_LL_Mod", "tail" : ": BinOpInPlace[Mod, Vec[Long], Vec[Long]]", "member" : "org.saddle.macros.BinOpVecVecInPlace.vecVecIP_LL_Mod", "link" : "org\/saddle\/macros\/BinOpVecVecInPlace.html#vecVecIP_LL_Mod:org.saddle.ops.BinOpInPlace[org.saddle.ops.Mod,org.saddle.Vec[Long],org.saddle.Vec[Long]]", "kind" : "implicit val"}, {"label" : "vecVecIP_DI_Mod", "tail" : ": BinOpInPlace[Mod, Vec[Double], Vec[Int]]", "member" : "org.saddle.macros.BinOpVecVecInPlace.vecVecIP_DI_Mod", "link" : "org\/saddle\/macros\/BinOpVecVecInPlace.html#vecVecIP_DI_Mod:org.saddle.ops.BinOpInPlace[org.saddle.ops.Mod,org.saddle.Vec[Double],org.saddle.Vec[Int]]", "kind" : "implicit val"}, {"label" : "vecVecIP_DL_Mod", "tail" : ": BinOpInPlace[Mod, Vec[Double], Vec[Long]]", "member" : "org.saddle.macros.BinOpVecVecInPlace.vecVecIP_DL_Mod", "link" : "org\/saddle\/macros\/BinOpVecVecInPlace.html#vecVecIP_DL_Mod:org.saddle.ops.BinOpInPlace[org.saddle.ops.Mod,org.saddle.Vec[Double],org.saddle.Vec[Long]]", "kind" : "implicit val"}, {"label" : "vecVecIP_DD_Mod", "tail" : ": BinOpInPlace[Mod, Vec[Double], Vec[Double]]", "member" : "org.saddle.macros.BinOpVecVecInPlace.vecVecIP_DD_Mod", "link" : "org\/saddle\/macros\/BinOpVecVecInPlace.html#vecVecIP_DD_Mod:org.saddle.ops.BinOpInPlace[org.saddle.ops.Mod,org.saddle.Vec[Double],org.saddle.Vec[Double]]", "kind" : "implicit val"}, {"label" : "vecVecIP_II_Div", "tail" : ": BinOpInPlace[Divide, Vec[Int], Vec[Int]]", "member" : "org.saddle.macros.BinOpVecVecInPlace.vecVecIP_II_Div", "link" : "org\/saddle\/macros\/BinOpVecVecInPlace.html#vecVecIP_II_Div:org.saddle.ops.BinOpInPlace[org.saddle.ops.Divide,org.saddle.Vec[Int],org.saddle.Vec[Int]]", "kind" : "implicit val"}, {"label" : "vecVecIP_LI_Div", "tail" : ": BinOpInPlace[Divide, Vec[Long], Vec[Int]]", "member" : "org.saddle.macros.BinOpVecVecInPlace.vecVecIP_LI_Div", "link" : "org\/saddle\/macros\/BinOpVecVecInPlace.html#vecVecIP_LI_Div:org.saddle.ops.BinOpInPlace[org.saddle.ops.Divide,org.saddle.Vec[Long],org.saddle.Vec[Int]]", "kind" : "implicit val"}, {"label" : "vecVecIP_LL_Div", "tail" : ": BinOpInPlace[Divide, Vec[Long], Vec[Long]]", "member" : "org.saddle.macros.BinOpVecVecInPlace.vecVecIP_LL_Div", "link" : "org\/saddle\/macros\/BinOpVecVecInPlace.html#vecVecIP_LL_Div:org.saddle.ops.BinOpInPlace[org.saddle.ops.Divide,org.saddle.Vec[Long],org.saddle.Vec[Long]]", "kind" : "implicit val"}, {"label" : "vecVecIP_DI_Div", "tail" : ": BinOpInPlace[Divide, Vec[Double], Vec[Int]]", "member" : "org.saddle.macros.BinOpVecVecInPlace.vecVecIP_DI_Div", "link" : "org\/saddle\/macros\/BinOpVecVecInPlace.html#vecVecIP_DI_Div:org.saddle.ops.BinOpInPlace[org.saddle.ops.Divide,org.saddle.Vec[Double],org.saddle.Vec[Int]]", "kind" : "implicit val"}, {"label" : "vecVecIP_DL_Div", "tail" : ": BinOpInPlace[Divide, Vec[Double], Vec[Long]]", "member" : "org.saddle.macros.BinOpVecVecInPlace.vecVecIP_DL_Div", "link" : "org\/saddle\/macros\/BinOpVecVecInPlace.html#vecVecIP_DL_Div:org.saddle.ops.BinOpInPlace[org.saddle.ops.Divide,org.saddle.Vec[Double],org.saddle.Vec[Long]]", "kind" : "implicit val"}, {"label" : "vecVecIP_DD_Div", "tail" : ": BinOpInPlace[Divide, Vec[Double], Vec[Double]]", "member" : "org.saddle.macros.BinOpVecVecInPlace.vecVecIP_DD_Div", "link" : "org\/saddle\/macros\/BinOpVecVecInPlace.html#vecVecIP_DD_Div:org.saddle.ops.BinOpInPlace[org.saddle.ops.Divide,org.saddle.Vec[Double],org.saddle.Vec[Double]]", "kind" : "implicit val"}, {"label" : "vecVecIP_II_Mult", "tail" : ": BinOpInPlace[Multiply, Vec[Int], Vec[Int]]", "member" : "org.saddle.macros.BinOpVecVecInPlace.vecVecIP_II_Mult", "link" : "org\/saddle\/macros\/BinOpVecVecInPlace.html#vecVecIP_II_Mult:org.saddle.ops.BinOpInPlace[org.saddle.ops.Multiply,org.saddle.Vec[Int],org.saddle.Vec[Int]]", "kind" : "implicit val"}, {"label" : "vecVecIP_LI_Mult", "tail" : ": BinOpInPlace[Multiply, Vec[Long], Vec[Int]]", "member" : "org.saddle.macros.BinOpVecVecInPlace.vecVecIP_LI_Mult", "link" : "org\/saddle\/macros\/BinOpVecVecInPlace.html#vecVecIP_LI_Mult:org.saddle.ops.BinOpInPlace[org.saddle.ops.Multiply,org.saddle.Vec[Long],org.saddle.Vec[Int]]", "kind" : "implicit val"}, {"label" : "vecVecIP_LL_Mult", "tail" : ": BinOpInPlace[Multiply, Vec[Long], Vec[Long]]", "member" : "org.saddle.macros.BinOpVecVecInPlace.vecVecIP_LL_Mult", "link" : "org\/saddle\/macros\/BinOpVecVecInPlace.html#vecVecIP_LL_Mult:org.saddle.ops.BinOpInPlace[org.saddle.ops.Multiply,org.saddle.Vec[Long],org.saddle.Vec[Long]]", "kind" : "implicit val"}, {"label" : "vecVecIP_DI_Mult", "tail" : ": BinOpInPlace[Multiply, Vec[Double], Vec[Int]]", "member" : "org.saddle.macros.BinOpVecVecInPlace.vecVecIP_DI_Mult", "link" : "org\/saddle\/macros\/BinOpVecVecInPlace.html#vecVecIP_DI_Mult:org.saddle.ops.BinOpInPlace[org.saddle.ops.Multiply,org.saddle.Vec[Double],org.saddle.Vec[Int]]", "kind" : "implicit val"}, {"label" : "vecVecIP_DL_Mult", "tail" : ": BinOpInPlace[Multiply, Vec[Double], Vec[Long]]", "member" : "org.saddle.macros.BinOpVecVecInPlace.vecVecIP_DL_Mult", "link" : "org\/saddle\/macros\/BinOpVecVecInPlace.html#vecVecIP_DL_Mult:org.saddle.ops.BinOpInPlace[org.saddle.ops.Multiply,org.saddle.Vec[Double],org.saddle.Vec[Long]]", "kind" : "implicit val"}, {"label" : "vecVecIP_DD_Mult", "tail" : ": BinOpInPlace[Multiply, Vec[Double], Vec[Double]]", "member" : "org.saddle.macros.BinOpVecVecInPlace.vecVecIP_DD_Mult", "link" : "org\/saddle\/macros\/BinOpVecVecInPlace.html#vecVecIP_DD_Mult:org.saddle.ops.BinOpInPlace[org.saddle.ops.Multiply,org.saddle.Vec[Double],org.saddle.Vec[Double]]", "kind" : "implicit val"}, {"label" : "vecVecIP_II_Sub", "tail" : ": BinOpInPlace[Subtract, Vec[Int], Vec[Int]]", "member" : "org.saddle.macros.BinOpVecVecInPlace.vecVecIP_II_Sub", "link" : "org\/saddle\/macros\/BinOpVecVecInPlace.html#vecVecIP_II_Sub:org.saddle.ops.BinOpInPlace[org.saddle.ops.Subtract,org.saddle.Vec[Int],org.saddle.Vec[Int]]", "kind" : "implicit val"}, {"label" : "vecVecIP_LI_Sub", "tail" : ": BinOpInPlace[Subtract, Vec[Long], Vec[Int]]", "member" : "org.saddle.macros.BinOpVecVecInPlace.vecVecIP_LI_Sub", "link" : "org\/saddle\/macros\/BinOpVecVecInPlace.html#vecVecIP_LI_Sub:org.saddle.ops.BinOpInPlace[org.saddle.ops.Subtract,org.saddle.Vec[Long],org.saddle.Vec[Int]]", "kind" : "implicit val"}, {"label" : "vecVecIP_LL_Sub", "tail" : ": BinOpInPlace[Subtract, Vec[Long], Vec[Long]]", "member" : "org.saddle.macros.BinOpVecVecInPlace.vecVecIP_LL_Sub", "link" : "org\/saddle\/macros\/BinOpVecVecInPlace.html#vecVecIP_LL_Sub:org.saddle.ops.BinOpInPlace[org.saddle.ops.Subtract,org.saddle.Vec[Long],org.saddle.Vec[Long]]", "kind" : "implicit val"}, {"label" : "vecVecIP_DI_Sub", "tail" : ": BinOpInPlace[Subtract, Vec[Double], Vec[Int]]", "member" : "org.saddle.macros.BinOpVecVecInPlace.vecVecIP_DI_Sub", "link" : "org\/saddle\/macros\/BinOpVecVecInPlace.html#vecVecIP_DI_Sub:org.saddle.ops.BinOpInPlace[org.saddle.ops.Subtract,org.saddle.Vec[Double],org.saddle.Vec[Int]]", "kind" : "implicit val"}, {"label" : "vecVecIP_DL_Sub", "tail" : ": BinOpInPlace[Subtract, Vec[Double], Vec[Long]]", "member" : "org.saddle.macros.BinOpVecVecInPlace.vecVecIP_DL_Sub", "link" : "org\/saddle\/macros\/BinOpVecVecInPlace.html#vecVecIP_DL_Sub:org.saddle.ops.BinOpInPlace[org.saddle.ops.Subtract,org.saddle.Vec[Double],org.saddle.Vec[Long]]", "kind" : "implicit val"}, {"label" : "vecVecIP_DD_Sub", "tail" : ": BinOpInPlace[Subtract, Vec[Double], Vec[Double]]", "member" : "org.saddle.macros.BinOpVecVecInPlace.vecVecIP_DD_Sub", "link" : "org\/saddle\/macros\/BinOpVecVecInPlace.html#vecVecIP_DD_Sub:org.saddle.ops.BinOpInPlace[org.saddle.ops.Subtract,org.saddle.Vec[Double],org.saddle.Vec[Double]]", "kind" : "implicit val"}, {"label" : "vecVecIP_II_Power", "tail" : ": BinOpInPlace[Power, Vec[Int], Vec[Int]]", "member" : "org.saddle.macros.BinOpVecVecInPlace.vecVecIP_II_Power", "link" : "org\/saddle\/macros\/BinOpVecVecInPlace.html#vecVecIP_II_Power:org.saddle.ops.BinOpInPlace[org.saddle.ops.Power,org.saddle.Vec[Int],org.saddle.Vec[Int]]", "kind" : "implicit val"}, {"label" : "vecVecIP_LI_Power", "tail" : ": BinOpInPlace[Power, Vec[Long], Vec[Int]]", "member" : "org.saddle.macros.BinOpVecVecInPlace.vecVecIP_LI_Power", "link" : "org\/saddle\/macros\/BinOpVecVecInPlace.html#vecVecIP_LI_Power:org.saddle.ops.BinOpInPlace[org.saddle.ops.Power,org.saddle.Vec[Long],org.saddle.Vec[Int]]", "kind" : "implicit val"}, {"label" : "vecVecIP_LL_Power", "tail" : ": BinOpInPlace[Power, Vec[Long], Vec[Long]]", "member" : "org.saddle.macros.BinOpVecVecInPlace.vecVecIP_LL_Power", "link" : "org\/saddle\/macros\/BinOpVecVecInPlace.html#vecVecIP_LL_Power:org.saddle.ops.BinOpInPlace[org.saddle.ops.Power,org.saddle.Vec[Long],org.saddle.Vec[Long]]", "kind" : "implicit val"}, {"label" : "vecVecIP_DI_Power", "tail" : ": BinOpInPlace[Power, Vec[Double], Vec[Int]]", "member" : "org.saddle.macros.BinOpVecVecInPlace.vecVecIP_DI_Power", "link" : "org\/saddle\/macros\/BinOpVecVecInPlace.html#vecVecIP_DI_Power:org.saddle.ops.BinOpInPlace[org.saddle.ops.Power,org.saddle.Vec[Double],org.saddle.Vec[Int]]", "kind" : "implicit val"}, {"label" : "vecVecIP_DL_Power", "tail" : ": BinOpInPlace[Power, Vec[Double], Vec[Long]]", "member" : "org.saddle.macros.BinOpVecVecInPlace.vecVecIP_DL_Power", "link" : "org\/saddle\/macros\/BinOpVecVecInPlace.html#vecVecIP_DL_Power:org.saddle.ops.BinOpInPlace[org.saddle.ops.Power,org.saddle.Vec[Double],org.saddle.Vec[Long]]", "kind" : "implicit val"}, {"label" : "vecVecIP_DD_Power", "tail" : ": BinOpInPlace[Power, Vec[Double], Vec[Double]]", "member" : "org.saddle.macros.BinOpVecVecInPlace.vecVecIP_DD_Power", "link" : "org\/saddle\/macros\/BinOpVecVecInPlace.html#vecVecIP_DD_Power:org.saddle.ops.BinOpInPlace[org.saddle.ops.Power,org.saddle.Vec[Double],org.saddle.Vec[Double]]", "kind" : "implicit val"}, {"label" : "vecVecIP_II_Add", "tail" : ": BinOpInPlace[Add, Vec[Int], Vec[Int]]", "member" : "org.saddle.macros.BinOpVecVecInPlace.vecVecIP_II_Add", "link" : "org\/saddle\/macros\/BinOpVecVecInPlace.html#vecVecIP_II_Add:org.saddle.ops.BinOpInPlace[org.saddle.ops.Add,org.saddle.Vec[Int],org.saddle.Vec[Int]]", "kind" : "implicit val"}, {"label" : "vecVecIP_LI_Add", "tail" : ": BinOpInPlace[Add, Vec[Long], Vec[Int]]", "member" : "org.saddle.macros.BinOpVecVecInPlace.vecVecIP_LI_Add", "link" : "org\/saddle\/macros\/BinOpVecVecInPlace.html#vecVecIP_LI_Add:org.saddle.ops.BinOpInPlace[org.saddle.ops.Add,org.saddle.Vec[Long],org.saddle.Vec[Int]]", "kind" : "implicit val"}, {"label" : "vecVecIP_LL_Add", "tail" : ": BinOpInPlace[Add, Vec[Long], Vec[Long]]", "member" : "org.saddle.macros.BinOpVecVecInPlace.vecVecIP_LL_Add", "link" : "org\/saddle\/macros\/BinOpVecVecInPlace.html#vecVecIP_LL_Add:org.saddle.ops.BinOpInPlace[org.saddle.ops.Add,org.saddle.Vec[Long],org.saddle.Vec[Long]]", "kind" : "implicit val"}, {"label" : "vecVecIP_DI_Add", "tail" : ": BinOpInPlace[Add, Vec[Double], Vec[Int]]", "member" : "org.saddle.macros.BinOpVecVecInPlace.vecVecIP_DI_Add", "link" : "org\/saddle\/macros\/BinOpVecVecInPlace.html#vecVecIP_DI_Add:org.saddle.ops.BinOpInPlace[org.saddle.ops.Add,org.saddle.Vec[Double],org.saddle.Vec[Int]]", "kind" : "implicit val"}, {"label" : "vecVecIP_DL_Add", "tail" : ": BinOpInPlace[Add, Vec[Double], Vec[Long]]", "member" : "org.saddle.macros.BinOpVecVecInPlace.vecVecIP_DL_Add", "link" : "org\/saddle\/macros\/BinOpVecVecInPlace.html#vecVecIP_DL_Add:org.saddle.ops.BinOpInPlace[org.saddle.ops.Add,org.saddle.Vec[Double],org.saddle.Vec[Long]]", "kind" : "implicit val"}, {"label" : "vecVecIP_DD_Add", "tail" : ": BinOpInPlace[Add, Vec[Double], Vec[Double]]", "member" : "org.saddle.macros.BinOpVecVecInPlace.vecVecIP_DD_Add", "link" : "org\/saddle\/macros\/BinOpVecVecInPlace.html#vecVecIP_DD_Add:org.saddle.ops.BinOpInPlace[org.saddle.ops.Add,org.saddle.Vec[Double],org.saddle.Vec[Double]]", "kind" : "implicit val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/saddle\/macros\/BinOpVecVecInPlace.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/saddle\/macros\/BinOpVecVecInPlace.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/saddle\/macros\/BinOpVecVecInPlace.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/saddle\/macros\/BinOpVecVecInPlace.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/saddle\/macros\/BinOpVecVecInPlace.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/saddle\/macros\/BinOpVecVecInPlace.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/saddle\/macros\/BinOpVecVecInPlace.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/macros\/BinOpVecVecInPlace.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/macros\/BinOpVecVecInPlace.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/macros\/BinOpVecVecInPlace.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/saddle\/macros\/BinOpVecVecInPlace.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/saddle\/macros\/BinOpVecVecInPlace.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/saddle\/macros\/BinOpVecVecInPlace.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/saddle\/macros\/BinOpVecVecInPlace.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/saddle\/macros\/BinOpVecVecInPlace.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/saddle\/macros\/BinOpVecVecInPlace.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "org\/saddle\/macros\/BinOpVecVecInPlace.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/saddle\/macros\/BinOpVecVecInPlace.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/saddle\/macros\/BinOpVecVecInPlace.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}], "org.saddle.index" : [{"name" : "org.saddle.index.IndexAny", "shortDescription" : "An implementation of org.saddle.Index generic in type T for which thereis an Ordering[T] and a ST[T] available in the implicit context.", "members_class" : [{"label" : "equals", "tail" : "(o: Any): Boolean", "member" : "org.saddle.index.IndexAny.equals", "link" : "org\/saddle\/index\/IndexAny.html#equals(o:Any):Boolean", "kind" : "def"}, {"label" : "toArray", "tail" : "(): Array[T]", "member" : "org.saddle.index.IndexAny.toArray", "link" : "org\/saddle\/index\/IndexAny.html#toArray:Array[T]", "kind" : "def"}, {"label" : "map", "tail" : "(f: (T) => B)(arg0: ST[B], arg1: ORD[B]): Index[B]", "member" : "org.saddle.index.IndexAny.map", "link" : "org\/saddle\/index\/IndexAny.html#map[B](f:T=>B)(implicitevidence$3:org.saddle.ST[B],implicitevidence$4:org.saddle.ORD[B]):org.saddle.Index[B]", "kind" : "def"}, {"label" : "rsearch", "tail" : "(t: T): Int", "member" : "org.saddle.index.IndexAny.rsearch", "link" : "org\/saddle\/index\/IndexAny.html#rsearch(t:T):Int", "kind" : "def"}, {"label" : "lsearch", "tail" : "(t: T): Int", "member" : "org.saddle.index.IndexAny.lsearch", "link" : "org\/saddle\/index\/IndexAny.html#lsearch(t:T):Int", "kind" : "def"}, {"label" : "slice", "tail" : "(from: Int, until: Int, stride: Int): Index[T]", "member" : "org.saddle.index.IndexAny.slice", "link" : "org\/saddle\/index\/IndexAny.html#slice(from:Int,until:Int,stride:Int):org.saddle.Index[T]", "kind" : "def"}, {"label" : "union", "tail" : "(other: Index[T]): ReIndexer[T]", "member" : "org.saddle.index.IndexAny.union", "link" : "org\/saddle\/index\/IndexAny.html#union(other:org.saddle.Index[T]):org.saddle.index.ReIndexer[T]", "kind" : "def"}, {"label" : "intersect", "tail" : "(other: Index[T]): ReIndexer[T]", "member" : "org.saddle.index.IndexAny.intersect", "link" : "org\/saddle\/index\/IndexAny.html#intersect(other:org.saddle.Index[T]):org.saddle.index.ReIndexer[T]", "kind" : "def"}, {"label" : "join", "tail" : "(other: Index[T], how: JoinType): ReIndexer[T]", "member" : "org.saddle.index.IndexAny.join", "link" : "org\/saddle\/index\/IndexAny.html#join(other:org.saddle.Index[T],how:org.saddle.index.JoinType):org.saddle.index.ReIndexer[T]", "kind" : "def"}, {"label" : "reversed", "tail" : "(): Index[T]", "member" : "org.saddle.index.IndexAny.reversed", "link" : "org\/saddle\/index\/IndexAny.html#reversed:org.saddle.Index[T]", "kind" : "def"}, {"label" : "argSort", "tail" : "(): Array[Int]", "member" : "org.saddle.index.IndexAny.argSort", "link" : "org\/saddle\/index\/IndexAny.html#argSort:Array[Int]", "kind" : "def"}, {"label" : "isContiguous", "tail" : "(): Boolean", "member" : "org.saddle.index.IndexAny.isContiguous", "link" : "org\/saddle\/index\/IndexAny.html#isContiguous:Boolean", "kind" : "def"}, {"label" : "isMonotonic", "tail" : "(): Boolean", "member" : "org.saddle.index.IndexAny.isMonotonic", "link" : "org\/saddle\/index\/IndexAny.html#isMonotonic:Boolean", "kind" : "def"}, {"label" : "concat", "tail" : "(x: Index[T]): Index[T]", "member" : "org.saddle.index.IndexAny.concat", "link" : "org\/saddle\/index\/IndexAny.html#concat(x:org.saddle.Index[T]):org.saddle.Index[T]", "kind" : "def"}, {"label" : "without", "tail" : "(locs: Array[Int]): Index[T]", "member" : "org.saddle.index.IndexAny.without", "link" : "org\/saddle\/index\/IndexAny.html#without(locs:Array[Int]):org.saddle.Index[T]", "kind" : "def"}, {"label" : "take", "tail" : "(locs: Array[Int]): Index[T]", "member" : "org.saddle.index.IndexAny.take", "link" : "org\/saddle\/index\/IndexAny.html#take(locs:Array[Int]):org.saddle.Index[T]", "kind" : "def"}, {"label" : "raw", "tail" : "(idx: Int): T", "member" : "org.saddle.index.IndexAny.raw", "link" : "org\/saddle\/index\/IndexAny.html#raw(idx:Int):T", "kind" : "def"}, {"label" : "toVec", "tail" : "(): Vec[T]", "member" : "org.saddle.index.IndexAny.toVec", "link" : "org\/saddle\/index\/IndexAny.html#toVec:org.saddle.Vec[T]", "kind" : "def"}, {"label" : "length", "tail" : "(): Int", "member" : "org.saddle.index.IndexAny.length", "link" : "org\/saddle\/index\/IndexAny.html#length:Int", "kind" : "def"}, {"label" : "locatorAll", "tail" : "(): Option[LocatorAll[T]]", "member" : "org.saddle.index.IndexAny.locatorAll", "link" : "org\/saddle\/index\/IndexAny.html#locatorAll:Option[org.saddle.locatorall.LocatorAll[T]]", "kind" : "def"}, {"label" : "locator", "tail" : "(): Locator[T]", "member" : "org.saddle.index.IndexAny.locator", "link" : "org\/saddle\/index\/IndexAny.html#locator:org.saddle.locator.Locator[T]", "kind" : "def"}, {"label" : "ord", "tail" : "(): ORD[T]", "member" : "org.saddle.index.IndexAny.ord", "link" : "org\/saddle\/index\/IndexAny.html#ord:org.saddle.ORD[T]", "kind" : "def"}, {"label" : "scalarTag", "tail" : ": ScalarTag[T]", "member" : "org.saddle.index.IndexAny.scalarTag", "link" : "org\/saddle\/index\/IndexAny.html#scalarTag:org.saddle.scalar.ScalarTag[T]", "kind" : "val"}, {"member" : "org.saddle.index.IndexAny#<init>", "error" : "unsupported entity"}, {"label" : "toString", "tail" : "(): String", "member" : "org.saddle.Index.toString", "link" : "org\/saddle\/index\/IndexAny.html#toString():String", "kind" : "def"}, {"label" : "print", "tail" : "(len: Int, stream: OutputStream): Unit", "member" : "org.saddle.Index.print", "link" : "org\/saddle\/index\/IndexAny.html#print(len:Int,stream:java.io.OutputStream):Unit", "kind" : "def"}, {"label" : "stringify", "tail" : "(len: Int): String", "member" : "org.saddle.Index.stringify", "link" : "org\/saddle\/index\/IndexAny.html#stringify(len:Int):String", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "org.saddle.Index.hashCode", "link" : "org\/saddle\/index\/IndexAny.html#hashCode():Int", "kind" : "def"}, {"label" : "toSeq", "tail" : "(): IndexedSeq[T]", "member" : "org.saddle.Index.toSeq", "link" : "org\/saddle\/index\/IndexAny.html#toSeq:IndexedSeq[T]", "kind" : "def"}, {"label" : "next", "tail" : "(current: Scalar[T]): Scalar[T]", "member" : "org.saddle.Index.next", "link" : "org\/saddle\/index\/IndexAny.html#next(current:org.saddle.scalar.Scalar[T]):org.saddle.scalar.Scalar[T]", "kind" : "def"}, {"label" : "prev", "tail" : "(current: Scalar[T]): Scalar[T]", "member" : "org.saddle.Index.prev", "link" : "org\/saddle\/index\/IndexAny.html#prev(current:org.saddle.scalar.Scalar[T]):org.saddle.scalar.Scalar[T]", "kind" : "def"}, {"label" : "contains", "tail" : "(key: T): Boolean", "member" : "org.saddle.Index.contains", "link" : "org\/saddle\/index\/IndexAny.html#contains(key:T):Boolean", "kind" : "def"}, {"label" : "getIndexer", "tail" : "(other: Index[T]): Option[Array[Int]]", "member" : "org.saddle.Index.getIndexer", "link" : "org\/saddle\/index\/IndexAny.html#getIndexer(other:org.saddle.Index[T]):Option[Array[Int]]", "kind" : "def"}, {"label" : "split", "tail" : "(ev: Splitter[T, O1, O2]): (Index[O1], Index[O2])", "member" : "org.saddle.Index.split", "link" : "org\/saddle\/index\/IndexAny.html#split[O1,O2](implicitev:org.saddle.index.Splitter[T,O1,O2]):(org.saddle.Index[O1],org.saddle.Index[O2])", "kind" : "def"}, {"label" : "stack", "tail" : "(other: Index[U])(ev: Stacker[T, U, V]): Index[V]", "member" : "org.saddle.Index.stack", "link" : "org\/saddle\/index\/IndexAny.html#stack[U,V](other:org.saddle.Index[U])(implicitev:org.saddle.index.Stacker[T,U,V]):org.saddle.Index[V]", "kind" : "def"}, {"label" : "dropLevel", "tail" : "(ev: Splitter[T, U, _]): Index[U]", "member" : "org.saddle.Index.dropLevel", "link" : "org\/saddle\/index\/IndexAny.html#dropLevel[U](implicitev:org.saddle.index.Splitter[T,U,_]):org.saddle.Index[U]", "kind" : "def"}, {"label" : "exists", "tail" : "(pred: (T) => Boolean): Boolean", "member" : "org.saddle.Index.exists", "link" : "org\/saddle\/index\/IndexAny.html#exists(pred:T=>Boolean):Boolean", "kind" : "def"}, {"label" : "findOne", "tail" : "(pred: (T) => Boolean): Int", "member" : "org.saddle.Index.findOne", "link" : "org\/saddle\/index\/IndexAny.html#findOne(pred:T=>Boolean):Int", "kind" : "def"}, {"label" : "sorted", "tail" : "(): Index[T]", "member" : "org.saddle.Index.sorted", "link" : "org\/saddle\/index\/IndexAny.html#sorted:org.saddle.Index[T]", "kind" : "def"}, {"label" : "last", "tail" : "(): Scalar[T]", "member" : "org.saddle.Index.last", "link" : "org\/saddle\/index\/IndexAny.html#last:org.saddle.scalar.Scalar[T]", "kind" : "def"}, {"label" : "first", "tail" : "(): Scalar[T]", "member" : "org.saddle.Index.first", "link" : "org\/saddle\/index\/IndexAny.html#first:org.saddle.scalar.Scalar[T]", "kind" : "def"}, {"label" : "tail", "tail" : "(n: Int): Index[T]", "member" : "org.saddle.Index.tail", "link" : "org\/saddle\/index\/IndexAny.html#tail(n:Int):org.saddle.Index[T]", "kind" : "def"}, {"label" : "head", "tail" : "(n: Int): Index[T]", "member" : "org.saddle.Index.head", "link" : "org\/saddle\/index\/IndexAny.html#head(n:Int):org.saddle.Index[T]", "kind" : "def"}, {"label" : "get", "tail" : "(key: T): Array[Int]", "member" : "org.saddle.Index.get", "link" : "org\/saddle\/index\/IndexAny.html#get(key:T):Array[Int]", "kind" : "def"}, {"label" : "getLast", "tail" : "(key: T): Int", "member" : "org.saddle.Index.getLast", "link" : "org\/saddle\/index\/IndexAny.html#getLast(key:T):Int", "kind" : "def"}, {"label" : "getFirst", "tail" : "(key: T): Int", "member" : "org.saddle.Index.getFirst", "link" : "org\/saddle\/index\/IndexAny.html#getFirst(key:T):Int", "kind" : "def"}, {"label" : "count", "tail" : "(key: T): Int", "member" : "org.saddle.Index.count", "link" : "org\/saddle\/index\/IndexAny.html#count(key:T):Int", "kind" : "def"}, {"label" : "counts", "tail" : "(): Array[Int]", "member" : "org.saddle.Index.counts", "link" : "org\/saddle\/index\/IndexAny.html#counts:Array[Int]", "kind" : "def"}, {"label" : "toUniqueIndex", "tail" : "(ord: ORD[T]): Index[(T, Int)]", "member" : "org.saddle.Index.toUniqueIndex", "link" : "org\/saddle\/index\/IndexAny.html#toUniqueIndex(implicitord:org.saddle.ORD[T]):org.saddle.Index[(T,Int)]", "kind" : "def"}, {"label" : "uniques", "tail" : "(ord: ORD[T], tag: ST[T]): Index[T]", "member" : "org.saddle.Index.uniques", "link" : "org\/saddle\/index\/IndexAny.html#uniques(implicitord:org.saddle.ORD[T],implicittag:org.saddle.ST[T]):org.saddle.Index[T]", "kind" : "def"}, {"label" : "isUnique", "tail" : "(): Boolean", "member" : "org.saddle.Index.isUnique", "link" : "org\/saddle\/index\/IndexAny.html#isUnique:Boolean", "kind" : "def"}, {"label" : "sliceBy", "tail" : "(rng: Slice[T]): Index[T]", "member" : "org.saddle.Index.sliceBy", "link" : "org\/saddle\/index\/IndexAny.html#sliceBy(rng:org.saddle.index.Slice[T]):org.saddle.Index[T]", "kind" : "def"}, {"label" : "sliceBy", "tail" : "(from: T, to: T, inclusive: Boolean): Index[T]", "member" : "org.saddle.Index.sliceBy", "link" : "org\/saddle\/index\/IndexAny.html#sliceBy(from:T,to:T,inclusive:Boolean):org.saddle.Index[T]", "kind" : "def"}, {"label" : "distinct", "tail" : "(st: ST[T], ord: ORD[T]): Index[T]", "member" : "org.saddle.Index.distinct", "link" : "org\/saddle\/index\/IndexAny.html#distinct(implicitst:org.saddle.ST[T],implicitord:org.saddle.ORD[T]):org.saddle.Index[T]", "kind" : "def"}, {"label" : "apply", "tail" : "(keys: Array[T]): Array[Int]", "member" : "org.saddle.Index.apply", "link" : "org\/saddle\/index\/IndexAny.html#apply(keys:Array[T]):Array[Int]", "kind" : "def"}, {"label" : "apply", "tail" : "(keys: T*): Array[Int]", "member" : "org.saddle.Index.apply", "link" : "org\/saddle\/index\/IndexAny.html#apply(keys:T*):Array[Int]", "kind" : "def"}, {"label" : "firsts", "tail" : "(keys: Array[T]): Array[Int]", "member" : "org.saddle.Index.firsts", "link" : "org\/saddle\/index\/IndexAny.html#firsts(keys:Array[T]):Array[Int]", "kind" : "def"}, {"label" : "at", "tail" : "(locs: Int*): Index[T]", "member" : "org.saddle.Index.at", "link" : "org\/saddle\/index\/IndexAny.html#at(locs:Int*):org.saddle.Index[T]", "kind" : "def"}, {"label" : "at", "tail" : "(locs: Array[Int]): Index[T]", "member" : "org.saddle.Index.at", "link" : "org\/saddle\/index\/IndexAny.html#at(locs:Array[Int]):org.saddle.Index[T]", "kind" : "def"}, {"label" : "at", "tail" : "(loc: Int): Scalar[T]", "member" : "org.saddle.Index.at", "link" : "org\/saddle\/index\/IndexAny.html#at(loc:Int):org.saddle.scalar.Scalar[T]", "kind" : "def"}, {"label" : "nonEmpty", "tail" : "(): Boolean", "member" : "org.saddle.Index.nonEmpty", "link" : "org\/saddle\/index\/IndexAny.html#nonEmpty:Boolean", "kind" : "def"}, {"label" : "isEmpty", "tail" : "(): Boolean", "member" : "org.saddle.Index.isEmpty", "link" : "org\/saddle\/index\/IndexAny.html#isEmpty:Boolean", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/saddle\/index\/IndexAny.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/saddle\/index\/IndexAny.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/saddle\/index\/IndexAny.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/saddle\/index\/IndexAny.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/saddle\/index\/IndexAny.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/saddle\/index\/IndexAny.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/saddle\/index\/IndexAny.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/index\/IndexAny.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/index\/IndexAny.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/index\/IndexAny.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/saddle\/index\/IndexAny.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/saddle\/index\/IndexAny.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/saddle\/index\/IndexAny.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "org\/saddle\/index\/IndexAny.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/saddle\/index\/IndexAny.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/saddle\/index\/IndexAny.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/saddle\/index\/IndexAny.html", "kind" : "class"}, {"name" : "org.saddle.index.IndexDouble", "shortDescription" : "Index with double keys", "members_class" : [{"label" : "equals", "tail" : "(o: Any): Boolean", "member" : "org.saddle.index.IndexDouble.equals", "link" : "org\/saddle\/index\/IndexDouble.html#equals(o:Any):Boolean", "kind" : "def"}, {"label" : "toArray", "tail" : "(): Array[Double]", "member" : "org.saddle.index.IndexDouble.toArray", "link" : "org\/saddle\/index\/IndexDouble.html#toArray:Array[Double]", "kind" : "def"}, {"label" : "map", "tail" : "(f: (Double) => B)(arg0: ST[B], arg1: ORD[B]): Index[B]", "member" : "org.saddle.index.IndexDouble.map", "link" : "org\/saddle\/index\/IndexDouble.html#map[B](f:Double=>B)(implicitevidence$1:org.saddle.ST[B],implicitevidence$2:org.saddle.ORD[B]):org.saddle.Index[B]", "kind" : "def"}, {"label" : "rsearch", "tail" : "(t: Double): Int", "member" : "org.saddle.index.IndexDouble.rsearch", "link" : "org\/saddle\/index\/IndexDouble.html#rsearch(t:Double):Int", "kind" : "def"}, {"label" : "lsearch", "tail" : "(t: Double): Int", "member" : "org.saddle.index.IndexDouble.lsearch", "link" : "org\/saddle\/index\/IndexDouble.html#lsearch(t:Double):Int", "kind" : "def"}, {"label" : "slice", "tail" : "(from: Int, until: Int, stride: Int): Index[Double]", "member" : "org.saddle.index.IndexDouble.slice", "link" : "org\/saddle\/index\/IndexDouble.html#slice(from:Int,until:Int,stride:Int):org.saddle.Index[Double]", "kind" : "def"}, {"label" : "union", "tail" : "(other: Index[Double]): ReIndexer[Double]", "member" : "org.saddle.index.IndexDouble.union", "link" : "org\/saddle\/index\/IndexDouble.html#union(other:org.saddle.Index[Double]):org.saddle.index.ReIndexer[Double]", "kind" : "def"}, {"label" : "intersect", "tail" : "(other: Index[Double]): ReIndexer[Double]", "member" : "org.saddle.index.IndexDouble.intersect", "link" : "org\/saddle\/index\/IndexDouble.html#intersect(other:org.saddle.Index[Double]):org.saddle.index.ReIndexer[Double]", "kind" : "def"}, {"label" : "join", "tail" : "(other: Index[Double], how: JoinType): ReIndexer[Double]", "member" : "org.saddle.index.IndexDouble.join", "link" : "org\/saddle\/index\/IndexDouble.html#join(other:org.saddle.Index[Double],how:org.saddle.index.JoinType):org.saddle.index.ReIndexer[Double]", "kind" : "def"}, {"label" : "reversed", "tail" : "(): Index[Double]", "member" : "org.saddle.index.IndexDouble.reversed", "link" : "org\/saddle\/index\/IndexDouble.html#reversed:org.saddle.Index[Double]", "kind" : "def"}, {"label" : "argSort", "tail" : "(): Array[Int]", "member" : "org.saddle.index.IndexDouble.argSort", "link" : "org\/saddle\/index\/IndexDouble.html#argSort:Array[Int]", "kind" : "def"}, {"label" : "isContiguous", "tail" : "(): Boolean", "member" : "org.saddle.index.IndexDouble.isContiguous", "link" : "org\/saddle\/index\/IndexDouble.html#isContiguous:Boolean", "kind" : "def"}, {"label" : "isMonotonic", "tail" : "(): Boolean", "member" : "org.saddle.index.IndexDouble.isMonotonic", "link" : "org\/saddle\/index\/IndexDouble.html#isMonotonic:Boolean", "kind" : "def"}, {"label" : "concat", "tail" : "(x: Index[Double]): Index[Double]", "member" : "org.saddle.index.IndexDouble.concat", "link" : "org\/saddle\/index\/IndexDouble.html#concat(x:org.saddle.Index[Double]):org.saddle.Index[Double]", "kind" : "def"}, {"label" : "without", "tail" : "(locs: Array[Int]): Index[Double]", "member" : "org.saddle.index.IndexDouble.without", "link" : "org\/saddle\/index\/IndexDouble.html#without(locs:Array[Int]):org.saddle.Index[Double]", "kind" : "def"}, {"label" : "take", "tail" : "(locs: Array[Int]): Index[Double]", "member" : "org.saddle.index.IndexDouble.take", "link" : "org\/saddle\/index\/IndexDouble.html#take(locs:Array[Int]):org.saddle.Index[Double]", "kind" : "def"}, {"label" : "raw", "tail" : "(idx: Int): Double", "member" : "org.saddle.index.IndexDouble.raw", "link" : "org\/saddle\/index\/IndexDouble.html#raw(idx:Int):Double", "kind" : "def"}, {"label" : "toVec", "tail" : "(): Vec[Double]", "member" : "org.saddle.index.IndexDouble.toVec", "link" : "org\/saddle\/index\/IndexDouble.html#toVec:org.saddle.Vec[Double]", "kind" : "def"}, {"label" : "length", "tail" : "(): Int", "member" : "org.saddle.index.IndexDouble.length", "link" : "org\/saddle\/index\/IndexDouble.html#length:Int", "kind" : "def"}, {"label" : "locatorAll", "tail" : "(): Option[LocatorAll[Double]]", "member" : "org.saddle.index.IndexDouble.locatorAll", "link" : "org\/saddle\/index\/IndexDouble.html#locatorAll:Option[org.saddle.locatorall.LocatorAll[Double]]", "kind" : "def"}, {"label" : "locator", "tail" : "(): Locator[Double]", "member" : "org.saddle.index.IndexDouble.locator", "link" : "org\/saddle\/index\/IndexDouble.html#locator:org.saddle.locator.Locator[Double]", "kind" : "def"}, {"label" : "scalarTag", "tail" : ": ScalarTagDouble.type", "member" : "org.saddle.index.IndexDouble.scalarTag", "link" : "org\/saddle\/index\/IndexDouble.html#scalarTag:org.saddle.scalar.ScalarTagDouble.type", "kind" : "val"}, {"member" : "org.saddle.index.IndexDouble#<init>", "error" : "unsupported entity"}, {"label" : "ord", "tail" : ": ORD[Double]", "member" : "org.saddle.index.IndexDouble.ord", "link" : "org\/saddle\/index\/IndexDouble.html#ord:org.saddle.ORD[Double]", "kind" : "val"}, {"label" : "toString", "tail" : "(): String", "member" : "org.saddle.Index.toString", "link" : "org\/saddle\/index\/IndexDouble.html#toString():String", "kind" : "def"}, {"label" : "print", "tail" : "(len: Int, stream: OutputStream): Unit", "member" : "org.saddle.Index.print", "link" : "org\/saddle\/index\/IndexDouble.html#print(len:Int,stream:java.io.OutputStream):Unit", "kind" : "def"}, {"label" : "stringify", "tail" : "(len: Int): String", "member" : "org.saddle.Index.stringify", "link" : "org\/saddle\/index\/IndexDouble.html#stringify(len:Int):String", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "org.saddle.Index.hashCode", "link" : "org\/saddle\/index\/IndexDouble.html#hashCode():Int", "kind" : "def"}, {"label" : "toSeq", "tail" : "(): IndexedSeq[Double]", "member" : "org.saddle.Index.toSeq", "link" : "org\/saddle\/index\/IndexDouble.html#toSeq:IndexedSeq[T]", "kind" : "def"}, {"label" : "next", "tail" : "(current: Scalar[Double]): Scalar[Double]", "member" : "org.saddle.Index.next", "link" : "org\/saddle\/index\/IndexDouble.html#next(current:org.saddle.scalar.Scalar[T]):org.saddle.scalar.Scalar[T]", "kind" : "def"}, {"label" : "prev", "tail" : "(current: Scalar[Double]): Scalar[Double]", "member" : "org.saddle.Index.prev", "link" : "org\/saddle\/index\/IndexDouble.html#prev(current:org.saddle.scalar.Scalar[T]):org.saddle.scalar.Scalar[T]", "kind" : "def"}, {"label" : "contains", "tail" : "(key: Double): Boolean", "member" : "org.saddle.Index.contains", "link" : "org\/saddle\/index\/IndexDouble.html#contains(key:T):Boolean", "kind" : "def"}, {"label" : "getIndexer", "tail" : "(other: Index[Double]): Option[Array[Int]]", "member" : "org.saddle.Index.getIndexer", "link" : "org\/saddle\/index\/IndexDouble.html#getIndexer(other:org.saddle.Index[T]):Option[Array[Int]]", "kind" : "def"}, {"label" : "split", "tail" : "(ev: Splitter[Double, O1, O2]): (Index[O1], Index[O2])", "member" : "org.saddle.Index.split", "link" : "org\/saddle\/index\/IndexDouble.html#split[O1,O2](implicitev:org.saddle.index.Splitter[T,O1,O2]):(org.saddle.Index[O1],org.saddle.Index[O2])", "kind" : "def"}, {"label" : "stack", "tail" : "(other: Index[U])(ev: Stacker[Double, U, V]): Index[V]", "member" : "org.saddle.Index.stack", "link" : "org\/saddle\/index\/IndexDouble.html#stack[U,V](other:org.saddle.Index[U])(implicitev:org.saddle.index.Stacker[T,U,V]):org.saddle.Index[V]", "kind" : "def"}, {"label" : "dropLevel", "tail" : "(ev: Splitter[Double, U, _]): Index[U]", "member" : "org.saddle.Index.dropLevel", "link" : "org\/saddle\/index\/IndexDouble.html#dropLevel[U](implicitev:org.saddle.index.Splitter[T,U,_]):org.saddle.Index[U]", "kind" : "def"}, {"label" : "exists", "tail" : "(pred: (Double) => Boolean): Boolean", "member" : "org.saddle.Index.exists", "link" : "org\/saddle\/index\/IndexDouble.html#exists(pred:T=>Boolean):Boolean", "kind" : "def"}, {"label" : "findOne", "tail" : "(pred: (Double) => Boolean): Int", "member" : "org.saddle.Index.findOne", "link" : "org\/saddle\/index\/IndexDouble.html#findOne(pred:T=>Boolean):Int", "kind" : "def"}, {"label" : "sorted", "tail" : "(): Index[Double]", "member" : "org.saddle.Index.sorted", "link" : "org\/saddle\/index\/IndexDouble.html#sorted:org.saddle.Index[T]", "kind" : "def"}, {"label" : "last", "tail" : "(): Scalar[Double]", "member" : "org.saddle.Index.last", "link" : "org\/saddle\/index\/IndexDouble.html#last:org.saddle.scalar.Scalar[T]", "kind" : "def"}, {"label" : "first", "tail" : "(): Scalar[Double]", "member" : "org.saddle.Index.first", "link" : "org\/saddle\/index\/IndexDouble.html#first:org.saddle.scalar.Scalar[T]", "kind" : "def"}, {"label" : "tail", "tail" : "(n: Int): Index[Double]", "member" : "org.saddle.Index.tail", "link" : "org\/saddle\/index\/IndexDouble.html#tail(n:Int):org.saddle.Index[T]", "kind" : "def"}, {"label" : "head", "tail" : "(n: Int): Index[Double]", "member" : "org.saddle.Index.head", "link" : "org\/saddle\/index\/IndexDouble.html#head(n:Int):org.saddle.Index[T]", "kind" : "def"}, {"label" : "get", "tail" : "(key: Double): Array[Int]", "member" : "org.saddle.Index.get", "link" : "org\/saddle\/index\/IndexDouble.html#get(key:T):Array[Int]", "kind" : "def"}, {"label" : "getLast", "tail" : "(key: Double): Int", "member" : "org.saddle.Index.getLast", "link" : "org\/saddle\/index\/IndexDouble.html#getLast(key:T):Int", "kind" : "def"}, {"label" : "getFirst", "tail" : "(key: Double): Int", "member" : "org.saddle.Index.getFirst", "link" : "org\/saddle\/index\/IndexDouble.html#getFirst(key:T):Int", "kind" : "def"}, {"label" : "count", "tail" : "(key: Double): Int", "member" : "org.saddle.Index.count", "link" : "org\/saddle\/index\/IndexDouble.html#count(key:T):Int", "kind" : "def"}, {"label" : "counts", "tail" : "(): Array[Int]", "member" : "org.saddle.Index.counts", "link" : "org\/saddle\/index\/IndexDouble.html#counts:Array[Int]", "kind" : "def"}, {"label" : "toUniqueIndex", "tail" : "(ord: ORD[Double]): Index[(Double, Int)]", "member" : "org.saddle.Index.toUniqueIndex", "link" : "org\/saddle\/index\/IndexDouble.html#toUniqueIndex(implicitord:org.saddle.ORD[T]):org.saddle.Index[(T,Int)]", "kind" : "def"}, {"label" : "uniques", "tail" : "(ord: ORD[Double], tag: ST[Double]): Index[Double]", "member" : "org.saddle.Index.uniques", "link" : "org\/saddle\/index\/IndexDouble.html#uniques(implicitord:org.saddle.ORD[T],implicittag:org.saddle.ST[T]):org.saddle.Index[T]", "kind" : "def"}, {"label" : "isUnique", "tail" : "(): Boolean", "member" : "org.saddle.Index.isUnique", "link" : "org\/saddle\/index\/IndexDouble.html#isUnique:Boolean", "kind" : "def"}, {"label" : "sliceBy", "tail" : "(rng: Slice[Double]): Index[Double]", "member" : "org.saddle.Index.sliceBy", "link" : "org\/saddle\/index\/IndexDouble.html#sliceBy(rng:org.saddle.index.Slice[T]):org.saddle.Index[T]", "kind" : "def"}, {"label" : "sliceBy", "tail" : "(from: Double, to: Double, inclusive: Boolean): Index[Double]", "member" : "org.saddle.Index.sliceBy", "link" : "org\/saddle\/index\/IndexDouble.html#sliceBy(from:T,to:T,inclusive:Boolean):org.saddle.Index[T]", "kind" : "def"}, {"label" : "distinct", "tail" : "(st: ST[Double], ord: ORD[Double]): Index[Double]", "member" : "org.saddle.Index.distinct", "link" : "org\/saddle\/index\/IndexDouble.html#distinct(implicitst:org.saddle.ST[T],implicitord:org.saddle.ORD[T]):org.saddle.Index[T]", "kind" : "def"}, {"label" : "apply", "tail" : "(keys: Array[Double]): Array[Int]", "member" : "org.saddle.Index.apply", "link" : "org\/saddle\/index\/IndexDouble.html#apply(keys:Array[T]):Array[Int]", "kind" : "def"}, {"label" : "apply", "tail" : "(keys: Double*): Array[Int]", "member" : "org.saddle.Index.apply", "link" : "org\/saddle\/index\/IndexDouble.html#apply(keys:T*):Array[Int]", "kind" : "def"}, {"label" : "firsts", "tail" : "(keys: Array[Double]): Array[Int]", "member" : "org.saddle.Index.firsts", "link" : "org\/saddle\/index\/IndexDouble.html#firsts(keys:Array[T]):Array[Int]", "kind" : "def"}, {"label" : "at", "tail" : "(locs: Int*): Index[Double]", "member" : "org.saddle.Index.at", "link" : "org\/saddle\/index\/IndexDouble.html#at(locs:Int*):org.saddle.Index[T]", "kind" : "def"}, {"label" : "at", "tail" : "(locs: Array[Int]): Index[Double]", "member" : "org.saddle.Index.at", "link" : "org\/saddle\/index\/IndexDouble.html#at(locs:Array[Int]):org.saddle.Index[T]", "kind" : "def"}, {"label" : "at", "tail" : "(loc: Int): Scalar[Double]", "member" : "org.saddle.Index.at", "link" : "org\/saddle\/index\/IndexDouble.html#at(loc:Int):org.saddle.scalar.Scalar[T]", "kind" : "def"}, {"label" : "nonEmpty", "tail" : "(): Boolean", "member" : "org.saddle.Index.nonEmpty", "link" : "org\/saddle\/index\/IndexDouble.html#nonEmpty:Boolean", "kind" : "def"}, {"label" : "isEmpty", "tail" : "(): Boolean", "member" : "org.saddle.Index.isEmpty", "link" : "org\/saddle\/index\/IndexDouble.html#isEmpty:Boolean", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/saddle\/index\/IndexDouble.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/saddle\/index\/IndexDouble.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/saddle\/index\/IndexDouble.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/saddle\/index\/IndexDouble.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/saddle\/index\/IndexDouble.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/saddle\/index\/IndexDouble.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/saddle\/index\/IndexDouble.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/index\/IndexDouble.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/index\/IndexDouble.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/index\/IndexDouble.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/saddle\/index\/IndexDouble.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/saddle\/index\/IndexDouble.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/saddle\/index\/IndexDouble.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "org\/saddle\/index\/IndexDouble.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/saddle\/index\/IndexDouble.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/saddle\/index\/IndexDouble.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/saddle\/index\/IndexDouble.html", "kind" : "class"}, {"name" : "org.saddle.index.IndexInt", "shortDescription" : "Index with integer keys", "members_class" : [{"label" : "equals", "tail" : "(o: Any): Boolean", "member" : "org.saddle.index.IndexInt.equals", "link" : "org\/saddle\/index\/IndexInt.html#equals(o:Any):Boolean", "kind" : "def"}, {"label" : "toArray", "tail" : "(): Array[Int]", "member" : "org.saddle.index.IndexInt.toArray", "link" : "org\/saddle\/index\/IndexInt.html#toArray:Array[Int]", "kind" : "def"}, {"label" : "map", "tail" : "(f: (Int) => B)(arg0: ST[B], arg1: ORD[B]): Index[B]", "member" : "org.saddle.index.IndexInt.map", "link" : "org\/saddle\/index\/IndexInt.html#map[B](f:Int=>B)(implicitevidence$1:org.saddle.ST[B],implicitevidence$2:org.saddle.ORD[B]):org.saddle.Index[B]", "kind" : "def"}, {"label" : "rsearch", "tail" : "(t: Int): Int", "member" : "org.saddle.index.IndexInt.rsearch", "link" : "org\/saddle\/index\/IndexInt.html#rsearch(t:Int):Int", "kind" : "def"}, {"label" : "lsearch", "tail" : "(t: Int): Int", "member" : "org.saddle.index.IndexInt.lsearch", "link" : "org\/saddle\/index\/IndexInt.html#lsearch(t:Int):Int", "kind" : "def"}, {"label" : "slice", "tail" : "(from: Int, until: Int, stride: Int): Index[Int]", "member" : "org.saddle.index.IndexInt.slice", "link" : "org\/saddle\/index\/IndexInt.html#slice(from:Int,until:Int,stride:Int):org.saddle.Index[Int]", "kind" : "def"}, {"label" : "union", "tail" : "(other: Index[Int]): ReIndexer[Int]", "member" : "org.saddle.index.IndexInt.union", "link" : "org\/saddle\/index\/IndexInt.html#union(other:org.saddle.Index[Int]):org.saddle.index.ReIndexer[Int]", "kind" : "def"}, {"label" : "intersect", "tail" : "(other: Index[Int]): ReIndexer[Int]", "member" : "org.saddle.index.IndexInt.intersect", "link" : "org\/saddle\/index\/IndexInt.html#intersect(other:org.saddle.Index[Int]):org.saddle.index.ReIndexer[Int]", "kind" : "def"}, {"label" : "join", "tail" : "(other: Index[Int], how: JoinType): ReIndexer[Int]", "member" : "org.saddle.index.IndexInt.join", "link" : "org\/saddle\/index\/IndexInt.html#join(other:org.saddle.Index[Int],how:org.saddle.index.JoinType):org.saddle.index.ReIndexer[Int]", "kind" : "def"}, {"label" : "reversed", "tail" : "(): Index[Int]", "member" : "org.saddle.index.IndexInt.reversed", "link" : "org\/saddle\/index\/IndexInt.html#reversed:org.saddle.Index[Int]", "kind" : "def"}, {"label" : "argSort", "tail" : "(): Array[Int]", "member" : "org.saddle.index.IndexInt.argSort", "link" : "org\/saddle\/index\/IndexInt.html#argSort:Array[Int]", "kind" : "def"}, {"label" : "isContiguous", "tail" : "(): Boolean", "member" : "org.saddle.index.IndexInt.isContiguous", "link" : "org\/saddle\/index\/IndexInt.html#isContiguous:Boolean", "kind" : "def"}, {"label" : "isMonotonic", "tail" : "(): Boolean", "member" : "org.saddle.index.IndexInt.isMonotonic", "link" : "org\/saddle\/index\/IndexInt.html#isMonotonic:Boolean", "kind" : "def"}, {"label" : "concat", "tail" : "(x: Index[Int]): Index[Int]", "member" : "org.saddle.index.IndexInt.concat", "link" : "org\/saddle\/index\/IndexInt.html#concat(x:org.saddle.Index[Int]):org.saddle.Index[Int]", "kind" : "def"}, {"label" : "without", "tail" : "(locs: Array[Int]): Index[Int]", "member" : "org.saddle.index.IndexInt.without", "link" : "org\/saddle\/index\/IndexInt.html#without(locs:Array[Int]):org.saddle.Index[Int]", "kind" : "def"}, {"label" : "take", "tail" : "(locs: Array[Int]): Index[Int]", "member" : "org.saddle.index.IndexInt.take", "link" : "org\/saddle\/index\/IndexInt.html#take(locs:Array[Int]):org.saddle.Index[Int]", "kind" : "def"}, {"label" : "raw", "tail" : "(idx: Int): Int", "member" : "org.saddle.index.IndexInt.raw", "link" : "org\/saddle\/index\/IndexInt.html#raw(idx:Int):Int", "kind" : "def"}, {"label" : "toVec", "tail" : "(): Vec[Int]", "member" : "org.saddle.index.IndexInt.toVec", "link" : "org\/saddle\/index\/IndexInt.html#toVec:org.saddle.Vec[Int]", "kind" : "def"}, {"label" : "length", "tail" : "(): Int", "member" : "org.saddle.index.IndexInt.length", "link" : "org\/saddle\/index\/IndexInt.html#length:Int", "kind" : "def"}, {"label" : "locatorAll", "tail" : "(): Option[LocatorAll[Int]]", "member" : "org.saddle.index.IndexInt.locatorAll", "link" : "org\/saddle\/index\/IndexInt.html#locatorAll:Option[org.saddle.locatorall.LocatorAll[Int]]", "kind" : "def"}, {"label" : "locator", "tail" : "(): Locator[Int]", "member" : "org.saddle.index.IndexInt.locator", "link" : "org\/saddle\/index\/IndexInt.html#locator:org.saddle.locator.Locator[Int]", "kind" : "def"}, {"label" : "scalarTag", "tail" : ": ScalarTagInt.type", "member" : "org.saddle.index.IndexInt.scalarTag", "link" : "org\/saddle\/index\/IndexInt.html#scalarTag:org.saddle.scalar.ScalarTagInt.type", "kind" : "val"}, {"member" : "org.saddle.index.IndexInt#<init>", "error" : "unsupported entity"}, {"label" : "ord", "tail" : ": ORD[Int]", "member" : "org.saddle.index.IndexInt.ord", "link" : "org\/saddle\/index\/IndexInt.html#ord:org.saddle.ORD[Int]", "kind" : "val"}, {"label" : "toString", "tail" : "(): String", "member" : "org.saddle.Index.toString", "link" : "org\/saddle\/index\/IndexInt.html#toString():String", "kind" : "def"}, {"label" : "print", "tail" : "(len: Int, stream: OutputStream): Unit", "member" : "org.saddle.Index.print", "link" : "org\/saddle\/index\/IndexInt.html#print(len:Int,stream:java.io.OutputStream):Unit", "kind" : "def"}, {"label" : "stringify", "tail" : "(len: Int): String", "member" : "org.saddle.Index.stringify", "link" : "org\/saddle\/index\/IndexInt.html#stringify(len:Int):String", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "org.saddle.Index.hashCode", "link" : "org\/saddle\/index\/IndexInt.html#hashCode():Int", "kind" : "def"}, {"label" : "toSeq", "tail" : "(): IndexedSeq[Int]", "member" : "org.saddle.Index.toSeq", "link" : "org\/saddle\/index\/IndexInt.html#toSeq:IndexedSeq[T]", "kind" : "def"}, {"label" : "next", "tail" : "(current: Scalar[Int]): Scalar[Int]", "member" : "org.saddle.Index.next", "link" : "org\/saddle\/index\/IndexInt.html#next(current:org.saddle.scalar.Scalar[T]):org.saddle.scalar.Scalar[T]", "kind" : "def"}, {"label" : "prev", "tail" : "(current: Scalar[Int]): Scalar[Int]", "member" : "org.saddle.Index.prev", "link" : "org\/saddle\/index\/IndexInt.html#prev(current:org.saddle.scalar.Scalar[T]):org.saddle.scalar.Scalar[T]", "kind" : "def"}, {"label" : "contains", "tail" : "(key: Int): Boolean", "member" : "org.saddle.Index.contains", "link" : "org\/saddle\/index\/IndexInt.html#contains(key:T):Boolean", "kind" : "def"}, {"label" : "getIndexer", "tail" : "(other: Index[Int]): Option[Array[Int]]", "member" : "org.saddle.Index.getIndexer", "link" : "org\/saddle\/index\/IndexInt.html#getIndexer(other:org.saddle.Index[T]):Option[Array[Int]]", "kind" : "def"}, {"label" : "split", "tail" : "(ev: Splitter[Int, O1, O2]): (Index[O1], Index[O2])", "member" : "org.saddle.Index.split", "link" : "org\/saddle\/index\/IndexInt.html#split[O1,O2](implicitev:org.saddle.index.Splitter[T,O1,O2]):(org.saddle.Index[O1],org.saddle.Index[O2])", "kind" : "def"}, {"label" : "stack", "tail" : "(other: Index[U])(ev: Stacker[Int, U, V]): Index[V]", "member" : "org.saddle.Index.stack", "link" : "org\/saddle\/index\/IndexInt.html#stack[U,V](other:org.saddle.Index[U])(implicitev:org.saddle.index.Stacker[T,U,V]):org.saddle.Index[V]", "kind" : "def"}, {"label" : "dropLevel", "tail" : "(ev: Splitter[Int, U, _]): Index[U]", "member" : "org.saddle.Index.dropLevel", "link" : "org\/saddle\/index\/IndexInt.html#dropLevel[U](implicitev:org.saddle.index.Splitter[T,U,_]):org.saddle.Index[U]", "kind" : "def"}, {"label" : "exists", "tail" : "(pred: (Int) => Boolean): Boolean", "member" : "org.saddle.Index.exists", "link" : "org\/saddle\/index\/IndexInt.html#exists(pred:T=>Boolean):Boolean", "kind" : "def"}, {"label" : "findOne", "tail" : "(pred: (Int) => Boolean): Int", "member" : "org.saddle.Index.findOne", "link" : "org\/saddle\/index\/IndexInt.html#findOne(pred:T=>Boolean):Int", "kind" : "def"}, {"label" : "sorted", "tail" : "(): Index[Int]", "member" : "org.saddle.Index.sorted", "link" : "org\/saddle\/index\/IndexInt.html#sorted:org.saddle.Index[T]", "kind" : "def"}, {"label" : "last", "tail" : "(): Scalar[Int]", "member" : "org.saddle.Index.last", "link" : "org\/saddle\/index\/IndexInt.html#last:org.saddle.scalar.Scalar[T]", "kind" : "def"}, {"label" : "first", "tail" : "(): Scalar[Int]", "member" : "org.saddle.Index.first", "link" : "org\/saddle\/index\/IndexInt.html#first:org.saddle.scalar.Scalar[T]", "kind" : "def"}, {"label" : "tail", "tail" : "(n: Int): Index[Int]", "member" : "org.saddle.Index.tail", "link" : "org\/saddle\/index\/IndexInt.html#tail(n:Int):org.saddle.Index[T]", "kind" : "def"}, {"label" : "head", "tail" : "(n: Int): Index[Int]", "member" : "org.saddle.Index.head", "link" : "org\/saddle\/index\/IndexInt.html#head(n:Int):org.saddle.Index[T]", "kind" : "def"}, {"label" : "get", "tail" : "(key: Int): Array[Int]", "member" : "org.saddle.Index.get", "link" : "org\/saddle\/index\/IndexInt.html#get(key:T):Array[Int]", "kind" : "def"}, {"label" : "getLast", "tail" : "(key: Int): Int", "member" : "org.saddle.Index.getLast", "link" : "org\/saddle\/index\/IndexInt.html#getLast(key:T):Int", "kind" : "def"}, {"label" : "getFirst", "tail" : "(key: Int): Int", "member" : "org.saddle.Index.getFirst", "link" : "org\/saddle\/index\/IndexInt.html#getFirst(key:T):Int", "kind" : "def"}, {"label" : "count", "tail" : "(key: Int): Int", "member" : "org.saddle.Index.count", "link" : "org\/saddle\/index\/IndexInt.html#count(key:T):Int", "kind" : "def"}, {"label" : "counts", "tail" : "(): Array[Int]", "member" : "org.saddle.Index.counts", "link" : "org\/saddle\/index\/IndexInt.html#counts:Array[Int]", "kind" : "def"}, {"label" : "toUniqueIndex", "tail" : "(ord: ORD[Int]): Index[(Int, Int)]", "member" : "org.saddle.Index.toUniqueIndex", "link" : "org\/saddle\/index\/IndexInt.html#toUniqueIndex(implicitord:org.saddle.ORD[T]):org.saddle.Index[(T,Int)]", "kind" : "def"}, {"label" : "uniques", "tail" : "(ord: ORD[Int], tag: ST[Int]): Index[Int]", "member" : "org.saddle.Index.uniques", "link" : "org\/saddle\/index\/IndexInt.html#uniques(implicitord:org.saddle.ORD[T],implicittag:org.saddle.ST[T]):org.saddle.Index[T]", "kind" : "def"}, {"label" : "isUnique", "tail" : "(): Boolean", "member" : "org.saddle.Index.isUnique", "link" : "org\/saddle\/index\/IndexInt.html#isUnique:Boolean", "kind" : "def"}, {"label" : "sliceBy", "tail" : "(rng: Slice[Int]): Index[Int]", "member" : "org.saddle.Index.sliceBy", "link" : "org\/saddle\/index\/IndexInt.html#sliceBy(rng:org.saddle.index.Slice[T]):org.saddle.Index[T]", "kind" : "def"}, {"label" : "sliceBy", "tail" : "(from: Int, to: Int, inclusive: Boolean): Index[Int]", "member" : "org.saddle.Index.sliceBy", "link" : "org\/saddle\/index\/IndexInt.html#sliceBy(from:T,to:T,inclusive:Boolean):org.saddle.Index[T]", "kind" : "def"}, {"label" : "distinct", "tail" : "(st: ST[Int], ord: ORD[Int]): Index[Int]", "member" : "org.saddle.Index.distinct", "link" : "org\/saddle\/index\/IndexInt.html#distinct(implicitst:org.saddle.ST[T],implicitord:org.saddle.ORD[T]):org.saddle.Index[T]", "kind" : "def"}, {"label" : "apply", "tail" : "(keys: Array[Int]): Array[Int]", "member" : "org.saddle.Index.apply", "link" : "org\/saddle\/index\/IndexInt.html#apply(keys:Array[T]):Array[Int]", "kind" : "def"}, {"label" : "apply", "tail" : "(keys: Int*): Array[Int]", "member" : "org.saddle.Index.apply", "link" : "org\/saddle\/index\/IndexInt.html#apply(keys:T*):Array[Int]", "kind" : "def"}, {"label" : "firsts", "tail" : "(keys: Array[Int]): Array[Int]", "member" : "org.saddle.Index.firsts", "link" : "org\/saddle\/index\/IndexInt.html#firsts(keys:Array[T]):Array[Int]", "kind" : "def"}, {"label" : "at", "tail" : "(locs: Int*): Index[Int]", "member" : "org.saddle.Index.at", "link" : "org\/saddle\/index\/IndexInt.html#at(locs:Int*):org.saddle.Index[T]", "kind" : "def"}, {"label" : "at", "tail" : "(locs: Array[Int]): Index[Int]", "member" : "org.saddle.Index.at", "link" : "org\/saddle\/index\/IndexInt.html#at(locs:Array[Int]):org.saddle.Index[T]", "kind" : "def"}, {"label" : "at", "tail" : "(loc: Int): Scalar[Int]", "member" : "org.saddle.Index.at", "link" : "org\/saddle\/index\/IndexInt.html#at(loc:Int):org.saddle.scalar.Scalar[T]", "kind" : "def"}, {"label" : "nonEmpty", "tail" : "(): Boolean", "member" : "org.saddle.Index.nonEmpty", "link" : "org\/saddle\/index\/IndexInt.html#nonEmpty:Boolean", "kind" : "def"}, {"label" : "isEmpty", "tail" : "(): Boolean", "member" : "org.saddle.Index.isEmpty", "link" : "org\/saddle\/index\/IndexInt.html#isEmpty:Boolean", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/saddle\/index\/IndexInt.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/saddle\/index\/IndexInt.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/saddle\/index\/IndexInt.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/saddle\/index\/IndexInt.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/saddle\/index\/IndexInt.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/saddle\/index\/IndexInt.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/saddle\/index\/IndexInt.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/index\/IndexInt.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/index\/IndexInt.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/index\/IndexInt.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/saddle\/index\/IndexInt.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/saddle\/index\/IndexInt.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/saddle\/index\/IndexInt.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "org\/saddle\/index\/IndexInt.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/saddle\/index\/IndexInt.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/saddle\/index\/IndexInt.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/saddle\/index\/IndexInt.html", "kind" : "class"}, {"name" : "org.saddle.index.IndexIntRange", "shortDescription" : "An implementation of an Index[Int] which implicitly represents a bound ofintegers, which lazily generates its elements as an array when needed.", "object" : "org\/saddle\/index\/IndexIntRange$.html", "members_class" : [{"label" : "map", "tail" : "(f: (Int) => B)(arg0: ST[B], arg1: ORD[B]): Index[B]", "member" : "org.saddle.index.IndexIntRange.map", "link" : "org\/saddle\/index\/IndexIntRange.html#map[B](f:Int=>B)(implicitevidence$1:org.saddle.ST[B],implicitevidence$2:org.saddle.ORD[B]):org.saddle.Index[B]", "kind" : "def"}, {"label" : "join", "tail" : "(other: Index[Int], how: JoinType): ReIndexer[Int]", "member" : "org.saddle.index.IndexIntRange.join", "link" : "org\/saddle\/index\/IndexIntRange.html#join(other:org.saddle.Index[Int],how:org.saddle.index.JoinType):org.saddle.index.ReIndexer[Int]", "kind" : "def"}, {"label" : "union", "tail" : "(other: Index[Int]): ReIndexer[Int]", "member" : "org.saddle.index.IndexIntRange.union", "link" : "org\/saddle\/index\/IndexIntRange.html#union(other:org.saddle.Index[Int]):org.saddle.index.ReIndexer[Int]", "kind" : "def"}, {"label" : "intersect", "tail" : "(other: Index[Int]): ReIndexer[Int]", "member" : "org.saddle.index.IndexIntRange.intersect", "link" : "org\/saddle\/index\/IndexIntRange.html#intersect(other:org.saddle.Index[Int]):org.saddle.index.ReIndexer[Int]", "kind" : "def"}, {"label" : "reversed", "tail" : "(): Index[Int]", "member" : "org.saddle.index.IndexIntRange.reversed", "link" : "org\/saddle\/index\/IndexIntRange.html#reversed:org.saddle.Index[Int]", "kind" : "def"}, {"label" : "argSort", "tail" : "(): Array[Int]", "member" : "org.saddle.index.IndexIntRange.argSort", "link" : "org\/saddle\/index\/IndexIntRange.html#argSort:Array[Int]", "kind" : "def"}, {"label" : "isContiguous", "tail" : "(): Boolean", "member" : "org.saddle.index.IndexIntRange.isContiguous", "link" : "org\/saddle\/index\/IndexIntRange.html#isContiguous:Boolean", "kind" : "def"}, {"label" : "isMonotonic", "tail" : "(): Boolean", "member" : "org.saddle.index.IndexIntRange.isMonotonic", "link" : "org\/saddle\/index\/IndexIntRange.html#isMonotonic:Boolean", "kind" : "def"}, {"label" : "getAll", "tail" : "(keys: Array[Int]): Array[Int]", "member" : "org.saddle.index.IndexIntRange.getAll", "link" : "org\/saddle\/index\/IndexIntRange.html#getAll(keys:Array[Int]):Array[Int]", "kind" : "def"}, {"label" : "slice", "tail" : "(from: Int, until: Int, stride: Int): Index[Int]", "member" : "org.saddle.index.IndexIntRange.slice", "link" : "org\/saddle\/index\/IndexIntRange.html#slice(from:Int,until:Int,stride:Int):org.saddle.Index[Int]", "kind" : "def"}, {"label" : "distinct", "tail" : "(st: ST[Int], ord: ORD[Int]): IndexIntRange", "member" : "org.saddle.index.IndexIntRange.distinct", "link" : "org\/saddle\/index\/IndexIntRange.html#distinct(implicitst:org.saddle.ST[Int],implicitord:org.saddle.ORD[Int]):org.saddle.index.IndexIntRange", "kind" : "def"}, {"label" : "rsearch", "tail" : "(t: Int): Int", "member" : "org.saddle.index.IndexIntRange.rsearch", "link" : "org\/saddle\/index\/IndexIntRange.html#rsearch(t:Int):Int", "kind" : "def"}, {"label" : "lsearch", "tail" : "(t: Int): Int", "member" : "org.saddle.index.IndexIntRange.lsearch", "link" : "org\/saddle\/index\/IndexIntRange.html#lsearch(t:Int):Int", "kind" : "def"}, {"label" : "concat", "tail" : "(x: Index[Int]): Index[Int]", "member" : "org.saddle.index.IndexIntRange.concat", "link" : "org\/saddle\/index\/IndexIntRange.html#concat(x:org.saddle.Index[Int]):org.saddle.Index[Int]", "kind" : "def"}, {"label" : "without", "tail" : "(locs: Array[Int]): Index[Int]", "member" : "org.saddle.index.IndexIntRange.without", "link" : "org\/saddle\/index\/IndexIntRange.html#without(locs:Array[Int]):org.saddle.Index[Int]", "kind" : "def"}, {"label" : "take", "tail" : "(locs: Array[Int]): Index[Int]", "member" : "org.saddle.index.IndexIntRange.take", "link" : "org\/saddle\/index\/IndexIntRange.html#take(locs:Array[Int]):org.saddle.Index[Int]", "kind" : "def"}, {"label" : "toVec", "tail" : "(): Vec[Int]", "member" : "org.saddle.index.IndexIntRange.toVec", "link" : "org\/saddle\/index\/IndexIntRange.html#toVec:org.saddle.Vec[Int]", "kind" : "def"}, {"label" : "raw", "tail" : "(loc: Int): Int", "member" : "org.saddle.index.IndexIntRange.raw", "link" : "org\/saddle\/index\/IndexIntRange.html#raw(loc:Int):Int", "kind" : "def"}, {"label" : "locatorAll", "tail" : "(): None", "member" : "org.saddle.index.IndexIntRange.locatorAll", "link" : "org\/saddle\/index\/IndexIntRange.html#locatorAll:None.type", "kind" : "def"}, {"label" : "locator", "tail" : "(): Locator[Int] { ... \/* 2 definitions in type refinement *\/ }", "member" : "org.saddle.index.IndexIntRange.locator", "link" : "org\/saddle\/index\/IndexIntRange.html#locator:org.saddle.locator.Locator[Int]{defput(key:Int,value:Int):Nothing;definc(key:Int):Nothing}", "kind" : "def"}, {"label" : "scalarTag", "tail" : ": ScalarTagInt.type", "member" : "org.saddle.index.IndexIntRange.scalarTag", "link" : "org\/saddle\/index\/IndexIntRange.html#scalarTag:org.saddle.scalar.ScalarTagInt.type", "kind" : "lazy val"}, {"member" : "org.saddle.index.IndexIntRange#<init>", "error" : "unsupported entity"}, {"label" : "ord", "tail" : ": ORD[Int]", "member" : "org.saddle.index.IndexIntRange.ord", "link" : "org\/saddle\/index\/IndexIntRange.html#ord:org.saddle.ORD[Int]", "kind" : "val"}, {"label" : "from", "tail" : ": Int", "member" : "org.saddle.index.IndexIntRange.from", "link" : "org\/saddle\/index\/IndexIntRange.html#from:Int", "kind" : "val"}, {"label" : "length", "tail" : ": Int", "member" : "org.saddle.index.IndexIntRange.length", "link" : "org\/saddle\/index\/IndexIntRange.html#length:Int", "kind" : "val"}, {"label" : "toString", "tail" : "(): String", "member" : "org.saddle.Index.toString", "link" : "org\/saddle\/index\/IndexIntRange.html#toString():String", "kind" : "def"}, {"label" : "print", "tail" : "(len: Int, stream: OutputStream): Unit", "member" : "org.saddle.Index.print", "link" : "org\/saddle\/index\/IndexIntRange.html#print(len:Int,stream:java.io.OutputStream):Unit", "kind" : "def"}, {"label" : "stringify", "tail" : "(len: Int): String", "member" : "org.saddle.Index.stringify", "link" : "org\/saddle\/index\/IndexIntRange.html#stringify(len:Int):String", "kind" : "def"}, {"label" : "equals", "tail" : "(o: Any): Boolean", "member" : "org.saddle.Index.equals", "link" : "org\/saddle\/index\/IndexIntRange.html#equals(o:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "org.saddle.Index.hashCode", "link" : "org\/saddle\/index\/IndexIntRange.html#hashCode():Int", "kind" : "def"}, {"label" : "toSeq", "tail" : "(): IndexedSeq[Int]", "member" : "org.saddle.Index.toSeq", "link" : "org\/saddle\/index\/IndexIntRange.html#toSeq:IndexedSeq[T]", "kind" : "def"}, {"label" : "next", "tail" : "(current: Scalar[Int]): Scalar[Int]", "member" : "org.saddle.Index.next", "link" : "org\/saddle\/index\/IndexIntRange.html#next(current:org.saddle.scalar.Scalar[T]):org.saddle.scalar.Scalar[T]", "kind" : "def"}, {"label" : "prev", "tail" : "(current: Scalar[Int]): Scalar[Int]", "member" : "org.saddle.Index.prev", "link" : "org\/saddle\/index\/IndexIntRange.html#prev(current:org.saddle.scalar.Scalar[T]):org.saddle.scalar.Scalar[T]", "kind" : "def"}, {"label" : "contains", "tail" : "(key: Int): Boolean", "member" : "org.saddle.Index.contains", "link" : "org\/saddle\/index\/IndexIntRange.html#contains(key:T):Boolean", "kind" : "def"}, {"label" : "getIndexer", "tail" : "(other: Index[Int]): Option[Array[Int]]", "member" : "org.saddle.Index.getIndexer", "link" : "org\/saddle\/index\/IndexIntRange.html#getIndexer(other:org.saddle.Index[T]):Option[Array[Int]]", "kind" : "def"}, {"label" : "split", "tail" : "(ev: Splitter[Int, O1, O2]): (Index[O1], Index[O2])", "member" : "org.saddle.Index.split", "link" : "org\/saddle\/index\/IndexIntRange.html#split[O1,O2](implicitev:org.saddle.index.Splitter[T,O1,O2]):(org.saddle.Index[O1],org.saddle.Index[O2])", "kind" : "def"}, {"label" : "stack", "tail" : "(other: Index[U])(ev: Stacker[Int, U, V]): Index[V]", "member" : "org.saddle.Index.stack", "link" : "org\/saddle\/index\/IndexIntRange.html#stack[U,V](other:org.saddle.Index[U])(implicitev:org.saddle.index.Stacker[T,U,V]):org.saddle.Index[V]", "kind" : "def"}, {"label" : "dropLevel", "tail" : "(ev: Splitter[Int, U, _]): Index[U]", "member" : "org.saddle.Index.dropLevel", "link" : "org\/saddle\/index\/IndexIntRange.html#dropLevel[U](implicitev:org.saddle.index.Splitter[T,U,_]):org.saddle.Index[U]", "kind" : "def"}, {"label" : "exists", "tail" : "(pred: (Int) => Boolean): Boolean", "member" : "org.saddle.Index.exists", "link" : "org\/saddle\/index\/IndexIntRange.html#exists(pred:T=>Boolean):Boolean", "kind" : "def"}, {"label" : "findOne", "tail" : "(pred: (Int) => Boolean): Int", "member" : "org.saddle.Index.findOne", "link" : "org\/saddle\/index\/IndexIntRange.html#findOne(pred:T=>Boolean):Int", "kind" : "def"}, {"label" : "sorted", "tail" : "(): Index[Int]", "member" : "org.saddle.Index.sorted", "link" : "org\/saddle\/index\/IndexIntRange.html#sorted:org.saddle.Index[T]", "kind" : "def"}, {"label" : "last", "tail" : "(): Scalar[Int]", "member" : "org.saddle.Index.last", "link" : "org\/saddle\/index\/IndexIntRange.html#last:org.saddle.scalar.Scalar[T]", "kind" : "def"}, {"label" : "first", "tail" : "(): Scalar[Int]", "member" : "org.saddle.Index.first", "link" : "org\/saddle\/index\/IndexIntRange.html#first:org.saddle.scalar.Scalar[T]", "kind" : "def"}, {"label" : "tail", "tail" : "(n: Int): Index[Int]", "member" : "org.saddle.Index.tail", "link" : "org\/saddle\/index\/IndexIntRange.html#tail(n:Int):org.saddle.Index[T]", "kind" : "def"}, {"label" : "head", "tail" : "(n: Int): Index[Int]", "member" : "org.saddle.Index.head", "link" : "org\/saddle\/index\/IndexIntRange.html#head(n:Int):org.saddle.Index[T]", "kind" : "def"}, {"label" : "get", "tail" : "(key: Int): Array[Int]", "member" : "org.saddle.Index.get", "link" : "org\/saddle\/index\/IndexIntRange.html#get(key:T):Array[Int]", "kind" : "def"}, {"label" : "getLast", "tail" : "(key: Int): Int", "member" : "org.saddle.Index.getLast", "link" : "org\/saddle\/index\/IndexIntRange.html#getLast(key:T):Int", "kind" : "def"}, {"label" : "getFirst", "tail" : "(key: Int): Int", "member" : "org.saddle.Index.getFirst", "link" : "org\/saddle\/index\/IndexIntRange.html#getFirst(key:T):Int", "kind" : "def"}, {"label" : "count", "tail" : "(key: Int): Int", "member" : "org.saddle.Index.count", "link" : "org\/saddle\/index\/IndexIntRange.html#count(key:T):Int", "kind" : "def"}, {"label" : "counts", "tail" : "(): Array[Int]", "member" : "org.saddle.Index.counts", "link" : "org\/saddle\/index\/IndexIntRange.html#counts:Array[Int]", "kind" : "def"}, {"label" : "toUniqueIndex", "tail" : "(ord: ORD[Int]): Index[(Int, Int)]", "member" : "org.saddle.Index.toUniqueIndex", "link" : "org\/saddle\/index\/IndexIntRange.html#toUniqueIndex(implicitord:org.saddle.ORD[T]):org.saddle.Index[(T,Int)]", "kind" : "def"}, {"label" : "uniques", "tail" : "(ord: ORD[Int], tag: ST[Int]): Index[Int]", "member" : "org.saddle.Index.uniques", "link" : "org\/saddle\/index\/IndexIntRange.html#uniques(implicitord:org.saddle.ORD[T],implicittag:org.saddle.ST[T]):org.saddle.Index[T]", "kind" : "def"}, {"label" : "isUnique", "tail" : "(): Boolean", "member" : "org.saddle.Index.isUnique", "link" : "org\/saddle\/index\/IndexIntRange.html#isUnique:Boolean", "kind" : "def"}, {"label" : "sliceBy", "tail" : "(rng: Slice[Int]): Index[Int]", "member" : "org.saddle.Index.sliceBy", "link" : "org\/saddle\/index\/IndexIntRange.html#sliceBy(rng:org.saddle.index.Slice[T]):org.saddle.Index[T]", "kind" : "def"}, {"label" : "sliceBy", "tail" : "(from: Int, to: Int, inclusive: Boolean): Index[Int]", "member" : "org.saddle.Index.sliceBy", "link" : "org\/saddle\/index\/IndexIntRange.html#sliceBy(from:T,to:T,inclusive:Boolean):org.saddle.Index[T]", "kind" : "def"}, {"label" : "apply", "tail" : "(keys: Array[Int]): Array[Int]", "member" : "org.saddle.Index.apply", "link" : "org\/saddle\/index\/IndexIntRange.html#apply(keys:Array[T]):Array[Int]", "kind" : "def"}, {"label" : "apply", "tail" : "(keys: Int*): Array[Int]", "member" : "org.saddle.Index.apply", "link" : "org\/saddle\/index\/IndexIntRange.html#apply(keys:T*):Array[Int]", "kind" : "def"}, {"label" : "firsts", "tail" : "(keys: Array[Int]): Array[Int]", "member" : "org.saddle.Index.firsts", "link" : "org\/saddle\/index\/IndexIntRange.html#firsts(keys:Array[T]):Array[Int]", "kind" : "def"}, {"label" : "at", "tail" : "(locs: Int*): Index[Int]", "member" : "org.saddle.Index.at", "link" : "org\/saddle\/index\/IndexIntRange.html#at(locs:Int*):org.saddle.Index[T]", "kind" : "def"}, {"label" : "at", "tail" : "(locs: Array[Int]): Index[Int]", "member" : "org.saddle.Index.at", "link" : "org\/saddle\/index\/IndexIntRange.html#at(locs:Array[Int]):org.saddle.Index[T]", "kind" : "def"}, {"label" : "at", "tail" : "(loc: Int): Scalar[Int]", "member" : "org.saddle.Index.at", "link" : "org\/saddle\/index\/IndexIntRange.html#at(loc:Int):org.saddle.scalar.Scalar[T]", "kind" : "def"}, {"label" : "nonEmpty", "tail" : "(): Boolean", "member" : "org.saddle.Index.nonEmpty", "link" : "org\/saddle\/index\/IndexIntRange.html#nonEmpty:Boolean", "kind" : "def"}, {"label" : "isEmpty", "tail" : "(): Boolean", "member" : "org.saddle.Index.isEmpty", "link" : "org\/saddle\/index\/IndexIntRange.html#isEmpty:Boolean", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/saddle\/index\/IndexIntRange.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/saddle\/index\/IndexIntRange.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/saddle\/index\/IndexIntRange.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/saddle\/index\/IndexIntRange.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/saddle\/index\/IndexIntRange.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/saddle\/index\/IndexIntRange.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/saddle\/index\/IndexIntRange.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/index\/IndexIntRange.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/index\/IndexIntRange.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/index\/IndexIntRange.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/saddle\/index\/IndexIntRange.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/saddle\/index\/IndexIntRange.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/saddle\/index\/IndexIntRange.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "org\/saddle\/index\/IndexIntRange.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/saddle\/index\/IndexIntRange.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/saddle\/index\/IndexIntRange.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "apply", "tail" : "(length: Int, from: Int): IndexIntRange", "member" : "org.saddle.index.IndexIntRange.apply", "link" : "org\/saddle\/index\/IndexIntRange$.html#apply(length:Int,from:Int):org.saddle.index.IndexIntRange", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/saddle\/index\/IndexIntRange$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/saddle\/index\/IndexIntRange$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/saddle\/index\/IndexIntRange$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/saddle\/index\/IndexIntRange$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/saddle\/index\/IndexIntRange$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/saddle\/index\/IndexIntRange$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/saddle\/index\/IndexIntRange$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/index\/IndexIntRange$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/index\/IndexIntRange$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/index\/IndexIntRange$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/saddle\/index\/IndexIntRange$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/saddle\/index\/IndexIntRange$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/saddle\/index\/IndexIntRange$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/saddle\/index\/IndexIntRange$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/saddle\/index\/IndexIntRange$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/saddle\/index\/IndexIntRange$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "org\/saddle\/index\/IndexIntRange$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/saddle\/index\/IndexIntRange$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/saddle\/index\/IndexIntRange$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/saddle\/index\/IndexIntRange.html", "kind" : "class"}, {"name" : "org.saddle.index.IndexLong", "shortDescription" : "Index with long keys", "members_class" : [{"label" : "equals", "tail" : "(o: Any): Boolean", "member" : "org.saddle.index.IndexLong.equals", "link" : "org\/saddle\/index\/IndexLong.html#equals(o:Any):Boolean", "kind" : "def"}, {"label" : "toArray", "tail" : "(): Array[Long]", "member" : "org.saddle.index.IndexLong.toArray", "link" : "org\/saddle\/index\/IndexLong.html#toArray:Array[Long]", "kind" : "def"}, {"label" : "map", "tail" : "(f: (Long) => B)(arg0: ST[B], arg1: ORD[B]): Index[B]", "member" : "org.saddle.index.IndexLong.map", "link" : "org\/saddle\/index\/IndexLong.html#map[B](f:Long=>B)(implicitevidence$1:org.saddle.ST[B],implicitevidence$2:org.saddle.ORD[B]):org.saddle.Index[B]", "kind" : "def"}, {"label" : "rsearch", "tail" : "(t: Long): Int", "member" : "org.saddle.index.IndexLong.rsearch", "link" : "org\/saddle\/index\/IndexLong.html#rsearch(t:Long):Int", "kind" : "def"}, {"label" : "lsearch", "tail" : "(t: Long): Int", "member" : "org.saddle.index.IndexLong.lsearch", "link" : "org\/saddle\/index\/IndexLong.html#lsearch(t:Long):Int", "kind" : "def"}, {"label" : "slice", "tail" : "(from: Int, until: Int, stride: Int): Index[Long]", "member" : "org.saddle.index.IndexLong.slice", "link" : "org\/saddle\/index\/IndexLong.html#slice(from:Int,until:Int,stride:Int):org.saddle.Index[Long]", "kind" : "def"}, {"label" : "union", "tail" : "(other: Index[Long]): ReIndexer[Long]", "member" : "org.saddle.index.IndexLong.union", "link" : "org\/saddle\/index\/IndexLong.html#union(other:org.saddle.Index[Long]):org.saddle.index.ReIndexer[Long]", "kind" : "def"}, {"label" : "intersect", "tail" : "(other: Index[Long]): ReIndexer[Long]", "member" : "org.saddle.index.IndexLong.intersect", "link" : "org\/saddle\/index\/IndexLong.html#intersect(other:org.saddle.Index[Long]):org.saddle.index.ReIndexer[Long]", "kind" : "def"}, {"label" : "join", "tail" : "(other: Index[Long], how: JoinType): ReIndexer[Long]", "member" : "org.saddle.index.IndexLong.join", "link" : "org\/saddle\/index\/IndexLong.html#join(other:org.saddle.Index[Long],how:org.saddle.index.JoinType):org.saddle.index.ReIndexer[Long]", "kind" : "def"}, {"label" : "reversed", "tail" : "(): Index[Long]", "member" : "org.saddle.index.IndexLong.reversed", "link" : "org\/saddle\/index\/IndexLong.html#reversed:org.saddle.Index[Long]", "kind" : "def"}, {"label" : "argSort", "tail" : "(): Array[Int]", "member" : "org.saddle.index.IndexLong.argSort", "link" : "org\/saddle\/index\/IndexLong.html#argSort:Array[Int]", "kind" : "def"}, {"label" : "isContiguous", "tail" : "(): Boolean", "member" : "org.saddle.index.IndexLong.isContiguous", "link" : "org\/saddle\/index\/IndexLong.html#isContiguous:Boolean", "kind" : "def"}, {"label" : "isMonotonic", "tail" : "(): Boolean", "member" : "org.saddle.index.IndexLong.isMonotonic", "link" : "org\/saddle\/index\/IndexLong.html#isMonotonic:Boolean", "kind" : "def"}, {"label" : "concat", "tail" : "(x: Index[Long]): Index[Long]", "member" : "org.saddle.index.IndexLong.concat", "link" : "org\/saddle\/index\/IndexLong.html#concat(x:org.saddle.Index[Long]):org.saddle.Index[Long]", "kind" : "def"}, {"label" : "without", "tail" : "(locs: Array[Int]): Index[Long]", "member" : "org.saddle.index.IndexLong.without", "link" : "org\/saddle\/index\/IndexLong.html#without(locs:Array[Int]):org.saddle.Index[Long]", "kind" : "def"}, {"label" : "take", "tail" : "(locs: Array[Int]): Index[Long]", "member" : "org.saddle.index.IndexLong.take", "link" : "org\/saddle\/index\/IndexLong.html#take(locs:Array[Int]):org.saddle.Index[Long]", "kind" : "def"}, {"label" : "raw", "tail" : "(idx: Int): Long", "member" : "org.saddle.index.IndexLong.raw", "link" : "org\/saddle\/index\/IndexLong.html#raw(idx:Int):Long", "kind" : "def"}, {"label" : "toVec", "tail" : "(): Vec[Long]", "member" : "org.saddle.index.IndexLong.toVec", "link" : "org\/saddle\/index\/IndexLong.html#toVec:org.saddle.Vec[Long]", "kind" : "def"}, {"label" : "length", "tail" : "(): Int", "member" : "org.saddle.index.IndexLong.length", "link" : "org\/saddle\/index\/IndexLong.html#length:Int", "kind" : "def"}, {"label" : "locatorAll", "tail" : "(): Option[LocatorAll[Long]]", "member" : "org.saddle.index.IndexLong.locatorAll", "link" : "org\/saddle\/index\/IndexLong.html#locatorAll:Option[org.saddle.locatorall.LocatorAll[Long]]", "kind" : "def"}, {"label" : "locator", "tail" : "(): Locator[Long]", "member" : "org.saddle.index.IndexLong.locator", "link" : "org\/saddle\/index\/IndexLong.html#locator:org.saddle.locator.Locator[Long]", "kind" : "def"}, {"label" : "scalarTag", "tail" : ": ScalarTagLong.type", "member" : "org.saddle.index.IndexLong.scalarTag", "link" : "org\/saddle\/index\/IndexLong.html#scalarTag:org.saddle.scalar.ScalarTagLong.type", "kind" : "val"}, {"member" : "org.saddle.index.IndexLong#<init>", "error" : "unsupported entity"}, {"label" : "ord", "tail" : ": ORD[Long]", "member" : "org.saddle.index.IndexLong.ord", "link" : "org\/saddle\/index\/IndexLong.html#ord:org.saddle.ORD[Long]", "kind" : "val"}, {"label" : "toString", "tail" : "(): String", "member" : "org.saddle.Index.toString", "link" : "org\/saddle\/index\/IndexLong.html#toString():String", "kind" : "def"}, {"label" : "print", "tail" : "(len: Int, stream: OutputStream): Unit", "member" : "org.saddle.Index.print", "link" : "org\/saddle\/index\/IndexLong.html#print(len:Int,stream:java.io.OutputStream):Unit", "kind" : "def"}, {"label" : "stringify", "tail" : "(len: Int): String", "member" : "org.saddle.Index.stringify", "link" : "org\/saddle\/index\/IndexLong.html#stringify(len:Int):String", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "org.saddle.Index.hashCode", "link" : "org\/saddle\/index\/IndexLong.html#hashCode():Int", "kind" : "def"}, {"label" : "toSeq", "tail" : "(): IndexedSeq[Long]", "member" : "org.saddle.Index.toSeq", "link" : "org\/saddle\/index\/IndexLong.html#toSeq:IndexedSeq[T]", "kind" : "def"}, {"label" : "next", "tail" : "(current: Scalar[Long]): Scalar[Long]", "member" : "org.saddle.Index.next", "link" : "org\/saddle\/index\/IndexLong.html#next(current:org.saddle.scalar.Scalar[T]):org.saddle.scalar.Scalar[T]", "kind" : "def"}, {"label" : "prev", "tail" : "(current: Scalar[Long]): Scalar[Long]", "member" : "org.saddle.Index.prev", "link" : "org\/saddle\/index\/IndexLong.html#prev(current:org.saddle.scalar.Scalar[T]):org.saddle.scalar.Scalar[T]", "kind" : "def"}, {"label" : "contains", "tail" : "(key: Long): Boolean", "member" : "org.saddle.Index.contains", "link" : "org\/saddle\/index\/IndexLong.html#contains(key:T):Boolean", "kind" : "def"}, {"label" : "getIndexer", "tail" : "(other: Index[Long]): Option[Array[Int]]", "member" : "org.saddle.Index.getIndexer", "link" : "org\/saddle\/index\/IndexLong.html#getIndexer(other:org.saddle.Index[T]):Option[Array[Int]]", "kind" : "def"}, {"label" : "split", "tail" : "(ev: Splitter[Long, O1, O2]): (Index[O1], Index[O2])", "member" : "org.saddle.Index.split", "link" : "org\/saddle\/index\/IndexLong.html#split[O1,O2](implicitev:org.saddle.index.Splitter[T,O1,O2]):(org.saddle.Index[O1],org.saddle.Index[O2])", "kind" : "def"}, {"label" : "stack", "tail" : "(other: Index[U])(ev: Stacker[Long, U, V]): Index[V]", "member" : "org.saddle.Index.stack", "link" : "org\/saddle\/index\/IndexLong.html#stack[U,V](other:org.saddle.Index[U])(implicitev:org.saddle.index.Stacker[T,U,V]):org.saddle.Index[V]", "kind" : "def"}, {"label" : "dropLevel", "tail" : "(ev: Splitter[Long, U, _]): Index[U]", "member" : "org.saddle.Index.dropLevel", "link" : "org\/saddle\/index\/IndexLong.html#dropLevel[U](implicitev:org.saddle.index.Splitter[T,U,_]):org.saddle.Index[U]", "kind" : "def"}, {"label" : "exists", "tail" : "(pred: (Long) => Boolean): Boolean", "member" : "org.saddle.Index.exists", "link" : "org\/saddle\/index\/IndexLong.html#exists(pred:T=>Boolean):Boolean", "kind" : "def"}, {"label" : "findOne", "tail" : "(pred: (Long) => Boolean): Int", "member" : "org.saddle.Index.findOne", "link" : "org\/saddle\/index\/IndexLong.html#findOne(pred:T=>Boolean):Int", "kind" : "def"}, {"label" : "sorted", "tail" : "(): Index[Long]", "member" : "org.saddle.Index.sorted", "link" : "org\/saddle\/index\/IndexLong.html#sorted:org.saddle.Index[T]", "kind" : "def"}, {"label" : "last", "tail" : "(): Scalar[Long]", "member" : "org.saddle.Index.last", "link" : "org\/saddle\/index\/IndexLong.html#last:org.saddle.scalar.Scalar[T]", "kind" : "def"}, {"label" : "first", "tail" : "(): Scalar[Long]", "member" : "org.saddle.Index.first", "link" : "org\/saddle\/index\/IndexLong.html#first:org.saddle.scalar.Scalar[T]", "kind" : "def"}, {"label" : "tail", "tail" : "(n: Int): Index[Long]", "member" : "org.saddle.Index.tail", "link" : "org\/saddle\/index\/IndexLong.html#tail(n:Int):org.saddle.Index[T]", "kind" : "def"}, {"label" : "head", "tail" : "(n: Int): Index[Long]", "member" : "org.saddle.Index.head", "link" : "org\/saddle\/index\/IndexLong.html#head(n:Int):org.saddle.Index[T]", "kind" : "def"}, {"label" : "get", "tail" : "(key: Long): Array[Int]", "member" : "org.saddle.Index.get", "link" : "org\/saddle\/index\/IndexLong.html#get(key:T):Array[Int]", "kind" : "def"}, {"label" : "getLast", "tail" : "(key: Long): Int", "member" : "org.saddle.Index.getLast", "link" : "org\/saddle\/index\/IndexLong.html#getLast(key:T):Int", "kind" : "def"}, {"label" : "getFirst", "tail" : "(key: Long): Int", "member" : "org.saddle.Index.getFirst", "link" : "org\/saddle\/index\/IndexLong.html#getFirst(key:T):Int", "kind" : "def"}, {"label" : "count", "tail" : "(key: Long): Int", "member" : "org.saddle.Index.count", "link" : "org\/saddle\/index\/IndexLong.html#count(key:T):Int", "kind" : "def"}, {"label" : "counts", "tail" : "(): Array[Int]", "member" : "org.saddle.Index.counts", "link" : "org\/saddle\/index\/IndexLong.html#counts:Array[Int]", "kind" : "def"}, {"label" : "toUniqueIndex", "tail" : "(ord: ORD[Long]): Index[(Long, Int)]", "member" : "org.saddle.Index.toUniqueIndex", "link" : "org\/saddle\/index\/IndexLong.html#toUniqueIndex(implicitord:org.saddle.ORD[T]):org.saddle.Index[(T,Int)]", "kind" : "def"}, {"label" : "uniques", "tail" : "(ord: ORD[Long], tag: ST[Long]): Index[Long]", "member" : "org.saddle.Index.uniques", "link" : "org\/saddle\/index\/IndexLong.html#uniques(implicitord:org.saddle.ORD[T],implicittag:org.saddle.ST[T]):org.saddle.Index[T]", "kind" : "def"}, {"label" : "isUnique", "tail" : "(): Boolean", "member" : "org.saddle.Index.isUnique", "link" : "org\/saddle\/index\/IndexLong.html#isUnique:Boolean", "kind" : "def"}, {"label" : "sliceBy", "tail" : "(rng: Slice[Long]): Index[Long]", "member" : "org.saddle.Index.sliceBy", "link" : "org\/saddle\/index\/IndexLong.html#sliceBy(rng:org.saddle.index.Slice[T]):org.saddle.Index[T]", "kind" : "def"}, {"label" : "sliceBy", "tail" : "(from: Long, to: Long, inclusive: Boolean): Index[Long]", "member" : "org.saddle.Index.sliceBy", "link" : "org\/saddle\/index\/IndexLong.html#sliceBy(from:T,to:T,inclusive:Boolean):org.saddle.Index[T]", "kind" : "def"}, {"label" : "distinct", "tail" : "(st: ST[Long], ord: ORD[Long]): Index[Long]", "member" : "org.saddle.Index.distinct", "link" : "org\/saddle\/index\/IndexLong.html#distinct(implicitst:org.saddle.ST[T],implicitord:org.saddle.ORD[T]):org.saddle.Index[T]", "kind" : "def"}, {"label" : "apply", "tail" : "(keys: Array[Long]): Array[Int]", "member" : "org.saddle.Index.apply", "link" : "org\/saddle\/index\/IndexLong.html#apply(keys:Array[T]):Array[Int]", "kind" : "def"}, {"label" : "apply", "tail" : "(keys: Long*): Array[Int]", "member" : "org.saddle.Index.apply", "link" : "org\/saddle\/index\/IndexLong.html#apply(keys:T*):Array[Int]", "kind" : "def"}, {"label" : "firsts", "tail" : "(keys: Array[Long]): Array[Int]", "member" : "org.saddle.Index.firsts", "link" : "org\/saddle\/index\/IndexLong.html#firsts(keys:Array[T]):Array[Int]", "kind" : "def"}, {"label" : "at", "tail" : "(locs: Int*): Index[Long]", "member" : "org.saddle.Index.at", "link" : "org\/saddle\/index\/IndexLong.html#at(locs:Int*):org.saddle.Index[T]", "kind" : "def"}, {"label" : "at", "tail" : "(locs: Array[Int]): Index[Long]", "member" : "org.saddle.Index.at", "link" : "org\/saddle\/index\/IndexLong.html#at(locs:Array[Int]):org.saddle.Index[T]", "kind" : "def"}, {"label" : "at", "tail" : "(loc: Int): Scalar[Long]", "member" : "org.saddle.Index.at", "link" : "org\/saddle\/index\/IndexLong.html#at(loc:Int):org.saddle.scalar.Scalar[T]", "kind" : "def"}, {"label" : "nonEmpty", "tail" : "(): Boolean", "member" : "org.saddle.Index.nonEmpty", "link" : "org\/saddle\/index\/IndexLong.html#nonEmpty:Boolean", "kind" : "def"}, {"label" : "isEmpty", "tail" : "(): Boolean", "member" : "org.saddle.Index.isEmpty", "link" : "org\/saddle\/index\/IndexLong.html#isEmpty:Boolean", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/saddle\/index\/IndexLong.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/saddle\/index\/IndexLong.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/saddle\/index\/IndexLong.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/saddle\/index\/IndexLong.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/saddle\/index\/IndexLong.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/saddle\/index\/IndexLong.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/saddle\/index\/IndexLong.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/index\/IndexLong.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/index\/IndexLong.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/index\/IndexLong.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/saddle\/index\/IndexLong.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/saddle\/index\/IndexLong.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/saddle\/index\/IndexLong.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "org\/saddle\/index\/IndexLong.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/saddle\/index\/IndexLong.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/saddle\/index\/IndexLong.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/saddle\/index\/IndexLong.html", "kind" : "class"}, {"name" : "org.saddle.index.IndexMaker", "object" : "org\/saddle\/index\/IndexMaker$.html", "members_object" : [{"label" : "make5V", "tail" : "(arg0: ORD[I1], arg1: ORD[I2], arg2: ORD[I3], arg3: ORD[I4], arg4: ORD[I5]): IndexMaker[(T[I1], T[I2], T[I3], T[I4], T[I5]), (I1, I2, I3, I4, I5)]", "member" : "org.saddle.index.IndexMaker.make5V", "link" : "org\/saddle\/index\/IndexMaker$.html#make5V[T[K]<:IndexedSeq[K],I1,I2,I3,I4,I5](implicitevidence$12:org.saddle.ORD[I1],implicitevidence$13:org.saddle.ORD[I2],implicitevidence$14:org.saddle.ORD[I3],implicitevidence$15:org.saddle.ORD[I4],implicitevidence$16:org.saddle.ORD[I5]):org.saddle.index.IndexMaker[(T[I1],T[I2],T[I3],T[I4],T[I5]),(I1,I2,I3,I4,I5)]", "kind" : "implicit def"}, {"label" : "make4V", "tail" : "(arg0: ORD[I1], arg1: ORD[I2], arg2: ORD[I3], arg3: ORD[I4]): IndexMaker[(T[I1], T[I2], T[I3], T[I4]), (I1, I2, I3, I4)]", "member" : "org.saddle.index.IndexMaker.make4V", "link" : "org\/saddle\/index\/IndexMaker$.html#make4V[T[K]<:IndexedSeq[K],I1,I2,I3,I4](implicitevidence$8:org.saddle.ORD[I1],implicitevidence$9:org.saddle.ORD[I2],implicitevidence$10:org.saddle.ORD[I3],implicitevidence$11:org.saddle.ORD[I4]):org.saddle.index.IndexMaker[(T[I1],T[I2],T[I3],T[I4]),(I1,I2,I3,I4)]", "kind" : "implicit def"}, {"label" : "make3V", "tail" : "(arg0: ORD[I1], arg1: ORD[I2], arg2: ORD[I3]): IndexMaker[(T[I1], T[I2], T[I3]), (I1, I2, I3)]", "member" : "org.saddle.index.IndexMaker.make3V", "link" : "org\/saddle\/index\/IndexMaker$.html#make3V[T[K]<:IndexedSeq[K],I1,I2,I3](implicitevidence$5:org.saddle.ORD[I1],implicitevidence$6:org.saddle.ORD[I2],implicitevidence$7:org.saddle.ORD[I3]):org.saddle.index.IndexMaker[(T[I1],T[I2],T[I3]),(I1,I2,I3)]", "kind" : "implicit def"}, {"label" : "make2Vec", "tail" : "(arg0: ORD[I1], arg1: ORD[I2]): IndexMaker[(Vec[I1], Vec[I2]), (I1, I2)]", "member" : "org.saddle.index.IndexMaker.make2Vec", "link" : "org\/saddle\/index\/IndexMaker$.html#make2Vec[I1,I2](implicitevidence$3:org.saddle.ORD[I1],implicitevidence$4:org.saddle.ORD[I2]):org.saddle.index.IndexMaker[(org.saddle.Vec[I1],org.saddle.Vec[I2]),(I1,I2)]", "kind" : "implicit def"}, {"label" : "make2V", "tail" : "(arg0: ORD[I1], arg1: ORD[I2]): IndexMaker[(T[I1], T[I2]), (I1, I2)]", "member" : "org.saddle.index.IndexMaker.make2V", "link" : "org\/saddle\/index\/IndexMaker$.html#make2V[T[K]<:IndexedSeq[K],I1,I2](implicitevidence$1:org.saddle.ORD[I1],implicitevidence$2:org.saddle.ORD[I2]):org.saddle.index.IndexMaker[(T[I1],T[I2]),(I1,I2)]", "kind" : "implicit def"}, {"label" : "make1V", "tail" : "(st: ST[A], org: ORD[A]): IndexMaker[T[A], A]", "member" : "org.saddle.index.IndexMakerLowPriority.make1V", "link" : "org\/saddle\/index\/IndexMaker$.html#make1V[T[K]<:IndexedSeq[K],A](implicitst:org.saddle.ST[A],implicitorg:org.saddle.ORD[A]):org.saddle.index.IndexMaker[T[A],A]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/saddle\/index\/IndexMaker$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/saddle\/index\/IndexMaker$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/saddle\/index\/IndexMaker$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/saddle\/index\/IndexMaker$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/saddle\/index\/IndexMaker$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/saddle\/index\/IndexMaker$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/saddle\/index\/IndexMaker$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/index\/IndexMaker$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/index\/IndexMaker$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/index\/IndexMaker$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/saddle\/index\/IndexMaker$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/saddle\/index\/IndexMaker$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/saddle\/index\/IndexMaker$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/saddle\/index\/IndexMaker$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/saddle\/index\/IndexMaker$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/saddle\/index\/IndexMaker$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "org\/saddle\/index\/IndexMaker$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/saddle\/index\/IndexMaker$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/saddle\/index\/IndexMaker$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "org\/saddle\/index\/IndexMaker.html", "kind" : "trait", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/saddle\/index\/IndexMaker.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/saddle\/index\/IndexMaker.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/saddle\/index\/IndexMaker.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/saddle\/index\/IndexMaker.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/saddle\/index\/IndexMaker.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/saddle\/index\/IndexMaker.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/saddle\/index\/IndexMaker.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/index\/IndexMaker.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/index\/IndexMaker.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/index\/IndexMaker.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/saddle\/index\/IndexMaker.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/saddle\/index\/IndexMaker.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/saddle\/index\/IndexMaker.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/saddle\/index\/IndexMaker.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/saddle\/index\/IndexMaker.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/saddle\/index\/IndexMaker.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "org\/saddle\/index\/IndexMaker.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/saddle\/index\/IndexMaker.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/saddle\/index\/IndexMaker.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "apply", "tail" : "(in: I): Index[O]", "member" : "org.saddle.index.IndexMaker.apply", "link" : "org\/saddle\/index\/IndexMaker.html#apply(in:I):org.saddle.Index[O]", "kind" : "abstract def"}], "shortDescription" : "An IndexMaker takes some input of type I and returns an Index whose elementsare of type O."}, {"name" : "org.saddle.index.IndexMakerLowPriority", "trait" : "org\/saddle\/index\/IndexMakerLowPriority.html", "kind" : "trait", "members_trait" : [{"label" : "make1V", "tail" : "(st: ST[A], org: ORD[A]): IndexMaker[T[A], A]", "member" : "org.saddle.index.IndexMakerLowPriority.make1V", "link" : "org\/saddle\/index\/IndexMakerLowPriority.html#make1V[T[K]<:IndexedSeq[K],A](implicitst:org.saddle.ST[A],implicitorg:org.saddle.ORD[A]):org.saddle.index.IndexMaker[T[A],A]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/saddle\/index\/IndexMakerLowPriority.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/saddle\/index\/IndexMakerLowPriority.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/saddle\/index\/IndexMakerLowPriority.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/saddle\/index\/IndexMakerLowPriority.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/saddle\/index\/IndexMakerLowPriority.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/saddle\/index\/IndexMakerLowPriority.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/saddle\/index\/IndexMakerLowPriority.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/index\/IndexMakerLowPriority.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/index\/IndexMakerLowPriority.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/index\/IndexMakerLowPriority.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/saddle\/index\/IndexMakerLowPriority.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/saddle\/index\/IndexMakerLowPriority.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/saddle\/index\/IndexMakerLowPriority.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/saddle\/index\/IndexMakerLowPriority.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/saddle\/index\/IndexMakerLowPriority.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/saddle\/index\/IndexMakerLowPriority.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "org\/saddle\/index\/IndexMakerLowPriority.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/saddle\/index\/IndexMakerLowPriority.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/saddle\/index\/IndexMakerLowPriority.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}, {"name" : "org.saddle.index.InnerJoin", "shortDescription" : "", "object" : "org\/saddle\/index\/InnerJoin$.html", "members_object" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/saddle\/index\/InnerJoin$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/saddle\/index\/InnerJoin$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/saddle\/index\/InnerJoin$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/saddle\/index\/InnerJoin$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/saddle\/index\/InnerJoin$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/saddle\/index\/InnerJoin$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/saddle\/index\/InnerJoin$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/index\/InnerJoin$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/index\/InnerJoin$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/index\/InnerJoin$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/saddle\/index\/InnerJoin$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/saddle\/index\/InnerJoin$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/saddle\/index\/InnerJoin$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/saddle\/index\/InnerJoin$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/saddle\/index\/InnerJoin$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/saddle\/index\/InnerJoin$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "org\/saddle\/index\/InnerJoin$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/saddle\/index\/InnerJoin$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/saddle\/index\/InnerJoin$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "org.saddle.index.JoinerImpl", "shortDescription" : "Concrete implementation of Joiner instance which is specialized on basictypes.", "members_class" : [{"label" : "leftJoinMonotonic", "tail" : "(left: Index[T], right: Index[T]): ReIndexer[T]", "member" : "org.saddle.index.JoinerImpl.leftJoinMonotonic", "link" : "org\/saddle\/index\/JoinerImpl.html#leftJoinMonotonic(left:org.saddle.Index[T],right:org.saddle.Index[T]):org.saddle.index.ReIndexer[T]", "kind" : "def"}, {"label" : "leftJoinMonotonicUnique", "tail" : "(left: Index[T], right: Index[T]): ReIndexer[T]", "member" : "org.saddle.index.JoinerImpl.leftJoinMonotonicUnique", "link" : "org\/saddle\/index\/JoinerImpl.html#leftJoinMonotonicUnique(left:org.saddle.Index[T],right:org.saddle.Index[T]):org.saddle.index.ReIndexer[T]", "kind" : "def"}, {"label" : "outerJoinUnique", "tail" : "(left: Index[T], right: Index[T]): ReIndexer[T]", "member" : "org.saddle.index.JoinerImpl.outerJoinUnique", "link" : "org\/saddle\/index\/JoinerImpl.html#outerJoinUnique(left:org.saddle.Index[T],right:org.saddle.Index[T]):org.saddle.index.ReIndexer[T]", "kind" : "def"}, {"label" : "outerJoinMonotonic", "tail" : "(left: Index[T], right: Index[T]): ReIndexer[T]", "member" : "org.saddle.index.JoinerImpl.outerJoinMonotonic", "link" : "org\/saddle\/index\/JoinerImpl.html#outerJoinMonotonic(left:org.saddle.Index[T],right:org.saddle.Index[T]):org.saddle.index.ReIndexer[T]", "kind" : "def"}, {"label" : "outerJoinMonotonicUnique", "tail" : "(left: Index[T], right: Index[T]): ReIndexer[T]", "member" : "org.saddle.index.JoinerImpl.outerJoinMonotonicUnique", "link" : "org\/saddle\/index\/JoinerImpl.html#outerJoinMonotonicUnique(left:org.saddle.Index[T],right:org.saddle.Index[T]):org.saddle.index.ReIndexer[T]", "kind" : "def"}, {"label" : "innerJoinUnique", "tail" : "(left: Index[T], right: Index[T]): ReIndexer[T]", "member" : "org.saddle.index.JoinerImpl.innerJoinUnique", "link" : "org\/saddle\/index\/JoinerImpl.html#innerJoinUnique(left:org.saddle.Index[T],right:org.saddle.Index[T]):org.saddle.index.ReIndexer[T]", "kind" : "def"}, {"label" : "innerJoinMonotonic", "tail" : "(left: Index[T], right: Index[T]): ReIndexer[T]", "member" : "org.saddle.index.JoinerImpl.innerJoinMonotonic", "link" : "org\/saddle\/index\/JoinerImpl.html#innerJoinMonotonic(left:org.saddle.Index[T],right:org.saddle.Index[T]):org.saddle.index.ReIndexer[T]", "kind" : "def"}, {"label" : "innerJoinMonotonicUnique", "tail" : "(left: Index[T], right: Index[T]): ReIndexer[T]", "member" : "org.saddle.index.JoinerImpl.innerJoinMonotonicUnique", "link" : "org\/saddle\/index\/JoinerImpl.html#innerJoinMonotonicUnique(left:org.saddle.Index[T],right:org.saddle.Index[T]):org.saddle.index.ReIndexer[T]", "kind" : "def"}, {"label" : "join", "tail" : "(left: Index[T], right: Index[T], how: JoinType): ReIndexer[T]", "member" : "org.saddle.index.JoinerImpl.join", "link" : "org\/saddle\/index\/JoinerImpl.html#join(left:org.saddle.Index[T],right:org.saddle.Index[T],how:org.saddle.index.JoinType):org.saddle.index.ReIndexer[T]", "kind" : "def"}, {"member" : "org.saddle.index.JoinerImpl#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/saddle\/index\/JoinerImpl.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/saddle\/index\/JoinerImpl.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/saddle\/index\/JoinerImpl.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/saddle\/index\/JoinerImpl.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/saddle\/index\/JoinerImpl.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/saddle\/index\/JoinerImpl.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/saddle\/index\/JoinerImpl.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/index\/JoinerImpl.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/index\/JoinerImpl.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/index\/JoinerImpl.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/saddle\/index\/JoinerImpl.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/saddle\/index\/JoinerImpl.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/saddle\/index\/JoinerImpl.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/saddle\/index\/JoinerImpl.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/saddle\/index\/JoinerImpl.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/saddle\/index\/JoinerImpl.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "org\/saddle\/index\/JoinerImpl.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/saddle\/index\/JoinerImpl.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/saddle\/index\/JoinerImpl.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/saddle\/index\/JoinerImpl.html", "kind" : "class"}, {"name" : "org.saddle.index.JoinType", "trait" : "org\/saddle\/index\/JoinType.html", "kind" : "trait", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/saddle\/index\/JoinType.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/saddle\/index\/JoinType.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/saddle\/index\/JoinType.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/saddle\/index\/JoinType.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/saddle\/index\/JoinType.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/saddle\/index\/JoinType.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/saddle\/index\/JoinType.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/index\/JoinType.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/index\/JoinType.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/index\/JoinType.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/saddle\/index\/JoinType.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/saddle\/index\/JoinType.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/saddle\/index\/JoinType.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/saddle\/index\/JoinType.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/saddle\/index\/JoinType.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/saddle\/index\/JoinType.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "org\/saddle\/index\/JoinType.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/saddle\/index\/JoinType.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/saddle\/index\/JoinType.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "There are four basic joins which may be performed between two indexed Saddleobjects such as org.saddle.Series or org.saddle.Frame."}, {"name" : "org.saddle.index.LeftJoin", "shortDescription" : "", "object" : "org\/saddle\/index\/LeftJoin$.html", "members_object" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/saddle\/index\/LeftJoin$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/saddle\/index\/LeftJoin$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/saddle\/index\/LeftJoin$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/saddle\/index\/LeftJoin$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/saddle\/index\/LeftJoin$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/saddle\/index\/LeftJoin$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/saddle\/index\/LeftJoin$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/index\/LeftJoin$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/index\/LeftJoin$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/index\/LeftJoin$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/saddle\/index\/LeftJoin$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/saddle\/index\/LeftJoin$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/saddle\/index\/LeftJoin$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/saddle\/index\/LeftJoin$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/saddle\/index\/LeftJoin$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/saddle\/index\/LeftJoin$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "org\/saddle\/index\/LeftJoin$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/saddle\/index\/LeftJoin$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/saddle\/index\/LeftJoin$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "org.saddle.index.Melter", "object" : "org\/saddle\/index\/Melter$.html", "members_object" : [{"label" : "melt7_2", "tail" : "(arg0: ORD[A], arg1: ORD[B], arg2: ORD[C], arg3: ORD[D], arg4: ORD[E], arg5: ORD[F], arg6: ORD[G], arg7: ORD[H], arg8: ORD[I]): Melter[(A, B, C, D, E, F, G), (H, I), (A, B, C, D, E, F, G, H, I)]", "member" : "org.saddle.index.Melter.melt7_2", "link" : "org\/saddle\/index\/Melter$.html#melt7_2[A,B,C,D,E,F,G,H,I](implicitevidence$234:org.saddle.ORD[A],implicitevidence$235:org.saddle.ORD[B],implicitevidence$236:org.saddle.ORD[C],implicitevidence$237:org.saddle.ORD[D],implicitevidence$238:org.saddle.ORD[E],implicitevidence$239:org.saddle.ORD[F],implicitevidence$240:org.saddle.ORD[G],implicitevidence$241:org.saddle.ORD[H],implicitevidence$242:org.saddle.ORD[I]):org.saddle.index.Melter[(A,B,C,D,E,F,G),(H,I),(A,B,C,D,E,F,G,H,I)]", "kind" : "implicit def"}, {"label" : "melt6_3", "tail" : "(arg0: ORD[A], arg1: ORD[B], arg2: ORD[C], arg3: ORD[D], arg4: ORD[E], arg5: ORD[F], arg6: ORD[G], arg7: ORD[H], arg8: ORD[I]): Melter[(A, B, C, D, E, F), (G, H, I), (A, B, C, D, E, F, G, H, I)]", "member" : "org.saddle.index.Melter.melt6_3", "link" : "org\/saddle\/index\/Melter$.html#melt6_3[A,B,C,D,E,F,G,H,I](implicitevidence$225:org.saddle.ORD[A],implicitevidence$226:org.saddle.ORD[B],implicitevidence$227:org.saddle.ORD[C],implicitevidence$228:org.saddle.ORD[D],implicitevidence$229:org.saddle.ORD[E],implicitevidence$230:org.saddle.ORD[F],implicitevidence$231:org.saddle.ORD[G],implicitevidence$232:org.saddle.ORD[H],implicitevidence$233:org.saddle.ORD[I]):org.saddle.index.Melter[(A,B,C,D,E,F),(G,H,I),(A,B,C,D,E,F,G,H,I)]", "kind" : "implicit def"}, {"label" : "melt5_4", "tail" : "(arg0: ORD[A], arg1: ORD[B], arg2: ORD[C], arg3: ORD[D], arg4: ORD[E], arg5: ORD[F], arg6: ORD[G], arg7: ORD[H], arg8: ORD[I]): Melter[(A, B, C, D, E), (F, G, H, I), (A, B, C, D, E, F, G, H, I)]", "member" : "org.saddle.index.Melter.melt5_4", "link" : "org\/saddle\/index\/Melter$.html#melt5_4[A,B,C,D,E,F,G,H,I](implicitevidence$216:org.saddle.ORD[A],implicitevidence$217:org.saddle.ORD[B],implicitevidence$218:org.saddle.ORD[C],implicitevidence$219:org.saddle.ORD[D],implicitevidence$220:org.saddle.ORD[E],implicitevidence$221:org.saddle.ORD[F],implicitevidence$222:org.saddle.ORD[G],implicitevidence$223:org.saddle.ORD[H],implicitevidence$224:org.saddle.ORD[I]):org.saddle.index.Melter[(A,B,C,D,E),(F,G,H,I),(A,B,C,D,E,F,G,H,I)]", "kind" : "implicit def"}, {"label" : "melt4_5", "tail" : "(arg0: ORD[A], arg1: ORD[B], arg2: ORD[C], arg3: ORD[D], arg4: ORD[E], arg5: ORD[F], arg6: ORD[G], arg7: ORD[H], arg8: ORD[I]): Melter[(A, B, C, D), (E, F, G, H, I), (A, B, C, D, E, F, G, H, I)]", "member" : "org.saddle.index.Melter.melt4_5", "link" : "org\/saddle\/index\/Melter$.html#melt4_5[A,B,C,D,E,F,G,H,I](implicitevidence$207:org.saddle.ORD[A],implicitevidence$208:org.saddle.ORD[B],implicitevidence$209:org.saddle.ORD[C],implicitevidence$210:org.saddle.ORD[D],implicitevidence$211:org.saddle.ORD[E],implicitevidence$212:org.saddle.ORD[F],implicitevidence$213:org.saddle.ORD[G],implicitevidence$214:org.saddle.ORD[H],implicitevidence$215:org.saddle.ORD[I]):org.saddle.index.Melter[(A,B,C,D),(E,F,G,H,I),(A,B,C,D,E,F,G,H,I)]", "kind" : "implicit def"}, {"label" : "melt3_6", "tail" : "(arg0: ORD[A], arg1: ORD[B], arg2: ORD[C], arg3: ORD[D], arg4: ORD[E], arg5: ORD[F], arg6: ORD[G], arg7: ORD[H], arg8: ORD[I]): Melter[(A, B, C), (D, E, F, G, H, I), (A, B, C, D, E, F, G, H, I)]", "member" : "org.saddle.index.Melter.melt3_6", "link" : "org\/saddle\/index\/Melter$.html#melt3_6[A,B,C,D,E,F,G,H,I](implicitevidence$198:org.saddle.ORD[A],implicitevidence$199:org.saddle.ORD[B],implicitevidence$200:org.saddle.ORD[C],implicitevidence$201:org.saddle.ORD[D],implicitevidence$202:org.saddle.ORD[E],implicitevidence$203:org.saddle.ORD[F],implicitevidence$204:org.saddle.ORD[G],implicitevidence$205:org.saddle.ORD[H],implicitevidence$206:org.saddle.ORD[I]):org.saddle.index.Melter[(A,B,C),(D,E,F,G,H,I),(A,B,C,D,E,F,G,H,I)]", "kind" : "implicit def"}, {"label" : "melt2_7", "tail" : "(arg0: ORD[A], arg1: ORD[B], arg2: ORD[C], arg3: ORD[D], arg4: ORD[E], arg5: ORD[F], arg6: ORD[G], arg7: ORD[H], arg8: ORD[I]): Melter[(A, B), (C, D, E, F, G, H, I), (A, B, C, D, E, F, G, H, I)]", "member" : "org.saddle.index.Melter.melt2_7", "link" : "org\/saddle\/index\/Melter$.html#melt2_7[A,B,C,D,E,F,G,H,I](implicitevidence$189:org.saddle.ORD[A],implicitevidence$190:org.saddle.ORD[B],implicitevidence$191:org.saddle.ORD[C],implicitevidence$192:org.saddle.ORD[D],implicitevidence$193:org.saddle.ORD[E],implicitevidence$194:org.saddle.ORD[F],implicitevidence$195:org.saddle.ORD[G],implicitevidence$196:org.saddle.ORD[H],implicitevidence$197:org.saddle.ORD[I]):org.saddle.index.Melter[(A,B),(C,D,E,F,G,H,I),(A,B,C,D,E,F,G,H,I)]", "kind" : "implicit def"}, {"label" : "melt6_2", "tail" : "(arg0: ORD[A], arg1: ORD[B], arg2: ORD[C], arg3: ORD[D], arg4: ORD[E], arg5: ORD[F], arg6: ORD[G], arg7: ORD[H]): Melter[(A, B, C, D, E, F), (G, H), (A, B, C, D, E, F, G, H)]", "member" : "org.saddle.index.Melter.melt6_2", "link" : "org\/saddle\/index\/Melter$.html#melt6_2[A,B,C,D,E,F,G,H](implicitevidence$181:org.saddle.ORD[A],implicitevidence$182:org.saddle.ORD[B],implicitevidence$183:org.saddle.ORD[C],implicitevidence$184:org.saddle.ORD[D],implicitevidence$185:org.saddle.ORD[E],implicitevidence$186:org.saddle.ORD[F],implicitevidence$187:org.saddle.ORD[G],implicitevidence$188:org.saddle.ORD[H]):org.saddle.index.Melter[(A,B,C,D,E,F),(G,H),(A,B,C,D,E,F,G,H)]", "kind" : "implicit def"}, {"label" : "melt5_3", "tail" : "(arg0: ORD[A], arg1: ORD[B], arg2: ORD[C], arg3: ORD[D], arg4: ORD[E], arg5: ORD[F], arg6: ORD[G], arg7: ORD[H]): Melter[(A, B, C, D, E), (F, G, H), (A, B, C, D, E, F, G, H)]", "member" : "org.saddle.index.Melter.melt5_3", "link" : "org\/saddle\/index\/Melter$.html#melt5_3[A,B,C,D,E,F,G,H](implicitevidence$173:org.saddle.ORD[A],implicitevidence$174:org.saddle.ORD[B],implicitevidence$175:org.saddle.ORD[C],implicitevidence$176:org.saddle.ORD[D],implicitevidence$177:org.saddle.ORD[E],implicitevidence$178:org.saddle.ORD[F],implicitevidence$179:org.saddle.ORD[G],implicitevidence$180:org.saddle.ORD[H]):org.saddle.index.Melter[(A,B,C,D,E),(F,G,H),(A,B,C,D,E,F,G,H)]", "kind" : "implicit def"}, {"label" : "melt4_4", "tail" : "(arg0: ORD[A], arg1: ORD[B], arg2: ORD[C], arg3: ORD[D], arg4: ORD[E], arg5: ORD[F], arg6: ORD[G], arg7: ORD[H]): Melter[(A, B, C, D), (E, F, G, H), (A, B, C, D, E, F, G, H)]", "member" : "org.saddle.index.Melter.melt4_4", "link" : "org\/saddle\/index\/Melter$.html#melt4_4[A,B,C,D,E,F,G,H](implicitevidence$165:org.saddle.ORD[A],implicitevidence$166:org.saddle.ORD[B],implicitevidence$167:org.saddle.ORD[C],implicitevidence$168:org.saddle.ORD[D],implicitevidence$169:org.saddle.ORD[E],implicitevidence$170:org.saddle.ORD[F],implicitevidence$171:org.saddle.ORD[G],implicitevidence$172:org.saddle.ORD[H]):org.saddle.index.Melter[(A,B,C,D),(E,F,G,H),(A,B,C,D,E,F,G,H)]", "kind" : "implicit def"}, {"label" : "melt3_5", "tail" : "(arg0: ORD[A], arg1: ORD[B], arg2: ORD[C], arg3: ORD[D], arg4: ORD[E], arg5: ORD[F], arg6: ORD[G], arg7: ORD[H]): Melter[(A, B, C), (D, E, F, G, H), (A, B, C, D, E, F, G, H)]", "member" : "org.saddle.index.Melter.melt3_5", "link" : "org\/saddle\/index\/Melter$.html#melt3_5[A,B,C,D,E,F,G,H](implicitevidence$157:org.saddle.ORD[A],implicitevidence$158:org.saddle.ORD[B],implicitevidence$159:org.saddle.ORD[C],implicitevidence$160:org.saddle.ORD[D],implicitevidence$161:org.saddle.ORD[E],implicitevidence$162:org.saddle.ORD[F],implicitevidence$163:org.saddle.ORD[G],implicitevidence$164:org.saddle.ORD[H]):org.saddle.index.Melter[(A,B,C),(D,E,F,G,H),(A,B,C,D,E,F,G,H)]", "kind" : "implicit def"}, {"label" : "melt2_6", "tail" : "(arg0: ORD[A], arg1: ORD[B], arg2: ORD[C], arg3: ORD[D], arg4: ORD[E], arg5: ORD[F], arg6: ORD[G], arg7: ORD[H]): Melter[(A, B), (C, D, E, F, G, H), (A, B, C, D, E, F, G, H)]", "member" : "org.saddle.index.Melter.melt2_6", "link" : "org\/saddle\/index\/Melter$.html#melt2_6[A,B,C,D,E,F,G,H](implicitevidence$149:org.saddle.ORD[A],implicitevidence$150:org.saddle.ORD[B],implicitevidence$151:org.saddle.ORD[C],implicitevidence$152:org.saddle.ORD[D],implicitevidence$153:org.saddle.ORD[E],implicitevidence$154:org.saddle.ORD[F],implicitevidence$155:org.saddle.ORD[G],implicitevidence$156:org.saddle.ORD[H]):org.saddle.index.Melter[(A,B),(C,D,E,F,G,H),(A,B,C,D,E,F,G,H)]", "kind" : "implicit def"}, {"label" : "melt5_2", "tail" : "(arg0: ORD[A], arg1: ORD[B], arg2: ORD[C], arg3: ORD[D], arg4: ORD[E], arg5: ORD[F], arg6: ORD[G]): Melter[(A, B, C, D, E), (F, G), (A, B, C, D, E, F, G)]", "member" : "org.saddle.index.Melter.melt5_2", "link" : "org\/saddle\/index\/Melter$.html#melt5_2[A,B,C,D,E,F,G](implicitevidence$142:org.saddle.ORD[A],implicitevidence$143:org.saddle.ORD[B],implicitevidence$144:org.saddle.ORD[C],implicitevidence$145:org.saddle.ORD[D],implicitevidence$146:org.saddle.ORD[E],implicitevidence$147:org.saddle.ORD[F],implicitevidence$148:org.saddle.ORD[G]):org.saddle.index.Melter[(A,B,C,D,E),(F,G),(A,B,C,D,E,F,G)]", "kind" : "implicit def"}, {"label" : "melt4_3", "tail" : "(arg0: ORD[A], arg1: ORD[B], arg2: ORD[C], arg3: ORD[D], arg4: ORD[E], arg5: ORD[F], arg6: ORD[G]): Melter[(A, B, C, D), (E, F, G), (A, B, C, D, E, F, G)]", "member" : "org.saddle.index.Melter.melt4_3", "link" : "org\/saddle\/index\/Melter$.html#melt4_3[A,B,C,D,E,F,G](implicitevidence$135:org.saddle.ORD[A],implicitevidence$136:org.saddle.ORD[B],implicitevidence$137:org.saddle.ORD[C],implicitevidence$138:org.saddle.ORD[D],implicitevidence$139:org.saddle.ORD[E],implicitevidence$140:org.saddle.ORD[F],implicitevidence$141:org.saddle.ORD[G]):org.saddle.index.Melter[(A,B,C,D),(E,F,G),(A,B,C,D,E,F,G)]", "kind" : "implicit def"}, {"label" : "melt3_4", "tail" : "(arg0: ORD[A], arg1: ORD[B], arg2: ORD[C], arg3: ORD[D], arg4: ORD[E], arg5: ORD[F], arg6: ORD[G]): Melter[(A, B, C), (D, E, F, G), (A, B, C, D, E, F, G)]", "member" : "org.saddle.index.Melter.melt3_4", "link" : "org\/saddle\/index\/Melter$.html#melt3_4[A,B,C,D,E,F,G](implicitevidence$128:org.saddle.ORD[A],implicitevidence$129:org.saddle.ORD[B],implicitevidence$130:org.saddle.ORD[C],implicitevidence$131:org.saddle.ORD[D],implicitevidence$132:org.saddle.ORD[E],implicitevidence$133:org.saddle.ORD[F],implicitevidence$134:org.saddle.ORD[G]):org.saddle.index.Melter[(A,B,C),(D,E,F,G),(A,B,C,D,E,F,G)]", "kind" : "implicit def"}, {"label" : "melt2_5", "tail" : "(arg0: ORD[A], arg1: ORD[B], arg2: ORD[C], arg3: ORD[D], arg4: ORD[E], arg5: ORD[F], arg6: ORD[G]): Melter[(A, B), (C, D, E, F, G), (A, B, C, D, E, F, G)]", "member" : "org.saddle.index.Melter.melt2_5", "link" : "org\/saddle\/index\/Melter$.html#melt2_5[A,B,C,D,E,F,G](implicitevidence$121:org.saddle.ORD[A],implicitevidence$122:org.saddle.ORD[B],implicitevidence$123:org.saddle.ORD[C],implicitevidence$124:org.saddle.ORD[D],implicitevidence$125:org.saddle.ORD[E],implicitevidence$126:org.saddle.ORD[F],implicitevidence$127:org.saddle.ORD[G]):org.saddle.index.Melter[(A,B),(C,D,E,F,G),(A,B,C,D,E,F,G)]", "kind" : "implicit def"}, {"label" : "melt4_2", "tail" : "(arg0: ORD[A], arg1: ORD[B], arg2: ORD[C], arg3: ORD[D], arg4: ORD[E], arg5: ORD[F]): Melter[(A, B, C, D), (E, F), (A, B, C, D, E, F)]", "member" : "org.saddle.index.Melter.melt4_2", "link" : "org\/saddle\/index\/Melter$.html#melt4_2[A,B,C,D,E,F](implicitevidence$115:org.saddle.ORD[A],implicitevidence$116:org.saddle.ORD[B],implicitevidence$117:org.saddle.ORD[C],implicitevidence$118:org.saddle.ORD[D],implicitevidence$119:org.saddle.ORD[E],implicitevidence$120:org.saddle.ORD[F]):org.saddle.index.Melter[(A,B,C,D),(E,F),(A,B,C,D,E,F)]", "kind" : "implicit def"}, {"label" : "melt3_3", "tail" : "(arg0: ORD[A], arg1: ORD[B], arg2: ORD[C], arg3: ORD[D], arg4: ORD[E], arg5: ORD[F]): Melter[(A, B, C), (D, E, F), (A, B, C, D, E, F)]", "member" : "org.saddle.index.Melter.melt3_3", "link" : "org\/saddle\/index\/Melter$.html#melt3_3[A,B,C,D,E,F](implicitevidence$109:org.saddle.ORD[A],implicitevidence$110:org.saddle.ORD[B],implicitevidence$111:org.saddle.ORD[C],implicitevidence$112:org.saddle.ORD[D],implicitevidence$113:org.saddle.ORD[E],implicitevidence$114:org.saddle.ORD[F]):org.saddle.index.Melter[(A,B,C),(D,E,F),(A,B,C,D,E,F)]", "kind" : "implicit def"}, {"label" : "melt2_4", "tail" : "(arg0: ORD[A], arg1: ORD[B], arg2: ORD[C], arg3: ORD[D], arg4: ORD[E], arg5: ORD[F]): Melter[(A, B), (C, D, E, F), (A, B, C, D, E, F)]", "member" : "org.saddle.index.Melter.melt2_4", "link" : "org\/saddle\/index\/Melter$.html#melt2_4[A,B,C,D,E,F](implicitevidence$103:org.saddle.ORD[A],implicitevidence$104:org.saddle.ORD[B],implicitevidence$105:org.saddle.ORD[C],implicitevidence$106:org.saddle.ORD[D],implicitevidence$107:org.saddle.ORD[E],implicitevidence$108:org.saddle.ORD[F]):org.saddle.index.Melter[(A,B),(C,D,E,F),(A,B,C,D,E,F)]", "kind" : "implicit def"}, {"label" : "melt3_2", "tail" : "(arg0: ORD[A], arg1: ORD[B], arg2: ORD[C], arg3: ORD[D], arg4: ORD[E]): Melter[(A, B, C), (D, E), (A, B, C, D, E)]", "member" : "org.saddle.index.Melter.melt3_2", "link" : "org\/saddle\/index\/Melter$.html#melt3_2[A,B,C,D,E](implicitevidence$98:org.saddle.ORD[A],implicitevidence$99:org.saddle.ORD[B],implicitevidence$100:org.saddle.ORD[C],implicitevidence$101:org.saddle.ORD[D],implicitevidence$102:org.saddle.ORD[E]):org.saddle.index.Melter[(A,B,C),(D,E),(A,B,C,D,E)]", "kind" : "implicit def"}, {"label" : "melt2_3", "tail" : "(arg0: ORD[A], arg1: ORD[B], arg2: ORD[C], arg3: ORD[D], arg4: ORD[E]): Melter[(A, B), (C, D, E), (A, B, C, D, E)]", "member" : "org.saddle.index.Melter.melt2_3", "link" : "org\/saddle\/index\/Melter$.html#melt2_3[A,B,C,D,E](implicitevidence$93:org.saddle.ORD[A],implicitevidence$94:org.saddle.ORD[B],implicitevidence$95:org.saddle.ORD[C],implicitevidence$96:org.saddle.ORD[D],implicitevidence$97:org.saddle.ORD[E]):org.saddle.index.Melter[(A,B),(C,D,E),(A,B,C,D,E)]", "kind" : "implicit def"}, {"label" : "melt2_2", "tail" : "(arg0: ORD[A], arg1: ORD[B], arg2: ORD[C], arg3: ORD[D]): Melter[(A, B), (C, D), (A, B, C, D)]", "member" : "org.saddle.index.Melter.melt2_2", "link" : "org\/saddle\/index\/Melter$.html#melt2_2[A,B,C,D](implicitevidence$89:org.saddle.ORD[A],implicitevidence$90:org.saddle.ORD[B],implicitevidence$91:org.saddle.ORD[C],implicitevidence$92:org.saddle.ORD[D]):org.saddle.index.Melter[(A,B),(C,D),(A,B,C,D)]", "kind" : "implicit def"}, {"label" : "melt8_1", "tail" : "(arg0: ORD[A], arg1: ORD[B], arg2: ORD[C], arg3: ORD[D], arg4: ORD[E], arg5: ORD[F], arg6: ORD[G], arg7: ORD[H], arg8: ORD[I]): Melter[(A, B, C, D, E, F, G, H), I, (A, B, C, D, E, F, G, H, I)]", "member" : "org.saddle.index.MelterLowPriority.melt8_1", "link" : "org\/saddle\/index\/Melter$.html#melt8_1[A,B,C,D,E,F,G,H,I](implicitevidence$80:org.saddle.ORD[A],implicitevidence$81:org.saddle.ORD[B],implicitevidence$82:org.saddle.ORD[C],implicitevidence$83:org.saddle.ORD[D],implicitevidence$84:org.saddle.ORD[E],implicitevidence$85:org.saddle.ORD[F],implicitevidence$86:org.saddle.ORD[G],implicitevidence$87:org.saddle.ORD[H],implicitevidence$88:org.saddle.ORD[I]):org.saddle.index.Melter[(A,B,C,D,E,F,G,H),I,(A,B,C,D,E,F,G,H,I)]", "kind" : "implicit def"}, {"label" : "melt7_1", "tail" : "(arg0: ORD[A], arg1: ORD[B], arg2: ORD[C], arg3: ORD[D], arg4: ORD[E], arg5: ORD[F], arg6: ORD[G], arg7: ORD[H]): Melter[(A, B, C, D, E, F, G), H, (A, B, C, D, E, F, G, H)]", "member" : "org.saddle.index.MelterLowPriority.melt7_1", "link" : "org\/saddle\/index\/Melter$.html#melt7_1[A,B,C,D,E,F,G,H](implicitevidence$72:org.saddle.ORD[A],implicitevidence$73:org.saddle.ORD[B],implicitevidence$74:org.saddle.ORD[C],implicitevidence$75:org.saddle.ORD[D],implicitevidence$76:org.saddle.ORD[E],implicitevidence$77:org.saddle.ORD[F],implicitevidence$78:org.saddle.ORD[G],implicitevidence$79:org.saddle.ORD[H]):org.saddle.index.Melter[(A,B,C,D,E,F,G),H,(A,B,C,D,E,F,G,H)]", "kind" : "implicit def"}, {"label" : "melt6_1", "tail" : "(arg0: ORD[A], arg1: ORD[B], arg2: ORD[C], arg3: ORD[D], arg4: ORD[E], arg5: ORD[F], arg6: ORD[G]): Melter[(A, B, C, D, E, F), G, (A, B, C, D, E, F, G)]", "member" : "org.saddle.index.MelterLowPriority.melt6_1", "link" : "org\/saddle\/index\/Melter$.html#melt6_1[A,B,C,D,E,F,G](implicitevidence$65:org.saddle.ORD[A],implicitevidence$66:org.saddle.ORD[B],implicitevidence$67:org.saddle.ORD[C],implicitevidence$68:org.saddle.ORD[D],implicitevidence$69:org.saddle.ORD[E],implicitevidence$70:org.saddle.ORD[F],implicitevidence$71:org.saddle.ORD[G]):org.saddle.index.Melter[(A,B,C,D,E,F),G,(A,B,C,D,E,F,G)]", "kind" : "implicit def"}, {"label" : "melt5_1", "tail" : "(arg0: ORD[A], arg1: ORD[B], arg2: ORD[C], arg3: ORD[D], arg4: ORD[E], arg5: ORD[F]): Melter[(A, B, C, D, E), F, (A, B, C, D, E, F)]", "member" : "org.saddle.index.MelterLowPriority.melt5_1", "link" : "org\/saddle\/index\/Melter$.html#melt5_1[A,B,C,D,E,F](implicitevidence$59:org.saddle.ORD[A],implicitevidence$60:org.saddle.ORD[B],implicitevidence$61:org.saddle.ORD[C],implicitevidence$62:org.saddle.ORD[D],implicitevidence$63:org.saddle.ORD[E],implicitevidence$64:org.saddle.ORD[F]):org.saddle.index.Melter[(A,B,C,D,E),F,(A,B,C,D,E,F)]", "kind" : "implicit def"}, {"label" : "melt4_1", "tail" : "(arg0: ORD[A], arg1: ORD[B], arg2: ORD[C], arg3: ORD[D], arg4: ORD[E]): Melter[(A, B, C, D), E, (A, B, C, D, E)]", "member" : "org.saddle.index.MelterLowPriority.melt4_1", "link" : "org\/saddle\/index\/Melter$.html#melt4_1[A,B,C,D,E](implicitevidence$54:org.saddle.ORD[A],implicitevidence$55:org.saddle.ORD[B],implicitevidence$56:org.saddle.ORD[C],implicitevidence$57:org.saddle.ORD[D],implicitevidence$58:org.saddle.ORD[E]):org.saddle.index.Melter[(A,B,C,D),E,(A,B,C,D,E)]", "kind" : "implicit def"}, {"label" : "melt3_1", "tail" : "(arg0: ORD[A], arg1: ORD[B], arg2: ORD[C], arg3: ORD[D]): Melter[(A, B, C), D, (A, B, C, D)]", "member" : "org.saddle.index.MelterLowPriority.melt3_1", "link" : "org\/saddle\/index\/Melter$.html#melt3_1[A,B,C,D](implicitevidence$50:org.saddle.ORD[A],implicitevidence$51:org.saddle.ORD[B],implicitevidence$52:org.saddle.ORD[C],implicitevidence$53:org.saddle.ORD[D]):org.saddle.index.Melter[(A,B,C),D,(A,B,C,D)]", "kind" : "implicit def"}, {"label" : "melt2_1", "tail" : "(arg0: ORD[A], arg1: ORD[B], arg2: ORD[C]): Melter[(A, B), C, (A, B, C)]", "member" : "org.saddle.index.MelterLowPriority.melt2_1", "link" : "org\/saddle\/index\/Melter$.html#melt2_1[A,B,C](implicitevidence$47:org.saddle.ORD[A],implicitevidence$48:org.saddle.ORD[B],implicitevidence$49:org.saddle.ORD[C]):org.saddle.index.Melter[(A,B),C,(A,B,C)]", "kind" : "implicit def"}, {"label" : "melt1_8", "tail" : "(arg0: ORD[A], arg1: ORD[B], arg2: ORD[C], arg3: ORD[D], arg4: ORD[E], arg5: ORD[F], arg6: ORD[G], arg7: ORD[H], arg8: ORD[I]): Melter[A, (B, C, D, E, F, G, H, I), (A, B, C, D, E, F, G, H, I)]", "member" : "org.saddle.index.MelterLowPriority.melt1_8", "link" : "org\/saddle\/index\/Melter$.html#melt1_8[A,B,C,D,E,F,G,H,I](implicitevidence$38:org.saddle.ORD[A],implicitevidence$39:org.saddle.ORD[B],implicitevidence$40:org.saddle.ORD[C],implicitevidence$41:org.saddle.ORD[D],implicitevidence$42:org.saddle.ORD[E],implicitevidence$43:org.saddle.ORD[F],implicitevidence$44:org.saddle.ORD[G],implicitevidence$45:org.saddle.ORD[H],implicitevidence$46:org.saddle.ORD[I]):org.saddle.index.Melter[A,(B,C,D,E,F,G,H,I),(A,B,C,D,E,F,G,H,I)]", "kind" : "implicit def"}, {"label" : "melt1_7", "tail" : "(arg0: ORD[A], arg1: ORD[B], arg2: ORD[C], arg3: ORD[D], arg4: ORD[E], arg5: ORD[F], arg6: ORD[G], arg7: ORD[H]): Melter[A, (B, C, D, E, F, G, H), (A, B, C, D, E, F, G, H)]", "member" : "org.saddle.index.MelterLowPriority.melt1_7", "link" : "org\/saddle\/index\/Melter$.html#melt1_7[A,B,C,D,E,F,G,H](implicitevidence$30:org.saddle.ORD[A],implicitevidence$31:org.saddle.ORD[B],implicitevidence$32:org.saddle.ORD[C],implicitevidence$33:org.saddle.ORD[D],implicitevidence$34:org.saddle.ORD[E],implicitevidence$35:org.saddle.ORD[F],implicitevidence$36:org.saddle.ORD[G],implicitevidence$37:org.saddle.ORD[H]):org.saddle.index.Melter[A,(B,C,D,E,F,G,H),(A,B,C,D,E,F,G,H)]", "kind" : "implicit def"}, {"label" : "melt1_6", "tail" : "(arg0: ORD[A], arg1: ORD[B], arg2: ORD[C], arg3: ORD[D], arg4: ORD[E], arg5: ORD[F], arg6: ORD[G]): Melter[A, (B, C, D, E, F, G), (A, B, C, D, E, F, G)]", "member" : "org.saddle.index.MelterLowPriority.melt1_6", "link" : "org\/saddle\/index\/Melter$.html#melt1_6[A,B,C,D,E,F,G](implicitevidence$23:org.saddle.ORD[A],implicitevidence$24:org.saddle.ORD[B],implicitevidence$25:org.saddle.ORD[C],implicitevidence$26:org.saddle.ORD[D],implicitevidence$27:org.saddle.ORD[E],implicitevidence$28:org.saddle.ORD[F],implicitevidence$29:org.saddle.ORD[G]):org.saddle.index.Melter[A,(B,C,D,E,F,G),(A,B,C,D,E,F,G)]", "kind" : "implicit def"}, {"label" : "melt1_5", "tail" : "(arg0: ORD[A], arg1: ORD[B], arg2: ORD[C], arg3: ORD[D], arg4: ORD[E], arg5: ORD[F]): Melter[A, (B, C, D, E, F), (A, B, C, D, E, F)]", "member" : "org.saddle.index.MelterLowPriority.melt1_5", "link" : "org\/saddle\/index\/Melter$.html#melt1_5[A,B,C,D,E,F](implicitevidence$17:org.saddle.ORD[A],implicitevidence$18:org.saddle.ORD[B],implicitevidence$19:org.saddle.ORD[C],implicitevidence$20:org.saddle.ORD[D],implicitevidence$21:org.saddle.ORD[E],implicitevidence$22:org.saddle.ORD[F]):org.saddle.index.Melter[A,(B,C,D,E,F),(A,B,C,D,E,F)]", "kind" : "implicit def"}, {"label" : "melt1_4", "tail" : "(arg0: ORD[A], arg1: ORD[B], arg2: ORD[C], arg3: ORD[D], arg4: ORD[E]): Melter[A, (B, C, D, E), (A, B, C, D, E)]", "member" : "org.saddle.index.MelterLowPriority.melt1_4", "link" : "org\/saddle\/index\/Melter$.html#melt1_4[A,B,C,D,E](implicitevidence$12:org.saddle.ORD[A],implicitevidence$13:org.saddle.ORD[B],implicitevidence$14:org.saddle.ORD[C],implicitevidence$15:org.saddle.ORD[D],implicitevidence$16:org.saddle.ORD[E]):org.saddle.index.Melter[A,(B,C,D,E),(A,B,C,D,E)]", "kind" : "implicit def"}, {"label" : "melt1_3", "tail" : "(arg0: ORD[A], arg1: ORD[B], arg2: ORD[C], arg3: ORD[D]): Melter[A, (B, C, D), (A, B, C, D)]", "member" : "org.saddle.index.MelterLowPriority.melt1_3", "link" : "org\/saddle\/index\/Melter$.html#melt1_3[A,B,C,D](implicitevidence$8:org.saddle.ORD[A],implicitevidence$9:org.saddle.ORD[B],implicitevidence$10:org.saddle.ORD[C],implicitevidence$11:org.saddle.ORD[D]):org.saddle.index.Melter[A,(B,C,D),(A,B,C,D)]", "kind" : "implicit def"}, {"label" : "melt1_2", "tail" : "(arg0: ORD[A], arg1: ORD[B], arg2: ORD[C]): Melter[A, (B, C), (A, B, C)]", "member" : "org.saddle.index.MelterLowPriority.melt1_2", "link" : "org\/saddle\/index\/Melter$.html#melt1_2[A,B,C](implicitevidence$5:org.saddle.ORD[A],implicitevidence$6:org.saddle.ORD[B],implicitevidence$7:org.saddle.ORD[C]):org.saddle.index.Melter[A,(B,C),(A,B,C)]", "kind" : "implicit def"}, {"label" : "melt", "tail" : "(arg0: ORD[A], arg1: ORD[B]): Melter[A, B, (A, B)]", "member" : "org.saddle.index.MelterLowerPriority.melt", "link" : "org\/saddle\/index\/Melter$.html#melt[A,B](implicitevidence$3:org.saddle.ORD[A],implicitevidence$4:org.saddle.ORD[B]):org.saddle.index.Melter[A,B,(A,B)]", "kind" : "implicit def"}, {"label" : "makeMelter", "tail" : "(fn: (A, B) => C)(arg0: ST[C], arg1: ORD[C]): Melter[A, B, C]", "member" : "org.saddle.index.MelterLowerPriority.makeMelter", "link" : "org\/saddle\/index\/Melter$.html#makeMelter[A,B,C](fn:(A,B)=>C)(implicitevidence$1:org.saddle.ST[C],implicitevidence$2:org.saddle.ORD[C]):org.saddle.index.Melter[A,B,C]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/saddle\/index\/Melter$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/saddle\/index\/Melter$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/saddle\/index\/Melter$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/saddle\/index\/Melter$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/saddle\/index\/Melter$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/saddle\/index\/Melter$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/saddle\/index\/Melter$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/index\/Melter$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/index\/Melter$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/index\/Melter$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/saddle\/index\/Melter$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/saddle\/index\/Melter$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/saddle\/index\/Melter$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/saddle\/index\/Melter$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/saddle\/index\/Melter$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/saddle\/index\/Melter$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "org\/saddle\/index\/Melter$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/saddle\/index\/Melter$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/saddle\/index\/Melter$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "org\/saddle\/index\/Melter.html", "kind" : "trait", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/saddle\/index\/Melter.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/saddle\/index\/Melter.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/saddle\/index\/Melter.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/saddle\/index\/Melter.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/saddle\/index\/Melter.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/saddle\/index\/Melter.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/saddle\/index\/Melter.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/index\/Melter.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/index\/Melter.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/index\/Melter.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/saddle\/index\/Melter.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/saddle\/index\/Melter.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/saddle\/index\/Melter.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/saddle\/index\/Melter.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/saddle\/index\/Melter.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/saddle\/index\/Melter.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "org\/saddle\/index\/Melter.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/saddle\/index\/Melter.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/saddle\/index\/Melter.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "ord", "tail" : "(): ORD[C]", "member" : "org.saddle.index.Melter.ord", "link" : "org\/saddle\/index\/Melter.html#ord:org.saddle.ORD[C]", "kind" : "abstract def"}, {"label" : "tag", "tail" : "(): ST[C]", "member" : "org.saddle.index.Melter.tag", "link" : "org\/saddle\/index\/Melter.html#tag:org.saddle.ST[C]", "kind" : "abstract def"}, {"label" : "apply", "tail" : "(a: A, b: B): C", "member" : "org.saddle.index.Melter.apply", "link" : "org\/saddle\/index\/Melter.html#apply(a:A,b:B):C", "kind" : "abstract def"}], "shortDescription" : "A Melter operates on a TupleN and a TupleM and produces aTupleN+M which is composed of the corresponding tuple elements."}, {"name" : "org.saddle.index.MelterLowerPriority", "trait" : "org\/saddle\/index\/MelterLowerPriority.html", "kind" : "trait", "members_trait" : [{"label" : "melt", "tail" : "(arg0: ORD[A], arg1: ORD[B]): Melter[A, B, (A, B)]", "member" : "org.saddle.index.MelterLowerPriority.melt", "link" : "org\/saddle\/index\/MelterLowerPriority.html#melt[A,B](implicitevidence$3:org.saddle.ORD[A],implicitevidence$4:org.saddle.ORD[B]):org.saddle.index.Melter[A,B,(A,B)]", "kind" : "implicit def"}, {"label" : "makeMelter", "tail" : "(fn: (A, B) => C)(arg0: ST[C], arg1: ORD[C]): Melter[A, B, C]", "member" : "org.saddle.index.MelterLowerPriority.makeMelter", "link" : "org\/saddle\/index\/MelterLowerPriority.html#makeMelter[A,B,C](fn:(A,B)=>C)(implicitevidence$1:org.saddle.ST[C],implicitevidence$2:org.saddle.ORD[C]):org.saddle.index.Melter[A,B,C]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/saddle\/index\/MelterLowerPriority.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/saddle\/index\/MelterLowerPriority.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/saddle\/index\/MelterLowerPriority.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/saddle\/index\/MelterLowerPriority.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/saddle\/index\/MelterLowerPriority.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/saddle\/index\/MelterLowerPriority.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/saddle\/index\/MelterLowerPriority.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/index\/MelterLowerPriority.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/index\/MelterLowerPriority.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/index\/MelterLowerPriority.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/saddle\/index\/MelterLowerPriority.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/saddle\/index\/MelterLowerPriority.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/saddle\/index\/MelterLowerPriority.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/saddle\/index\/MelterLowerPriority.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/saddle\/index\/MelterLowerPriority.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/saddle\/index\/MelterLowerPriority.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "org\/saddle\/index\/MelterLowerPriority.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/saddle\/index\/MelterLowerPriority.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/saddle\/index\/MelterLowerPriority.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "Lowest priority melter implicit instance takes two arbitrary types andproduces a Tuple2"}, {"name" : "org.saddle.index.MelterLowPriority", "trait" : "org\/saddle\/index\/MelterLowPriority.html", "kind" : "trait", "members_trait" : [{"label" : "melt8_1", "tail" : "(arg0: ORD[A], arg1: ORD[B], arg2: ORD[C], arg3: ORD[D], arg4: ORD[E], arg5: ORD[F], arg6: ORD[G], arg7: ORD[H], arg8: ORD[I]): Melter[(A, B, C, D, E, F, G, H), I, (A, B, C, D, E, F, G, H, I)]", "member" : "org.saddle.index.MelterLowPriority.melt8_1", "link" : "org\/saddle\/index\/MelterLowPriority.html#melt8_1[A,B,C,D,E,F,G,H,I](implicitevidence$80:org.saddle.ORD[A],implicitevidence$81:org.saddle.ORD[B],implicitevidence$82:org.saddle.ORD[C],implicitevidence$83:org.saddle.ORD[D],implicitevidence$84:org.saddle.ORD[E],implicitevidence$85:org.saddle.ORD[F],implicitevidence$86:org.saddle.ORD[G],implicitevidence$87:org.saddle.ORD[H],implicitevidence$88:org.saddle.ORD[I]):org.saddle.index.Melter[(A,B,C,D,E,F,G,H),I,(A,B,C,D,E,F,G,H,I)]", "kind" : "implicit def"}, {"label" : "melt7_1", "tail" : "(arg0: ORD[A], arg1: ORD[B], arg2: ORD[C], arg3: ORD[D], arg4: ORD[E], arg5: ORD[F], arg6: ORD[G], arg7: ORD[H]): Melter[(A, B, C, D, E, F, G), H, (A, B, C, D, E, F, G, H)]", "member" : "org.saddle.index.MelterLowPriority.melt7_1", "link" : "org\/saddle\/index\/MelterLowPriority.html#melt7_1[A,B,C,D,E,F,G,H](implicitevidence$72:org.saddle.ORD[A],implicitevidence$73:org.saddle.ORD[B],implicitevidence$74:org.saddle.ORD[C],implicitevidence$75:org.saddle.ORD[D],implicitevidence$76:org.saddle.ORD[E],implicitevidence$77:org.saddle.ORD[F],implicitevidence$78:org.saddle.ORD[G],implicitevidence$79:org.saddle.ORD[H]):org.saddle.index.Melter[(A,B,C,D,E,F,G),H,(A,B,C,D,E,F,G,H)]", "kind" : "implicit def"}, {"label" : "melt6_1", "tail" : "(arg0: ORD[A], arg1: ORD[B], arg2: ORD[C], arg3: ORD[D], arg4: ORD[E], arg5: ORD[F], arg6: ORD[G]): Melter[(A, B, C, D, E, F), G, (A, B, C, D, E, F, G)]", "member" : "org.saddle.index.MelterLowPriority.melt6_1", "link" : "org\/saddle\/index\/MelterLowPriority.html#melt6_1[A,B,C,D,E,F,G](implicitevidence$65:org.saddle.ORD[A],implicitevidence$66:org.saddle.ORD[B],implicitevidence$67:org.saddle.ORD[C],implicitevidence$68:org.saddle.ORD[D],implicitevidence$69:org.saddle.ORD[E],implicitevidence$70:org.saddle.ORD[F],implicitevidence$71:org.saddle.ORD[G]):org.saddle.index.Melter[(A,B,C,D,E,F),G,(A,B,C,D,E,F,G)]", "kind" : "implicit def"}, {"label" : "melt5_1", "tail" : "(arg0: ORD[A], arg1: ORD[B], arg2: ORD[C], arg3: ORD[D], arg4: ORD[E], arg5: ORD[F]): Melter[(A, B, C, D, E), F, (A, B, C, D, E, F)]", "member" : "org.saddle.index.MelterLowPriority.melt5_1", "link" : "org\/saddle\/index\/MelterLowPriority.html#melt5_1[A,B,C,D,E,F](implicitevidence$59:org.saddle.ORD[A],implicitevidence$60:org.saddle.ORD[B],implicitevidence$61:org.saddle.ORD[C],implicitevidence$62:org.saddle.ORD[D],implicitevidence$63:org.saddle.ORD[E],implicitevidence$64:org.saddle.ORD[F]):org.saddle.index.Melter[(A,B,C,D,E),F,(A,B,C,D,E,F)]", "kind" : "implicit def"}, {"label" : "melt4_1", "tail" : "(arg0: ORD[A], arg1: ORD[B], arg2: ORD[C], arg3: ORD[D], arg4: ORD[E]): Melter[(A, B, C, D), E, (A, B, C, D, E)]", "member" : "org.saddle.index.MelterLowPriority.melt4_1", "link" : "org\/saddle\/index\/MelterLowPriority.html#melt4_1[A,B,C,D,E](implicitevidence$54:org.saddle.ORD[A],implicitevidence$55:org.saddle.ORD[B],implicitevidence$56:org.saddle.ORD[C],implicitevidence$57:org.saddle.ORD[D],implicitevidence$58:org.saddle.ORD[E]):org.saddle.index.Melter[(A,B,C,D),E,(A,B,C,D,E)]", "kind" : "implicit def"}, {"label" : "melt3_1", "tail" : "(arg0: ORD[A], arg1: ORD[B], arg2: ORD[C], arg3: ORD[D]): Melter[(A, B, C), D, (A, B, C, D)]", "member" : "org.saddle.index.MelterLowPriority.melt3_1", "link" : "org\/saddle\/index\/MelterLowPriority.html#melt3_1[A,B,C,D](implicitevidence$50:org.saddle.ORD[A],implicitevidence$51:org.saddle.ORD[B],implicitevidence$52:org.saddle.ORD[C],implicitevidence$53:org.saddle.ORD[D]):org.saddle.index.Melter[(A,B,C),D,(A,B,C,D)]", "kind" : "implicit def"}, {"label" : "melt2_1", "tail" : "(arg0: ORD[A], arg1: ORD[B], arg2: ORD[C]): Melter[(A, B), C, (A, B, C)]", "member" : "org.saddle.index.MelterLowPriority.melt2_1", "link" : "org\/saddle\/index\/MelterLowPriority.html#melt2_1[A,B,C](implicitevidence$47:org.saddle.ORD[A],implicitevidence$48:org.saddle.ORD[B],implicitevidence$49:org.saddle.ORD[C]):org.saddle.index.Melter[(A,B),C,(A,B,C)]", "kind" : "implicit def"}, {"label" : "melt1_8", "tail" : "(arg0: ORD[A], arg1: ORD[B], arg2: ORD[C], arg3: ORD[D], arg4: ORD[E], arg5: ORD[F], arg6: ORD[G], arg7: ORD[H], arg8: ORD[I]): Melter[A, (B, C, D, E, F, G, H, I), (A, B, C, D, E, F, G, H, I)]", "member" : "org.saddle.index.MelterLowPriority.melt1_8", "link" : "org\/saddle\/index\/MelterLowPriority.html#melt1_8[A,B,C,D,E,F,G,H,I](implicitevidence$38:org.saddle.ORD[A],implicitevidence$39:org.saddle.ORD[B],implicitevidence$40:org.saddle.ORD[C],implicitevidence$41:org.saddle.ORD[D],implicitevidence$42:org.saddle.ORD[E],implicitevidence$43:org.saddle.ORD[F],implicitevidence$44:org.saddle.ORD[G],implicitevidence$45:org.saddle.ORD[H],implicitevidence$46:org.saddle.ORD[I]):org.saddle.index.Melter[A,(B,C,D,E,F,G,H,I),(A,B,C,D,E,F,G,H,I)]", "kind" : "implicit def"}, {"label" : "melt1_7", "tail" : "(arg0: ORD[A], arg1: ORD[B], arg2: ORD[C], arg3: ORD[D], arg4: ORD[E], arg5: ORD[F], arg6: ORD[G], arg7: ORD[H]): Melter[A, (B, C, D, E, F, G, H), (A, B, C, D, E, F, G, H)]", "member" : "org.saddle.index.MelterLowPriority.melt1_7", "link" : "org\/saddle\/index\/MelterLowPriority.html#melt1_7[A,B,C,D,E,F,G,H](implicitevidence$30:org.saddle.ORD[A],implicitevidence$31:org.saddle.ORD[B],implicitevidence$32:org.saddle.ORD[C],implicitevidence$33:org.saddle.ORD[D],implicitevidence$34:org.saddle.ORD[E],implicitevidence$35:org.saddle.ORD[F],implicitevidence$36:org.saddle.ORD[G],implicitevidence$37:org.saddle.ORD[H]):org.saddle.index.Melter[A,(B,C,D,E,F,G,H),(A,B,C,D,E,F,G,H)]", "kind" : "implicit def"}, {"label" : "melt1_6", "tail" : "(arg0: ORD[A], arg1: ORD[B], arg2: ORD[C], arg3: ORD[D], arg4: ORD[E], arg5: ORD[F], arg6: ORD[G]): Melter[A, (B, C, D, E, F, G), (A, B, C, D, E, F, G)]", "member" : "org.saddle.index.MelterLowPriority.melt1_6", "link" : "org\/saddle\/index\/MelterLowPriority.html#melt1_6[A,B,C,D,E,F,G](implicitevidence$23:org.saddle.ORD[A],implicitevidence$24:org.saddle.ORD[B],implicitevidence$25:org.saddle.ORD[C],implicitevidence$26:org.saddle.ORD[D],implicitevidence$27:org.saddle.ORD[E],implicitevidence$28:org.saddle.ORD[F],implicitevidence$29:org.saddle.ORD[G]):org.saddle.index.Melter[A,(B,C,D,E,F,G),(A,B,C,D,E,F,G)]", "kind" : "implicit def"}, {"label" : "melt1_5", "tail" : "(arg0: ORD[A], arg1: ORD[B], arg2: ORD[C], arg3: ORD[D], arg4: ORD[E], arg5: ORD[F]): Melter[A, (B, C, D, E, F), (A, B, C, D, E, F)]", "member" : "org.saddle.index.MelterLowPriority.melt1_5", "link" : "org\/saddle\/index\/MelterLowPriority.html#melt1_5[A,B,C,D,E,F](implicitevidence$17:org.saddle.ORD[A],implicitevidence$18:org.saddle.ORD[B],implicitevidence$19:org.saddle.ORD[C],implicitevidence$20:org.saddle.ORD[D],implicitevidence$21:org.saddle.ORD[E],implicitevidence$22:org.saddle.ORD[F]):org.saddle.index.Melter[A,(B,C,D,E,F),(A,B,C,D,E,F)]", "kind" : "implicit def"}, {"label" : "melt1_4", "tail" : "(arg0: ORD[A], arg1: ORD[B], arg2: ORD[C], arg3: ORD[D], arg4: ORD[E]): Melter[A, (B, C, D, E), (A, B, C, D, E)]", "member" : "org.saddle.index.MelterLowPriority.melt1_4", "link" : "org\/saddle\/index\/MelterLowPriority.html#melt1_4[A,B,C,D,E](implicitevidence$12:org.saddle.ORD[A],implicitevidence$13:org.saddle.ORD[B],implicitevidence$14:org.saddle.ORD[C],implicitevidence$15:org.saddle.ORD[D],implicitevidence$16:org.saddle.ORD[E]):org.saddle.index.Melter[A,(B,C,D,E),(A,B,C,D,E)]", "kind" : "implicit def"}, {"label" : "melt1_3", "tail" : "(arg0: ORD[A], arg1: ORD[B], arg2: ORD[C], arg3: ORD[D]): Melter[A, (B, C, D), (A, B, C, D)]", "member" : "org.saddle.index.MelterLowPriority.melt1_3", "link" : "org\/saddle\/index\/MelterLowPriority.html#melt1_3[A,B,C,D](implicitevidence$8:org.saddle.ORD[A],implicitevidence$9:org.saddle.ORD[B],implicitevidence$10:org.saddle.ORD[C],implicitevidence$11:org.saddle.ORD[D]):org.saddle.index.Melter[A,(B,C,D),(A,B,C,D)]", "kind" : "implicit def"}, {"label" : "melt1_2", "tail" : "(arg0: ORD[A], arg1: ORD[B], arg2: ORD[C]): Melter[A, (B, C), (A, B, C)]", "member" : "org.saddle.index.MelterLowPriority.melt1_2", "link" : "org\/saddle\/index\/MelterLowPriority.html#melt1_2[A,B,C](implicitevidence$5:org.saddle.ORD[A],implicitevidence$6:org.saddle.ORD[B],implicitevidence$7:org.saddle.ORD[C]):org.saddle.index.Melter[A,(B,C),(A,B,C)]", "kind" : "implicit def"}, {"label" : "melt", "tail" : "(arg0: ORD[A], arg1: ORD[B]): Melter[A, B, (A, B)]", "member" : "org.saddle.index.MelterLowerPriority.melt", "link" : "org\/saddle\/index\/MelterLowPriority.html#melt[A,B](implicitevidence$3:org.saddle.ORD[A],implicitevidence$4:org.saddle.ORD[B]):org.saddle.index.Melter[A,B,(A,B)]", "kind" : "implicit def"}, {"label" : "makeMelter", "tail" : "(fn: (A, B) => C)(arg0: ST[C], arg1: ORD[C]): Melter[A, B, C]", "member" : "org.saddle.index.MelterLowerPriority.makeMelter", "link" : "org\/saddle\/index\/MelterLowPriority.html#makeMelter[A,B,C](fn:(A,B)=>C)(implicitevidence$1:org.saddle.ST[C],implicitevidence$2:org.saddle.ORD[C]):org.saddle.index.Melter[A,B,C]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/saddle\/index\/MelterLowPriority.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/saddle\/index\/MelterLowPriority.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/saddle\/index\/MelterLowPriority.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/saddle\/index\/MelterLowPriority.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/saddle\/index\/MelterLowPriority.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/saddle\/index\/MelterLowPriority.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/saddle\/index\/MelterLowPriority.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/index\/MelterLowPriority.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/index\/MelterLowPriority.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/index\/MelterLowPriority.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/saddle\/index\/MelterLowPriority.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/saddle\/index\/MelterLowPriority.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/saddle\/index\/MelterLowPriority.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/saddle\/index\/MelterLowPriority.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/saddle\/index\/MelterLowPriority.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/saddle\/index\/MelterLowPriority.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "org\/saddle\/index\/MelterLowPriority.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/saddle\/index\/MelterLowPriority.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/saddle\/index\/MelterLowPriority.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "Next lowest priority melter implicit instances; takes one arbitrary typesand a TupleN and produces a TupleN+1"}, {"name" : "org.saddle.index.OuterJoin", "shortDescription" : "", "object" : "org\/saddle\/index\/OuterJoin$.html", "members_object" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/saddle\/index\/OuterJoin$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/saddle\/index\/OuterJoin$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/saddle\/index\/OuterJoin$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/saddle\/index\/OuterJoin$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/saddle\/index\/OuterJoin$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/saddle\/index\/OuterJoin$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/saddle\/index\/OuterJoin$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/index\/OuterJoin$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/index\/OuterJoin$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/index\/OuterJoin$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/saddle\/index\/OuterJoin$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/saddle\/index\/OuterJoin$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/saddle\/index\/OuterJoin$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/saddle\/index\/OuterJoin$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/saddle\/index\/OuterJoin$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/saddle\/index\/OuterJoin$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "org\/saddle\/index\/OuterJoin$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/saddle\/index\/OuterJoin$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/saddle\/index\/OuterJoin$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "org.saddle.index.ReIndexer", "object" : "org\/saddle\/index\/ReIndexer$.html", "members_object" : [{"label" : "apply", "tail" : "(lft: Option[Array[Int]], rgt: Option[Array[Int]], ix: Index[T]): ReIndexer[T]", "member" : "org.saddle.index.ReIndexer.apply", "link" : "org\/saddle\/index\/ReIndexer$.html#apply[T](lft:Option[Array[Int]],rgt:Option[Array[Int]],ix:org.saddle.Index[T]):org.saddle.index.ReIndexer[T]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/saddle\/index\/ReIndexer$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/saddle\/index\/ReIndexer$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/saddle\/index\/ReIndexer$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/saddle\/index\/ReIndexer$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/saddle\/index\/ReIndexer$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/saddle\/index\/ReIndexer$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/saddle\/index\/ReIndexer$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/index\/ReIndexer$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/index\/ReIndexer$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/index\/ReIndexer$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/saddle\/index\/ReIndexer$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/saddle\/index\/ReIndexer$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/saddle\/index\/ReIndexer$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/saddle\/index\/ReIndexer$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/saddle\/index\/ReIndexer$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/saddle\/index\/ReIndexer$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "org\/saddle\/index\/ReIndexer$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/saddle\/index\/ReIndexer$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/saddle\/index\/ReIndexer$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "org\/saddle\/index\/ReIndexer.html", "kind" : "trait", "members_trait" : [{"label" : "swap", "tail" : "(): ReIndexer[T]", "member" : "org.saddle.index.ReIndexer.swap", "link" : "org\/saddle\/index\/ReIndexer.html#swap:org.saddle.index.ReIndexer[T]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/saddle\/index\/ReIndexer.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/saddle\/index\/ReIndexer.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/saddle\/index\/ReIndexer.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/saddle\/index\/ReIndexer.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/saddle\/index\/ReIndexer.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/saddle\/index\/ReIndexer.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/saddle\/index\/ReIndexer.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/index\/ReIndexer.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/index\/ReIndexer.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/index\/ReIndexer.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/saddle\/index\/ReIndexer.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/saddle\/index\/ReIndexer.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/saddle\/index\/ReIndexer.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/saddle\/index\/ReIndexer.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/saddle\/index\/ReIndexer.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/saddle\/index\/ReIndexer.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "org\/saddle\/index\/ReIndexer.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/saddle\/index\/ReIndexer.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/saddle\/index\/ReIndexer.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "index", "tail" : "(): Index[T]", "member" : "org.saddle.index.ReIndexer.index", "link" : "org\/saddle\/index\/ReIndexer.html#index:org.saddle.Index[T]", "kind" : "abstract def"}, {"label" : "rTake", "tail" : "(): Option[Array[Int]]", "member" : "org.saddle.index.ReIndexer.rTake", "link" : "org\/saddle\/index\/ReIndexer.html#rTake:Option[Array[Int]]", "kind" : "abstract def"}, {"label" : "lTake", "tail" : "(): Option[Array[Int]]", "member" : "org.saddle.index.ReIndexer.lTake", "link" : "org\/saddle\/index\/ReIndexer.html#lTake:Option[Array[Int]]", "kind" : "abstract def"}], "shortDescription" : "We often need to \"reindex\" one array\/vec\/series\/frame so as to produce a newone."}, {"name" : "org.saddle.index.RightJoin", "shortDescription" : "", "object" : "org\/saddle\/index\/RightJoin$.html", "members_object" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/saddle\/index\/RightJoin$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/saddle\/index\/RightJoin$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/saddle\/index\/RightJoin$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/saddle\/index\/RightJoin$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/saddle\/index\/RightJoin$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/saddle\/index\/RightJoin$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/saddle\/index\/RightJoin$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/index\/RightJoin$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/index\/RightJoin$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/index\/RightJoin$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/saddle\/index\/RightJoin$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/saddle\/index\/RightJoin$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/saddle\/index\/RightJoin$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/saddle\/index\/RightJoin$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/saddle\/index\/RightJoin$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/saddle\/index\/RightJoin$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "org\/saddle\/index\/RightJoin$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/saddle\/index\/RightJoin$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/saddle\/index\/RightJoin$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "org.saddle.index.Slice", "object" : "org\/saddle\/index\/Slice$.html", "members_object" : [{"label" : "apply", "tail" : "(k1: T, k2: T): SliceDefault[T]", "member" : "org.saddle.index.Slice.apply", "link" : "org\/saddle\/index\/Slice$.html#apply[T](k1:T,k2:T):org.saddle.index.SliceDefault[T]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/saddle\/index\/Slice$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/saddle\/index\/Slice$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/saddle\/index\/Slice$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/saddle\/index\/Slice$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/saddle\/index\/Slice$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/saddle\/index\/Slice$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/saddle\/index\/Slice$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/index\/Slice$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/index\/Slice$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/index\/Slice$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/saddle\/index\/Slice$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/saddle\/index\/Slice$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/saddle\/index\/Slice$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/saddle\/index\/Slice$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/saddle\/index\/Slice$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/saddle\/index\/Slice$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "org\/saddle\/index\/Slice$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/saddle\/index\/Slice$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/saddle\/index\/Slice$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "org\/saddle\/index\/Slice.html", "kind" : "trait", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/saddle\/index\/Slice.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/saddle\/index\/Slice.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/saddle\/index\/Slice.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/saddle\/index\/Slice.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/saddle\/index\/Slice.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/saddle\/index\/Slice.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/saddle\/index\/Slice.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/index\/Slice.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/index\/Slice.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/index\/Slice.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/saddle\/index\/Slice.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/saddle\/index\/Slice.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/saddle\/index\/Slice.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/saddle\/index\/Slice.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/saddle\/index\/Slice.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/saddle\/index\/Slice.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "org\/saddle\/index\/Slice.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/saddle\/index\/Slice.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/saddle\/index\/Slice.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "apply", "tail" : "(idx: Index[U]): (Int, Int)", "member" : "org.saddle.index.Slice.apply", "link" : "org\/saddle\/index\/Slice.html#apply[U>:T](idx:org.saddle.Index[U]):(Int,Int)", "kind" : "abstract def"}], "shortDescription" : "Slice provides a methodology so that when it is applied to an index, itproduces an lower (inclusive) and upper (exclusive) integer offset at whichto slice."}, {"name" : "org.saddle.index.SliceAll", "shortDescription" : "Represent a slice over the entire index", "object" : "org\/saddle\/index\/SliceAll$.html", "members_class" : [{"label" : "apply", "tail" : "(idx: Index[U]): (Int, Int)", "member" : "org.saddle.index.SliceAll.apply", "link" : "org\/saddle\/index\/SliceAll.html#apply[U](idx:org.saddle.Index[U]):(Int,Int)", "kind" : "def"}, {"member" : "org.saddle.index.SliceAll#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/saddle\/index\/SliceAll.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/saddle\/index\/SliceAll.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/saddle\/index\/SliceAll.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/saddle\/index\/SliceAll.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/saddle\/index\/SliceAll.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/saddle\/index\/SliceAll.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/saddle\/index\/SliceAll.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/index\/SliceAll.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/index\/SliceAll.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/index\/SliceAll.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/saddle\/index\/SliceAll.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/saddle\/index\/SliceAll.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/saddle\/index\/SliceAll.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/saddle\/index\/SliceAll.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/saddle\/index\/SliceAll.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/saddle\/index\/SliceAll.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "org\/saddle\/index\/SliceAll.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/saddle\/index\/SliceAll.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/saddle\/index\/SliceAll.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "apply", "tail" : "(): SliceAll", "member" : "org.saddle.index.SliceAll.apply", "link" : "org\/saddle\/index\/SliceAll$.html#apply[T]():org.saddle.index.SliceAll", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/saddle\/index\/SliceAll$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/saddle\/index\/SliceAll$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/saddle\/index\/SliceAll$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/saddle\/index\/SliceAll$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/saddle\/index\/SliceAll$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/saddle\/index\/SliceAll$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/saddle\/index\/SliceAll$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/index\/SliceAll$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/index\/SliceAll$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/index\/SliceAll$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/saddle\/index\/SliceAll$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/saddle\/index\/SliceAll$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/saddle\/index\/SliceAll$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/saddle\/index\/SliceAll$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/saddle\/index\/SliceAll$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/saddle\/index\/SliceAll$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "org\/saddle\/index\/SliceAll$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/saddle\/index\/SliceAll$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/saddle\/index\/SliceAll$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/saddle\/index\/SliceAll.html", "kind" : "class"}, {"name" : "org.saddle.index.SliceDefault", "shortDescription" : "Represent a slice from one key to another, inclusive.", "members_class" : [{"label" : "apply", "tail" : "(idx: Index[U]): (Int, Int)", "member" : "org.saddle.index.SliceDefault.apply", "link" : "org\/saddle\/index\/SliceDefault.html#apply[U>:T](idx:org.saddle.Index[U]):(Int,Int)", "kind" : "def"}, {"member" : "org.saddle.index.SliceDefault#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/saddle\/index\/SliceDefault.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/saddle\/index\/SliceDefault.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/saddle\/index\/SliceDefault.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/saddle\/index\/SliceDefault.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/saddle\/index\/SliceDefault.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/saddle\/index\/SliceDefault.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/saddle\/index\/SliceDefault.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/index\/SliceDefault.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/index\/SliceDefault.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/index\/SliceDefault.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/saddle\/index\/SliceDefault.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/saddle\/index\/SliceDefault.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/saddle\/index\/SliceDefault.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/saddle\/index\/SliceDefault.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/saddle\/index\/SliceDefault.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/saddle\/index\/SliceDefault.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "org\/saddle\/index\/SliceDefault.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/saddle\/index\/SliceDefault.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/saddle\/index\/SliceDefault.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/saddle\/index\/SliceDefault.html", "kind" : "class"}, {"name" : "org.saddle.index.SliceFrom", "shortDescription" : "Represent a slice from key to end of index", "object" : "org\/saddle\/index\/SliceFrom$.html", "members_class" : [{"label" : "apply", "tail" : "(idx: Index[U]): (Int, Int)", "member" : "org.saddle.index.SliceFrom.apply", "link" : "org\/saddle\/index\/SliceFrom.html#apply[U>:T](idx:org.saddle.Index[U]):(Int,Int)", "kind" : "def"}, {"member" : "org.saddle.index.SliceFrom#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/saddle\/index\/SliceFrom.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/saddle\/index\/SliceFrom.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/saddle\/index\/SliceFrom.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/saddle\/index\/SliceFrom.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/saddle\/index\/SliceFrom.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/saddle\/index\/SliceFrom.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/saddle\/index\/SliceFrom.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/index\/SliceFrom.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/index\/SliceFrom.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/index\/SliceFrom.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/saddle\/index\/SliceFrom.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/saddle\/index\/SliceFrom.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/saddle\/index\/SliceFrom.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/saddle\/index\/SliceFrom.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/saddle\/index\/SliceFrom.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/saddle\/index\/SliceFrom.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "org\/saddle\/index\/SliceFrom.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/saddle\/index\/SliceFrom.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/saddle\/index\/SliceFrom.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "apply", "tail" : "(k: T): SliceFrom[T]", "member" : "org.saddle.index.SliceFrom.apply", "link" : "org\/saddle\/index\/SliceFrom$.html#apply[T](k:T):org.saddle.index.SliceFrom[T]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/saddle\/index\/SliceFrom$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/saddle\/index\/SliceFrom$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/saddle\/index\/SliceFrom$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/saddle\/index\/SliceFrom$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/saddle\/index\/SliceFrom$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/saddle\/index\/SliceFrom$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/saddle\/index\/SliceFrom$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/index\/SliceFrom$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/index\/SliceFrom$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/index\/SliceFrom$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/saddle\/index\/SliceFrom$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/saddle\/index\/SliceFrom$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/saddle\/index\/SliceFrom$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/saddle\/index\/SliceFrom$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/saddle\/index\/SliceFrom$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/saddle\/index\/SliceFrom$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "org\/saddle\/index\/SliceFrom$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/saddle\/index\/SliceFrom$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/saddle\/index\/SliceFrom$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/saddle\/index\/SliceFrom.html", "kind" : "class"}, {"name" : "org.saddle.index.SliceTo", "shortDescription" : "Represent a slice from zero to a key.", "object" : "org\/saddle\/index\/SliceTo$.html", "members_class" : [{"label" : "apply", "tail" : "(idx: Index[U]): (Int, Int)", "member" : "org.saddle.index.SliceTo.apply", "link" : "org\/saddle\/index\/SliceTo.html#apply[U>:T](idx:org.saddle.Index[U]):(Int,Int)", "kind" : "def"}, {"member" : "org.saddle.index.SliceTo#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/saddle\/index\/SliceTo.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/saddle\/index\/SliceTo.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/saddle\/index\/SliceTo.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/saddle\/index\/SliceTo.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/saddle\/index\/SliceTo.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/saddle\/index\/SliceTo.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/saddle\/index\/SliceTo.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/index\/SliceTo.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/index\/SliceTo.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/index\/SliceTo.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/saddle\/index\/SliceTo.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/saddle\/index\/SliceTo.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/saddle\/index\/SliceTo.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/saddle\/index\/SliceTo.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/saddle\/index\/SliceTo.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/saddle\/index\/SliceTo.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "org\/saddle\/index\/SliceTo.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/saddle\/index\/SliceTo.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/saddle\/index\/SliceTo.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "apply", "tail" : "(k: T): SliceTo[T]", "member" : "org.saddle.index.SliceTo.apply", "link" : "org\/saddle\/index\/SliceTo$.html#apply[T](k:T):org.saddle.index.SliceTo[T]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/saddle\/index\/SliceTo$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/saddle\/index\/SliceTo$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/saddle\/index\/SliceTo$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/saddle\/index\/SliceTo$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/saddle\/index\/SliceTo$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/saddle\/index\/SliceTo$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/saddle\/index\/SliceTo$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/index\/SliceTo$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/index\/SliceTo$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/index\/SliceTo$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/saddle\/index\/SliceTo$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/saddle\/index\/SliceTo$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/saddle\/index\/SliceTo$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/saddle\/index\/SliceTo$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/saddle\/index\/SliceTo$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/saddle\/index\/SliceTo$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "org\/saddle\/index\/SliceTo$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/saddle\/index\/SliceTo$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/saddle\/index\/SliceTo$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/saddle\/index\/SliceTo.html", "kind" : "class"}, {"name" : "org.saddle.index.Splitter", "object" : "org\/saddle\/index\/Splitter$.html", "members_object" : [{"label" : "split9th", "tail" : "(arg0: ORD[T1], arg1: ORD[T2], arg2: ORD[T3], arg3: ORD[T4], arg4: ORD[T5], arg5: ORD[T6], arg6: ORD[T7], arg7: ORD[T8], arg8: ST[T9], arg9: ORD[T9]): Splitter[(T1, T2, T3, T4, T5, T6, T7, T8, T9), (T1, T2, T3, T4, T5, T6, T7, T8), T9]", "member" : "org.saddle.index.Splitter.split9th", "link" : "org\/saddle\/index\/Splitter$.html#split9th[T1,T2,T3,T4,T5,T6,T7,T8,T9](implicitevidence$44:org.saddle.ORD[T1],implicitevidence$45:org.saddle.ORD[T2],implicitevidence$46:org.saddle.ORD[T3],implicitevidence$47:org.saddle.ORD[T4],implicitevidence$48:org.saddle.ORD[T5],implicitevidence$49:org.saddle.ORD[T6],implicitevidence$50:org.saddle.ORD[T7],implicitevidence$51:org.saddle.ORD[T8],implicitevidence$52:org.saddle.ST[T9],implicitevidence$53:org.saddle.ORD[T9]):org.saddle.index.Splitter[(T1,T2,T3,T4,T5,T6,T7,T8,T9),(T1,T2,T3,T4,T5,T6,T7,T8),T9]", "kind" : "implicit def"}, {"label" : "split8th", "tail" : "(arg0: ORD[T1], arg1: ORD[T2], arg2: ORD[T3], arg3: ORD[T4], arg4: ORD[T5], arg5: ORD[T6], arg6: ORD[T7], arg7: ST[T8], arg8: ORD[T8]): Splitter[(T1, T2, T3, T4, T5, T6, T7, T8), (T1, T2, T3, T4, T5, T6, T7), T8]", "member" : "org.saddle.index.Splitter.split8th", "link" : "org\/saddle\/index\/Splitter$.html#split8th[T1,T2,T3,T4,T5,T6,T7,T8](implicitevidence$35:org.saddle.ORD[T1],implicitevidence$36:org.saddle.ORD[T2],implicitevidence$37:org.saddle.ORD[T3],implicitevidence$38:org.saddle.ORD[T4],implicitevidence$39:org.saddle.ORD[T5],implicitevidence$40:org.saddle.ORD[T6],implicitevidence$41:org.saddle.ORD[T7],implicitevidence$42:org.saddle.ST[T8],implicitevidence$43:org.saddle.ORD[T8]):org.saddle.index.Splitter[(T1,T2,T3,T4,T5,T6,T7,T8),(T1,T2,T3,T4,T5,T6,T7),T8]", "kind" : "implicit def"}, {"label" : "split7th", "tail" : "(arg0: ORD[T1], arg1: ORD[T2], arg2: ORD[T3], arg3: ORD[T4], arg4: ORD[T5], arg5: ORD[T6], arg6: ST[T7], arg7: ORD[T7]): Splitter[(T1, T2, T3, T4, T5, T6, T7), (T1, T2, T3, T4, T5, T6), T7]", "member" : "org.saddle.index.Splitter.split7th", "link" : "org\/saddle\/index\/Splitter$.html#split7th[T1,T2,T3,T4,T5,T6,T7](implicitevidence$27:org.saddle.ORD[T1],implicitevidence$28:org.saddle.ORD[T2],implicitevidence$29:org.saddle.ORD[T3],implicitevidence$30:org.saddle.ORD[T4],implicitevidence$31:org.saddle.ORD[T5],implicitevidence$32:org.saddle.ORD[T6],implicitevidence$33:org.saddle.ST[T7],implicitevidence$34:org.saddle.ORD[T7]):org.saddle.index.Splitter[(T1,T2,T3,T4,T5,T6,T7),(T1,T2,T3,T4,T5,T6),T7]", "kind" : "implicit def"}, {"label" : "split6th", "tail" : "(arg0: ORD[T1], arg1: ORD[T2], arg2: ORD[T3], arg3: ORD[T4], arg4: ORD[T5], arg5: ST[T6], arg6: ORD[T6]): Splitter[(T1, T2, T3, T4, T5, T6), (T1, T2, T3, T4, T5), T6]", "member" : "org.saddle.index.Splitter.split6th", "link" : "org\/saddle\/index\/Splitter$.html#split6th[T1,T2,T3,T4,T5,T6](implicitevidence$20:org.saddle.ORD[T1],implicitevidence$21:org.saddle.ORD[T2],implicitevidence$22:org.saddle.ORD[T3],implicitevidence$23:org.saddle.ORD[T4],implicitevidence$24:org.saddle.ORD[T5],implicitevidence$25:org.saddle.ST[T6],implicitevidence$26:org.saddle.ORD[T6]):org.saddle.index.Splitter[(T1,T2,T3,T4,T5,T6),(T1,T2,T3,T4,T5),T6]", "kind" : "implicit def"}, {"label" : "split5th", "tail" : "(arg0: ORD[T1], arg1: ORD[T2], arg2: ORD[T3], arg3: ORD[T4], arg4: ST[T5], arg5: ORD[T5]): Splitter[(T1, T2, T3, T4, T5), (T1, T2, T3, T4), T5]", "member" : "org.saddle.index.Splitter.split5th", "link" : "org\/saddle\/index\/Splitter$.html#split5th[T1,T2,T3,T4,T5](implicitevidence$14:org.saddle.ORD[T1],implicitevidence$15:org.saddle.ORD[T2],implicitevidence$16:org.saddle.ORD[T3],implicitevidence$17:org.saddle.ORD[T4],implicitevidence$18:org.saddle.ST[T5],implicitevidence$19:org.saddle.ORD[T5]):org.saddle.index.Splitter[(T1,T2,T3,T4,T5),(T1,T2,T3,T4),T5]", "kind" : "implicit def"}, {"label" : "split4th", "tail" : "(arg0: ORD[T1], arg1: ORD[T2], arg2: ORD[T3], arg3: ST[T4], arg4: ORD[T4]): Splitter[(T1, T2, T3, T4), (T1, T2, T3), T4]", "member" : "org.saddle.index.Splitter.split4th", "link" : "org\/saddle\/index\/Splitter$.html#split4th[T1,T2,T3,T4](implicitevidence$9:org.saddle.ORD[T1],implicitevidence$10:org.saddle.ORD[T2],implicitevidence$11:org.saddle.ORD[T3],implicitevidence$12:org.saddle.ST[T4],implicitevidence$13:org.saddle.ORD[T4]):org.saddle.index.Splitter[(T1,T2,T3,T4),(T1,T2,T3),T4]", "kind" : "implicit def"}, {"label" : "split3rd", "tail" : "(arg0: ORD[T1], arg1: ORD[T2], arg2: ST[T3], arg3: ORD[T3]): Splitter[(T1, T2, T3), (T1, T2), T3]", "member" : "org.saddle.index.Splitter.split3rd", "link" : "org\/saddle\/index\/Splitter$.html#split3rd[T1,T2,T3](implicitevidence$5:org.saddle.ORD[T1],implicitevidence$6:org.saddle.ORD[T2],implicitevidence$7:org.saddle.ST[T3],implicitevidence$8:org.saddle.ORD[T3]):org.saddle.index.Splitter[(T1,T2,T3),(T1,T2),T3]", "kind" : "implicit def"}, {"label" : "split2nd", "tail" : "(arg0: ST[T1], arg1: ORD[T1], arg2: ST[T2], arg3: ORD[T2]): Splitter[(T1, T2), T1, T2]", "member" : "org.saddle.index.Splitter.split2nd", "link" : "org\/saddle\/index\/Splitter$.html#split2nd[T1,T2](implicitevidence$1:org.saddle.ST[T1],implicitevidence$2:org.saddle.ORD[T1],implicitevidence$3:org.saddle.ST[T2],implicitevidence$4:org.saddle.ORD[T2]):org.saddle.index.Splitter[(T1,T2),T1,T2]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/saddle\/index\/Splitter$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/saddle\/index\/Splitter$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/saddle\/index\/Splitter$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/saddle\/index\/Splitter$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/saddle\/index\/Splitter$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/saddle\/index\/Splitter$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/saddle\/index\/Splitter$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/index\/Splitter$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/index\/Splitter$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/index\/Splitter$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/saddle\/index\/Splitter$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/saddle\/index\/Splitter$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/saddle\/index\/Splitter$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/saddle\/index\/Splitter$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/saddle\/index\/Splitter$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/saddle\/index\/Splitter$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "org\/saddle\/index\/Splitter$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/saddle\/index\/Splitter$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/saddle\/index\/Splitter$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "org\/saddle\/index\/Splitter.html", "kind" : "trait", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/saddle\/index\/Splitter.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/saddle\/index\/Splitter.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/saddle\/index\/Splitter.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/saddle\/index\/Splitter.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/saddle\/index\/Splitter.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/saddle\/index\/Splitter.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/saddle\/index\/Splitter.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/index\/Splitter.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/index\/Splitter.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/index\/Splitter.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/saddle\/index\/Splitter.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/saddle\/index\/Splitter.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/saddle\/index\/Splitter.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/saddle\/index\/Splitter.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/saddle\/index\/Splitter.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/saddle\/index\/Splitter.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "org\/saddle\/index\/Splitter.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/saddle\/index\/Splitter.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/saddle\/index\/Splitter.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "apply", "tail" : "(i: Index[I]): (Index[OL], Index[OR])", "member" : "org.saddle.index.Splitter.apply", "link" : "org\/saddle\/index\/Splitter.html#apply(i:org.saddle.Index[I]):(org.saddle.Index[OL],org.saddle.Index[OR])", "kind" : "abstract def"}], "shortDescription" : "A Splitter operates on an input index whose elements have arity N, andyields the following pair of output indexes: the left has elements whosearity is N-1, where each element has the first N-1 constituents of theoriginal tuple; and the right is an index whose elements were those in theNth position of the original tuple."}, {"name" : "org.saddle.index.Stacker", "object" : "org\/saddle\/index\/Stacker$.html", "members_object" : [{"label" : "stack9th", "tail" : "(arg0: ORD[T1], arg1: ORD[T2], arg2: ORD[T3], arg3: ORD[T4], arg4: ORD[T5], arg5: ORD[T6], arg6: ORD[T7], arg7: ORD[T8], arg8: ORD[T9]): Stacker[(T1, T2, T3, T4, T5, T6, T7, T8), T9, (T1, T2, T3, T4, T5, T6, T7, T8, T9)]", "member" : "org.saddle.index.Stacker.stack9th", "link" : "org\/saddle\/index\/Stacker$.html#stack9th[T1,T2,T3,T4,T5,T6,T7,T8,T9](implicitevidence$34:org.saddle.ORD[T1],implicitevidence$35:org.saddle.ORD[T2],implicitevidence$36:org.saddle.ORD[T3],implicitevidence$37:org.saddle.ORD[T4],implicitevidence$38:org.saddle.ORD[T5],implicitevidence$39:org.saddle.ORD[T6],implicitevidence$40:org.saddle.ORD[T7],implicitevidence$41:org.saddle.ORD[T8],implicitevidence$42:org.saddle.ORD[T9]):org.saddle.index.Stacker[(T1,T2,T3,T4,T5,T6,T7,T8),T9,(T1,T2,T3,T4,T5,T6,T7,T8,T9)]", "kind" : "implicit def"}, {"label" : "stack8th", "tail" : "(arg0: ORD[T1], arg1: ORD[T2], arg2: ORD[T3], arg3: ORD[T4], arg4: ORD[T5], arg5: ORD[T6], arg6: ORD[T7], arg7: ORD[T8]): Stacker[(T1, T2, T3, T4, T5, T6, T7), T8, (T1, T2, T3, T4, T5, T6, T7, T8)]", "member" : "org.saddle.index.Stacker.stack8th", "link" : "org\/saddle\/index\/Stacker$.html#stack8th[T1,T2,T3,T4,T5,T6,T7,T8](implicitevidence$26:org.saddle.ORD[T1],implicitevidence$27:org.saddle.ORD[T2],implicitevidence$28:org.saddle.ORD[T3],implicitevidence$29:org.saddle.ORD[T4],implicitevidence$30:org.saddle.ORD[T5],implicitevidence$31:org.saddle.ORD[T6],implicitevidence$32:org.saddle.ORD[T7],implicitevidence$33:org.saddle.ORD[T8]):org.saddle.index.Stacker[(T1,T2,T3,T4,T5,T6,T7),T8,(T1,T2,T3,T4,T5,T6,T7,T8)]", "kind" : "implicit def"}, {"label" : "stack7th", "tail" : "(arg0: ORD[T1], arg1: ORD[T2], arg2: ORD[T3], arg3: ORD[T4], arg4: ORD[T5], arg5: ORD[T6], arg6: ORD[T7]): Stacker[(T1, T2, T3, T4, T5, T6), T7, (T1, T2, T3, T4, T5, T6, T7)]", "member" : "org.saddle.index.Stacker.stack7th", "link" : "org\/saddle\/index\/Stacker$.html#stack7th[T1,T2,T3,T4,T5,T6,T7](implicitevidence$19:org.saddle.ORD[T1],implicitevidence$20:org.saddle.ORD[T2],implicitevidence$21:org.saddle.ORD[T3],implicitevidence$22:org.saddle.ORD[T4],implicitevidence$23:org.saddle.ORD[T5],implicitevidence$24:org.saddle.ORD[T6],implicitevidence$25:org.saddle.ORD[T7]):org.saddle.index.Stacker[(T1,T2,T3,T4,T5,T6),T7,(T1,T2,T3,T4,T5,T6,T7)]", "kind" : "implicit def"}, {"label" : "stack6th", "tail" : "(arg0: ORD[T1], arg1: ORD[T2], arg2: ORD[T3], arg3: ORD[T4], arg4: ORD[T5], arg5: ORD[T6]): Stacker[(T1, T2, T3, T4, T5), T6, (T1, T2, T3, T4, T5, T6)]", "member" : "org.saddle.index.Stacker.stack6th", "link" : "org\/saddle\/index\/Stacker$.html#stack6th[T1,T2,T3,T4,T5,T6](implicitevidence$13:org.saddle.ORD[T1],implicitevidence$14:org.saddle.ORD[T2],implicitevidence$15:org.saddle.ORD[T3],implicitevidence$16:org.saddle.ORD[T4],implicitevidence$17:org.saddle.ORD[T5],implicitevidence$18:org.saddle.ORD[T6]):org.saddle.index.Stacker[(T1,T2,T3,T4,T5),T6,(T1,T2,T3,T4,T5,T6)]", "kind" : "implicit def"}, {"label" : "stack5th", "tail" : "(arg0: ORD[T1], arg1: ORD[T2], arg2: ORD[T3], arg3: ORD[T4], arg4: ORD[T5]): Stacker[(T1, T2, T3, T4), T5, (T1, T2, T3, T4, T5)]", "member" : "org.saddle.index.Stacker.stack5th", "link" : "org\/saddle\/index\/Stacker$.html#stack5th[T1,T2,T3,T4,T5](implicitevidence$8:org.saddle.ORD[T1],implicitevidence$9:org.saddle.ORD[T2],implicitevidence$10:org.saddle.ORD[T3],implicitevidence$11:org.saddle.ORD[T4],implicitevidence$12:org.saddle.ORD[T5]):org.saddle.index.Stacker[(T1,T2,T3,T4),T5,(T1,T2,T3,T4,T5)]", "kind" : "implicit def"}, {"label" : "stack4th", "tail" : "(arg0: ORD[T1], arg1: ORD[T2], arg2: ORD[T3], arg3: ORD[T4]): Stacker[(T1, T2, T3), T4, (T1, T2, T3, T4)]", "member" : "org.saddle.index.Stacker.stack4th", "link" : "org\/saddle\/index\/Stacker$.html#stack4th[T1,T2,T3,T4](implicitevidence$4:org.saddle.ORD[T1],implicitevidence$5:org.saddle.ORD[T2],implicitevidence$6:org.saddle.ORD[T3],implicitevidence$7:org.saddle.ORD[T4]):org.saddle.index.Stacker[(T1,T2,T3),T4,(T1,T2,T3,T4)]", "kind" : "implicit def"}, {"label" : "stack3rd", "tail" : "(arg0: ORD[T1], arg1: ORD[T2], arg2: ORD[T3]): Stacker[(T1, T2), T3, (T1, T2, T3)]", "member" : "org.saddle.index.Stacker.stack3rd", "link" : "org\/saddle\/index\/Stacker$.html#stack3rd[T1,T2,T3](implicitevidence$1:org.saddle.ORD[T1],implicitevidence$2:org.saddle.ORD[T2],implicitevidence$3:org.saddle.ORD[T3]):org.saddle.index.Stacker[(T1,T2),T3,(T1,T2,T3)]", "kind" : "implicit def"}, {"label" : "stack2nd", "tail" : "(arg0: ORD[T1], arg1: ORD[T2]): Stacker[T1, T2, (T1, T2)]", "member" : "org.saddle.index.StackerLowPriority.stack2nd", "link" : "org\/saddle\/index\/Stacker$.html#stack2nd[T1,T2](implicitevidence$43:org.saddle.ORD[T1],implicitevidence$44:org.saddle.ORD[T2]):org.saddle.index.Stacker[T1,T2,(T1,T2)]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/saddle\/index\/Stacker$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/saddle\/index\/Stacker$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/saddle\/index\/Stacker$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/saddle\/index\/Stacker$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/saddle\/index\/Stacker$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/saddle\/index\/Stacker$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/saddle\/index\/Stacker$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/index\/Stacker$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/index\/Stacker$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/index\/Stacker$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/saddle\/index\/Stacker$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/saddle\/index\/Stacker$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/saddle\/index\/Stacker$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/saddle\/index\/Stacker$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/saddle\/index\/Stacker$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/saddle\/index\/Stacker$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "org\/saddle\/index\/Stacker$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/saddle\/index\/Stacker$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/saddle\/index\/Stacker$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "org\/saddle\/index\/Stacker.html", "kind" : "trait", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/saddle\/index\/Stacker.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/saddle\/index\/Stacker.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/saddle\/index\/Stacker.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/saddle\/index\/Stacker.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/saddle\/index\/Stacker.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/saddle\/index\/Stacker.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/saddle\/index\/Stacker.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/index\/Stacker.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/index\/Stacker.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/index\/Stacker.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/saddle\/index\/Stacker.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/saddle\/index\/Stacker.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/saddle\/index\/Stacker.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/saddle\/index\/Stacker.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/saddle\/index\/Stacker.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/saddle\/index\/Stacker.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "org\/saddle\/index\/Stacker.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/saddle\/index\/Stacker.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/saddle\/index\/Stacker.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "tag", "tail" : "(): ST[O]", "member" : "org.saddle.index.Stacker.tag", "link" : "org\/saddle\/index\/Stacker.html#tag:org.saddle.ST[O]", "kind" : "abstract def"}, {"label" : "ord", "tail" : "(): ORD[O]", "member" : "org.saddle.index.Stacker.ord", "link" : "org\/saddle\/index\/Stacker.html#ord:org.saddle.ORD[O]", "kind" : "abstract def"}, {"label" : "apply", "tail" : "(ix1: Index[I], ix2: Index[J]): Index[O]", "member" : "org.saddle.index.Stacker.apply", "link" : "org\/saddle\/index\/Stacker.html#apply(ix1:org.saddle.Index[I],ix2:org.saddle.Index[J]):org.saddle.Index[O]", "kind" : "abstract def"}], "shortDescription" : "A Stacker operates on two input Index instances and produces a new outputIndex whose entries are drawn from the Cartesian product of the elements ofthe original indexes, and whose ordering is likewise specified by theoriginal orderings."}, {"name" : "org.saddle.index.StackerLowPriority", "trait" : "org\/saddle\/index\/StackerLowPriority.html", "kind" : "trait", "members_trait" : [{"label" : "stack2nd", "tail" : "(arg0: ORD[T1], arg1: ORD[T2]): Stacker[T1, T2, (T1, T2)]", "member" : "org.saddle.index.StackerLowPriority.stack2nd", "link" : "org\/saddle\/index\/StackerLowPriority.html#stack2nd[T1,T2](implicitevidence$43:org.saddle.ORD[T1],implicitevidence$44:org.saddle.ORD[T2]):org.saddle.index.Stacker[T1,T2,(T1,T2)]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/saddle\/index\/StackerLowPriority.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/saddle\/index\/StackerLowPriority.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/saddle\/index\/StackerLowPriority.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/saddle\/index\/StackerLowPriority.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/saddle\/index\/StackerLowPriority.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/saddle\/index\/StackerLowPriority.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/saddle\/index\/StackerLowPriority.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/index\/StackerLowPriority.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/index\/StackerLowPriority.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/index\/StackerLowPriority.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/saddle\/index\/StackerLowPriority.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/saddle\/index\/StackerLowPriority.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/saddle\/index\/StackerLowPriority.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/saddle\/index\/StackerLowPriority.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/saddle\/index\/StackerLowPriority.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/saddle\/index\/StackerLowPriority.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "org\/saddle\/index\/StackerLowPriority.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/saddle\/index\/StackerLowPriority.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/saddle\/index\/StackerLowPriority.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "Implicit instance of Stacker for two indexes of arbitrary type."}], "org.saddle.spire.random" : [{"name" : "org.saddle.spire.random.Generator", "shortDescription" : "", "object" : "org\/saddle\/spire\/random\/Generator$.html", "members_class" : [{"label" : "generateGaussians", "tail" : "(n: Int, mean: Double, stddev: Double): Array[Double]", "member" : "org.saddle.spire.random.Generator.generateGaussians", "link" : "org\/saddle\/spire\/random\/Generator.html#generateGaussians(n:Int,mean:Double,stddev:Double):Array[Double]", "kind" : "def"}, {"label" : "generateGaussians", "tail" : "(n: Int): Array[Double]", "member" : "org.saddle.spire.random.Generator.generateGaussians", "link" : "org\/saddle\/spire\/random\/Generator.html#generateGaussians(n:Int):Array[Double]", "kind" : "def"}, {"label" : "fillGaussians", "tail" : "(arr: Array[Double], mean: Double, stddev: Double): Unit", "member" : "org.saddle.spire.random.Generator.fillGaussians", "link" : "org\/saddle\/spire\/random\/Generator.html#fillGaussians(arr:Array[Double],mean:Double,stddev:Double):Unit", "kind" : "def"}, {"label" : "fillGaussians", "tail" : "(arr: Array[Double]): Unit", "member" : "org.saddle.spire.random.Generator.fillGaussians", "link" : "org\/saddle\/spire\/random\/Generator.html#fillGaussians(arr:Array[Double]):Unit", "kind" : "def"}, {"label" : "nextGaussian", "tail" : "(mean: Double, stddev: Double): Double", "member" : "org.saddle.spire.random.Generator.nextGaussian", "link" : "org\/saddle\/spire\/random\/Generator.html#nextGaussian(mean:Double,stddev:Double):Double", "kind" : "def"}, {"label" : "nextGaussian", "tail" : "(): Double", "member" : "org.saddle.spire.random.Generator.nextGaussian", "link" : "org\/saddle\/spire\/random\/Generator.html#nextGaussian():Double", "kind" : "def"}, {"label" : "shuffle", "tail" : "(as: Array[A])(gen: Generator): Unit", "member" : "org.saddle.spire.random.Generator.shuffle", "link" : "org\/saddle\/spire\/random\/Generator.html#shuffle[A](as:Array[A])(implicitgen:org.saddle.spire.random.Generator):Unit", "kind" : "def"}, {"label" : "sampleFromTraversable", "tail" : "(as: Iterable[A], size: Int)(arg0: ClassTag[A], gen: Generator): Array[A]", "member" : "org.saddle.spire.random.Generator.sampleFromTraversable", "link" : "org\/saddle\/spire\/random\/Generator.html#sampleFromTraversable[A](as:Iterable[A],size:Int)(implicitevidence$2:org.saddle.spire.ClassTag[A],implicitgen:org.saddle.spire.random.Generator):Array[A]", "kind" : "def"}, {"label" : "sampleFromArray", "tail" : "(as: Array[A], size: Int)(arg0: ClassTag[A], gen: Generator): Array[A]", "member" : "org.saddle.spire.random.Generator.sampleFromArray", "link" : "org\/saddle\/spire\/random\/Generator.html#sampleFromArray[A](as:Array[A],size:Int)(implicitevidence$1:org.saddle.spire.ClassTag[A],implicitgen:org.saddle.spire.random.Generator):Array[A]", "kind" : "def"}, {"label" : "chooseFromIterable", "tail" : "(as: Iterable[A])(gen: Generator): A", "member" : "org.saddle.spire.random.Generator.chooseFromIterable", "link" : "org\/saddle\/spire\/random\/Generator.html#chooseFromIterable[A](as:Iterable[A])(implicitgen:org.saddle.spire.random.Generator):A", "kind" : "def"}, {"label" : "chooseFromSeq", "tail" : "(seq: Seq[A])(gen: Generator): A", "member" : "org.saddle.spire.random.Generator.chooseFromSeq", "link" : "org\/saddle\/spire\/random\/Generator.html#chooseFromSeq[A](seq:Seq[A])(implicitgen:org.saddle.spire.random.Generator):A", "kind" : "def"}, {"label" : "chooseFromArray", "tail" : "(arr: Array[A])(gen: Generator): A", "member" : "org.saddle.spire.random.Generator.chooseFromArray", "link" : "org\/saddle\/spire\/random\/Generator.html#chooseFromArray[A](arr:Array[A])(implicitgen:org.saddle.spire.random.Generator):A", "kind" : "def"}, {"label" : "oneOf", "tail" : "(as: A*): A", "member" : "org.saddle.spire.random.Generator.oneOf", "link" : "org\/saddle\/spire\/random\/Generator.html#oneOf[A](as:A*):A", "kind" : "def"}, {"label" : "fillBytes", "tail" : "(arr: Array[Byte]): Unit", "member" : "org.saddle.spire.random.Generator.fillBytes", "link" : "org\/saddle\/spire\/random\/Generator.html#fillBytes(arr:Array[Byte]):Unit", "kind" : "def"}, {"label" : "generateBytes", "tail" : "(n: Int): Array[Byte]", "member" : "org.saddle.spire.random.Generator.generateBytes", "link" : "org\/saddle\/spire\/random\/Generator.html#generateBytes(n:Int):Array[Byte]", "kind" : "def"}, {"label" : "fillShorts", "tail" : "(arr: Array[Short]): Unit", "member" : "org.saddle.spire.random.Generator.fillShorts", "link" : "org\/saddle\/spire\/random\/Generator.html#fillShorts(arr:Array[Short]):Unit", "kind" : "def"}, {"label" : "generateShorts", "tail" : "(n: Int): Array[Short]", "member" : "org.saddle.spire.random.Generator.generateShorts", "link" : "org\/saddle\/spire\/random\/Generator.html#generateShorts(n:Int):Array[Short]", "kind" : "def"}, {"label" : "fillInts", "tail" : "(arr: Array[Int]): Unit", "member" : "org.saddle.spire.random.Generator.fillInts", "link" : "org\/saddle\/spire\/random\/Generator.html#fillInts(arr:Array[Int]):Unit", "kind" : "def"}, {"label" : "generateInts", "tail" : "(n: Int): Array[Int]", "member" : "org.saddle.spire.random.Generator.generateInts", "link" : "org\/saddle\/spire\/random\/Generator.html#generateInts(n:Int):Array[Int]", "kind" : "def"}, {"label" : "fillLongs", "tail" : "(arr: Array[Long]): Unit", "member" : "org.saddle.spire.random.Generator.fillLongs", "link" : "org\/saddle\/spire\/random\/Generator.html#fillLongs(arr:Array[Long]):Unit", "kind" : "def"}, {"label" : "generateLongs", "tail" : "(n: Int): Array[Long]", "member" : "org.saddle.spire.random.Generator.generateLongs", "link" : "org\/saddle\/spire\/random\/Generator.html#generateLongs(n:Int):Array[Long]", "kind" : "def"}, {"label" : "nextDouble", "tail" : "(from: Double, until: Double): Double", "member" : "org.saddle.spire.random.Generator.nextDouble", "link" : "org\/saddle\/spire\/random\/Generator.html#nextDouble(from:Double,until:Double):Double", "kind" : "def"}, {"label" : "nextDouble", "tail" : "(n: Double): Double", "member" : "org.saddle.spire.random.Generator.nextDouble", "link" : "org\/saddle\/spire\/random\/Generator.html#nextDouble(n:Double):Double", "kind" : "def"}, {"label" : "nextDouble", "tail" : "(): Double", "member" : "org.saddle.spire.random.Generator.nextDouble", "link" : "org\/saddle\/spire\/random\/Generator.html#nextDouble():Double", "kind" : "def"}, {"label" : "nextFloat", "tail" : "(from: Float, until: Float): Float", "member" : "org.saddle.spire.random.Generator.nextFloat", "link" : "org\/saddle\/spire\/random\/Generator.html#nextFloat(from:Float,until:Float):Float", "kind" : "def"}, {"label" : "nextFloat", "tail" : "(n: Float): Float", "member" : "org.saddle.spire.random.Generator.nextFloat", "link" : "org\/saddle\/spire\/random\/Generator.html#nextFloat(n:Float):Float", "kind" : "def"}, {"label" : "nextFloat", "tail" : "(): Float", "member" : "org.saddle.spire.random.Generator.nextFloat", "link" : "org\/saddle\/spire\/random\/Generator.html#nextFloat():Float", "kind" : "def"}, {"label" : "nextBoolean", "tail" : "(): Boolean", "member" : "org.saddle.spire.random.Generator.nextBoolean", "link" : "org\/saddle\/spire\/random\/Generator.html#nextBoolean():Boolean", "kind" : "def"}, {"label" : "nextLong", "tail" : "(from: Long, to: Long): Long", "member" : "org.saddle.spire.random.Generator.nextLong", "link" : "org\/saddle\/spire\/random\/Generator.html#nextLong(from:Long,to:Long):Long", "kind" : "def"}, {"label" : "nextLong", "tail" : "(n: Long): Long", "member" : "org.saddle.spire.random.Generator.nextLong", "link" : "org\/saddle\/spire\/random\/Generator.html#nextLong(n:Long):Long", "kind" : "def"}, {"label" : "nextInt", "tail" : "(from: Int, to: Int): Int", "member" : "org.saddle.spire.random.Generator.nextInt", "link" : "org\/saddle\/spire\/random\/Generator.html#nextInt(from:Int,to:Int):Int", "kind" : "def"}, {"label" : "nextInt", "tail" : "(n: Int): Int", "member" : "org.saddle.spire.random.Generator.nextInt", "link" : "org\/saddle\/spire\/random\/Generator.html#nextInt(n:Int):Int", "kind" : "def"}, {"label" : "nextBits", "tail" : "(n: Int): Int", "member" : "org.saddle.spire.random.Generator.nextBits", "link" : "org\/saddle\/spire\/random\/Generator.html#nextBits(n:Int):Int", "kind" : "def"}, {"label" : "copy", "tail" : "(): Generator", "member" : "org.saddle.spire.random.Generator.copy", "link" : "org\/saddle\/spire\/random\/Generator.html#copy:org.saddle.spire.random.Generator", "kind" : "def"}, {"label" : "value", "tail" : ": Double", "member" : "org.saddle.spire.random.Generator.value", "link" : "org\/saddle\/spire\/random\/Generator.html#value:Double", "kind" : "var"}, {"label" : "extra", "tail" : ": Boolean", "member" : "org.saddle.spire.random.Generator.extra", "link" : "org\/saddle\/spire\/random\/Generator.html#extra:Boolean", "kind" : "var"}, {"member" : "org.saddle.spire.random.Generator#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/saddle\/spire\/random\/Generator.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/saddle\/spire\/random\/Generator.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/saddle\/spire\/random\/Generator.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/saddle\/spire\/random\/Generator.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/saddle\/spire\/random\/Generator.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/saddle\/spire\/random\/Generator.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/saddle\/spire\/random\/Generator.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/spire\/random\/Generator.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/spire\/random\/Generator.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/spire\/random\/Generator.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/saddle\/spire\/random\/Generator.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/saddle\/spire\/random\/Generator.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/saddle\/spire\/random\/Generator.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/saddle\/spire\/random\/Generator.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/saddle\/spire\/random\/Generator.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/saddle\/spire\/random\/Generator.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "org\/saddle\/spire\/random\/Generator.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/saddle\/spire\/random\/Generator.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/saddle\/spire\/random\/Generator.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "nextLong", "tail" : "(): Long", "member" : "org.saddle.spire.random.Generator.nextLong", "link" : "org\/saddle\/spire\/random\/Generator.html#nextLong():Long", "kind" : "abstract def"}, {"label" : "nextInt", "tail" : "(): Int", "member" : "org.saddle.spire.random.Generator.nextInt", "link" : "org\/saddle\/spire\/random\/Generator.html#nextInt():Int", "kind" : "abstract def"}, {"label" : "setSeedBytes", "tail" : "(bytes: Array[Byte]): Unit", "member" : "org.saddle.spire.random.Generator.setSeedBytes", "link" : "org\/saddle\/spire\/random\/Generator.html#setSeedBytes(bytes:Array[Byte]):Unit", "kind" : "abstract def"}, {"label" : "getSeedBytes", "tail" : "(): Array[Byte]", "member" : "org.saddle.spire.random.Generator.getSeedBytes", "link" : "org\/saddle\/spire\/random\/Generator.html#getSeedBytes():Array[Byte]", "kind" : "abstract def"}, {"label" : "copyInit", "tail" : "(): Generator", "member" : "org.saddle.spire.random.Generator.copyInit", "link" : "org\/saddle\/spire\/random\/Generator.html#copyInit:org.saddle.spire.random.Generator", "kind" : "abstract def"}], "members_object" : [{"label" : "rng", "tail" : ": GlobalRng.type", "member" : "org.saddle.spire.random.Generator.rng", "link" : "org\/saddle\/spire\/random\/Generator$.html#rng:org.saddle.spire.random.GlobalRng.type", "kind" : "implicit val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/saddle\/spire\/random\/Generator$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/saddle\/spire\/random\/Generator$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/saddle\/spire\/random\/Generator$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/saddle\/spire\/random\/Generator$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/saddle\/spire\/random\/Generator$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/saddle\/spire\/random\/Generator$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/saddle\/spire\/random\/Generator$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/spire\/random\/Generator$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/spire\/random\/Generator$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/spire\/random\/Generator$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/saddle\/spire\/random\/Generator$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/saddle\/spire\/random\/Generator$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/saddle\/spire\/random\/Generator$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/saddle\/spire\/random\/Generator$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/saddle\/spire\/random\/Generator$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/saddle\/spire\/random\/Generator$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "org\/saddle\/spire\/random\/Generator$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/saddle\/spire\/random\/Generator$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/saddle\/spire\/random\/Generator$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/saddle\/spire\/random\/Generator.html", "kind" : "class"}, {"name" : "org.saddle.spire.random.GlobalRng", "shortDescription" : "", "object" : "org\/saddle\/spire\/random\/GlobalRng$.html", "members_object" : [{"label" : "nextLong", "tail" : "(): Long", "member" : "org.saddle.spire.random.GlobalRng.nextLong", "link" : "org\/saddle\/spire\/random\/GlobalRng$.html#nextLong():Long", "kind" : "def"}, {"label" : "setSeedBytes", "tail" : "(bytes: Array[Byte]): Unit", "member" : "org.saddle.spire.random.GlobalRng.setSeedBytes", "link" : "org\/saddle\/spire\/random\/GlobalRng$.html#setSeedBytes(bytes:Array[Byte]):Unit", "kind" : "def"}, {"label" : "getSeedBytes", "tail" : "(): Array[Byte]", "member" : "org.saddle.spire.random.GlobalRng.getSeedBytes", "link" : "org\/saddle\/spire\/random\/GlobalRng$.html#getSeedBytes():Array[Byte]", "kind" : "def"}, {"label" : "copyInit", "tail" : "(): Generator", "member" : "org.saddle.spire.random.GlobalRng.copyInit", "link" : "org\/saddle\/spire\/random\/GlobalRng$.html#copyInit:org.saddle.spire.random.Generator", "kind" : "def"}, {"label" : "fillBytes", "tail" : "(arr: Array[Byte]): Unit", "member" : "org.saddle.spire.random.LongBasedGenerator.fillBytes", "link" : "org\/saddle\/spire\/random\/GlobalRng$.html#fillBytes(arr:Array[Byte]):Unit", "kind" : "def"}, {"label" : "fillShorts", "tail" : "(arr: Array[Short]): Unit", "member" : "org.saddle.spire.random.LongBasedGenerator.fillShorts", "link" : "org\/saddle\/spire\/random\/GlobalRng$.html#fillShorts(arr:Array[Short]):Unit", "kind" : "def"}, {"label" : "fillInts", "tail" : "(arr: Array[Int]): Unit", "member" : "org.saddle.spire.random.LongBasedGenerator.fillInts", "link" : "org\/saddle\/spire\/random\/GlobalRng$.html#fillInts(arr:Array[Int]):Unit", "kind" : "def"}, {"label" : "nextInt", "tail" : "(): Int", "member" : "org.saddle.spire.random.LongBasedGenerator.nextInt", "link" : "org\/saddle\/spire\/random\/GlobalRng$.html#nextInt():Int", "kind" : "def"}, {"label" : "generateGaussians", "tail" : "(n: Int, mean: Double, stddev: Double): Array[Double]", "member" : "org.saddle.spire.random.Generator.generateGaussians", "link" : "org\/saddle\/spire\/random\/GlobalRng$.html#generateGaussians(n:Int,mean:Double,stddev:Double):Array[Double]", "kind" : "def"}, {"label" : "generateGaussians", "tail" : "(n: Int): Array[Double]", "member" : "org.saddle.spire.random.Generator.generateGaussians", "link" : "org\/saddle\/spire\/random\/GlobalRng$.html#generateGaussians(n:Int):Array[Double]", "kind" : "def"}, {"label" : "fillGaussians", "tail" : "(arr: Array[Double], mean: Double, stddev: Double): Unit", "member" : "org.saddle.spire.random.Generator.fillGaussians", "link" : "org\/saddle\/spire\/random\/GlobalRng$.html#fillGaussians(arr:Array[Double],mean:Double,stddev:Double):Unit", "kind" : "def"}, {"label" : "fillGaussians", "tail" : "(arr: Array[Double]): Unit", "member" : "org.saddle.spire.random.Generator.fillGaussians", "link" : "org\/saddle\/spire\/random\/GlobalRng$.html#fillGaussians(arr:Array[Double]):Unit", "kind" : "def"}, {"label" : "nextGaussian", "tail" : "(mean: Double, stddev: Double): Double", "member" : "org.saddle.spire.random.Generator.nextGaussian", "link" : "org\/saddle\/spire\/random\/GlobalRng$.html#nextGaussian(mean:Double,stddev:Double):Double", "kind" : "def"}, {"label" : "nextGaussian", "tail" : "(): Double", "member" : "org.saddle.spire.random.Generator.nextGaussian", "link" : "org\/saddle\/spire\/random\/GlobalRng$.html#nextGaussian():Double", "kind" : "def"}, {"label" : "shuffle", "tail" : "(as: Array[A])(gen: Generator): Unit", "member" : "org.saddle.spire.random.Generator.shuffle", "link" : "org\/saddle\/spire\/random\/GlobalRng$.html#shuffle[A](as:Array[A])(implicitgen:org.saddle.spire.random.Generator):Unit", "kind" : "def"}, {"label" : "sampleFromTraversable", "tail" : "(as: Iterable[A], size: Int)(arg0: ClassTag[A], gen: Generator): Array[A]", "member" : "org.saddle.spire.random.Generator.sampleFromTraversable", "link" : "org\/saddle\/spire\/random\/GlobalRng$.html#sampleFromTraversable[A](as:Iterable[A],size:Int)(implicitevidence$2:org.saddle.spire.ClassTag[A],implicitgen:org.saddle.spire.random.Generator):Array[A]", "kind" : "def"}, {"label" : "sampleFromArray", "tail" : "(as: Array[A], size: Int)(arg0: ClassTag[A], gen: Generator): Array[A]", "member" : "org.saddle.spire.random.Generator.sampleFromArray", "link" : "org\/saddle\/spire\/random\/GlobalRng$.html#sampleFromArray[A](as:Array[A],size:Int)(implicitevidence$1:org.saddle.spire.ClassTag[A],implicitgen:org.saddle.spire.random.Generator):Array[A]", "kind" : "def"}, {"label" : "chooseFromIterable", "tail" : "(as: Iterable[A])(gen: Generator): A", "member" : "org.saddle.spire.random.Generator.chooseFromIterable", "link" : "org\/saddle\/spire\/random\/GlobalRng$.html#chooseFromIterable[A](as:Iterable[A])(implicitgen:org.saddle.spire.random.Generator):A", "kind" : "def"}, {"label" : "chooseFromSeq", "tail" : "(seq: Seq[A])(gen: Generator): A", "member" : "org.saddle.spire.random.Generator.chooseFromSeq", "link" : "org\/saddle\/spire\/random\/GlobalRng$.html#chooseFromSeq[A](seq:Seq[A])(implicitgen:org.saddle.spire.random.Generator):A", "kind" : "def"}, {"label" : "chooseFromArray", "tail" : "(arr: Array[A])(gen: Generator): A", "member" : "org.saddle.spire.random.Generator.chooseFromArray", "link" : "org\/saddle\/spire\/random\/GlobalRng$.html#chooseFromArray[A](arr:Array[A])(implicitgen:org.saddle.spire.random.Generator):A", "kind" : "def"}, {"label" : "oneOf", "tail" : "(as: A*): A", "member" : "org.saddle.spire.random.Generator.oneOf", "link" : "org\/saddle\/spire\/random\/GlobalRng$.html#oneOf[A](as:A*):A", "kind" : "def"}, {"label" : "generateBytes", "tail" : "(n: Int): Array[Byte]", "member" : "org.saddle.spire.random.Generator.generateBytes", "link" : "org\/saddle\/spire\/random\/GlobalRng$.html#generateBytes(n:Int):Array[Byte]", "kind" : "def"}, {"label" : "generateShorts", "tail" : "(n: Int): Array[Short]", "member" : "org.saddle.spire.random.Generator.generateShorts", "link" : "org\/saddle\/spire\/random\/GlobalRng$.html#generateShorts(n:Int):Array[Short]", "kind" : "def"}, {"label" : "generateInts", "tail" : "(n: Int): Array[Int]", "member" : "org.saddle.spire.random.Generator.generateInts", "link" : "org\/saddle\/spire\/random\/GlobalRng$.html#generateInts(n:Int):Array[Int]", "kind" : "def"}, {"label" : "fillLongs", "tail" : "(arr: Array[Long]): Unit", "member" : "org.saddle.spire.random.Generator.fillLongs", "link" : "org\/saddle\/spire\/random\/GlobalRng$.html#fillLongs(arr:Array[Long]):Unit", "kind" : "def"}, {"label" : "generateLongs", "tail" : "(n: Int): Array[Long]", "member" : "org.saddle.spire.random.Generator.generateLongs", "link" : "org\/saddle\/spire\/random\/GlobalRng$.html#generateLongs(n:Int):Array[Long]", "kind" : "def"}, {"label" : "nextDouble", "tail" : "(from: Double, until: Double): Double", "member" : "org.saddle.spire.random.Generator.nextDouble", "link" : "org\/saddle\/spire\/random\/GlobalRng$.html#nextDouble(from:Double,until:Double):Double", "kind" : "def"}, {"label" : "nextDouble", "tail" : "(n: Double): Double", "member" : "org.saddle.spire.random.Generator.nextDouble", "link" : "org\/saddle\/spire\/random\/GlobalRng$.html#nextDouble(n:Double):Double", "kind" : "def"}, {"label" : "nextDouble", "tail" : "(): Double", "member" : "org.saddle.spire.random.Generator.nextDouble", "link" : "org\/saddle\/spire\/random\/GlobalRng$.html#nextDouble():Double", "kind" : "def"}, {"label" : "nextFloat", "tail" : "(from: Float, until: Float): Float", "member" : "org.saddle.spire.random.Generator.nextFloat", "link" : "org\/saddle\/spire\/random\/GlobalRng$.html#nextFloat(from:Float,until:Float):Float", "kind" : "def"}, {"label" : "nextFloat", "tail" : "(n: Float): Float", "member" : "org.saddle.spire.random.Generator.nextFloat", "link" : "org\/saddle\/spire\/random\/GlobalRng$.html#nextFloat(n:Float):Float", "kind" : "def"}, {"label" : "nextFloat", "tail" : "(): Float", "member" : "org.saddle.spire.random.Generator.nextFloat", "link" : "org\/saddle\/spire\/random\/GlobalRng$.html#nextFloat():Float", "kind" : "def"}, {"label" : "nextBoolean", "tail" : "(): Boolean", "member" : "org.saddle.spire.random.Generator.nextBoolean", "link" : "org\/saddle\/spire\/random\/GlobalRng$.html#nextBoolean():Boolean", "kind" : "def"}, {"label" : "nextLong", "tail" : "(from: Long, to: Long): Long", "member" : "org.saddle.spire.random.Generator.nextLong", "link" : "org\/saddle\/spire\/random\/GlobalRng$.html#nextLong(from:Long,to:Long):Long", "kind" : "def"}, {"label" : "nextLong", "tail" : "(n: Long): Long", "member" : "org.saddle.spire.random.Generator.nextLong", "link" : "org\/saddle\/spire\/random\/GlobalRng$.html#nextLong(n:Long):Long", "kind" : "def"}, {"label" : "nextInt", "tail" : "(from: Int, to: Int): Int", "member" : "org.saddle.spire.random.Generator.nextInt", "link" : "org\/saddle\/spire\/random\/GlobalRng$.html#nextInt(from:Int,to:Int):Int", "kind" : "def"}, {"label" : "nextInt", "tail" : "(n: Int): Int", "member" : "org.saddle.spire.random.Generator.nextInt", "link" : "org\/saddle\/spire\/random\/GlobalRng$.html#nextInt(n:Int):Int", "kind" : "def"}, {"label" : "nextBits", "tail" : "(n: Int): Int", "member" : "org.saddle.spire.random.Generator.nextBits", "link" : "org\/saddle\/spire\/random\/GlobalRng$.html#nextBits(n:Int):Int", "kind" : "def"}, {"label" : "copy", "tail" : "(): Generator", "member" : "org.saddle.spire.random.Generator.copy", "link" : "org\/saddle\/spire\/random\/GlobalRng$.html#copy:org.saddle.spire.random.Generator", "kind" : "def"}, {"label" : "value", "tail" : ": Double", "member" : "org.saddle.spire.random.Generator.value", "link" : "org\/saddle\/spire\/random\/GlobalRng$.html#value:Double", "kind" : "var"}, {"label" : "extra", "tail" : ": Boolean", "member" : "org.saddle.spire.random.Generator.extra", "link" : "org\/saddle\/spire\/random\/GlobalRng$.html#extra:Boolean", "kind" : "var"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/saddle\/spire\/random\/GlobalRng$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/saddle\/spire\/random\/GlobalRng$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/saddle\/spire\/random\/GlobalRng$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/saddle\/spire\/random\/GlobalRng$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/saddle\/spire\/random\/GlobalRng$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/saddle\/spire\/random\/GlobalRng$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/saddle\/spire\/random\/GlobalRng$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/spire\/random\/GlobalRng$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/spire\/random\/GlobalRng$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/spire\/random\/GlobalRng$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/saddle\/spire\/random\/GlobalRng$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/saddle\/spire\/random\/GlobalRng$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/saddle\/spire\/random\/GlobalRng$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/saddle\/spire\/random\/GlobalRng$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/saddle\/spire\/random\/GlobalRng$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/saddle\/spire\/random\/GlobalRng$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "org\/saddle\/spire\/random\/GlobalRng$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/saddle\/spire\/random\/GlobalRng$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/saddle\/spire\/random\/GlobalRng$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}], "org.saddle" : [{"name" : "org.saddle.ArrToVec", "shortDescription" : "", "members_class" : [{"label" : "toVec", "tail" : "(): Vec[T]", "member" : "org.saddle.ArrToVec.toVec", "link" : "org\/saddle\/package$$ArrToVec.html#toVec:org.saddle.Vec[T]", "kind" : "def"}, {"member" : "org.saddle.ArrToVec#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/saddle\/package$$ArrToVec.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/saddle\/package$$ArrToVec.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/saddle\/package$$ArrToVec.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/saddle\/package$$ArrToVec.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/saddle\/package$$ArrToVec.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/saddle\/package$$ArrToVec.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/saddle\/package$$ArrToVec.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/package$$ArrToVec.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/package$$ArrToVec.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/package$$ArrToVec.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/saddle\/package$$ArrToVec.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/saddle\/package$$ArrToVec.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/saddle\/package$$ArrToVec.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/saddle\/package$$ArrToVec.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/saddle\/package$$ArrToVec.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/saddle\/package$$ArrToVec.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "org\/saddle\/package$$ArrToVec.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/saddle\/package$$ArrToVec.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/saddle\/package$$ArrToVec.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/saddle\/package$$ArrToVec.html", "kind" : "class"}, {"name" : "org.saddle.Buffer", "shortDescription" : "", "object" : "org\/saddle\/Buffer$.html", "members_class" : [{"label" : "+=", "tail" : "(elem: V): Buffer.this.type", "member" : "org.saddle.Buffer.+=", "link" : "org\/saddle\/Buffer.html#+=(elem:V):Buffer.this.type", "kind" : "final def"}, {"label" : "toArrays", "tail" : "(): List[Array[V]]", "member" : "org.saddle.Buffer.toArrays", "link" : "org\/saddle\/Buffer.html#toArrays:List[Array[V]]", "kind" : "final def"}, {"label" : "toArray", "tail" : "(): Array[V]", "member" : "org.saddle.Buffer.toArray", "link" : "org\/saddle\/Buffer.html#toArray:Array[V]", "kind" : "final def"}, {"label" : "ctV", "tail" : ": ClassTag[V]", "member" : "org.saddle.Buffer.ctV", "link" : "org\/saddle\/Buffer.html#ctV:scala.reflect.ClassTag[V]", "kind" : "implicit val"}, {"label" : "length", "tail" : ": Int", "member" : "org.saddle.Buffer.length", "link" : "org\/saddle\/Buffer.html#length:Int", "kind" : "var"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/saddle\/Buffer.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/saddle\/Buffer.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/saddle\/Buffer.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/saddle\/Buffer.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/saddle\/Buffer.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/saddle\/Buffer.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/saddle\/Buffer.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/Buffer.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/Buffer.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/Buffer.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/saddle\/Buffer.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/saddle\/Buffer.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/saddle\/Buffer.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/saddle\/Buffer.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/saddle\/Buffer.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/saddle\/Buffer.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "org\/saddle\/Buffer.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/saddle\/Buffer.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/saddle\/Buffer.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "empty", "tail" : "(initSize: Int)(arg0: ClassTag[T]): Buffer[T]", "member" : "org.saddle.Buffer.empty", "link" : "org\/saddle\/Buffer$.html#empty[T](initSize:Int)(implicitevidence$2:scala.reflect.ClassTag[T]):org.saddle.Buffer[T]", "kind" : "def"}, {"label" : "empty", "tail" : "(arg0: ClassTag[T]): Buffer[T]", "member" : "org.saddle.Buffer.empty", "link" : "org\/saddle\/Buffer$.html#empty[T](implicitevidence$1:scala.reflect.ClassTag[T]):org.saddle.Buffer[T]", "kind" : "def"}, {"label" : "INIT_CAPACITY", "tail" : ": Int", "member" : "org.saddle.Buffer.INIT_CAPACITY", "link" : "org\/saddle\/Buffer$.html#INIT_CAPACITY:Int", "kind" : "val"}, {"label" : "maxSize", "tail" : ": Int", "member" : "org.saddle.Buffer.maxSize", "link" : "org\/saddle\/Buffer$.html#maxSize:Int", "kind" : "val"}, {"label" : "startSize", "tail" : ": Int", "member" : "org.saddle.Buffer.startSize", "link" : "org\/saddle\/Buffer$.html#startSize:Int", "kind" : "val"}, {"label" : "Dummy", "tail" : "", "member" : "org.saddle.Buffer.Dummy", "link" : "org\/saddle\/Buffer$.html#Dummy", "kind" : "object"}, {"label" : "Dummy", "tail" : "", "member" : "org.saddle.Buffer.Dummy", "link" : "org\/saddle\/Buffer$.html#Dummy[A]extendsAnyRef", "kind" : "class"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/saddle\/Buffer$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/saddle\/Buffer$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/saddle\/Buffer$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/saddle\/Buffer$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/saddle\/Buffer$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/saddle\/Buffer$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/saddle\/Buffer$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/Buffer$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/Buffer$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/Buffer$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/saddle\/Buffer$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/saddle\/Buffer$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/saddle\/Buffer$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/saddle\/Buffer$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/saddle\/Buffer$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/saddle\/Buffer$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "org\/saddle\/Buffer$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/saddle\/Buffer$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/saddle\/Buffer$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/saddle\/Buffer.html", "kind" : "class"}, {"name" : "org.saddle.doubleIsNumeric", "shortDescription" : "", "object" : "org\/saddle\/doubleIsNumeric$.html", "members_object" : [{"label" : "toDouble", "tail" : "(a: Double): Double", "member" : "org.saddle.doubleIsNumeric.toDouble", "link" : "org\/saddle\/doubleIsNumeric$.html#toDouble(a:Double):Double", "kind" : "def"}, {"label" : "times", "tail" : "(a: Double, b: Double): Double", "member" : "org.saddle.doubleIsNumeric.times", "link" : "org\/saddle\/doubleIsNumeric$.html#times(a:Double,b:Double):Double", "kind" : "def"}, {"label" : "one", "tail" : "(): Double", "member" : "org.saddle.doubleIsNumeric.one", "link" : "org\/saddle\/doubleIsNumeric$.html#one:Double", "kind" : "def"}, {"label" : "zero", "tail" : "(): Double", "member" : "org.saddle.doubleIsNumeric.zero", "link" : "org\/saddle\/doubleIsNumeric$.html#zero:Double", "kind" : "def"}, {"label" : "abs", "tail" : "(a: Double): Double", "member" : "org.saddle.doubleIsNumeric.abs", "link" : "org\/saddle\/doubleIsNumeric$.html#abs(a:Double):Double", "kind" : "def"}, {"label" : "negate", "tail" : "(a: Double): Double", "member" : "org.saddle.doubleIsNumeric.negate", "link" : "org\/saddle\/doubleIsNumeric$.html#negate(a:Double):Double", "kind" : "def"}, {"label" : "minus", "tail" : "(a: Double, b: Double): Double", "member" : "org.saddle.doubleIsNumeric.minus", "link" : "org\/saddle\/doubleIsNumeric$.html#minus(a:Double,b:Double):Double", "kind" : "def"}, {"label" : "plus", "tail" : "(a: Double, b: Double): Double", "member" : "org.saddle.doubleIsNumeric.plus", "link" : "org\/saddle\/doubleIsNumeric$.html#plus(a:Double,b:Double):Double", "kind" : "def"}, {"label" : "max", "tail" : "(x: Double, y: Double): Double", "member" : "org.saddle.util.DoubleTotalOrderTrait.max", "link" : "org\/saddle\/doubleIsNumeric$.html#max(x:Double,y:Double):Double", "kind" : "def"}, {"label" : "min", "tail" : "(x: Double, y: Double): Double", "member" : "org.saddle.util.DoubleTotalOrderTrait.min", "link" : "org\/saddle\/doubleIsNumeric$.html#min(x:Double,y:Double):Double", "kind" : "def"}, {"label" : "lteqv", "tail" : "(x: Double, y: Double): Boolean", "member" : "org.saddle.util.DoubleTotalOrderTrait.lteqv", "link" : "org\/saddle\/doubleIsNumeric$.html#lteqv(x:Double,y:Double):Boolean", "kind" : "def"}, {"label" : "lt", "tail" : "(x: Double, y: Double): Boolean", "member" : "org.saddle.util.DoubleTotalOrderTrait.lt", "link" : "org\/saddle\/doubleIsNumeric$.html#lt(x:Double,y:Double):Boolean", "kind" : "def"}, {"label" : "gteqv", "tail" : "(x: Double, y: Double): Boolean", "member" : "org.saddle.util.DoubleTotalOrderTrait.gteqv", "link" : "org\/saddle\/doubleIsNumeric$.html#gteqv(x:Double,y:Double):Boolean", "kind" : "def"}, {"label" : "gt", "tail" : "(x: Double, y: Double): Boolean", "member" : "org.saddle.util.DoubleTotalOrderTrait.gt", "link" : "org\/saddle\/doubleIsNumeric$.html#gt(x:Double,y:Double):Boolean", "kind" : "def"}, {"label" : "neqv", "tail" : "(x: Double, y: Double): Boolean", "member" : "org.saddle.util.DoubleTotalOrderTrait.neqv", "link" : "org\/saddle\/doubleIsNumeric$.html#neqv(x:Double,y:Double):Boolean", "kind" : "def"}, {"label" : "eqv", "tail" : "(x: Double, y: Double): Boolean", "member" : "org.saddle.util.DoubleTotalOrderTrait.eqv", "link" : "org\/saddle\/doubleIsNumeric$.html#eqv(x:Double,y:Double):Boolean", "kind" : "def"}, {"label" : "compare", "tail" : "(x: Double, y: Double): Int", "member" : "org.saddle.util.DoubleTotalOrderTrait.compare", "link" : "org\/saddle\/doubleIsNumeric$.html#compare(x:Double,y:Double):Int", "kind" : "def"}, {"label" : "hash", "tail" : "(x: Double): Int", "member" : "org.saddle.util.DoubleTotalOrderTrait.hash", "link" : "org\/saddle\/doubleIsNumeric$.html#hash(x:Double):Int", "kind" : "def"}, {"label" : "toOrdering", "tail" : "(): Ordering[Double]", "member" : "cats.kernel.Order.toOrdering", "link" : "org\/saddle\/doubleIsNumeric$.html#toOrdering:Ordering[A]", "kind" : "def"}, {"label" : "partialCompare", "tail" : "(x: Double, y: Double): Double", "member" : "cats.kernel.Order.partialCompare", "link" : "org\/saddle\/doubleIsNumeric$.html#partialCompare(x:A,y:A):Double", "kind" : "def"}, {"label" : "comparison", "tail" : "(x: Double, y: Double): Comparison", "member" : "cats.kernel.Order.comparison", "link" : "org\/saddle\/doubleIsNumeric$.html#comparison(x:A,y:A):cats.kernel.Comparison", "kind" : "def"}, {"label" : "pmax", "tail" : "(x: Double, y: Double): Option[Double]", "member" : "cats.kernel.PartialOrder.pmax", "link" : "org\/saddle\/doubleIsNumeric$.html#pmax(x:A,y:A):Option[A]", "kind" : "def"}, {"label" : "pmin", "tail" : "(x: Double, y: Double): Option[Double]", "member" : "cats.kernel.PartialOrder.pmin", "link" : "org\/saddle\/doubleIsNumeric$.html#pmin(x:A,y:A):Option[A]", "kind" : "def"}, {"label" : "tryCompare", "tail" : "(x: Double, y: Double): Option[Int]", "member" : "cats.kernel.PartialOrder.tryCompare", "link" : "org\/saddle\/doubleIsNumeric$.html#tryCompare(x:A,y:A):Option[Int]", "kind" : "def"}, {"label" : "partialComparison", "tail" : "(x: Double, y: Double): Option[Comparison]", "member" : "cats.kernel.PartialOrder.partialComparison", "link" : "org\/saddle\/doubleIsNumeric$.html#partialComparison(x:A,y:A):Option[cats.kernel.Comparison]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/saddle\/doubleIsNumeric$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/saddle\/doubleIsNumeric$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/saddle\/doubleIsNumeric$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/saddle\/doubleIsNumeric$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/saddle\/doubleIsNumeric$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/saddle\/doubleIsNumeric$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/saddle\/doubleIsNumeric$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/doubleIsNumeric$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/doubleIsNumeric$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/doubleIsNumeric$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/saddle\/doubleIsNumeric$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/saddle\/doubleIsNumeric$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/saddle\/doubleIsNumeric$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/saddle\/doubleIsNumeric$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/saddle\/doubleIsNumeric$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/saddle\/doubleIsNumeric$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "org\/saddle\/doubleIsNumeric$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/saddle\/doubleIsNumeric$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/saddle\/doubleIsNumeric$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "org.saddle.FillBackward", "case object" : "org\/saddle\/package$$FillBackward$.html", "shortDescription" : "", "members_case object" : [{"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "org\/saddle\/package$$FillBackward$.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "productElementName", "tail" : "(n: Int): String", "member" : "scala.Product.productElementName", "link" : "org\/saddle\/package$$FillBackward$.html#productElementName(n:Int):String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/saddle\/package$$FillBackward$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/saddle\/package$$FillBackward$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/saddle\/package$$FillBackward$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/saddle\/package$$FillBackward$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/saddle\/package$$FillBackward$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/saddle\/package$$FillBackward$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/saddle\/package$$FillBackward$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/package$$FillBackward$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/package$$FillBackward$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/package$$FillBackward$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/saddle\/package$$FillBackward$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/saddle\/package$$FillBackward$.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/saddle\/package$$FillBackward$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/saddle\/package$$FillBackward$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "org\/saddle\/package$$FillBackward$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/saddle\/package$$FillBackward$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/saddle\/package$$FillBackward$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "case object"}, {"name" : "org.saddle.FillForward", "case object" : "org\/saddle\/package$$FillForward$.html", "shortDescription" : "", "members_case object" : [{"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "org\/saddle\/package$$FillForward$.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "productElementName", "tail" : "(n: Int): String", "member" : "scala.Product.productElementName", "link" : "org\/saddle\/package$$FillForward$.html#productElementName(n:Int):String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/saddle\/package$$FillForward$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/saddle\/package$$FillForward$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/saddle\/package$$FillForward$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/saddle\/package$$FillForward$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/saddle\/package$$FillForward$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/saddle\/package$$FillForward$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/saddle\/package$$FillForward$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/package$$FillForward$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/package$$FillForward$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/package$$FillForward$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/saddle\/package$$FillForward$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/saddle\/package$$FillForward$.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/saddle\/package$$FillForward$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/saddle\/package$$FillForward$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "org\/saddle\/package$$FillForward$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/saddle\/package$$FillForward$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/saddle\/package$$FillForward$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "case object"}, {"name" : "org.saddle.FillMethod", "shortDescription" : "Filling method for NA values.", "members_class" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/saddle\/package$$FillMethod.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/saddle\/package$$FillMethod.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/saddle\/package$$FillMethod.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/saddle\/package$$FillMethod.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/saddle\/package$$FillMethod.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/saddle\/package$$FillMethod.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/saddle\/package$$FillMethod.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/package$$FillMethod.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/package$$FillMethod.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/package$$FillMethod.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/saddle\/package$$FillMethod.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/saddle\/package$$FillMethod.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/saddle\/package$$FillMethod.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/saddle\/package$$FillMethod.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/saddle\/package$$FillMethod.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/saddle\/package$$FillMethod.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "org\/saddle\/package$$FillMethod.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/saddle\/package$$FillMethod.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/saddle\/package$$FillMethod.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/saddle\/package$$FillMethod.html", "kind" : "class"}, {"name" : "org.saddle.floatIsNumeric", "shortDescription" : "", "object" : "org\/saddle\/floatIsNumeric$.html", "members_object" : [{"label" : "toDouble", "tail" : "(a: Float): Double", "member" : "org.saddle.floatIsNumeric.toDouble", "link" : "org\/saddle\/floatIsNumeric$.html#toDouble(a:Float):Double", "kind" : "def"}, {"label" : "times", "tail" : "(a: Float, b: Float): Float", "member" : "org.saddle.floatIsNumeric.times", "link" : "org\/saddle\/floatIsNumeric$.html#times(a:Float,b:Float):Float", "kind" : "def"}, {"label" : "one", "tail" : "(): Float", "member" : "org.saddle.floatIsNumeric.one", "link" : "org\/saddle\/floatIsNumeric$.html#one:Float", "kind" : "def"}, {"label" : "zero", "tail" : "(): Float", "member" : "org.saddle.floatIsNumeric.zero", "link" : "org\/saddle\/floatIsNumeric$.html#zero:Float", "kind" : "def"}, {"label" : "abs", "tail" : "(a: Float): Float", "member" : "org.saddle.floatIsNumeric.abs", "link" : "org\/saddle\/floatIsNumeric$.html#abs(a:Float):Float", "kind" : "def"}, {"label" : "negate", "tail" : "(a: Float): Float", "member" : "org.saddle.floatIsNumeric.negate", "link" : "org\/saddle\/floatIsNumeric$.html#negate(a:Float):Float", "kind" : "def"}, {"label" : "minus", "tail" : "(a: Float, b: Float): Float", "member" : "org.saddle.floatIsNumeric.minus", "link" : "org\/saddle\/floatIsNumeric$.html#minus(a:Float,b:Float):Float", "kind" : "def"}, {"label" : "plus", "tail" : "(a: Float, b: Float): Float", "member" : "org.saddle.floatIsNumeric.plus", "link" : "org\/saddle\/floatIsNumeric$.html#plus(a:Float,b:Float):Float", "kind" : "def"}, {"label" : "max", "tail" : "(x: Float, y: Float): Float", "member" : "org.saddle.util.FloatTotalOrderTrait.max", "link" : "org\/saddle\/floatIsNumeric$.html#max(x:Float,y:Float):Float", "kind" : "def"}, {"label" : "min", "tail" : "(x: Float, y: Float): Float", "member" : "org.saddle.util.FloatTotalOrderTrait.min", "link" : "org\/saddle\/floatIsNumeric$.html#min(x:Float,y:Float):Float", "kind" : "def"}, {"label" : "lteqv", "tail" : "(x: Float, y: Float): Boolean", "member" : "org.saddle.util.FloatTotalOrderTrait.lteqv", "link" : "org\/saddle\/floatIsNumeric$.html#lteqv(x:Float,y:Float):Boolean", "kind" : "def"}, {"label" : "lt", "tail" : "(x: Float, y: Float): Boolean", "member" : "org.saddle.util.FloatTotalOrderTrait.lt", "link" : "org\/saddle\/floatIsNumeric$.html#lt(x:Float,y:Float):Boolean", "kind" : "def"}, {"label" : "gteqv", "tail" : "(x: Float, y: Float): Boolean", "member" : "org.saddle.util.FloatTotalOrderTrait.gteqv", "link" : "org\/saddle\/floatIsNumeric$.html#gteqv(x:Float,y:Float):Boolean", "kind" : "def"}, {"label" : "gt", "tail" : "(x: Float, y: Float): Boolean", "member" : "org.saddle.util.FloatTotalOrderTrait.gt", "link" : "org\/saddle\/floatIsNumeric$.html#gt(x:Float,y:Float):Boolean", "kind" : "def"}, {"label" : "neqv", "tail" : "(x: Float, y: Float): Boolean", "member" : "org.saddle.util.FloatTotalOrderTrait.neqv", "link" : "org\/saddle\/floatIsNumeric$.html#neqv(x:Float,y:Float):Boolean", "kind" : "def"}, {"label" : "eqv", "tail" : "(x: Float, y: Float): Boolean", "member" : "org.saddle.util.FloatTotalOrderTrait.eqv", "link" : "org\/saddle\/floatIsNumeric$.html#eqv(x:Float,y:Float):Boolean", "kind" : "def"}, {"label" : "compare", "tail" : "(x: Float, y: Float): Int", "member" : "org.saddle.util.FloatTotalOrderTrait.compare", "link" : "org\/saddle\/floatIsNumeric$.html#compare(x:Float,y:Float):Int", "kind" : "def"}, {"label" : "hash", "tail" : "(x: Float): Int", "member" : "org.saddle.util.FloatTotalOrderTrait.hash", "link" : "org\/saddle\/floatIsNumeric$.html#hash(x:Float):Int", "kind" : "def"}, {"label" : "toOrdering", "tail" : "(): Ordering[Float]", "member" : "cats.kernel.Order.toOrdering", "link" : "org\/saddle\/floatIsNumeric$.html#toOrdering:Ordering[A]", "kind" : "def"}, {"label" : "partialCompare", "tail" : "(x: Float, y: Float): Double", "member" : "cats.kernel.Order.partialCompare", "link" : "org\/saddle\/floatIsNumeric$.html#partialCompare(x:A,y:A):Double", "kind" : "def"}, {"label" : "comparison", "tail" : "(x: Float, y: Float): Comparison", "member" : "cats.kernel.Order.comparison", "link" : "org\/saddle\/floatIsNumeric$.html#comparison(x:A,y:A):cats.kernel.Comparison", "kind" : "def"}, {"label" : "pmax", "tail" : "(x: Float, y: Float): Option[Float]", "member" : "cats.kernel.PartialOrder.pmax", "link" : "org\/saddle\/floatIsNumeric$.html#pmax(x:A,y:A):Option[A]", "kind" : "def"}, {"label" : "pmin", "tail" : "(x: Float, y: Float): Option[Float]", "member" : "cats.kernel.PartialOrder.pmin", "link" : "org\/saddle\/floatIsNumeric$.html#pmin(x:A,y:A):Option[A]", "kind" : "def"}, {"label" : "tryCompare", "tail" : "(x: Float, y: Float): Option[Int]", "member" : "cats.kernel.PartialOrder.tryCompare", "link" : "org\/saddle\/floatIsNumeric$.html#tryCompare(x:A,y:A):Option[Int]", "kind" : "def"}, {"label" : "partialComparison", "tail" : "(x: Float, y: Float): Option[Comparison]", "member" : "cats.kernel.PartialOrder.partialComparison", "link" : "org\/saddle\/floatIsNumeric$.html#partialComparison(x:A,y:A):Option[cats.kernel.Comparison]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/saddle\/floatIsNumeric$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/saddle\/floatIsNumeric$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/saddle\/floatIsNumeric$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/saddle\/floatIsNumeric$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/saddle\/floatIsNumeric$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/saddle\/floatIsNumeric$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/saddle\/floatIsNumeric$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/floatIsNumeric$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/floatIsNumeric$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/floatIsNumeric$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/saddle\/floatIsNumeric$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/saddle\/floatIsNumeric$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/saddle\/floatIsNumeric$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/saddle\/floatIsNumeric$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/saddle\/floatIsNumeric$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/saddle\/floatIsNumeric$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "org\/saddle\/floatIsNumeric$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/saddle\/floatIsNumeric$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/saddle\/floatIsNumeric$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "org.saddle.Frame", "shortDescription" : "Frame is an immutable container for 2D data which is indexed along bothaxes (rows, columns) by associated keys (i.e., indexes).", "object" : "org\/saddle\/Frame$.html", "members_class" : [{"label" : "prod", "tail" : "(num: NUM[T]): Series[CX, T]", "member" : "org.saddle.Frame.prod", "link" : "org\/saddle\/Frame.html#prod(implicitnum:org.saddle.NUM[T]):org.saddle.Series[CX,T]", "kind" : "def"}, {"label" : "max", "tail" : "(num: NUM[T]): Series[CX, T]", "member" : "org.saddle.Frame.max", "link" : "org\/saddle\/Frame.html#max(implicitnum:org.saddle.NUM[T]):org.saddle.Series[CX,T]", "kind" : "def"}, {"label" : "mean", "tail" : "(num: NUM[T]): Series[CX, Double]", "member" : "org.saddle.Frame.mean", "link" : "org\/saddle\/Frame.html#mean(implicitnum:org.saddle.NUM[T]):org.saddle.Series[CX,Double]", "kind" : "def"}, {"label" : "median", "tail" : "(num: NUM[T]): Series[CX, Double]", "member" : "org.saddle.Frame.median", "link" : "org\/saddle\/Frame.html#median(implicitnum:org.saddle.NUM[T]):org.saddle.Series[CX,Double]", "kind" : "def"}, {"label" : "min", "tail" : "(num: NUM[T]): Series[CX, T]", "member" : "org.saddle.Frame.min", "link" : "org\/saddle\/Frame.html#min(implicitnum:org.saddle.NUM[T]):org.saddle.Series[CX,T]", "kind" : "def"}, {"label" : "count", "tail" : "(): Series[CX, Int]", "member" : "org.saddle.Frame.count", "link" : "org\/saddle\/Frame.html#count:org.saddle.Series[CX,Int]", "kind" : "def"}, {"label" : "sum", "tail" : "(num: NUM[T]): Series[CX, T]", "member" : "org.saddle.Frame.sum", "link" : "org\/saddle\/Frame.html#sum(implicitnum:org.saddle.NUM[T]):org.saddle.Series[CX,T]", "kind" : "def"}, {"label" : "equals", "tail" : "(other: Any): Boolean", "member" : "org.saddle.Frame.equals", "link" : "org\/saddle\/Frame.html#equals(other:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "org.saddle.Frame.hashCode", "link" : "org\/saddle\/Frame.html#hashCode():Int", "kind" : "def"}, {"label" : "print", "tail" : "(nrows: Int, ncols: Int, stream: OutputStream): Unit", "member" : "org.saddle.Frame.print", "link" : "org\/saddle\/Frame.html#print(nrows:Int,ncols:Int,stream:java.io.OutputStream):Unit", "kind" : "def"}, {"label" : "stringify", "tail" : "(nrows: Int, ncols: Int): String", "member" : "org.saddle.Frame.stringify", "link" : "org\/saddle\/Frame.html#stringify(nrows:Int,ncols:Int):String", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "org.saddle.Frame.toString", "link" : "org\/saddle\/Frame.html#toString():String", "kind" : "def"}, {"label" : "toSeq", "tail" : "(): IndexedSeq[(RX, CX, T)]", "member" : "org.saddle.Frame.toSeq", "link" : "org\/saddle\/Frame.html#toSeq:IndexedSeq[(RX,CX,T)]", "kind" : "def"}, {"label" : "toColSeq", "tail" : "(): IndexedSeq[(CX, Series[RX, T])]", "member" : "org.saddle.Frame.toColSeq", "link" : "org\/saddle\/Frame.html#toColSeq:IndexedSeq[(CX,org.saddle.Series[RX,T])]", "kind" : "def"}, {"label" : "rowIterator", "tail" : "(): Iterator[(RX, Series[CX, T])]", "member" : "org.saddle.Frame.rowIterator", "link" : "org\/saddle\/Frame.html#rowIterator:Iterator[(RX,org.saddle.Series[CX,T])]", "kind" : "def"}, {"label" : "toRowSeq", "tail" : "(): IndexedSeq[(RX, Series[CX, T])]", "member" : "org.saddle.Frame.toRowSeq", "link" : "org\/saddle\/Frame.html#toRowSeq:IndexedSeq[(RX,org.saddle.Series[CX,T])]", "kind" : "def"}, {"label" : "rsqueeze", "tail" : "(): Frame[RX, CX, T]", "member" : "org.saddle.Frame.rsqueeze", "link" : "org\/saddle\/Frame.html#rsqueeze:org.saddle.Frame[RX,CX,T]", "kind" : "def"}, {"label" : "rdropNA", "tail" : "(): Frame[RX, CX, T]", "member" : "org.saddle.Frame.rdropNA", "link" : "org\/saddle\/Frame.html#rdropNA:org.saddle.Frame[RX,CX,T]", "kind" : "def"}, {"label" : "addRow", "tail" : "(other: Series[CX, T], how: JoinType): Frame[Int, CX, T]", "member" : "org.saddle.Frame.addRow", "link" : "org\/saddle\/Frame.html#addRow(other:org.saddle.Series[CX,T],how:org.saddle.index.JoinType):org.saddle.Frame[Int,CX,T]", "kind" : "def"}, {"label" : "addRow", "tail" : "(other: Series[CX, T], newRowIx: RX, how: JoinType): Frame[RX, CX, T]", "member" : "org.saddle.Frame.addRow", "link" : "org\/saddle\/Frame.html#addRow(other:org.saddle.Series[CX,T],newRowIx:RX,how:org.saddle.index.JoinType):org.saddle.Frame[RX,CX,T]", "kind" : "def"}, {"label" : "rfilterAt", "tail" : "(pred: (Int) => Boolean): Frame[RX, CX, T]", "member" : "org.saddle.Frame.rfilterAt", "link" : "org\/saddle\/Frame.html#rfilterAt(pred:Int=>Boolean):org.saddle.Frame[RX,CX,T]", "kind" : "def"}, {"label" : "rfilterIx", "tail" : "(pred: (RX) => Boolean): Frame[RX, CX, T]", "member" : "org.saddle.Frame.rfilterIx", "link" : "org\/saddle\/Frame.html#rfilterIx(pred:RX=>Boolean):org.saddle.Frame[RX,CX,T]", "kind" : "def"}, {"label" : "rfilter", "tail" : "(pred: (Series[CX, T]) => Boolean): Frame[RX, CX, T]", "member" : "org.saddle.Frame.rfilter", "link" : "org\/saddle\/Frame.html#rfilter(pred:org.saddle.Series[CX,T]=>Boolean):org.saddle.Frame[RX,CX,T]", "kind" : "def"}, {"label" : "cshift", "tail" : "(n: Int): Frame[RX, CX, T]", "member" : "org.saddle.Frame.cshift", "link" : "org\/saddle\/Frame.html#cshift(n:Int):org.saddle.Frame[RX,CX,T]", "kind" : "def"}, {"label" : "rwhere", "tail" : "(pred: Vec[Boolean]): Frame[RX, CX, T]", "member" : "org.saddle.Frame.rwhere", "link" : "org\/saddle\/Frame.html#rwhere(pred:org.saddle.Vec[Boolean]):org.saddle.Frame[RX,CX,T]", "kind" : "def"}, {"label" : "rwhere", "tail" : "(pred: Series[_, Boolean]): Frame[RX, CX, T]", "member" : "org.saddle.Frame.rwhere", "link" : "org\/saddle\/Frame.html#rwhere(pred:org.saddle.Series[_,Boolean]):org.saddle.Frame[RX,CX,T]", "kind" : "def"}, {"label" : "rdistinct", "tail" : "(): Frame[RX, CX, T]", "member" : "org.saddle.Frame.rdistinct", "link" : "org\/saddle\/Frame.html#rdistinct:org.saddle.Frame[RX,CX,T]", "kind" : "def"}, {"label" : "distinct", "tail" : "(): Frame[RX, CX, T]", "member" : "org.saddle.Frame.distinct", "link" : "org\/saddle\/Frame.html#distinct:org.saddle.Frame[RX,CX,T]", "kind" : "def"}, {"label" : "rbind", "tail" : "(other: Frame[RX, CX, T], how: JoinType): Frame[RX, CX, T]", "member" : "org.saddle.Frame.rbind", "link" : "org\/saddle\/Frame.html#rbind(other:org.saddle.Frame[RX,CX,T],how:org.saddle.index.JoinType):org.saddle.Frame[RX,CX,T]", "kind" : "def"}, {"label" : "cbind", "tail" : "(other: Frame[RX, CX, T], how: JoinType): Frame[RX, CX, T]", "member" : "org.saddle.Frame.cbind", "link" : "org\/saddle\/Frame.html#cbind(other:org.saddle.Frame[RX,CX,T],how:org.saddle.index.JoinType):org.saddle.Frame[RX,CX,T]", "kind" : "def"}, {"label" : "rconcat", "tail" : "(other: Frame[RX, CX, T], how: JoinType): Frame[RX, CX, T]", "member" : "org.saddle.Frame.rconcat", "link" : "org\/saddle\/Frame.html#rconcat(other:org.saddle.Frame[RX,CX,T],how:org.saddle.index.JoinType):org.saddle.Frame[RX,CX,T]", "kind" : "def"}, {"label" : "rtransform", "tail" : "(f: (Series[CX, T]) => Series[SX, U])(arg0: ST[U], arg1: ST[SX], arg2: ORD[SX]): Frame[RX, SX, U]", "member" : "org.saddle.Frame.rtransform", "link" : "org\/saddle\/Frame.html#rtransform[U,SX](f:org.saddle.Series[CX,T]=>org.saddle.Series[SX,U])(implicitevidence$44:org.saddle.ST[U],implicitevidence$45:org.saddle.ST[SX],implicitevidence$46:org.saddle.ORD[SX]):org.saddle.Frame[RX,SX,U]", "kind" : "def"}, {"label" : "rreduce", "tail" : "(f: (Series[CX, T]) => U)(arg0: ST[U]): Series[RX, U]", "member" : "org.saddle.Frame.rreduce", "link" : "org\/saddle\/Frame.html#rreduce[U](f:org.saddle.Series[CX,T]=>U)(implicitevidence$43:org.saddle.ST[U]):org.saddle.Series[RX,U]", "kind" : "def"}, {"label" : "rmapVec", "tail" : "(f: (Vec[T]) => Vec[U])(arg0: ST[U]): Frame[RX, CX, U]", "member" : "org.saddle.Frame.rmapVec", "link" : "org\/saddle\/Frame.html#rmapVec[U](f:org.saddle.Vec[T]=>org.saddle.Vec[U])(implicitevidence$42:org.saddle.ST[U]):org.saddle.Frame[RX,CX,U]", "kind" : "def"}, {"label" : "rmask", "tail" : "(b: Vec[Boolean]): Frame[RX, CX, T]", "member" : "org.saddle.Frame.rmask", "link" : "org\/saddle\/Frame.html#rmask(b:org.saddle.Vec[Boolean]):org.saddle.Frame[RX,CX,T]", "kind" : "def"}, {"label" : "toMat", "tail" : "(): Mat[T]", "member" : "org.saddle.Frame.toMat", "link" : "org\/saddle\/Frame.html#toMat:org.saddle.Mat[T]", "kind" : "def"}, {"label" : "unstack", "tail" : "(splt: Splitter[RX, O1, O2], stkr: Stacker[CX, O2, V], ord1: ORD[O1], ord2: ORD[O2], m1: ST[O1], m2: ST[O2]): Frame[O1, V, T]", "member" : "org.saddle.Frame.unstack", "link" : "org\/saddle\/Frame.html#unstack[O1,O2,V](implicitsplt:org.saddle.index.Splitter[RX,O1,O2],implicitstkr:org.saddle.index.Stacker[CX,O2,V],implicitord1:org.saddle.ORD[O1],implicitord2:org.saddle.ORD[O2],implicitm1:org.saddle.ST[O1],implicitm2:org.saddle.ST[O2]):org.saddle.Frame[O1,V,T]", "kind" : "def"}, {"label" : "stack", "tail" : "(splt: Splitter[CX, O1, O2], stkr: Stacker[RX, O2, V], ord1: ORD[O1], ord2: ORD[O2], m1: ST[O1], m2: ST[O2]): Frame[V, O1, T]", "member" : "org.saddle.Frame.stack", "link" : "org\/saddle\/Frame.html#stack[O1,O2,V](implicitsplt:org.saddle.index.Splitter[CX,O1,O2],implicitstkr:org.saddle.index.Stacker[RX,O2,V],implicitord1:org.saddle.ORD[O1],implicitord2:org.saddle.ORD[O2],implicitm1:org.saddle.ST[O1],implicitm2:org.saddle.ST[O2]):org.saddle.Frame[V,O1,T]", "kind" : "def"}, {"label" : "melt", "tail" : "(melter: Melter[RX, CX, W]): Series[W, T]", "member" : "org.saddle.Frame.melt", "link" : "org\/saddle\/Frame.html#melt[W](implicitmelter:org.saddle.index.Melter[RX,CX,W]):org.saddle.Series[W,T]", "kind" : "def"}, {"label" : "squeeze", "tail" : "(): Frame[RX, CX, T]", "member" : "org.saddle.Frame.squeeze", "link" : "org\/saddle\/Frame.html#squeeze:org.saddle.Frame[RX,CX,T]", "kind" : "def"}, {"label" : "align", "tail" : "(other: Frame[RX, CX, U], rhow: JoinType, chow: JoinType)(arg0: ST[U]): (Frame[RX, CX, T], Frame[RX, CX, U])", "member" : "org.saddle.Frame.align", "link" : "org\/saddle\/Frame.html#align[U](other:org.saddle.Frame[RX,CX,U],rhow:org.saddle.index.JoinType,chow:org.saddle.index.JoinType)(implicitevidence$41:org.saddle.ST[U]):(org.saddle.Frame[RX,CX,T],org.saddle.Frame[RX,CX,U])", "kind" : "def"}, {"label" : "addCol", "tail" : "(other: Series[RX, T], how: JoinType): Frame[RX, Int, T]", "member" : "org.saddle.Frame.addCol", "link" : "org\/saddle\/Frame.html#addCol(other:org.saddle.Series[RX,T],how:org.saddle.index.JoinType):org.saddle.Frame[RX,Int,T]", "kind" : "def"}, {"label" : "addCol", "tail" : "(other: Series[RX, T], newColIx: CX, how: JoinType): Frame[RX, CX, T]", "member" : "org.saddle.Frame.addCol", "link" : "org\/saddle\/Frame.html#addCol(other:org.saddle.Series[RX,T],newColIx:CX,how:org.saddle.index.JoinType):org.saddle.Frame[RX,CX,T]", "kind" : "def"}, {"label" : "rollingFtoS", "tail" : "(windowSize: Int, f: (Frame[RX, CX, T]) => B)(arg0: ST[B]): Series[RX, B]", "member" : "org.saddle.Frame.rollingFtoS", "link" : "org\/saddle\/Frame.html#rollingFtoS[B](windowSize:Int,f:org.saddle.Frame[RX,CX,T]=>B)(implicitevidence$40:org.saddle.ST[B]):org.saddle.Series[RX,B]", "kind" : "def"}, {"label" : "rolling", "tail" : "(windowSize: Int, f: (Series[RX, T]) => B)(arg0: ST[B]): Frame[RX, CX, B]", "member" : "org.saddle.Frame.rolling", "link" : "org\/saddle\/Frame.html#rolling[B](windowSize:Int,f:org.saddle.Series[RX,T]=>B)(implicitevidence$39:org.saddle.ST[B]):org.saddle.Frame[RX,CX,B]", "kind" : "def"}, {"label" : "dropNA", "tail" : "(): Frame[RX, CX, T]", "member" : "org.saddle.Frame.dropNA", "link" : "org\/saddle\/Frame.html#dropNA:org.saddle.Frame[RX,CX,T]", "kind" : "def"}, {"label" : "filterAt", "tail" : "(pred: (Int) => Boolean): Frame[RX, CX, T]", "member" : "org.saddle.Frame.filterAt", "link" : "org\/saddle\/Frame.html#filterAt(pred:Int=>Boolean):org.saddle.Frame[RX,CX,T]", "kind" : "def"}, {"label" : "filterIx", "tail" : "(pred: (CX) => Boolean): Frame[RX, CX, T]", "member" : "org.saddle.Frame.filterIx", "link" : "org\/saddle\/Frame.html#filterIx(pred:CX=>Boolean):org.saddle.Frame[RX,CX,T]", "kind" : "def"}, {"label" : "filter", "tail" : "(pred: (Series[RX, T]) => Boolean): Frame[RX, CX, T]", "member" : "org.saddle.Frame.filter", "link" : "org\/saddle\/Frame.html#filter(pred:org.saddle.Series[RX,T]=>Boolean):org.saddle.Frame[RX,CX,T]", "kind" : "def"}, {"label" : "shift", "tail" : "(n: Int): Frame[RX, CX, T]", "member" : "org.saddle.Frame.shift", "link" : "org\/saddle\/Frame.html#shift(n:Int):org.saddle.Frame[RX,CX,T]", "kind" : "def"}, {"label" : "where", "tail" : "(pred: Vec[Boolean]): Frame[RX, CX, T]", "member" : "org.saddle.Frame.where", "link" : "org\/saddle\/Frame.html#where(pred:org.saddle.Vec[Boolean]):org.saddle.Frame[RX,CX,T]", "kind" : "def"}, {"label" : "where", "tail" : "(pred: Series[_, Boolean]): Frame[RX, CX, T]", "member" : "org.saddle.Frame.where", "link" : "org\/saddle\/Frame.html#where(pred:org.saddle.Series[_,Boolean]):org.saddle.Frame[RX,CX,T]", "kind" : "def"}, {"label" : "concat", "tail" : "(other: Frame[RX, CX, T], how: JoinType): Frame[RX, CX, T]", "member" : "org.saddle.Frame.concat", "link" : "org\/saddle\/Frame.html#concat(other:org.saddle.Frame[RX,CX,T],how:org.saddle.index.JoinType):org.saddle.Frame[RX,CX,T]", "kind" : "def"}, {"label" : "groupBy", "tail" : "(ix: Index[Y])(arg0: ST[Y], arg1: ORD[Y]): FrameGrouper[Y, RX, CX, T]", "member" : "org.saddle.Frame.groupBy", "link" : "org\/saddle\/Frame.html#groupBy[Y](ix:org.saddle.Index[Y])(implicitevidence$37:org.saddle.ST[Y],implicitevidence$38:org.saddle.ORD[Y]):org.saddle.groupby.FrameGrouper[Y,RX,CX,T]", "kind" : "def"}, {"label" : "groupBy", "tail" : "(fn: (RX) => Y)(arg0: ST[Y], arg1: ORD[Y]): FrameGrouper[Y, RX, CX, T]", "member" : "org.saddle.Frame.groupBy", "link" : "org\/saddle\/Frame.html#groupBy[Y](fn:RX=>Y)(implicitevidence$35:org.saddle.ST[Y],implicitevidence$36:org.saddle.ORD[Y]):org.saddle.groupby.FrameGrouper[Y,RX,CX,T]", "kind" : "def"}, {"label" : "groupBy", "tail" : "(): FrameGrouper[RX, RX, CX, T]", "member" : "org.saddle.Frame.groupBy", "link" : "org\/saddle\/Frame.html#groupBy:org.saddle.groupby.FrameGrouper[RX,RX,CX,T]", "kind" : "def"}, {"label" : "transform", "tail" : "(f: (Series[RX, T]) => Series[SX, U])(arg0: ST[U], arg1: ST[SX], arg2: ORD[SX]): Frame[SX, CX, U]", "member" : "org.saddle.Frame.transform", "link" : "org\/saddle\/Frame.html#transform[U,SX](f:org.saddle.Series[RX,T]=>org.saddle.Series[SX,U])(implicitevidence$32:org.saddle.ST[U],implicitevidence$33:org.saddle.ST[SX],implicitevidence$34:org.saddle.ORD[SX]):org.saddle.Frame[SX,CX,U]", "kind" : "def"}, {"label" : "reduce", "tail" : "(f: (Series[RX, T]) => U)(arg0: ST[U]): Series[CX, U]", "member" : "org.saddle.Frame.reduce", "link" : "org\/saddle\/Frame.html#reduce[U](f:org.saddle.Series[RX,T]=>U)(implicitevidence$31:org.saddle.ST[U]):org.saddle.Series[CX,U]", "kind" : "def"}, {"label" : "mapVec", "tail" : "(f: (Vec[T]) => Vec[U])(arg0: ST[U]): Frame[RX, CX, U]", "member" : "org.saddle.Frame.mapVec", "link" : "org\/saddle\/Frame.html#mapVec[U](f:org.saddle.Vec[T]=>org.saddle.Vec[U])(implicitevidence$30:org.saddle.ST[U]):org.saddle.Frame[RX,CX,U]", "kind" : "def"}, {"label" : "joinMap", "tail" : "(other: Frame[RX, CX, U], rhow: JoinType, chow: JoinType)(f: (T, U) => V)(arg0: ST[U], arg1: ST[V]): Frame[RX, CX, V]", "member" : "org.saddle.Frame.joinMap", "link" : "org\/saddle\/Frame.html#joinMap[U,V](other:org.saddle.Frame[RX,CX,U],rhow:org.saddle.index.JoinType,chow:org.saddle.index.JoinType)(f:(T,U)=>V)(implicitevidence$28:org.saddle.ST[U],implicitevidence$29:org.saddle.ST[V]):org.saddle.Frame[RX,CX,V]", "kind" : "def"}, {"label" : "fillNA", "tail" : "(fillMethod: FillMethod, limit: Int): Frame[RX, CX, T]", "member" : "org.saddle.Frame.fillNA", "link" : "org\/saddle\/Frame.html#fillNA(fillMethod:org.saddle.FillMethod,limit:Int):org.saddle.Frame[RX,CX,T]", "kind" : "def"}, {"label" : "fillNA", "tail" : "(v: T): Frame[RX, CX, T]", "member" : "org.saddle.Frame.fillNA", "link" : "org\/saddle\/Frame.html#fillNA(v:T):org.saddle.Frame[RX,CX,T]", "kind" : "def"}, {"label" : "mask", "tail" : "(m: Vec[Boolean]): Frame[RX, CX, T]", "member" : "org.saddle.Frame.mask", "link" : "org\/saddle\/Frame.html#mask(m:org.saddle.Vec[Boolean]):org.saddle.Frame[RX,CX,T]", "kind" : "def"}, {"label" : "mask", "tail" : "(f: (T) => Boolean): Frame[RX, CX, T]", "member" : "org.saddle.Frame.mask", "link" : "org\/saddle\/Frame.html#mask(f:T=>Boolean):org.saddle.Frame[RX,CX,T]", "kind" : "def"}, {"label" : "mapValues", "tail" : "(f: (T) => U)(arg0: ST[U]): Frame[RX, CX, U]", "member" : "org.saddle.Frame.mapValues", "link" : "org\/saddle\/Frame.html#mapValues[U](f:T=>U)(implicitevidence$27:org.saddle.ST[U]):org.saddle.Frame[RX,CX,U]", "kind" : "def"}, {"label" : "flatMap", "tail" : "(f: ((RX, CX, T)) => Iterable[(SX, DX, U)])(arg0: ST[SX], arg1: ORD[SX], arg2: ST[DX], arg3: ORD[DX], arg4: ST[U]): Frame[SX, DX, U]", "member" : "org.saddle.Frame.flatMap", "link" : "org\/saddle\/Frame.html#flatMap[SX,DX,U](f:((RX,CX,T))=>Iterable[(SX,DX,U)])(implicitevidence$22:org.saddle.ST[SX],implicitevidence$23:org.saddle.ORD[SX],implicitevidence$24:org.saddle.ST[DX],implicitevidence$25:org.saddle.ORD[DX],implicitevidence$26:org.saddle.ST[U]):org.saddle.Frame[SX,DX,U]", "kind" : "def"}, {"label" : "map", "tail" : "(f: ((RX, CX, T)) => (SX, DX, U))(arg0: ST[SX], arg1: ORD[SX], arg2: ST[DX], arg3: ORD[DX], arg4: ST[U]): Frame[SX, DX, U]", "member" : "org.saddle.Frame.map", "link" : "org\/saddle\/Frame.html#map[SX,DX,U](f:((RX,CX,T))=>(SX,DX,U))(implicitevidence$17:org.saddle.ST[SX],implicitevidence$18:org.saddle.ORD[SX],implicitevidence$19:org.saddle.ST[DX],implicitevidence$20:org.saddle.ORD[DX],implicitevidence$21:org.saddle.ST[U]):org.saddle.Frame[SX,DX,U]", "kind" : "def"}, {"label" : "sortedColsBy", "tail" : "(f: (Series[RX, T]) => Q)(arg0: ORD[Q]): Frame[RX, CX, T]", "member" : "org.saddle.Frame.sortedColsBy", "link" : "org\/saddle\/Frame.html#sortedColsBy[Q](f:org.saddle.Series[RX,T]=>Q)(implicitevidence$16:org.saddle.ORD[Q]):org.saddle.Frame[RX,CX,T]", "kind" : "def"}, {"label" : "sortedRowsBy", "tail" : "(f: (Series[CX, T]) => Q)(arg0: ORD[Q]): Frame[RX, CX, T]", "member" : "org.saddle.Frame.sortedRowsBy", "link" : "org\/saddle\/Frame.html#sortedRowsBy[Q](f:org.saddle.Series[CX,T]=>Q)(implicitevidence$15:org.saddle.ORD[Q]):org.saddle.Frame[RX,CX,T]", "kind" : "def"}, {"label" : "sortedCols", "tail" : "(locs: Int*)(ev: ORD[T]): Frame[RX, CX, T]", "member" : "org.saddle.Frame.sortedCols", "link" : "org\/saddle\/Frame.html#sortedCols(locs:Int*)(implicitev:org.saddle.ORD[T]):org.saddle.Frame[RX,CX,T]", "kind" : "def"}, {"label" : "sortedRows", "tail" : "(locs: Int*)(ev: ORD[T]): Frame[RX, CX, T]", "member" : "org.saddle.Frame.sortedRows", "link" : "org\/saddle\/Frame.html#sortedRows(locs:Int*)(implicitev:org.saddle.ORD[T]):org.saddle.Frame[RX,CX,T]", "kind" : "def"}, {"label" : "sortedCIxReverse", "tail" : "(): Frame[RX, CX, T]", "member" : "org.saddle.Frame.sortedCIxReverse", "link" : "org\/saddle\/Frame.html#sortedCIxReverse:org.saddle.Frame[RX,CX,T]", "kind" : "def"}, {"label" : "sortedCIx", "tail" : "(): Frame[RX, CX, T]", "member" : "org.saddle.Frame.sortedCIx", "link" : "org\/saddle\/Frame.html#sortedCIx:org.saddle.Frame[RX,CX,T]", "kind" : "def"}, {"label" : "sortedRIxReverse", "tail" : "(): Frame[RX, CX, T]", "member" : "org.saddle.Frame.sortedRIxReverse", "link" : "org\/saddle\/Frame.html#sortedRIxReverse:org.saddle.Frame[RX,CX,T]", "kind" : "def"}, {"label" : "sortedRIx", "tail" : "(): Frame[RX, CX, T]", "member" : "org.saddle.Frame.sortedRIx", "link" : "org\/saddle\/Frame.html#sortedRIx:org.saddle.Frame[RX,CX,T]", "kind" : "def"}, {"label" : "emptyCol", "tail" : "(): Series[RX, T]", "member" : "org.saddle.Frame.emptyCol", "link" : "org\/saddle\/Frame.html#emptyCol:org.saddle.Series[RX,T]", "kind" : "def"}, {"label" : "emptyRow", "tail" : "(): Series[CX, T]", "member" : "org.saddle.Frame.emptyRow", "link" : "org\/saddle\/Frame.html#emptyRow:org.saddle.Series[CX,T]", "kind" : "def"}, {"label" : "get", "tail" : "(r: RX, c: CX): Scalar[T]", "member" : "org.saddle.Frame.get", "link" : "org\/saddle\/Frame.html#get(r:RX,c:CX):org.saddle.scalar.Scalar[T]", "kind" : "def"}, {"label" : "lastCol", "tail" : "(k: CX): Series[RX, T]", "member" : "org.saddle.Frame.lastCol", "link" : "org\/saddle\/Frame.html#lastCol(k:CX):org.saddle.Series[RX,T]", "kind" : "def"}, {"label" : "firstCol", "tail" : "(k: CX): Series[RX, T]", "member" : "org.saddle.Frame.firstCol", "link" : "org\/saddle\/Frame.html#firstCol(k:CX):org.saddle.Series[RX,T]", "kind" : "def"}, {"label" : "last", "tail" : "(k: RX): Series[CX, T]", "member" : "org.saddle.Frame.last", "link" : "org\/saddle\/Frame.html#last(k:RX):org.saddle.Series[CX,T]", "kind" : "def"}, {"label" : "first", "tail" : "(k: RX): Series[CX, T]", "member" : "org.saddle.Frame.first", "link" : "org\/saddle\/Frame.html#first(k:RX):org.saddle.Series[CX,T]", "kind" : "def"}, {"label" : "tailCol", "tail" : "(n: Int): Frame[RX, CX, T]", "member" : "org.saddle.Frame.tailCol", "link" : "org\/saddle\/Frame.html#tailCol(n:Int):org.saddle.Frame[RX,CX,T]", "kind" : "def"}, {"label" : "headCol", "tail" : "(n: Int): Frame[RX, CX, T]", "member" : "org.saddle.Frame.headCol", "link" : "org\/saddle\/Frame.html#headCol(n:Int):org.saddle.Frame[RX,CX,T]", "kind" : "def"}, {"label" : "tail", "tail" : "(n: Int): Frame[RX, CX, T]", "member" : "org.saddle.Frame.tail", "link" : "org\/saddle\/Frame.html#tail(n:Int):org.saddle.Frame[RX,CX,T]", "kind" : "def"}, {"label" : "head", "tail" : "(n: Int): Frame[RX, CX, T]", "member" : "org.saddle.Frame.head", "link" : "org\/saddle\/Frame.html#head(n:Int):org.saddle.Frame[RX,CX,T]", "kind" : "def"}, {"label" : "resetColIndex", "tail" : "(): Frame[RX, Int, T]", "member" : "org.saddle.Frame.resetColIndex", "link" : "org\/saddle\/Frame.html#resetColIndex:org.saddle.Frame[RX,Int,T]", "kind" : "def"}, {"label" : "resetRowIndex", "tail" : "(): Frame[Int, CX, T]", "member" : "org.saddle.Frame.resetRowIndex", "link" : "org\/saddle\/Frame.html#resetRowIndex:org.saddle.Frame[Int,CX,T]", "kind" : "def"}, {"label" : "mapColIndex", "tail" : "(fn: (CX) => Y)(arg0: ST[Y], arg1: ORD[Y]): Frame[RX, Y, T]", "member" : "org.saddle.Frame.mapColIndex", "link" : "org\/saddle\/Frame.html#mapColIndex[Y](fn:CX=>Y)(implicitevidence$13:org.saddle.ST[Y],implicitevidence$14:org.saddle.ORD[Y]):org.saddle.Frame[RX,Y,T]", "kind" : "def"}, {"label" : "withColIndex", "tail" : "(row1: Int, row2: Int)(ordT: ORD[T]): Frame[RX, (T, T), T]", "member" : "org.saddle.Frame.withColIndex", "link" : "org\/saddle\/Frame.html#withColIndex(row1:Int,row2:Int)(implicitordT:org.saddle.ORD[T]):org.saddle.Frame[RX,(T,T),T]", "kind" : "def"}, {"label" : "withColIndex", "tail" : "(row: Int)(ordT: ORD[T]): Frame[RX, T, T]", "member" : "org.saddle.Frame.withColIndex", "link" : "org\/saddle\/Frame.html#withColIndex(row:Int)(implicitordT:org.saddle.ORD[T]):org.saddle.Frame[RX,T,T]", "kind" : "def"}, {"label" : "setColIndex", "tail" : "(newIx: Index[Y])(arg0: ST[Y], arg1: ORD[Y]): Frame[RX, Y, T]", "member" : "org.saddle.Frame.setColIndex", "link" : "org\/saddle\/Frame.html#setColIndex[Y](newIx:org.saddle.Index[Y])(implicitevidence$11:org.saddle.ST[Y],implicitevidence$12:org.saddle.ORD[Y]):org.saddle.Frame[RX,Y,T]", "kind" : "def"}, {"label" : "mapCols", "tail" : "(fn: (CX, Vec[T]) => Vec[Y])(arg0: ST[Y]): Frame[RX, CX, Y]", "member" : "org.saddle.Frame.mapCols", "link" : "org\/saddle\/Frame.html#mapCols[Y](fn:(CX,org.saddle.Vec[T])=>org.saddle.Vec[Y])(implicitevidence$10:org.saddle.ST[Y]):org.saddle.Frame[RX,CX,Y]", "kind" : "def"}, {"label" : "mapRows", "tail" : "(fn: (RX, Vec[T]) => Vec[Y])(arg0: ST[Y]): Frame[RX, CX, Y]", "member" : "org.saddle.Frame.mapRows", "link" : "org\/saddle\/Frame.html#mapRows[Y](fn:(RX,org.saddle.Vec[T])=>org.saddle.Vec[Y])(implicitevidence$9:org.saddle.ST[Y]):org.saddle.Frame[RX,CX,Y]", "kind" : "def"}, {"label" : "mapRowIndex", "tail" : "(fn: (RX) => Y)(arg0: ST[Y], arg1: ORD[Y]): Frame[Y, CX, T]", "member" : "org.saddle.Frame.mapRowIndex", "link" : "org\/saddle\/Frame.html#mapRowIndex[Y](fn:RX=>Y)(implicitevidence$7:org.saddle.ST[Y],implicitevidence$8:org.saddle.ORD[Y]):org.saddle.Frame[Y,CX,T]", "kind" : "def"}, {"label" : "withRowIndex", "tail" : "(col1: Int, col2: Int)(ordT: ORD[T]): Frame[(T, T), CX, T]", "member" : "org.saddle.Frame.withRowIndex", "link" : "org\/saddle\/Frame.html#withRowIndex(col1:Int,col2:Int)(implicitordT:org.saddle.ORD[T]):org.saddle.Frame[(T,T),CX,T]", "kind" : "def"}, {"label" : "withRowIndex", "tail" : "(col: Int)(ordT: ORD[T]): Frame[T, CX, T]", "member" : "org.saddle.Frame.withRowIndex", "link" : "org\/saddle\/Frame.html#withRowIndex(col:Int)(implicitordT:org.saddle.ORD[T]):org.saddle.Frame[T,CX,T]", "kind" : "def"}, {"label" : "setRowIndex", "tail" : "(newIx: Index[Y])(arg0: ST[Y], arg1: ORD[Y]): Frame[Y, CX, T]", "member" : "org.saddle.Frame.setRowIndex", "link" : "org\/saddle\/Frame.html#setRowIndex[Y](newIx:org.saddle.Index[Y])(implicitevidence$5:org.saddle.ST[Y],implicitevidence$6:org.saddle.ORD[Y]):org.saddle.Frame[Y,CX,T]", "kind" : "def"}, {"label" : "reindexCol", "tail" : "(cix: Index[CX]): Frame[RX, CX, T]", "member" : "org.saddle.Frame.reindexCol", "link" : "org\/saddle\/Frame.html#reindexCol(cix:org.saddle.Index[CX]):org.saddle.Frame[RX,CX,T]", "kind" : "def"}, {"label" : "reindexRow", "tail" : "(rix: Index[RX]): Frame[RX, CX, T]", "member" : "org.saddle.Frame.reindexRow", "link" : "org\/saddle\/Frame.html#reindexRow(rix:org.saddle.Index[RX]):org.saddle.Frame[RX,CX,T]", "kind" : "def"}, {"label" : "reindex", "tail" : "(rix: Index[RX], cix: Index[CX]): Frame[RX, CX, T]", "member" : "org.saddle.Frame.reindex", "link" : "org\/saddle\/Frame.html#reindex(rix:org.saddle.Index[RX],cix:org.saddle.Index[CX]):org.saddle.Frame[RX,CX,T]", "kind" : "def"}, {"label" : "raw", "tail" : "(r: Int, c: Int): T", "member" : "org.saddle.Frame.raw", "link" : "org\/saddle\/Frame.html#raw(r:Int,c:Int):T", "kind" : "def"}, {"label" : "at", "tail" : "(r: Slice[Int], c: Slice[Int]): Frame[RX, CX, T]", "member" : "org.saddle.Frame.at", "link" : "org\/saddle\/Frame.html#at(r:org.saddle.index.Slice[Int],c:org.saddle.index.Slice[Int]):org.saddle.Frame[RX,CX,T]", "kind" : "def"}, {"label" : "at", "tail" : "(r: Int, c: Array[Int]): Series[CX, T]", "member" : "org.saddle.Frame.at", "link" : "org\/saddle\/Frame.html#at(r:Int,c:Array[Int]):org.saddle.Series[CX,T]", "kind" : "def"}, {"label" : "at", "tail" : "(r: Array[Int], c: Int): Series[RX, T]", "member" : "org.saddle.Frame.at", "link" : "org\/saddle\/Frame.html#at(r:Array[Int],c:Int):org.saddle.Series[RX,T]", "kind" : "def"}, {"label" : "at", "tail" : "(r: Array[Int], c: Array[Int]): Frame[RX, CX, T]", "member" : "org.saddle.Frame.at", "link" : "org\/saddle\/Frame.html#at(r:Array[Int],c:Array[Int]):org.saddle.Frame[RX,CX,T]", "kind" : "def"}, {"label" : "at", "tail" : "(r: Int, c: Int): Scalar[T]", "member" : "org.saddle.Frame.at", "link" : "org\/saddle\/Frame.html#at(r:Int,c:Int):org.saddle.scalar.Scalar[T]", "kind" : "def"}, {"label" : "apply", "tail" : "(rix: Array[RX], cix: Array[CX]): Frame[RX, CX, T]", "member" : "org.saddle.Frame.apply", "link" : "org\/saddle\/Frame.html#apply(rix:Array[RX],cix:Array[CX]):org.saddle.Frame[RX,CX,T]", "kind" : "def"}, {"label" : "apply", "tail" : "(rix: Array[RX], cix: Slice[CX]): Frame[RX, CX, T]", "member" : "org.saddle.Frame.apply", "link" : "org\/saddle\/Frame.html#apply(rix:Array[RX],cix:org.saddle.index.Slice[CX]):org.saddle.Frame[RX,CX,T]", "kind" : "def"}, {"label" : "apply", "tail" : "(rix: Slice[RX], cix: Array[CX]): Frame[RX, CX, T]", "member" : "org.saddle.Frame.apply", "link" : "org\/saddle\/Frame.html#apply(rix:org.saddle.index.Slice[RX],cix:Array[CX]):org.saddle.Frame[RX,CX,T]", "kind" : "def"}, {"label" : "apply", "tail" : "(rix: Slice[RX], cix: Slice[CX]): Frame[RX, CX, T]", "member" : "org.saddle.Frame.apply", "link" : "org\/saddle\/Frame.html#apply(rix:org.saddle.index.Slice[RX],cix:org.saddle.index.Slice[CX]):org.saddle.Frame[RX,CX,T]", "kind" : "def"}, {"label" : "rowSplitBy", "tail" : "(k: RX): (Frame[RX, CX, T], Frame[RX, CX, T])", "member" : "org.saddle.Frame.rowSplitBy", "link" : "org\/saddle\/Frame.html#rowSplitBy(k:RX):(org.saddle.Frame[RX,CX,T],org.saddle.Frame[RX,CX,T])", "kind" : "def"}, {"label" : "rowSplitAt", "tail" : "(r: Int): (Frame[RX, CX, T], Frame[RX, CX, T])", "member" : "org.saddle.Frame.rowSplitAt", "link" : "org\/saddle\/Frame.html#rowSplitAt(r:Int):(org.saddle.Frame[RX,CX,T],org.saddle.Frame[RX,CX,T])", "kind" : "def"}, {"label" : "rowSlice", "tail" : "(from: Int, until: Int, stride: Int): Frame[RX, CX, T]", "member" : "org.saddle.Frame.rowSlice", "link" : "org\/saddle\/Frame.html#rowSlice(from:Int,until:Int,stride:Int):org.saddle.Frame[RX,CX,T]", "kind" : "def"}, {"label" : "rowAt", "tail" : "(slice: Slice[Int]): Frame[RX, CX, T]", "member" : "org.saddle.Frame.rowAt", "link" : "org\/saddle\/Frame.html#rowAt(slice:org.saddle.index.Slice[Int]):org.saddle.Frame[RX,CX,T]", "kind" : "def"}, {"label" : "rowAt", "tail" : "(locs: Array[Int]): Frame[RX, CX, T]", "member" : "org.saddle.Frame.rowAt", "link" : "org\/saddle\/Frame.html#rowAt(locs:Array[Int]):org.saddle.Frame[RX,CX,T]", "kind" : "def"}, {"label" : "rowAt", "tail" : "(locs: Int*): Frame[RX, CX, T]", "member" : "org.saddle.Frame.rowAt", "link" : "org\/saddle\/Frame.html#rowAt(locs:Int*):org.saddle.Frame[RX,CX,T]", "kind" : "def"}, {"label" : "rowAt", "tail" : "(loc: Int): Series[CX, T]", "member" : "org.saddle.Frame.rowAt", "link" : "org\/saddle\/Frame.html#rowAt(loc:Int):org.saddle.Series[CX,T]", "kind" : "def"}, {"label" : "rowSliceBy", "tail" : "(from: RX, to: RX, inclusive: Boolean): Frame[RX, CX, T]", "member" : "org.saddle.Frame.rowSliceBy", "link" : "org\/saddle\/Frame.html#rowSliceBy(from:RX,to:RX,inclusive:Boolean):org.saddle.Frame[RX,CX,T]", "kind" : "def"}, {"label" : "row", "tail" : "(keys: Array[RX]): Frame[RX, CX, T]", "member" : "org.saddle.Frame.row", "link" : "org\/saddle\/Frame.html#row(keys:Array[RX]):org.saddle.Frame[RX,CX,T]", "kind" : "def"}, {"label" : "row", "tail" : "(slice: Slice[RX]): Frame[RX, CX, T]", "member" : "org.saddle.Frame.row", "link" : "org\/saddle\/Frame.html#row(slice:org.saddle.index.Slice[RX]):org.saddle.Frame[RX,CX,T]", "kind" : "def"}, {"label" : "row", "tail" : "(keys: RX*): Frame[RX, CX, T]", "member" : "org.saddle.Frame.row", "link" : "org\/saddle\/Frame.html#row(keys:RX*):org.saddle.Frame[RX,CX,T]", "kind" : "def"}, {"label" : "colSplitBy", "tail" : "(k: CX): (Frame[RX, CX, T], Frame[RX, CX, T])", "member" : "org.saddle.Frame.colSplitBy", "link" : "org\/saddle\/Frame.html#colSplitBy(k:CX):(org.saddle.Frame[RX,CX,T],org.saddle.Frame[RX,CX,T])", "kind" : "def"}, {"label" : "colSplitAt", "tail" : "(c: Int): (Frame[RX, CX, T], Frame[RX, CX, T])", "member" : "org.saddle.Frame.colSplitAt", "link" : "org\/saddle\/Frame.html#colSplitAt(c:Int):(org.saddle.Frame[RX,CX,T],org.saddle.Frame[RX,CX,T])", "kind" : "def"}, {"label" : "colSlice", "tail" : "(from: Int, until: Int, stride: Int): Frame[RX, CX, T]", "member" : "org.saddle.Frame.colSlice", "link" : "org\/saddle\/Frame.html#colSlice(from:Int,until:Int,stride:Int):org.saddle.Frame[RX,CX,T]", "kind" : "def"}, {"label" : "colAt", "tail" : "(slice: Slice[Int]): Frame[RX, CX, T]", "member" : "org.saddle.Frame.colAt", "link" : "org\/saddle\/Frame.html#colAt(slice:org.saddle.index.Slice[Int]):org.saddle.Frame[RX,CX,T]", "kind" : "def"}, {"label" : "colAt", "tail" : "(locs: Array[Int]): Frame[RX, CX, T]", "member" : "org.saddle.Frame.colAt", "link" : "org\/saddle\/Frame.html#colAt(locs:Array[Int]):org.saddle.Frame[RX,CX,T]", "kind" : "def"}, {"label" : "colAt", "tail" : "(locs: Int*): Frame[RX, CX, T]", "member" : "org.saddle.Frame.colAt", "link" : "org\/saddle\/Frame.html#colAt(locs:Int*):org.saddle.Frame[RX,CX,T]", "kind" : "def"}, {"label" : "colAt", "tail" : "(loc: Int): Series[RX, T]", "member" : "org.saddle.Frame.colAt", "link" : "org\/saddle\/Frame.html#colAt(loc:Int):org.saddle.Series[RX,T]", "kind" : "def"}, {"label" : "colSliceBy", "tail" : "(from: CX, to: CX, inclusive: Boolean): Frame[RX, CX, T]", "member" : "org.saddle.Frame.colSliceBy", "link" : "org\/saddle\/Frame.html#colSliceBy(from:CX,to:CX,inclusive:Boolean):org.saddle.Frame[RX,CX,T]", "kind" : "def"}, {"label" : "col", "tail" : "(keys: Array[CX]): Frame[RX, CX, T]", "member" : "org.saddle.Frame.col", "link" : "org\/saddle\/Frame.html#col(keys:Array[CX]):org.saddle.Frame[RX,CX,T]", "kind" : "def"}, {"label" : "col", "tail" : "(slice: Slice[CX]): Frame[RX, CX, T]", "member" : "org.saddle.Frame.col", "link" : "org\/saddle\/Frame.html#col(slice:org.saddle.index.Slice[CX]):org.saddle.Frame[RX,CX,T]", "kind" : "def"}, {"label" : "col", "tail" : "(keys: CX*): Frame[RX, CX, T]", "member" : "org.saddle.Frame.col", "link" : "org\/saddle\/Frame.html#col(keys:CX*):org.saddle.Frame[RX,CX,T]", "kind" : "def"}, {"label" : "T", "tail" : "(): Frame[CX, RX, T]", "member" : "org.saddle.Frame.T", "link" : "org\/saddle\/Frame.html#T:org.saddle.Frame[CX,RX,T]", "kind" : "def"}, {"label" : "isEmpty", "tail" : "(): Boolean", "member" : "org.saddle.Frame.isEmpty", "link" : "org\/saddle\/Frame.html#isEmpty:Boolean", "kind" : "def"}, {"label" : "numCols", "tail" : "(): Int", "member" : "org.saddle.Frame.numCols", "link" : "org\/saddle\/Frame.html#numCols:Int", "kind" : "def"}, {"label" : "numRows", "tail" : "(): Int", "member" : "org.saddle.Frame.numRows", "link" : "org\/saddle\/Frame.html#numRows:Int", "kind" : "def"}, {"member" : "org.saddle.Frame#<init>", "error" : "unsupported entity"}, {"label" : "colIx", "tail" : ": Index[CX]", "member" : "org.saddle.Frame.colIx", "link" : "org\/saddle\/Frame.html#colIx:org.saddle.Index[CX]", "kind" : "val"}, {"label" : "rowIx", "tail" : ": Index[RX]", "member" : "org.saddle.Frame.rowIx", "link" : "org\/saddle\/Frame.html#rowIx:org.saddle.Index[RX]", "kind" : "val"}, {"label" : "**=", "tail" : "(other: B)(op: BinOpInPlace[Power, Frame[RX, CX, T], B]): Unit", "member" : "org.saddle.ops.NumericOps.**=", "link" : "org\/saddle\/Frame.html#**=[B](other:B)(implicitop:org.saddle.ops.BinOpInPlace[org.saddle.ops.Power,This,B]):Unit", "kind" : "def"}, {"label" : "%=", "tail" : "(other: B)(op: BinOpInPlace[Mod, Frame[RX, CX, T], B]): Unit", "member" : "org.saddle.ops.NumericOps.%=", "link" : "org\/saddle\/Frame.html#%=[B](other:B)(implicitop:org.saddle.ops.BinOpInPlace[org.saddle.ops.Mod,This,B]):Unit", "kind" : "def"}, {"label" : "\/=", "tail" : "(other: B)(op: BinOpInPlace[Divide, Frame[RX, CX, T], B]): Unit", "member" : "org.saddle.ops.NumericOps.\/=", "link" : "org\/saddle\/Frame.html#\/=[B](other:B)(implicitop:org.saddle.ops.BinOpInPlace[org.saddle.ops.Divide,This,B]):Unit", "kind" : "def"}, {"label" : "*=", "tail" : "(other: B)(op: BinOpInPlace[Multiply, Frame[RX, CX, T], B]): Unit", "member" : "org.saddle.ops.NumericOps.*=", "link" : "org\/saddle\/Frame.html#*=[B](other:B)(implicitop:org.saddle.ops.BinOpInPlace[org.saddle.ops.Multiply,This,B]):Unit", "kind" : "def"}, {"label" : "-=", "tail" : "(other: B)(op: BinOpInPlace[Subtract, Frame[RX, CX, T], B]): Unit", "member" : "org.saddle.ops.NumericOps.-=", "link" : "org\/saddle\/Frame.html#-=[B](other:B)(implicitop:org.saddle.ops.BinOpInPlace[org.saddle.ops.Subtract,This,B]):Unit", "kind" : "def"}, {"label" : "+=", "tail" : "(other: B)(op: BinOpInPlace[Add, Frame[RX, CX, T], B]): Unit", "member" : "org.saddle.ops.NumericOps.+=", "link" : "org\/saddle\/Frame.html#+=[B](other:B)(implicitop:org.saddle.ops.BinOpInPlace[org.saddle.ops.Add,This,B]):Unit", "kind" : "def"}, {"label" : "outer", "tail" : "(other: B)(op: BinOp[OuterProd, Frame[RX, CX, T], B, That]): That", "member" : "org.saddle.ops.NumericOps.outer", "link" : "org\/saddle\/Frame.html#outer[B,That](other:B)(implicitop:org.saddle.ops.BinOp[org.saddle.ops.OuterProd,This,B,That]):That", "kind" : "def"}, {"label" : "dot", "tail" : "(other: B)(op: BinOp[InnerProd, Frame[RX, CX, T], B, That]): That", "member" : "org.saddle.ops.NumericOps.dot", "link" : "org\/saddle\/Frame.html#dot[B,That](other:B)(implicitop:org.saddle.ops.BinOp[org.saddle.ops.InnerProd,This,B,That]):That", "kind" : "def"}, {"label" : "xor", "tail" : "(other: B)(op: BinOp[XorOp, Frame[RX, CX, T], B, That]): That", "member" : "org.saddle.ops.NumericOps.xor", "link" : "org\/saddle\/Frame.html#xor[B,That](other:B)(implicitop:org.saddle.ops.BinOp[org.saddle.ops.XorOp,This,B,That]):That", "kind" : "def"}, {"label" : "&&", "tail" : "(other: B)(op: BinOp[AndOp, Frame[RX, CX, T], B, That]): That", "member" : "org.saddle.ops.NumericOps.&&", "link" : "org\/saddle\/Frame.html#&&[B,That](other:B)(implicitop:org.saddle.ops.BinOp[org.saddle.ops.AndOp,This,B,That]):That", "kind" : "def"}, {"label" : "||", "tail" : "(other: B)(op: BinOp[OrOp, Frame[RX, CX, T], B, That]): That", "member" : "org.saddle.ops.NumericOps.||", "link" : "org\/saddle\/Frame.html#||[B,That](other:B)(implicitop:org.saddle.ops.BinOp[org.saddle.ops.OrOp,This,B,That]):That", "kind" : "def"}, {"label" : "<>", "tail" : "(other: B)(op: BinOp[NeqOp, Frame[RX, CX, T], B, That]): That", "member" : "org.saddle.ops.NumericOps.<>", "link" : "org\/saddle\/Frame.html#<>[B,That](other:B)(implicitop:org.saddle.ops.BinOp[org.saddle.ops.NeqOp,This,B,That]):That", "kind" : "def"}, {"label" : "=?", "tail" : "(other: B)(op: BinOp[EqOp, Frame[RX, CX, T], B, That]): That", "member" : "org.saddle.ops.NumericOps.=?", "link" : "org\/saddle\/Frame.html#=?[B,That](other:B)(implicitop:org.saddle.ops.BinOp[org.saddle.ops.EqOp,This,B,That]):That", "kind" : "def"}, {"label" : ">=", "tail" : "(other: B)(op: BinOp[GteOp, Frame[RX, CX, T], B, That]): That", "member" : "org.saddle.ops.NumericOps.>=", "link" : "org\/saddle\/Frame.html#>=[B,That](other:B)(implicitop:org.saddle.ops.BinOp[org.saddle.ops.GteOp,This,B,That]):That", "kind" : "def"}, {"label" : ">", "tail" : "(other: B)(op: BinOp[GtOp, Frame[RX, CX, T], B, That]): That", "member" : "org.saddle.ops.NumericOps.>", "link" : "org\/saddle\/Frame.html#>[B,That](other:B)(implicitop:org.saddle.ops.BinOp[org.saddle.ops.GtOp,This,B,That]):That", "kind" : "def"}, {"label" : "<=", "tail" : "(other: B)(op: BinOp[LteOp, Frame[RX, CX, T], B, That]): That", "member" : "org.saddle.ops.NumericOps.<=", "link" : "org\/saddle\/Frame.html#<=[B,That](other:B)(implicitop:org.saddle.ops.BinOp[org.saddle.ops.LteOp,This,B,That]):That", "kind" : "def"}, {"label" : "<", "tail" : "(other: B)(op: BinOp[LtOp, Frame[RX, CX, T], B, That]): That", "member" : "org.saddle.ops.NumericOps.<", "link" : "org\/saddle\/Frame.html#<[B,That](other:B)(implicitop:org.saddle.ops.BinOp[org.saddle.ops.LtOp,This,B,That]):That", "kind" : "def"}, {"label" : ">>>", "tail" : "(other: B)(op: BinOp[BitUShr, Frame[RX, CX, T], B, That]): That", "member" : "org.saddle.ops.NumericOps.>>>", "link" : "org\/saddle\/Frame.html#>>>[B,That](other:B)(implicitop:org.saddle.ops.BinOp[org.saddle.ops.BitUShr,This,B,That]):That", "kind" : "def"}, {"label" : ">>", "tail" : "(other: B)(op: BinOp[BitShr, Frame[RX, CX, T], B, That]): That", "member" : "org.saddle.ops.NumericOps.>>", "link" : "org\/saddle\/Frame.html#>>[B,That](other:B)(implicitop:org.saddle.ops.BinOp[org.saddle.ops.BitShr,This,B,That]):That", "kind" : "def"}, {"label" : "<<", "tail" : "(other: B)(op: BinOp[BitShl, Frame[RX, CX, T], B, That]): That", "member" : "org.saddle.ops.NumericOps.<<", "link" : "org\/saddle\/Frame.html#<<[B,That](other:B)(implicitop:org.saddle.ops.BinOp[org.saddle.ops.BitShl,This,B,That]):That", "kind" : "def"}, {"label" : "^", "tail" : "(other: B)(op: BinOp[BitXor, Frame[RX, CX, T], B, That]): That", "member" : "org.saddle.ops.NumericOps.^", "link" : "org\/saddle\/Frame.html#^[B,That](other:B)(implicitop:org.saddle.ops.BinOp[org.saddle.ops.BitXor,This,B,That]):That", "kind" : "def"}, {"label" : "|", "tail" : "(other: B)(op: BinOp[BitOr, Frame[RX, CX, T], B, That]): That", "member" : "org.saddle.ops.NumericOps.|", "link" : "org\/saddle\/Frame.html#|[B,That](other:B)(implicitop:org.saddle.ops.BinOp[org.saddle.ops.BitOr,This,B,That]):That", "kind" : "def"}, {"label" : "&", "tail" : "(other: B)(op: BinOp[BitAnd, Frame[RX, CX, T], B, That]): That", "member" : "org.saddle.ops.NumericOps.&", "link" : "org\/saddle\/Frame.html#&[B,That](other:B)(implicitop:org.saddle.ops.BinOp[org.saddle.ops.BitAnd,This,B,That]):That", "kind" : "def"}, {"label" : "**", "tail" : "(other: B)(op: BinOp[Power, Frame[RX, CX, T], B, That]): That", "member" : "org.saddle.ops.NumericOps.**", "link" : "org\/saddle\/Frame.html#**[B,That](other:B)(implicitop:org.saddle.ops.BinOp[org.saddle.ops.Power,This,B,That]):That", "kind" : "def"}, {"label" : "%", "tail" : "(other: B)(op: BinOp[Mod, Frame[RX, CX, T], B, That]): That", "member" : "org.saddle.ops.NumericOps.%", "link" : "org\/saddle\/Frame.html#%[B,That](other:B)(implicitop:org.saddle.ops.BinOp[org.saddle.ops.Mod,This,B,That]):That", "kind" : "def"}, {"label" : "*", "tail" : "(other: B)(op: BinOp[Multiply, Frame[RX, CX, T], B, That]): That", "member" : "org.saddle.ops.NumericOps.*", "link" : "org\/saddle\/Frame.html#*[B,That](other:B)(implicitop:org.saddle.ops.BinOp[org.saddle.ops.Multiply,This,B,That]):That", "kind" : "def"}, {"label" : "\/", "tail" : "(other: B)(op: BinOp[Divide, Frame[RX, CX, T], B, That]): That", "member" : "org.saddle.ops.NumericOps.\/", "link" : "org\/saddle\/Frame.html#\/[B,That](other:B)(implicitop:org.saddle.ops.BinOp[org.saddle.ops.Divide,This,B,That]):That", "kind" : "def"}, {"label" : "-", "tail" : "(other: B)(op: BinOp[Subtract, Frame[RX, CX, T], B, That]): That", "member" : "org.saddle.ops.NumericOps.-", "link" : "org\/saddle\/Frame.html#-[B,That](other:B)(implicitop:org.saddle.ops.BinOp[org.saddle.ops.Subtract,This,B,That]):That", "kind" : "def"}, {"label" : "+", "tail" : "(other: B)(op: BinOp[Add, Frame[RX, CX, T], B, That]): That", "member" : "org.saddle.ops.NumericOps.+", "link" : "org\/saddle\/Frame.html#+[B,That](other:B)(implicitop:org.saddle.ops.BinOp[org.saddle.ops.Add,This,B,That]):That", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/saddle\/Frame.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/saddle\/Frame.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/saddle\/Frame.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/saddle\/Frame.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/saddle\/Frame.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/saddle\/Frame.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/saddle\/Frame.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/Frame.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/Frame.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/Frame.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/saddle\/Frame.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/saddle\/Frame.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/saddle\/Frame.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "org\/saddle\/Frame.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/saddle\/Frame.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/saddle\/Frame.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "FrFrEOp", "tail" : "", "member" : "org.saddle.ops.BinOpFrame.FrFrEOp", "link" : "org\/saddle\/ops\/BinOpFrame.html#FrFrEOp[OP<:org.saddle.ops.ScalarOp,X,Y,A,B,C]extendsBinOp[OP,org.saddle.Frame[X,Y,A],org.saddle.Frame[X,Y,B],org.saddle.Frame[X,Y,C]]", "kind" : "final class"}, {"label" : "FrScEOp", "tail" : "", "member" : "org.saddle.ops.BinOpFrame.FrScEOp", "link" : "org\/saddle\/ops\/BinOpFrame.html#FrScEOp[OP<:org.saddle.ops.ScalarOp,X,Y,A,B,C]extendsBinOp[OP,org.saddle.Frame[X,Y,A],B,org.saddle.Frame[X,Y,C]]", "kind" : "final class"}, {"label" : "table", "tail" : "(values: Vec[(RX, CX)])(arg0: ST[RX], arg1: ORD[RX], arg2: ST[CX], arg3: ORD[CX]): Frame[RX, CX, Int]", "member" : "org.saddle.Frame.table", "link" : "org\/saddle\/Frame$.html#table[RX,CX](values:org.saddle.Vec[(RX,CX)])(implicitevidence$102:org.saddle.ST[RX],implicitevidence$103:org.saddle.ORD[RX],implicitevidence$104:org.saddle.ST[CX],implicitevidence$105:org.saddle.ORD[CX]):org.saddle.Frame[RX,CX,Int]", "kind" : "def"}, {"label" : "apply", "tail" : "(mat: Mat[T], rowIx: Index[RX], colIx: Index[CX])(arg0: ST[RX], arg1: ORD[RX], arg2: ST[CX], arg3: ORD[CX], arg4: ST[T]): Frame[RX, CX, T]", "member" : "org.saddle.Frame.apply", "link" : "org\/saddle\/Frame$.html#apply[RX,CX,T](mat:org.saddle.Mat[T],rowIx:org.saddle.Index[RX],colIx:org.saddle.Index[CX])(implicitevidence$97:org.saddle.ST[RX],implicitevidence$98:org.saddle.ORD[RX],implicitevidence$99:org.saddle.ST[CX],implicitevidence$100:org.saddle.ORD[CX],implicitevidence$101:org.saddle.ST[T]):org.saddle.Frame[RX,CX,T]", "kind" : "def"}, {"label" : "apply", "tail" : "(values: Mat[T])(arg0: ST[T]): Frame[Int, Int, T]", "member" : "org.saddle.Frame.apply", "link" : "org\/saddle\/Frame$.html#apply[T](values:org.saddle.Mat[T])(implicitevidence$96:org.saddle.ST[T]):org.saddle.Frame[Int,Int,T]", "kind" : "def"}, {"label" : "fromCols", "tail" : "(values: (CX, Series[RX, T])*)(arg0: ST[RX], arg1: ORD[RX], arg2: ST[CX], arg3: ORD[CX], arg4: ST[T]): Frame[RX, CX, T]", "member" : "org.saddle.Frame.fromCols", "link" : "org\/saddle\/Frame$.html#fromCols[RX,CX,T](values:(CX,org.saddle.Series[RX,T])*)(implicitevidence$91:org.saddle.ST[RX],implicitevidence$92:org.saddle.ORD[RX],implicitevidence$93:org.saddle.ST[CX],implicitevidence$94:org.saddle.ORD[CX],implicitevidence$95:org.saddle.ST[T]):org.saddle.Frame[RX,CX,T]", "kind" : "def"}, {"label" : "apply", "tail" : "(values: (CX, Series[RX, T])*)(arg0: ST[RX], arg1: ORD[RX], arg2: ST[CX], arg3: ORD[CX], arg4: ST[T]): Frame[RX, CX, T]", "member" : "org.saddle.Frame.apply", "link" : "org\/saddle\/Frame$.html#apply[RX,CX,T](values:(CX,org.saddle.Series[RX,T])*)(implicitevidence$86:org.saddle.ST[RX],implicitevidence$87:org.saddle.ORD[RX],implicitevidence$88:org.saddle.ST[CX],implicitevidence$89:org.saddle.ORD[CX],implicitevidence$90:org.saddle.ST[T]):org.saddle.Frame[RX,CX,T]", "kind" : "def"}, {"label" : "fromCols", "tail" : "(values: Seq[Series[RX, T]], colIx: Index[CX])(arg0: ST[RX], arg1: ORD[RX], arg2: ST[CX], arg3: ORD[CX], arg4: ST[T]): Frame[RX, CX, T]", "member" : "org.saddle.Frame.fromCols", "link" : "org\/saddle\/Frame$.html#fromCols[RX,CX,T](values:Seq[org.saddle.Series[RX,T]],colIx:org.saddle.Index[CX])(implicitevidence$81:org.saddle.ST[RX],implicitevidence$82:org.saddle.ORD[RX],implicitevidence$83:org.saddle.ST[CX],implicitevidence$84:org.saddle.ORD[CX],implicitevidence$85:org.saddle.ST[T]):org.saddle.Frame[RX,CX,T]", "kind" : "def"}, {"label" : "apply", "tail" : "(values: Seq[Series[RX, T]], colIx: Index[CX])(arg0: ST[RX], arg1: ORD[RX], arg2: ST[CX], arg3: ORD[CX], arg4: ST[T]): Frame[RX, CX, T]", "member" : "org.saddle.Frame.apply", "link" : "org\/saddle\/Frame$.html#apply[RX,CX,T](values:Seq[org.saddle.Series[RX,T]],colIx:org.saddle.Index[CX])(implicitevidence$76:org.saddle.ST[RX],implicitevidence$77:org.saddle.ORD[RX],implicitevidence$78:org.saddle.ST[CX],implicitevidence$79:org.saddle.ORD[CX],implicitevidence$80:org.saddle.ST[T]):org.saddle.Frame[RX,CX,T]", "kind" : "def"}, {"label" : "fromCols", "tail" : "(values: Series[RX, T]*)(arg0: ST[RX], arg1: ORD[RX], arg2: ST[T]): Frame[RX, Int, T]", "member" : "org.saddle.Frame.fromCols", "link" : "org\/saddle\/Frame$.html#fromCols[RX,T](values:org.saddle.Series[RX,T]*)(implicitevidence$73:org.saddle.ST[RX],implicitevidence$74:org.saddle.ORD[RX],implicitevidence$75:org.saddle.ST[T]):org.saddle.Frame[RX,Int,T]", "kind" : "def"}, {"label" : "apply", "tail" : "(values: Series[RX, T]*)(arg0: ST[RX], arg1: ORD[RX], arg2: ST[T], arg3: ID[T]): Frame[RX, Int, T]", "member" : "org.saddle.Frame.apply", "link" : "org\/saddle\/Frame$.html#apply[RX,T](values:org.saddle.Series[RX,T]*)(implicitevidence$69:org.saddle.ST[RX],implicitevidence$70:org.saddle.ORD[RX],implicitevidence$71:org.saddle.ST[T],implicitevidence$72:org.saddle.Frame.ID[T]):org.saddle.Frame[RX,Int,T]", "kind" : "def"}, {"label" : "apply", "tail" : "(values: (CX, Vec[T])*)(arg0: ST[CX], arg1: ORD[CX], arg2: ST[T]): Frame[Int, CX, T]", "member" : "org.saddle.Frame.apply", "link" : "org\/saddle\/Frame$.html#apply[CX,T](values:(CX,org.saddle.Vec[T])*)(implicitevidence$66:org.saddle.ST[CX],implicitevidence$67:org.saddle.ORD[CX],implicitevidence$68:org.saddle.ST[T]):org.saddle.Frame[Int,CX,T]", "kind" : "def"}, {"label" : "apply", "tail" : "(values: Seq[Vec[T]], colIx: Index[CX])(arg0: ST[CX], arg1: ORD[CX], arg2: ST[T]): Frame[Int, CX, T]", "member" : "org.saddle.Frame.apply", "link" : "org\/saddle\/Frame$.html#apply[CX,T](values:Seq[org.saddle.Vec[T]],colIx:org.saddle.Index[CX])(implicitevidence$63:org.saddle.ST[CX],implicitevidence$64:org.saddle.ORD[CX],implicitevidence$65:org.saddle.ST[T]):org.saddle.Frame[Int,CX,T]", "kind" : "def"}, {"label" : "apply", "tail" : "(values: Vec[Vec[T]], rowIx: Index[RX], colIx: Index[CX])(arg0: ST[RX], arg1: ORD[RX], arg2: ST[CX], arg3: ORD[CX], arg4: ST[T]): Frame[RX, CX, T]", "member" : "org.saddle.Frame.apply", "link" : "org\/saddle\/Frame$.html#apply[RX,CX,T](values:org.saddle.Vec[org.saddle.Vec[T]],rowIx:org.saddle.Index[RX],colIx:org.saddle.Index[CX])(implicitevidence$58:org.saddle.ST[RX],implicitevidence$59:org.saddle.ORD[RX],implicitevidence$60:org.saddle.ST[CX],implicitevidence$61:org.saddle.ORD[CX],implicitevidence$62:org.saddle.ST[T]):org.saddle.Frame[RX,CX,T]", "kind" : "def"}, {"label" : "apply", "tail" : "(values: Seq[Vec[T]], rowIx: Index[RX], colIx: Index[CX])(arg0: ST[RX], arg1: ORD[RX], arg2: ST[CX], arg3: ORD[CX], arg4: ST[T]): Frame[RX, CX, T]", "member" : "org.saddle.Frame.apply", "link" : "org\/saddle\/Frame$.html#apply[RX,CX,T](values:Seq[org.saddle.Vec[T]],rowIx:org.saddle.Index[RX],colIx:org.saddle.Index[CX])(implicitevidence$53:org.saddle.ST[RX],implicitevidence$54:org.saddle.ORD[RX],implicitevidence$55:org.saddle.ST[CX],implicitevidence$56:org.saddle.ORD[CX],implicitevidence$57:org.saddle.ST[T]):org.saddle.Frame[RX,CX,T]", "kind" : "def"}, {"label" : "apply", "tail" : "(values: Vec[T]*)(arg0: ST[T]): Frame[Int, Int, T]", "member" : "org.saddle.Frame.apply", "link" : "org\/saddle\/Frame$.html#apply[T](values:org.saddle.Vec[T]*)(implicitevidence$52:org.saddle.ST[T]):org.saddle.Frame[Int,Int,T]", "kind" : "def"}, {"label" : "empty", "tail" : "(arg0: ST[RX], arg1: ORD[RX], arg2: ST[CX], arg3: ORD[CX], arg4: ST[T]): Frame[RX, CX, T]", "member" : "org.saddle.Frame.empty", "link" : "org\/saddle\/Frame$.html#empty[RX,CX,T](implicitevidence$47:org.saddle.ST[RX],implicitevidence$48:org.saddle.ORD[RX],implicitevidence$49:org.saddle.ST[CX],implicitevidence$50:org.saddle.ORD[CX],implicitevidence$51:org.saddle.ST[T]):org.saddle.Frame[RX,CX,T]", "kind" : "def"}, {"label" : "FrFrEOpBBB", "tail" : "(cm: ST[X], cmp: ORD[X], my: ST[Y], cmpY: ORD[Y], opv: BinOp[Op, Vec[Boolean], Vec[Boolean], Vec[Boolean]]): FrFrEOp[Op, X, Y, Boolean, Boolean, Boolean]", "member" : "org.saddle.ops.BinOpFrame.FrFrEOpBBB", "link" : "org\/saddle\/Frame$.html#FrFrEOpBBB[Op<:org.saddle.ops.ScalarOp,X,Y](implicitcm:org.saddle.ST[X],implicitcmp:org.saddle.ORD[X],implicitmy:org.saddle.ST[Y],implicitcmpY:org.saddle.ORD[Y],implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Boolean],org.saddle.Vec[Boolean],org.saddle.Vec[Boolean]]):BinOpFrame.this.FrFrEOp[Op,X,Y,Boolean,Boolean,Boolean]", "kind" : "implicit def"}, {"label" : "FrFrEOpIIB", "tail" : "(cm: ST[X], cmp: ORD[X], my: ST[Y], cmpY: ORD[Y], opv: BinOp[Op, Vec[Int], Vec[Int], Vec[Boolean]]): FrFrEOp[Op, X, Y, Int, Int, Boolean]", "member" : "org.saddle.ops.BinOpFrame.FrFrEOpIIB", "link" : "org\/saddle\/Frame$.html#FrFrEOpIIB[Op<:org.saddle.ops.ScalarOp,X,Y](implicitcm:org.saddle.ST[X],implicitcmp:org.saddle.ORD[X],implicitmy:org.saddle.ST[Y],implicitcmpY:org.saddle.ORD[Y],implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Int],org.saddle.Vec[Int],org.saddle.Vec[Boolean]]):BinOpFrame.this.FrFrEOp[Op,X,Y,Int,Int,Boolean]", "kind" : "implicit def"}, {"label" : "FrFrEOpILB", "tail" : "(cm: ST[X], cmp: ORD[X], my: ST[Y], cmpY: ORD[Y], opv: BinOp[Op, Vec[Int], Vec[Long], Vec[Boolean]]): FrFrEOp[Op, X, Y, Int, Long, Boolean]", "member" : "org.saddle.ops.BinOpFrame.FrFrEOpILB", "link" : "org\/saddle\/Frame$.html#FrFrEOpILB[Op<:org.saddle.ops.ScalarOp,X,Y](implicitcm:org.saddle.ST[X],implicitcmp:org.saddle.ORD[X],implicitmy:org.saddle.ST[Y],implicitcmpY:org.saddle.ORD[Y],implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Int],org.saddle.Vec[Long],org.saddle.Vec[Boolean]]):BinOpFrame.this.FrFrEOp[Op,X,Y,Int,Long,Boolean]", "kind" : "implicit def"}, {"label" : "FrFrEOpIDB", "tail" : "(cm: ST[X], cmp: ORD[X], my: ST[Y], cmpY: ORD[Y], opv: BinOp[Op, Vec[Int], Vec[Double], Vec[Boolean]]): FrFrEOp[Op, X, Y, Int, Double, Boolean]", "member" : "org.saddle.ops.BinOpFrame.FrFrEOpIDB", "link" : "org\/saddle\/Frame$.html#FrFrEOpIDB[Op<:org.saddle.ops.ScalarOp,X,Y](implicitcm:org.saddle.ST[X],implicitcmp:org.saddle.ORD[X],implicitmy:org.saddle.ST[Y],implicitcmpY:org.saddle.ORD[Y],implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Int],org.saddle.Vec[Double],org.saddle.Vec[Boolean]]):BinOpFrame.this.FrFrEOp[Op,X,Y,Int,Double,Boolean]", "kind" : "implicit def"}, {"label" : "FrFrEOpLIB", "tail" : "(cm: ST[X], cmp: ORD[X], my: ST[Y], cmpY: ORD[Y], opv: BinOp[Op, Vec[Long], Vec[Int], Vec[Boolean]]): FrFrEOp[Op, X, Y, Long, Int, Boolean]", "member" : "org.saddle.ops.BinOpFrame.FrFrEOpLIB", "link" : "org\/saddle\/Frame$.html#FrFrEOpLIB[Op<:org.saddle.ops.ScalarOp,X,Y](implicitcm:org.saddle.ST[X],implicitcmp:org.saddle.ORD[X],implicitmy:org.saddle.ST[Y],implicitcmpY:org.saddle.ORD[Y],implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Long],org.saddle.Vec[Int],org.saddle.Vec[Boolean]]):BinOpFrame.this.FrFrEOp[Op,X,Y,Long,Int,Boolean]", "kind" : "implicit def"}, {"label" : "FrFrEOpLLB", "tail" : "(cm: ST[X], cmp: ORD[X], my: ST[Y], cmpY: ORD[Y], opv: BinOp[Op, Vec[Long], Vec[Long], Vec[Boolean]]): FrFrEOp[Op, X, Y, Long, Long, Boolean]", "member" : "org.saddle.ops.BinOpFrame.FrFrEOpLLB", "link" : "org\/saddle\/Frame$.html#FrFrEOpLLB[Op<:org.saddle.ops.ScalarOp,X,Y](implicitcm:org.saddle.ST[X],implicitcmp:org.saddle.ORD[X],implicitmy:org.saddle.ST[Y],implicitcmpY:org.saddle.ORD[Y],implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Long],org.saddle.Vec[Long],org.saddle.Vec[Boolean]]):BinOpFrame.this.FrFrEOp[Op,X,Y,Long,Long,Boolean]", "kind" : "implicit def"}, {"label" : "FrFrEOpLDB", "tail" : "(cm: ST[X], cmp: ORD[X], my: ST[Y], cmpY: ORD[Y], opv: BinOp[Op, Vec[Long], Vec[Double], Vec[Boolean]]): FrFrEOp[Op, X, Y, Long, Double, Boolean]", "member" : "org.saddle.ops.BinOpFrame.FrFrEOpLDB", "link" : "org\/saddle\/Frame$.html#FrFrEOpLDB[Op<:org.saddle.ops.ScalarOp,X,Y](implicitcm:org.saddle.ST[X],implicitcmp:org.saddle.ORD[X],implicitmy:org.saddle.ST[Y],implicitcmpY:org.saddle.ORD[Y],implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Long],org.saddle.Vec[Double],org.saddle.Vec[Boolean]]):BinOpFrame.this.FrFrEOp[Op,X,Y,Long,Double,Boolean]", "kind" : "implicit def"}, {"label" : "FrFrEOpDIB", "tail" : "(cm: ST[X], cmp: ORD[X], my: ST[Y], cmpY: ORD[Y], opv: BinOp[Op, Vec[Double], Vec[Int], Vec[Boolean]]): FrFrEOp[Op, X, Y, Double, Int, Boolean]", "member" : "org.saddle.ops.BinOpFrame.FrFrEOpDIB", "link" : "org\/saddle\/Frame$.html#FrFrEOpDIB[Op<:org.saddle.ops.ScalarOp,X,Y](implicitcm:org.saddle.ST[X],implicitcmp:org.saddle.ORD[X],implicitmy:org.saddle.ST[Y],implicitcmpY:org.saddle.ORD[Y],implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Double],org.saddle.Vec[Int],org.saddle.Vec[Boolean]]):BinOpFrame.this.FrFrEOp[Op,X,Y,Double,Int,Boolean]", "kind" : "implicit def"}, {"label" : "FrFrEOpDLB", "tail" : "(cm: ST[X], cmp: ORD[X], my: ST[Y], cmpY: ORD[Y], opv: BinOp[Op, Vec[Double], Vec[Long], Vec[Boolean]]): FrFrEOp[Op, X, Y, Double, Long, Boolean]", "member" : "org.saddle.ops.BinOpFrame.FrFrEOpDLB", "link" : "org\/saddle\/Frame$.html#FrFrEOpDLB[Op<:org.saddle.ops.ScalarOp,X,Y](implicitcm:org.saddle.ST[X],implicitcmp:org.saddle.ORD[X],implicitmy:org.saddle.ST[Y],implicitcmpY:org.saddle.ORD[Y],implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Double],org.saddle.Vec[Long],org.saddle.Vec[Boolean]]):BinOpFrame.this.FrFrEOp[Op,X,Y,Double,Long,Boolean]", "kind" : "implicit def"}, {"label" : "FrFrEOpDDB", "tail" : "(cm: ST[X], cmp: ORD[X], my: ST[Y], cmpY: ORD[Y], opv: BinOp[Op, Vec[Double], Vec[Double], Vec[Boolean]]): FrFrEOp[Op, X, Y, Double, Double, Boolean]", "member" : "org.saddle.ops.BinOpFrame.FrFrEOpDDB", "link" : "org\/saddle\/Frame$.html#FrFrEOpDDB[Op<:org.saddle.ops.ScalarOp,X,Y](implicitcm:org.saddle.ST[X],implicitcmp:org.saddle.ORD[X],implicitmy:org.saddle.ST[Y],implicitcmpY:org.saddle.ORD[Y],implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Double],org.saddle.Vec[Double],org.saddle.Vec[Boolean]]):BinOpFrame.this.FrFrEOp[Op,X,Y,Double,Double,Boolean]", "kind" : "implicit def"}, {"label" : "FrFrEOpIII", "tail" : "(cm: ST[X], cmp: ORD[X], my: ST[Y], cmpY: ORD[Y], opv: BinOp[Op, Vec[Int], Vec[Int], Vec[Int]]): FrFrEOp[Op, X, Y, Int, Int, Int]", "member" : "org.saddle.ops.BinOpFrame.FrFrEOpIII", "link" : "org\/saddle\/Frame$.html#FrFrEOpIII[Op<:org.saddle.ops.ScalarOp,X,Y](implicitcm:org.saddle.ST[X],implicitcmp:org.saddle.ORD[X],implicitmy:org.saddle.ST[Y],implicitcmpY:org.saddle.ORD[Y],implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Int],org.saddle.Vec[Int],org.saddle.Vec[Int]]):BinOpFrame.this.FrFrEOp[Op,X,Y,Int,Int,Int]", "kind" : "implicit def"}, {"label" : "FrFrEOpILL", "tail" : "(cm: ST[X], cmp: ORD[X], my: ST[Y], cmpY: ORD[Y], opv: BinOp[Op, Vec[Int], Vec[Long], Vec[Long]]): FrFrEOp[Op, X, Y, Int, Long, Long]", "member" : "org.saddle.ops.BinOpFrame.FrFrEOpILL", "link" : "org\/saddle\/Frame$.html#FrFrEOpILL[Op<:org.saddle.ops.ScalarOp,X,Y](implicitcm:org.saddle.ST[X],implicitcmp:org.saddle.ORD[X],implicitmy:org.saddle.ST[Y],implicitcmpY:org.saddle.ORD[Y],implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Int],org.saddle.Vec[Long],org.saddle.Vec[Long]]):BinOpFrame.this.FrFrEOp[Op,X,Y,Int,Long,Long]", "kind" : "implicit def"}, {"label" : "FrFrEOpIDD", "tail" : "(cm: ST[X], cmp: ORD[X], my: ST[Y], cmpY: ORD[Y], opv: BinOp[Op, Vec[Int], Vec[Double], Vec[Double]]): FrFrEOp[Op, X, Y, Int, Double, Double]", "member" : "org.saddle.ops.BinOpFrame.FrFrEOpIDD", "link" : "org\/saddle\/Frame$.html#FrFrEOpIDD[Op<:org.saddle.ops.ScalarOp,X,Y](implicitcm:org.saddle.ST[X],implicitcmp:org.saddle.ORD[X],implicitmy:org.saddle.ST[Y],implicitcmpY:org.saddle.ORD[Y],implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Int],org.saddle.Vec[Double],org.saddle.Vec[Double]]):BinOpFrame.this.FrFrEOp[Op,X,Y,Int,Double,Double]", "kind" : "implicit def"}, {"label" : "FrFrEOpLIL", "tail" : "(cm: ST[X], cmp: ORD[X], my: ST[Y], cmpY: ORD[Y], opv: BinOp[Op, Vec[Long], Vec[Int], Vec[Long]]): FrFrEOp[Op, X, Y, Long, Int, Long]", "member" : "org.saddle.ops.BinOpFrame.FrFrEOpLIL", "link" : "org\/saddle\/Frame$.html#FrFrEOpLIL[Op<:org.saddle.ops.ScalarOp,X,Y](implicitcm:org.saddle.ST[X],implicitcmp:org.saddle.ORD[X],implicitmy:org.saddle.ST[Y],implicitcmpY:org.saddle.ORD[Y],implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Long],org.saddle.Vec[Int],org.saddle.Vec[Long]]):BinOpFrame.this.FrFrEOp[Op,X,Y,Long,Int,Long]", "kind" : "implicit def"}, {"label" : "FrFrEOpLLL", "tail" : "(cm: ST[X], cmp: ORD[X], my: ST[Y], cmpY: ORD[Y], opv: BinOp[Op, Vec[Long], Vec[Long], Vec[Long]]): FrFrEOp[Op, X, Y, Long, Long, Long]", "member" : "org.saddle.ops.BinOpFrame.FrFrEOpLLL", "link" : "org\/saddle\/Frame$.html#FrFrEOpLLL[Op<:org.saddle.ops.ScalarOp,X,Y](implicitcm:org.saddle.ST[X],implicitcmp:org.saddle.ORD[X],implicitmy:org.saddle.ST[Y],implicitcmpY:org.saddle.ORD[Y],implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Long],org.saddle.Vec[Long],org.saddle.Vec[Long]]):BinOpFrame.this.FrFrEOp[Op,X,Y,Long,Long,Long]", "kind" : "implicit def"}, {"label" : "FrFrEOpLDD", "tail" : "(cm: ST[X], cmp: ORD[X], my: ST[Y], cmpY: ORD[Y], opv: BinOp[Op, Vec[Long], Vec[Double], Vec[Double]]): FrFrEOp[Op, X, Y, Long, Double, Double]", "member" : "org.saddle.ops.BinOpFrame.FrFrEOpLDD", "link" : "org\/saddle\/Frame$.html#FrFrEOpLDD[Op<:org.saddle.ops.ScalarOp,X,Y](implicitcm:org.saddle.ST[X],implicitcmp:org.saddle.ORD[X],implicitmy:org.saddle.ST[Y],implicitcmpY:org.saddle.ORD[Y],implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Long],org.saddle.Vec[Double],org.saddle.Vec[Double]]):BinOpFrame.this.FrFrEOp[Op,X,Y,Long,Double,Double]", "kind" : "implicit def"}, {"label" : "FrFrEOpDLD", "tail" : "(cm: ST[X], cmp: ORD[X], my: ST[Y], cmpY: ORD[Y], opv: BinOp[Op, Vec[Double], Vec[Long], Vec[Double]]): FrFrEOp[Op, X, Y, Double, Long, Double]", "member" : "org.saddle.ops.BinOpFrame.FrFrEOpDLD", "link" : "org\/saddle\/Frame$.html#FrFrEOpDLD[Op<:org.saddle.ops.ScalarOp,X,Y](implicitcm:org.saddle.ST[X],implicitcmp:org.saddle.ORD[X],implicitmy:org.saddle.ST[Y],implicitcmpY:org.saddle.ORD[Y],implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Double],org.saddle.Vec[Long],org.saddle.Vec[Double]]):BinOpFrame.this.FrFrEOp[Op,X,Y,Double,Long,Double]", "kind" : "implicit def"}, {"label" : "FrFrEOpDID", "tail" : "(cm: ST[X], cmp: ORD[X], my: ST[Y], cmpY: ORD[Y], opv: BinOp[Op, Vec[Double], Vec[Int], Vec[Double]]): FrFrEOp[Op, X, Y, Double, Int, Double]", "member" : "org.saddle.ops.BinOpFrame.FrFrEOpDID", "link" : "org\/saddle\/Frame$.html#FrFrEOpDID[Op<:org.saddle.ops.ScalarOp,X,Y](implicitcm:org.saddle.ST[X],implicitcmp:org.saddle.ORD[X],implicitmy:org.saddle.ST[Y],implicitcmpY:org.saddle.ORD[Y],implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Double],org.saddle.Vec[Int],org.saddle.Vec[Double]]):BinOpFrame.this.FrFrEOp[Op,X,Y,Double,Int,Double]", "kind" : "implicit def"}, {"label" : "FrFrEOpDDD", "tail" : "(cm: ST[X], cmp: ORD[X], my: ST[Y], cmpY: ORD[Y], opv: BinOp[Op, Vec[Double], Vec[Double], Vec[Double]]): FrFrEOp[Op, X, Y, Double, Double, Double]", "member" : "org.saddle.ops.BinOpFrame.FrFrEOpDDD", "link" : "org\/saddle\/Frame$.html#FrFrEOpDDD[Op<:org.saddle.ops.ScalarOp,X,Y](implicitcm:org.saddle.ST[X],implicitcmp:org.saddle.ORD[X],implicitmy:org.saddle.ST[Y],implicitcmpY:org.saddle.ORD[Y],implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Double],org.saddle.Vec[Double],org.saddle.Vec[Double]]):BinOpFrame.this.FrFrEOp[Op,X,Y,Double,Double,Double]", "kind" : "implicit def"}, {"label" : "FrScEOpBBB", "tail" : "(opv: BinOp[Op, Vec[Boolean], Boolean, Vec[Boolean]]): FrScEOp[Op, X, Y, Boolean, Boolean, Boolean]", "member" : "org.saddle.ops.BinOpFrame.FrScEOpBBB", "link" : "org\/saddle\/Frame$.html#FrScEOpBBB[Op<:org.saddle.ops.ScalarOp,X,Y](implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Boolean],Boolean,org.saddle.Vec[Boolean]]):BinOpFrame.this.FrScEOp[Op,X,Y,Boolean,Boolean,Boolean]", "kind" : "implicit def"}, {"label" : "FrScEOpIIB", "tail" : "(opv: BinOp[Op, Vec[Int], Int, Vec[Boolean]]): FrScEOp[Op, X, Y, Int, Int, Boolean]", "member" : "org.saddle.ops.BinOpFrame.FrScEOpIIB", "link" : "org\/saddle\/Frame$.html#FrScEOpIIB[Op<:org.saddle.ops.ScalarOp,X,Y](implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Int],Int,org.saddle.Vec[Boolean]]):BinOpFrame.this.FrScEOp[Op,X,Y,Int,Int,Boolean]", "kind" : "implicit def"}, {"label" : "FrScEOpILB", "tail" : "(opv: BinOp[Op, Vec[Int], Long, Vec[Boolean]]): FrScEOp[Op, X, Y, Int, Long, Boolean]", "member" : "org.saddle.ops.BinOpFrame.FrScEOpILB", "link" : "org\/saddle\/Frame$.html#FrScEOpILB[Op<:org.saddle.ops.ScalarOp,X,Y](implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Int],Long,org.saddle.Vec[Boolean]]):BinOpFrame.this.FrScEOp[Op,X,Y,Int,Long,Boolean]", "kind" : "implicit def"}, {"label" : "FrScEOpIDB", "tail" : "(opv: BinOp[Op, Vec[Int], Double, Vec[Boolean]]): FrScEOp[Op, X, Y, Int, Double, Boolean]", "member" : "org.saddle.ops.BinOpFrame.FrScEOpIDB", "link" : "org\/saddle\/Frame$.html#FrScEOpIDB[Op<:org.saddle.ops.ScalarOp,X,Y](implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Int],Double,org.saddle.Vec[Boolean]]):BinOpFrame.this.FrScEOp[Op,X,Y,Int,Double,Boolean]", "kind" : "implicit def"}, {"label" : "FrScEOpLIB", "tail" : "(opv: BinOp[Op, Vec[Long], Int, Vec[Boolean]]): FrScEOp[Op, X, Y, Long, Int, Boolean]", "member" : "org.saddle.ops.BinOpFrame.FrScEOpLIB", "link" : "org\/saddle\/Frame$.html#FrScEOpLIB[Op<:org.saddle.ops.ScalarOp,X,Y](implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Long],Int,org.saddle.Vec[Boolean]]):BinOpFrame.this.FrScEOp[Op,X,Y,Long,Int,Boolean]", "kind" : "implicit def"}, {"label" : "FrScEOpLLB", "tail" : "(opv: BinOp[Op, Vec[Long], Long, Vec[Boolean]]): FrScEOp[Op, X, Y, Long, Long, Boolean]", "member" : "org.saddle.ops.BinOpFrame.FrScEOpLLB", "link" : "org\/saddle\/Frame$.html#FrScEOpLLB[Op<:org.saddle.ops.ScalarOp,X,Y](implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Long],Long,org.saddle.Vec[Boolean]]):BinOpFrame.this.FrScEOp[Op,X,Y,Long,Long,Boolean]", "kind" : "implicit def"}, {"label" : "FrScEOpLDB", "tail" : "(opv: BinOp[Op, Vec[Long], Double, Vec[Boolean]]): FrScEOp[Op, X, Y, Long, Double, Boolean]", "member" : "org.saddle.ops.BinOpFrame.FrScEOpLDB", "link" : "org\/saddle\/Frame$.html#FrScEOpLDB[Op<:org.saddle.ops.ScalarOp,X,Y](implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Long],Double,org.saddle.Vec[Boolean]]):BinOpFrame.this.FrScEOp[Op,X,Y,Long,Double,Boolean]", "kind" : "implicit def"}, {"label" : "FrScEOpDIB", "tail" : "(opv: BinOp[Op, Vec[Double], Int, Vec[Boolean]]): FrScEOp[Op, X, Y, Double, Int, Boolean]", "member" : "org.saddle.ops.BinOpFrame.FrScEOpDIB", "link" : "org\/saddle\/Frame$.html#FrScEOpDIB[Op<:org.saddle.ops.ScalarOp,X,Y](implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Double],Int,org.saddle.Vec[Boolean]]):BinOpFrame.this.FrScEOp[Op,X,Y,Double,Int,Boolean]", "kind" : "implicit def"}, {"label" : "FrScEOpDLB", "tail" : "(opv: BinOp[Op, Vec[Double], Long, Vec[Boolean]]): FrScEOp[Op, X, Y, Double, Long, Boolean]", "member" : "org.saddle.ops.BinOpFrame.FrScEOpDLB", "link" : "org\/saddle\/Frame$.html#FrScEOpDLB[Op<:org.saddle.ops.ScalarOp,X,Y](implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Double],Long,org.saddle.Vec[Boolean]]):BinOpFrame.this.FrScEOp[Op,X,Y,Double,Long,Boolean]", "kind" : "implicit def"}, {"label" : "FrScEOpDDB", "tail" : "(opv: BinOp[Op, Vec[Double], Double, Vec[Boolean]]): FrScEOp[Op, X, Y, Double, Double, Boolean]", "member" : "org.saddle.ops.BinOpFrame.FrScEOpDDB", "link" : "org\/saddle\/Frame$.html#FrScEOpDDB[Op<:org.saddle.ops.ScalarOp,X,Y](implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Double],Double,org.saddle.Vec[Boolean]]):BinOpFrame.this.FrScEOp[Op,X,Y,Double,Double,Boolean]", "kind" : "implicit def"}, {"label" : "FrScEOpIII", "tail" : "(opv: BinOp[Op, Vec[Int], Int, Vec[Int]]): FrScEOp[Op, X, Y, Int, Int, Int]", "member" : "org.saddle.ops.BinOpFrame.FrScEOpIII", "link" : "org\/saddle\/Frame$.html#FrScEOpIII[Op<:org.saddle.ops.ScalarOp,X,Y](implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Int],Int,org.saddle.Vec[Int]]):BinOpFrame.this.FrScEOp[Op,X,Y,Int,Int,Int]", "kind" : "implicit def"}, {"label" : "FrScEOpILL", "tail" : "(opv: BinOp[Op, Vec[Int], Long, Vec[Long]]): FrScEOp[Op, X, Y, Int, Long, Long]", "member" : "org.saddle.ops.BinOpFrame.FrScEOpILL", "link" : "org\/saddle\/Frame$.html#FrScEOpILL[Op<:org.saddle.ops.ScalarOp,X,Y](implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Int],Long,org.saddle.Vec[Long]]):BinOpFrame.this.FrScEOp[Op,X,Y,Int,Long,Long]", "kind" : "implicit def"}, {"label" : "FrScEOpIDD", "tail" : "(opv: BinOp[Op, Vec[Int], Double, Vec[Double]]): FrScEOp[Op, X, Y, Int, Double, Double]", "member" : "org.saddle.ops.BinOpFrame.FrScEOpIDD", "link" : "org\/saddle\/Frame$.html#FrScEOpIDD[Op<:org.saddle.ops.ScalarOp,X,Y](implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Int],Double,org.saddle.Vec[Double]]):BinOpFrame.this.FrScEOp[Op,X,Y,Int,Double,Double]", "kind" : "implicit def"}, {"label" : "FrScEOpLIL", "tail" : "(opv: BinOp[Op, Vec[Long], Int, Vec[Long]]): FrScEOp[Op, X, Y, Long, Int, Long]", "member" : "org.saddle.ops.BinOpFrame.FrScEOpLIL", "link" : "org\/saddle\/Frame$.html#FrScEOpLIL[Op<:org.saddle.ops.ScalarOp,X,Y](implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Long],Int,org.saddle.Vec[Long]]):BinOpFrame.this.FrScEOp[Op,X,Y,Long,Int,Long]", "kind" : "implicit def"}, {"label" : "FrScEOpLLL", "tail" : "(opv: BinOp[Op, Vec[Long], Long, Vec[Long]]): FrScEOp[Op, X, Y, Long, Long, Long]", "member" : "org.saddle.ops.BinOpFrame.FrScEOpLLL", "link" : "org\/saddle\/Frame$.html#FrScEOpLLL[Op<:org.saddle.ops.ScalarOp,X,Y](implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Long],Long,org.saddle.Vec[Long]]):BinOpFrame.this.FrScEOp[Op,X,Y,Long,Long,Long]", "kind" : "implicit def"}, {"label" : "FrScEOpLDD", "tail" : "(opv: BinOp[Op, Vec[Long], Double, Vec[Double]]): FrScEOp[Op, X, Y, Long, Double, Double]", "member" : "org.saddle.ops.BinOpFrame.FrScEOpLDD", "link" : "org\/saddle\/Frame$.html#FrScEOpLDD[Op<:org.saddle.ops.ScalarOp,X,Y](implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Long],Double,org.saddle.Vec[Double]]):BinOpFrame.this.FrScEOp[Op,X,Y,Long,Double,Double]", "kind" : "implicit def"}, {"label" : "FrScEOpDID", "tail" : "(opv: BinOp[Op, Vec[Double], Int, Vec[Double]]): FrScEOp[Op, X, Y, Double, Int, Double]", "member" : "org.saddle.ops.BinOpFrame.FrScEOpDID", "link" : "org\/saddle\/Frame$.html#FrScEOpDID[Op<:org.saddle.ops.ScalarOp,X,Y](implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Double],Int,org.saddle.Vec[Double]]):BinOpFrame.this.FrScEOp[Op,X,Y,Double,Int,Double]", "kind" : "implicit def"}, {"label" : "FrScEOpDLD", "tail" : "(opv: BinOp[Op, Vec[Double], Long, Vec[Double]]): FrScEOp[Op, X, Y, Double, Long, Double]", "member" : "org.saddle.ops.BinOpFrame.FrScEOpDLD", "link" : "org\/saddle\/Frame$.html#FrScEOpDLD[Op<:org.saddle.ops.ScalarOp,X,Y](implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Double],Long,org.saddle.Vec[Double]]):BinOpFrame.this.FrScEOp[Op,X,Y,Double,Long,Double]", "kind" : "implicit def"}, {"label" : "FrScEOpDDD", "tail" : "(opv: BinOp[Op, Vec[Double], Double, Vec[Double]]): FrScEOp[Op, X, Y, Double, Double, Double]", "member" : "org.saddle.ops.BinOpFrame.FrScEOpDDD", "link" : "org\/saddle\/Frame$.html#FrScEOpDDD[Op<:org.saddle.ops.ScalarOp,X,Y](implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Double],Double,org.saddle.Vec[Double]]):BinOpFrame.this.FrScEOp[Op,X,Y,Double,Double,Double]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/saddle\/Frame$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/saddle\/Frame$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/saddle\/Frame$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/saddle\/Frame$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/saddle\/Frame$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/saddle\/Frame$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/saddle\/Frame$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/Frame$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/Frame$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/Frame$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/saddle\/Frame$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/saddle\/Frame$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/saddle\/Frame$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/saddle\/Frame$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/saddle\/Frame$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/saddle\/Frame$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "org\/saddle\/Frame$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/saddle\/Frame$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/saddle\/Frame$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/saddle\/Frame.html", "kind" : "class"}, {"name" : "org.saddle.Index", "object" : "org\/saddle\/Index$.html", "members_object" : [{"label" : "IndexException", "tail" : "", "member" : "org.saddle.Index.IndexException", "link" : "org\/saddle\/Index$.html#IndexExceptionextendsRuntimeExceptionwithProductwithSerializable", "kind" : "case class"}, {"label" : "empty", "tail" : "(arg0: ST[C], arg1: ORD[C]): Index[C]", "member" : "org.saddle.Index.empty", "link" : "org\/saddle\/Index$.html#empty[C](implicitevidence$9:org.saddle.ST[C],implicitevidence$10:org.saddle.ORD[C]):org.saddle.Index[C]", "kind" : "def"}, {"label" : "make", "tail" : "(values: I)(ev: IndexMaker[I, O]): Index[O]", "member" : "org.saddle.Index.make", "link" : "org\/saddle\/Index$.html#make[I,O](values:I)(implicitev:org.saddle.index.IndexMaker[I,O]):org.saddle.Index[O]", "kind" : "def"}, {"label" : "apply", "tail" : "(values: C*)(arg0: ST[C], arg1: ORD[C]): Index[C]", "member" : "org.saddle.Index.apply", "link" : "org\/saddle\/Index$.html#apply[C](values:C*)(implicitevidence$7:org.saddle.ST[C],implicitevidence$8:org.saddle.ORD[C]):org.saddle.Index[C]", "kind" : "def"}, {"label" : "apply", "tail" : "(arr: Array[C])(arg0: ST[C], arg1: ORD[C]): Index[C]", "member" : "org.saddle.Index.apply", "link" : "org\/saddle\/Index$.html#apply[C](arr:Array[C])(implicitevidence$5:org.saddle.ST[C],implicitevidence$6:org.saddle.ORD[C]):org.saddle.Index[C]", "kind" : "def"}, {"label" : "apply", "tail" : "(values: Vec[C])(arg0: ST[C], arg1: ORD[C]): Index[C]", "member" : "org.saddle.Index.apply", "link" : "org\/saddle\/Index$.html#apply[C](values:org.saddle.Vec[C])(implicitevidence$3:org.saddle.ST[C],implicitevidence$4:org.saddle.ORD[C]):org.saddle.Index[C]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/saddle\/Index$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/saddle\/Index$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/saddle\/Index$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/saddle\/Index$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/saddle\/Index$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/saddle\/Index$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/saddle\/Index$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/Index$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/Index$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/Index$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/saddle\/Index$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/saddle\/Index$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/saddle\/Index$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/saddle\/Index$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/saddle\/Index$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/saddle\/Index$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "org\/saddle\/Index$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/saddle\/Index$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/saddle\/Index$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "org\/saddle\/Index.html", "kind" : "trait", "members_trait" : [{"label" : "toString", "tail" : "(): String", "member" : "org.saddle.Index.toString", "link" : "org\/saddle\/Index.html#toString():String", "kind" : "def"}, {"label" : "print", "tail" : "(len: Int, stream: OutputStream): Unit", "member" : "org.saddle.Index.print", "link" : "org\/saddle\/Index.html#print(len:Int,stream:java.io.OutputStream):Unit", "kind" : "def"}, {"label" : "stringify", "tail" : "(len: Int): String", "member" : "org.saddle.Index.stringify", "link" : "org\/saddle\/Index.html#stringify(len:Int):String", "kind" : "def"}, {"label" : "equals", "tail" : "(o: Any): Boolean", "member" : "org.saddle.Index.equals", "link" : "org\/saddle\/Index.html#equals(o:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "org.saddle.Index.hashCode", "link" : "org\/saddle\/Index.html#hashCode():Int", "kind" : "def"}, {"label" : "toSeq", "tail" : "(): IndexedSeq[T]", "member" : "org.saddle.Index.toSeq", "link" : "org\/saddle\/Index.html#toSeq:IndexedSeq[T]", "kind" : "def"}, {"label" : "next", "tail" : "(current: Scalar[T]): Scalar[T]", "member" : "org.saddle.Index.next", "link" : "org\/saddle\/Index.html#next(current:org.saddle.scalar.Scalar[T]):org.saddle.scalar.Scalar[T]", "kind" : "def"}, {"label" : "prev", "tail" : "(current: Scalar[T]): Scalar[T]", "member" : "org.saddle.Index.prev", "link" : "org\/saddle\/Index.html#prev(current:org.saddle.scalar.Scalar[T]):org.saddle.scalar.Scalar[T]", "kind" : "def"}, {"label" : "contains", "tail" : "(key: T): Boolean", "member" : "org.saddle.Index.contains", "link" : "org\/saddle\/Index.html#contains(key:T):Boolean", "kind" : "def"}, {"label" : "getIndexer", "tail" : "(other: Index[T]): Option[Array[Int]]", "member" : "org.saddle.Index.getIndexer", "link" : "org\/saddle\/Index.html#getIndexer(other:org.saddle.Index[T]):Option[Array[Int]]", "kind" : "def"}, {"label" : "split", "tail" : "(ev: Splitter[T, O1, O2]): (Index[O1], Index[O2])", "member" : "org.saddle.Index.split", "link" : "org\/saddle\/Index.html#split[O1,O2](implicitev:org.saddle.index.Splitter[T,O1,O2]):(org.saddle.Index[O1],org.saddle.Index[O2])", "kind" : "def"}, {"label" : "stack", "tail" : "(other: Index[U])(ev: Stacker[T, U, V]): Index[V]", "member" : "org.saddle.Index.stack", "link" : "org\/saddle\/Index.html#stack[U,V](other:org.saddle.Index[U])(implicitev:org.saddle.index.Stacker[T,U,V]):org.saddle.Index[V]", "kind" : "def"}, {"label" : "dropLevel", "tail" : "(ev: Splitter[T, U, _]): Index[U]", "member" : "org.saddle.Index.dropLevel", "link" : "org\/saddle\/Index.html#dropLevel[U](implicitev:org.saddle.index.Splitter[T,U,_]):org.saddle.Index[U]", "kind" : "def"}, {"label" : "exists", "tail" : "(pred: (T) => Boolean): Boolean", "member" : "org.saddle.Index.exists", "link" : "org\/saddle\/Index.html#exists(pred:T=>Boolean):Boolean", "kind" : "def"}, {"label" : "findOne", "tail" : "(pred: (T) => Boolean): Int", "member" : "org.saddle.Index.findOne", "link" : "org\/saddle\/Index.html#findOne(pred:T=>Boolean):Int", "kind" : "def"}, {"label" : "sorted", "tail" : "(): Index[T]", "member" : "org.saddle.Index.sorted", "link" : "org\/saddle\/Index.html#sorted:org.saddle.Index[T]", "kind" : "def"}, {"label" : "last", "tail" : "(): Scalar[T]", "member" : "org.saddle.Index.last", "link" : "org\/saddle\/Index.html#last:org.saddle.scalar.Scalar[T]", "kind" : "def"}, {"label" : "first", "tail" : "(): Scalar[T]", "member" : "org.saddle.Index.first", "link" : "org\/saddle\/Index.html#first:org.saddle.scalar.Scalar[T]", "kind" : "def"}, {"label" : "tail", "tail" : "(n: Int): Index[T]", "member" : "org.saddle.Index.tail", "link" : "org\/saddle\/Index.html#tail(n:Int):org.saddle.Index[T]", "kind" : "def"}, {"label" : "head", "tail" : "(n: Int): Index[T]", "member" : "org.saddle.Index.head", "link" : "org\/saddle\/Index.html#head(n:Int):org.saddle.Index[T]", "kind" : "def"}, {"label" : "get", "tail" : "(key: T): Array[Int]", "member" : "org.saddle.Index.get", "link" : "org\/saddle\/Index.html#get(key:T):Array[Int]", "kind" : "def"}, {"label" : "getLast", "tail" : "(key: T): Int", "member" : "org.saddle.Index.getLast", "link" : "org\/saddle\/Index.html#getLast(key:T):Int", "kind" : "def"}, {"label" : "getFirst", "tail" : "(key: T): Int", "member" : "org.saddle.Index.getFirst", "link" : "org\/saddle\/Index.html#getFirst(key:T):Int", "kind" : "def"}, {"label" : "count", "tail" : "(key: T): Int", "member" : "org.saddle.Index.count", "link" : "org\/saddle\/Index.html#count(key:T):Int", "kind" : "def"}, {"label" : "counts", "tail" : "(): Array[Int]", "member" : "org.saddle.Index.counts", "link" : "org\/saddle\/Index.html#counts:Array[Int]", "kind" : "def"}, {"label" : "toUniqueIndex", "tail" : "(ord: ORD[T]): Index[(T, Int)]", "member" : "org.saddle.Index.toUniqueIndex", "link" : "org\/saddle\/Index.html#toUniqueIndex(implicitord:org.saddle.ORD[T]):org.saddle.Index[(T,Int)]", "kind" : "def"}, {"label" : "uniques", "tail" : "(ord: ORD[T], tag: ST[T]): Index[T]", "member" : "org.saddle.Index.uniques", "link" : "org\/saddle\/Index.html#uniques(implicitord:org.saddle.ORD[T],implicittag:org.saddle.ST[T]):org.saddle.Index[T]", "kind" : "def"}, {"label" : "isUnique", "tail" : "(): Boolean", "member" : "org.saddle.Index.isUnique", "link" : "org\/saddle\/Index.html#isUnique:Boolean", "kind" : "def"}, {"label" : "sliceBy", "tail" : "(rng: Slice[T]): Index[T]", "member" : "org.saddle.Index.sliceBy", "link" : "org\/saddle\/Index.html#sliceBy(rng:org.saddle.index.Slice[T]):org.saddle.Index[T]", "kind" : "def"}, {"label" : "sliceBy", "tail" : "(from: T, to: T, inclusive: Boolean): Index[T]", "member" : "org.saddle.Index.sliceBy", "link" : "org\/saddle\/Index.html#sliceBy(from:T,to:T,inclusive:Boolean):org.saddle.Index[T]", "kind" : "def"}, {"label" : "distinct", "tail" : "(st: ST[T], ord: ORD[T]): Index[T]", "member" : "org.saddle.Index.distinct", "link" : "org\/saddle\/Index.html#distinct(implicitst:org.saddle.ST[T],implicitord:org.saddle.ORD[T]):org.saddle.Index[T]", "kind" : "def"}, {"label" : "apply", "tail" : "(keys: Array[T]): Array[Int]", "member" : "org.saddle.Index.apply", "link" : "org\/saddle\/Index.html#apply(keys:Array[T]):Array[Int]", "kind" : "def"}, {"label" : "apply", "tail" : "(keys: T*): Array[Int]", "member" : "org.saddle.Index.apply", "link" : "org\/saddle\/Index.html#apply(keys:T*):Array[Int]", "kind" : "def"}, {"label" : "firsts", "tail" : "(keys: Array[T]): Array[Int]", "member" : "org.saddle.Index.firsts", "link" : "org\/saddle\/Index.html#firsts(keys:Array[T]):Array[Int]", "kind" : "def"}, {"label" : "at", "tail" : "(locs: Int*): Index[T]", "member" : "org.saddle.Index.at", "link" : "org\/saddle\/Index.html#at(locs:Int*):org.saddle.Index[T]", "kind" : "def"}, {"label" : "at", "tail" : "(locs: Array[Int]): Index[T]", "member" : "org.saddle.Index.at", "link" : "org\/saddle\/Index.html#at(locs:Array[Int]):org.saddle.Index[T]", "kind" : "def"}, {"label" : "at", "tail" : "(loc: Int): Scalar[T]", "member" : "org.saddle.Index.at", "link" : "org\/saddle\/Index.html#at(loc:Int):org.saddle.scalar.Scalar[T]", "kind" : "def"}, {"label" : "nonEmpty", "tail" : "(): Boolean", "member" : "org.saddle.Index.nonEmpty", "link" : "org\/saddle\/Index.html#nonEmpty:Boolean", "kind" : "def"}, {"label" : "isEmpty", "tail" : "(): Boolean", "member" : "org.saddle.Index.isEmpty", "link" : "org\/saddle\/Index.html#isEmpty:Boolean", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/saddle\/Index.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/saddle\/Index.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/saddle\/Index.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/saddle\/Index.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/saddle\/Index.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/saddle\/Index.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/saddle\/Index.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/Index.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/Index.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/Index.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/saddle\/Index.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/saddle\/Index.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/saddle\/Index.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "org\/saddle\/Index.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/saddle\/Index.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/saddle\/Index.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "map", "tail" : "(f: (T) => B)(arg0: ST[B], arg1: ORD[B]): Index[B]", "member" : "org.saddle.Index.map", "link" : "org\/saddle\/Index.html#map[B](f:T=>B)(implicitevidence$1:org.saddle.ST[B],implicitevidence$2:org.saddle.ORD[B]):org.saddle.Index[B]", "kind" : "abstract def"}, {"label" : "join", "tail" : "(other: Index[T], how: JoinType): ReIndexer[T]", "member" : "org.saddle.Index.join", "link" : "org\/saddle\/Index.html#join(other:org.saddle.Index[T],how:org.saddle.index.JoinType):org.saddle.index.ReIndexer[T]", "kind" : "abstract def"}, {"label" : "argSort", "tail" : "(): Array[Int]", "member" : "org.saddle.Index.argSort", "link" : "org\/saddle\/Index.html#argSort:Array[Int]", "kind" : "abstract def"}, {"label" : "isContiguous", "tail" : "(): Boolean", "member" : "org.saddle.Index.isContiguous", "link" : "org\/saddle\/Index.html#isContiguous:Boolean", "kind" : "abstract def"}, {"label" : "isMonotonic", "tail" : "(): Boolean", "member" : "org.saddle.Index.isMonotonic", "link" : "org\/saddle\/Index.html#isMonotonic:Boolean", "kind" : "abstract def"}, {"label" : "union", "tail" : "(other: Index[T]): ReIndexer[T]", "member" : "org.saddle.Index.union", "link" : "org\/saddle\/Index.html#union(other:org.saddle.Index[T]):org.saddle.index.ReIndexer[T]", "kind" : "abstract def"}, {"label" : "intersect", "tail" : "(other: Index[T]): ReIndexer[T]", "member" : "org.saddle.Index.intersect", "link" : "org\/saddle\/Index.html#intersect(other:org.saddle.Index[T]):org.saddle.index.ReIndexer[T]", "kind" : "abstract def"}, {"label" : "reversed", "tail" : "(): Index[T]", "member" : "org.saddle.Index.reversed", "link" : "org\/saddle\/Index.html#reversed:org.saddle.Index[T]", "kind" : "abstract def"}, {"label" : "slice", "tail" : "(from: Int, until: Int, stride: Int): Index[T]", "member" : "org.saddle.Index.slice", "link" : "org\/saddle\/Index.html#slice(from:Int,until:Int,stride:Int):org.saddle.Index[T]", "kind" : "abstract def"}, {"label" : "rsearch", "tail" : "(t: T): Int", "member" : "org.saddle.Index.rsearch", "link" : "org\/saddle\/Index.html#rsearch(t:T):Int", "kind" : "abstract def"}, {"label" : "lsearch", "tail" : "(t: T): Int", "member" : "org.saddle.Index.lsearch", "link" : "org\/saddle\/Index.html#lsearch(t:T):Int", "kind" : "abstract def"}, {"label" : "concat", "tail" : "(other: Index[T]): Index[T]", "member" : "org.saddle.Index.concat", "link" : "org\/saddle\/Index.html#concat(other:org.saddle.Index[T]):org.saddle.Index[T]", "kind" : "abstract def"}, {"label" : "without", "tail" : "(locs: Array[Int]): Index[T]", "member" : "org.saddle.Index.without", "link" : "org\/saddle\/Index.html#without(locs:Array[Int]):org.saddle.Index[T]", "kind" : "abstract def"}, {"label" : "take", "tail" : "(locs: Array[Int]): Index[T]", "member" : "org.saddle.Index.take", "link" : "org\/saddle\/Index.html#take(locs:Array[Int]):org.saddle.Index[T]", "kind" : "abstract def"}, {"label" : "raw", "tail" : "(loc: Int): T", "member" : "org.saddle.Index.raw", "link" : "org\/saddle\/Index.html#raw(loc:Int):T", "kind" : "abstract def"}, {"label" : "toVec", "tail" : "(): Vec[T]", "member" : "org.saddle.Index.toVec", "link" : "org\/saddle\/Index.html#toVec:org.saddle.Vec[T]", "kind" : "abstract def"}, {"label" : "ord", "tail" : "(): ORD[T]", "member" : "org.saddle.Index.ord", "link" : "org\/saddle\/Index.html#ord:org.saddle.ORD[T]", "kind" : "abstract def"}, {"label" : "scalarTag", "tail" : "(): ScalarTag[T]", "member" : "org.saddle.Index.scalarTag", "link" : "org\/saddle\/Index.html#scalarTag:org.saddle.scalar.ScalarTag[T]", "kind" : "abstract def"}, {"label" : "length", "tail" : "(): Int", "member" : "org.saddle.Index.length", "link" : "org\/saddle\/Index.html#length:Int", "kind" : "abstract def"}, {"label" : "locatorAll", "tail" : "(): Option[LocatorAll[T]]", "member" : "org.saddle.Index.locatorAll", "link" : "org\/saddle\/Index.html#locatorAll:Option[org.saddle.locatorall.LocatorAll[T]]", "kind" : "abstract def"}, {"label" : "locator", "tail" : "(): Locator[T]", "member" : "org.saddle.Index.locator", "link" : "org\/saddle\/Index.html#locator:org.saddle.locator.Locator[T]", "kind" : "abstract def"}], "shortDescription" : "Index provides a constant-time look-up of a value within array-backedstorage, as well as operations to support joining and slicing."}, {"name" : "org.saddle.intIsNumeric", "shortDescription" : "", "object" : "org\/saddle\/intIsNumeric$.html", "members_object" : [{"label" : "compare", "tail" : "(a: Int, b: Int): Int", "member" : "org.saddle.intIsNumeric.compare", "link" : "org\/saddle\/intIsNumeric$.html#compare(a:Int,b:Int):Int", "kind" : "def"}, {"label" : "toDouble", "tail" : "(a: Int): Double", "member" : "org.saddle.intIsNumeric.toDouble", "link" : "org\/saddle\/intIsNumeric$.html#toDouble(a:Int):Double", "kind" : "def"}, {"label" : "times", "tail" : "(a: Int, b: Int): Int", "member" : "org.saddle.intIsNumeric.times", "link" : "org\/saddle\/intIsNumeric$.html#times(a:Int,b:Int):Int", "kind" : "def"}, {"label" : "one", "tail" : "(): Int", "member" : "org.saddle.intIsNumeric.one", "link" : "org\/saddle\/intIsNumeric$.html#one:Int", "kind" : "def"}, {"label" : "zero", "tail" : "(): Int", "member" : "org.saddle.intIsNumeric.zero", "link" : "org\/saddle\/intIsNumeric$.html#zero:Int", "kind" : "def"}, {"label" : "abs", "tail" : "(a: Int): Int", "member" : "org.saddle.intIsNumeric.abs", "link" : "org\/saddle\/intIsNumeric$.html#abs(a:Int):Int", "kind" : "def"}, {"label" : "negate", "tail" : "(a: Int): Int", "member" : "org.saddle.intIsNumeric.negate", "link" : "org\/saddle\/intIsNumeric$.html#negate(a:Int):Int", "kind" : "def"}, {"label" : "minus", "tail" : "(a: Int, b: Int): Int", "member" : "org.saddle.intIsNumeric.minus", "link" : "org\/saddle\/intIsNumeric$.html#minus(a:Int,b:Int):Int", "kind" : "def"}, {"label" : "plus", "tail" : "(a: Int, b: Int): Int", "member" : "org.saddle.intIsNumeric.plus", "link" : "org\/saddle\/intIsNumeric$.html#plus(a:Int,b:Int):Int", "kind" : "def"}, {"label" : "toOrdering", "tail" : "(): Ordering[Int]", "member" : "cats.kernel.Order.toOrdering", "link" : "org\/saddle\/intIsNumeric$.html#toOrdering:Ordering[A]", "kind" : "def"}, {"label" : "gt", "tail" : "(x: Int, y: Int): Boolean", "member" : "cats.kernel.Order.gt", "link" : "org\/saddle\/intIsNumeric$.html#gt(x:A,y:A):Boolean", "kind" : "def"}, {"label" : "gteqv", "tail" : "(x: Int, y: Int): Boolean", "member" : "cats.kernel.Order.gteqv", "link" : "org\/saddle\/intIsNumeric$.html#gteqv(x:A,y:A):Boolean", "kind" : "def"}, {"label" : "lt", "tail" : "(x: Int, y: Int): Boolean", "member" : "cats.kernel.Order.lt", "link" : "org\/saddle\/intIsNumeric$.html#lt(x:A,y:A):Boolean", "kind" : "def"}, {"label" : "lteqv", "tail" : "(x: Int, y: Int): Boolean", "member" : "cats.kernel.Order.lteqv", "link" : "org\/saddle\/intIsNumeric$.html#lteqv(x:A,y:A):Boolean", "kind" : "def"}, {"label" : "neqv", "tail" : "(x: Int, y: Int): Boolean", "member" : "cats.kernel.Order.neqv", "link" : "org\/saddle\/intIsNumeric$.html#neqv(x:A,y:A):Boolean", "kind" : "def"}, {"label" : "eqv", "tail" : "(x: Int, y: Int): Boolean", "member" : "cats.kernel.Order.eqv", "link" : "org\/saddle\/intIsNumeric$.html#eqv(x:A,y:A):Boolean", "kind" : "def"}, {"label" : "max", "tail" : "(x: Int, y: Int): Int", "member" : "cats.kernel.Order.max", "link" : "org\/saddle\/intIsNumeric$.html#max(x:A,y:A):A", "kind" : "def"}, {"label" : "min", "tail" : "(x: Int, y: Int): Int", "member" : "cats.kernel.Order.min", "link" : "org\/saddle\/intIsNumeric$.html#min(x:A,y:A):A", "kind" : "def"}, {"label" : "partialCompare", "tail" : "(x: Int, y: Int): Double", "member" : "cats.kernel.Order.partialCompare", "link" : "org\/saddle\/intIsNumeric$.html#partialCompare(x:A,y:A):Double", "kind" : "def"}, {"label" : "comparison", "tail" : "(x: Int, y: Int): Comparison", "member" : "cats.kernel.Order.comparison", "link" : "org\/saddle\/intIsNumeric$.html#comparison(x:A,y:A):cats.kernel.Comparison", "kind" : "def"}, {"label" : "pmax", "tail" : "(x: Int, y: Int): Option[Int]", "member" : "cats.kernel.PartialOrder.pmax", "link" : "org\/saddle\/intIsNumeric$.html#pmax(x:A,y:A):Option[A]", "kind" : "def"}, {"label" : "pmin", "tail" : "(x: Int, y: Int): Option[Int]", "member" : "cats.kernel.PartialOrder.pmin", "link" : "org\/saddle\/intIsNumeric$.html#pmin(x:A,y:A):Option[A]", "kind" : "def"}, {"label" : "tryCompare", "tail" : "(x: Int, y: Int): Option[Int]", "member" : "cats.kernel.PartialOrder.tryCompare", "link" : "org\/saddle\/intIsNumeric$.html#tryCompare(x:A,y:A):Option[Int]", "kind" : "def"}, {"label" : "partialComparison", "tail" : "(x: Int, y: Int): Option[Comparison]", "member" : "cats.kernel.PartialOrder.partialComparison", "link" : "org\/saddle\/intIsNumeric$.html#partialComparison(x:A,y:A):Option[cats.kernel.Comparison]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/saddle\/intIsNumeric$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/saddle\/intIsNumeric$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/saddle\/intIsNumeric$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/saddle\/intIsNumeric$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/saddle\/intIsNumeric$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/saddle\/intIsNumeric$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/saddle\/intIsNumeric$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/intIsNumeric$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/intIsNumeric$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/intIsNumeric$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/saddle\/intIsNumeric$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/saddle\/intIsNumeric$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/saddle\/intIsNumeric$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/saddle\/intIsNumeric$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/saddle\/intIsNumeric$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/saddle\/intIsNumeric$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "org\/saddle\/intIsNumeric$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/saddle\/intIsNumeric$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/saddle\/intIsNumeric$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "org.saddle.longIsNumeric", "shortDescription" : "", "object" : "org\/saddle\/longIsNumeric$.html", "members_object" : [{"label" : "compare", "tail" : "(a: Long, b: Long): Int", "member" : "org.saddle.longIsNumeric.compare", "link" : "org\/saddle\/longIsNumeric$.html#compare(a:Long,b:Long):Int", "kind" : "def"}, {"label" : "toDouble", "tail" : "(a: Long): Double", "member" : "org.saddle.longIsNumeric.toDouble", "link" : "org\/saddle\/longIsNumeric$.html#toDouble(a:Long):Double", "kind" : "def"}, {"label" : "times", "tail" : "(a: Long, b: Long): Long", "member" : "org.saddle.longIsNumeric.times", "link" : "org\/saddle\/longIsNumeric$.html#times(a:Long,b:Long):Long", "kind" : "def"}, {"label" : "one", "tail" : "(): Long", "member" : "org.saddle.longIsNumeric.one", "link" : "org\/saddle\/longIsNumeric$.html#one:Long", "kind" : "def"}, {"label" : "zero", "tail" : "(): Long", "member" : "org.saddle.longIsNumeric.zero", "link" : "org\/saddle\/longIsNumeric$.html#zero:Long", "kind" : "def"}, {"label" : "abs", "tail" : "(a: Long): Long", "member" : "org.saddle.longIsNumeric.abs", "link" : "org\/saddle\/longIsNumeric$.html#abs(a:Long):Long", "kind" : "def"}, {"label" : "negate", "tail" : "(a: Long): Long", "member" : "org.saddle.longIsNumeric.negate", "link" : "org\/saddle\/longIsNumeric$.html#negate(a:Long):Long", "kind" : "def"}, {"label" : "minus", "tail" : "(a: Long, b: Long): Long", "member" : "org.saddle.longIsNumeric.minus", "link" : "org\/saddle\/longIsNumeric$.html#minus(a:Long,b:Long):Long", "kind" : "def"}, {"label" : "plus", "tail" : "(a: Long, b: Long): Long", "member" : "org.saddle.longIsNumeric.plus", "link" : "org\/saddle\/longIsNumeric$.html#plus(a:Long,b:Long):Long", "kind" : "def"}, {"label" : "toOrdering", "tail" : "(): Ordering[Long]", "member" : "cats.kernel.Order.toOrdering", "link" : "org\/saddle\/longIsNumeric$.html#toOrdering:Ordering[A]", "kind" : "def"}, {"label" : "gt", "tail" : "(x: Long, y: Long): Boolean", "member" : "cats.kernel.Order.gt", "link" : "org\/saddle\/longIsNumeric$.html#gt(x:A,y:A):Boolean", "kind" : "def"}, {"label" : "gteqv", "tail" : "(x: Long, y: Long): Boolean", "member" : "cats.kernel.Order.gteqv", "link" : "org\/saddle\/longIsNumeric$.html#gteqv(x:A,y:A):Boolean", "kind" : "def"}, {"label" : "lt", "tail" : "(x: Long, y: Long): Boolean", "member" : "cats.kernel.Order.lt", "link" : "org\/saddle\/longIsNumeric$.html#lt(x:A,y:A):Boolean", "kind" : "def"}, {"label" : "lteqv", "tail" : "(x: Long, y: Long): Boolean", "member" : "cats.kernel.Order.lteqv", "link" : "org\/saddle\/longIsNumeric$.html#lteqv(x:A,y:A):Boolean", "kind" : "def"}, {"label" : "neqv", "tail" : "(x: Long, y: Long): Boolean", "member" : "cats.kernel.Order.neqv", "link" : "org\/saddle\/longIsNumeric$.html#neqv(x:A,y:A):Boolean", "kind" : "def"}, {"label" : "eqv", "tail" : "(x: Long, y: Long): Boolean", "member" : "cats.kernel.Order.eqv", "link" : "org\/saddle\/longIsNumeric$.html#eqv(x:A,y:A):Boolean", "kind" : "def"}, {"label" : "max", "tail" : "(x: Long, y: Long): Long", "member" : "cats.kernel.Order.max", "link" : "org\/saddle\/longIsNumeric$.html#max(x:A,y:A):A", "kind" : "def"}, {"label" : "min", "tail" : "(x: Long, y: Long): Long", "member" : "cats.kernel.Order.min", "link" : "org\/saddle\/longIsNumeric$.html#min(x:A,y:A):A", "kind" : "def"}, {"label" : "partialCompare", "tail" : "(x: Long, y: Long): Double", "member" : "cats.kernel.Order.partialCompare", "link" : "org\/saddle\/longIsNumeric$.html#partialCompare(x:A,y:A):Double", "kind" : "def"}, {"label" : "comparison", "tail" : "(x: Long, y: Long): Comparison", "member" : "cats.kernel.Order.comparison", "link" : "org\/saddle\/longIsNumeric$.html#comparison(x:A,y:A):cats.kernel.Comparison", "kind" : "def"}, {"label" : "pmax", "tail" : "(x: Long, y: Long): Option[Long]", "member" : "cats.kernel.PartialOrder.pmax", "link" : "org\/saddle\/longIsNumeric$.html#pmax(x:A,y:A):Option[A]", "kind" : "def"}, {"label" : "pmin", "tail" : "(x: Long, y: Long): Option[Long]", "member" : "cats.kernel.PartialOrder.pmin", "link" : "org\/saddle\/longIsNumeric$.html#pmin(x:A,y:A):Option[A]", "kind" : "def"}, {"label" : "tryCompare", "tail" : "(x: Long, y: Long): Option[Int]", "member" : "cats.kernel.PartialOrder.tryCompare", "link" : "org\/saddle\/longIsNumeric$.html#tryCompare(x:A,y:A):Option[Int]", "kind" : "def"}, {"label" : "partialComparison", "tail" : "(x: Long, y: Long): Option[Comparison]", "member" : "cats.kernel.PartialOrder.partialComparison", "link" : "org\/saddle\/longIsNumeric$.html#partialComparison(x:A,y:A):Option[cats.kernel.Comparison]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/saddle\/longIsNumeric$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/saddle\/longIsNumeric$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/saddle\/longIsNumeric$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/saddle\/longIsNumeric$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/saddle\/longIsNumeric$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/saddle\/longIsNumeric$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/saddle\/longIsNumeric$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/longIsNumeric$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/longIsNumeric$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/longIsNumeric$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/saddle\/longIsNumeric$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/saddle\/longIsNumeric$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/saddle\/longIsNumeric$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/saddle\/longIsNumeric$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/saddle\/longIsNumeric$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/saddle\/longIsNumeric$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "org\/saddle\/longIsNumeric$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/saddle\/longIsNumeric$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/saddle\/longIsNumeric$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "org.saddle.Mat", "shortDescription" : "Mat is an immutable container for 2D homogeneous data (a \"matrix\").", "object" : "org\/saddle\/Mat$.html", "members_class" : [{"label" : "reduceCols", "tail" : "(f: (Vec[T], Int) => B)(arg0: ST[B]): Vec[B]", "member" : "org.saddle.Mat.reduceCols", "link" : "org\/saddle\/Mat.html#reduceCols[B](f:(org.saddle.Vec[T],Int)=>B)(implicitevidence$5:org.saddle.ST[B]):org.saddle.Vec[B]", "kind" : "def"}, {"label" : "reduceRows", "tail" : "(f: (Vec[T], Int) => B)(arg0: ST[B]): Vec[B]", "member" : "org.saddle.Mat.reduceRows", "link" : "org\/saddle\/Mat.html#reduceRows[B](f:(org.saddle.Vec[T],Int)=>B)(implicitevidence$4:org.saddle.ST[B]):org.saddle.Vec[B]", "kind" : "def"}, {"label" : "mutateCols", "tail" : "(f: (Vec[T], Int) => Vec[T]): Unit", "member" : "org.saddle.Mat.mutateCols", "link" : "org\/saddle\/Mat.html#mutateCols(f:(org.saddle.Vec[T],Int)=>org.saddle.Vec[T]):Unit", "kind" : "def"}, {"label" : "mapCols", "tail" : "(f: (Vec[T], Int) => Vec[B])(arg0: ST[B]): Mat[B]", "member" : "org.saddle.Mat.mapCols", "link" : "org\/saddle\/Mat.html#mapCols[B](f:(org.saddle.Vec[T],Int)=>org.saddle.Vec[B])(implicitevidence$3:org.saddle.ST[B]):org.saddle.Mat[B]", "kind" : "def"}, {"label" : "mutateRows", "tail" : "(f: (Vec[T], Int) => Vec[T]): Unit", "member" : "org.saddle.Mat.mutateRows", "link" : "org\/saddle\/Mat.html#mutateRows(f:(org.saddle.Vec[T],Int)=>org.saddle.Vec[T]):Unit", "kind" : "def"}, {"label" : "mapRows", "tail" : "(f: (Vec[T], Int) => Vec[B])(arg0: ST[B]): Mat[B]", "member" : "org.saddle.Mat.mapRows", "link" : "org\/saddle\/Mat.html#mapRows[B](f:(org.saddle.Vec[T],Int)=>org.saddle.Vec[B])(implicitevidence$2:org.saddle.ST[B]):org.saddle.Mat[B]", "kind" : "def"}, {"label" : "mutateSetUpperTriangle", "tail" : "(v: T): Unit", "member" : "org.saddle.Mat.mutateSetUpperTriangle", "link" : "org\/saddle\/Mat.html#mutateSetUpperTriangle(v:T):Unit", "kind" : "def"}, {"label" : "mutateSetLowerTriangle", "tail" : "(v: T): Unit", "member" : "org.saddle.Mat.mutateSetLowerTriangle", "link" : "org\/saddle\/Mat.html#mutateSetLowerTriangle(v:T):Unit", "kind" : "def"}, {"label" : "mutateSetDiagonal", "tail" : "(v: T): Unit", "member" : "org.saddle.Mat.mutateSetDiagonal", "link" : "org\/saddle\/Mat.html#mutateSetDiagonal(v:T):Unit", "kind" : "def"}, {"label" : "mutateSetColumn", "tail" : "(c: Int, v: T): Unit", "member" : "org.saddle.Mat.mutateSetColumn", "link" : "org\/saddle\/Mat.html#mutateSetColumn(c:Int,v:T):Unit", "kind" : "def"}, {"label" : "mutateSetRow", "tail" : "(r: Int, v: T): Unit", "member" : "org.saddle.Mat.mutateSetRow", "link" : "org\/saddle\/Mat.html#mutateSetRow(r:Int,v:T):Unit", "kind" : "def"}, {"label" : "update", "tail" : "(r: Int, c: Int, v: T): Unit", "member" : "org.saddle.Mat.update", "link" : "org\/saddle\/Mat.html#update(r:Int,c:Int,v:T):Unit", "kind" : "def"}, {"label" : "mutateSetCell", "tail" : "(r: Int, c: Int, v: T): Unit", "member" : "org.saddle.Mat.mutateSetCell", "link" : "org\/saddle\/Mat.html#mutateSetCell(r:Int,c:Int,v:T):Unit", "kind" : "def"}, {"label" : "toFrame", "tail" : "(): Frame[Int, Int, T]", "member" : "org.saddle.Mat.toFrame", "link" : "org\/saddle\/Mat.html#toFrame:org.saddle.Frame[Int,Int,T]", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "org.saddle.Mat.hashCode", "link" : "org\/saddle\/Mat.html#hashCode():Int", "kind" : "def"}, {"label" : "print", "tail" : "(nrows: Int, ncols: Int, stream: OutputStream): Unit", "member" : "org.saddle.Mat.print", "link" : "org\/saddle\/Mat.html#print(nrows:Int,ncols:Int,stream:java.io.OutputStream):Unit", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "org.saddle.Mat.toString", "link" : "org\/saddle\/Mat.html#toString():String", "kind" : "def"}, {"label" : "stringify", "tail" : "(nrows: Int, ncols: Int): String", "member" : "org.saddle.Mat.stringify", "link" : "org\/saddle\/Mat.html#stringify(nrows:Int,ncols:Int):String", "kind" : "def"}, {"label" : "roundTo", "tail" : "(sig: Int)(ev: NUM[T]): Mat[Double]", "member" : "org.saddle.Mat.roundTo", "link" : "org\/saddle\/Mat.html#roundTo(sig:Int)(implicitev:org.saddle.NUM[T]):org.saddle.Mat[Double]", "kind" : "def"}, {"label" : "rows", "tail" : "(seq: IndexedSeq[Int]): IndexedSeq[Vec[T]]", "member" : "org.saddle.Mat.rows", "link" : "org\/saddle\/Mat.html#rows(seq:IndexedSeq[Int]):IndexedSeq[org.saddle.Vec[T]]", "kind" : "def"}, {"label" : "rows", "tail" : "(): IndexedSeq[Vec[T]]", "member" : "org.saddle.Mat.rows", "link" : "org\/saddle\/Mat.html#rows:IndexedSeq[org.saddle.Vec[T]]", "kind" : "def"}, {"label" : "row", "tail" : "(slice: Slice[Int]): Mat[T]", "member" : "org.saddle.Mat.row", "link" : "org\/saddle\/Mat.html#row(slice:org.saddle.index.Slice[Int]):org.saddle.Mat[T]", "kind" : "def"}, {"label" : "row", "tail" : "(locs: Array[Int]): Mat[T]", "member" : "org.saddle.Mat.row", "link" : "org\/saddle\/Mat.html#row(locs:Array[Int]):org.saddle.Mat[T]", "kind" : "def"}, {"label" : "row", "tail" : "(locs: Int*): Mat[T]", "member" : "org.saddle.Mat.row", "link" : "org\/saddle\/Mat.html#row(locs:Int*):org.saddle.Mat[T]", "kind" : "def"}, {"label" : "row", "tail" : "(r: Int): Vec[T]", "member" : "org.saddle.Mat.row", "link" : "org\/saddle\/Mat.html#row(r:Int):org.saddle.Vec[T]", "kind" : "def"}, {"label" : "cols", "tail" : "(seq: IndexedSeq[Int]): IndexedSeq[Vec[T]]", "member" : "org.saddle.Mat.cols", "link" : "org\/saddle\/Mat.html#cols(seq:IndexedSeq[Int]):IndexedSeq[org.saddle.Vec[T]]", "kind" : "def"}, {"label" : "cols", "tail" : "(): IndexedSeq[Vec[T]]", "member" : "org.saddle.Mat.cols", "link" : "org\/saddle\/Mat.html#cols:IndexedSeq[org.saddle.Vec[T]]", "kind" : "def"}, {"label" : "col", "tail" : "(slice: Slice[Int]): Mat[T]", "member" : "org.saddle.Mat.col", "link" : "org\/saddle\/Mat.html#col(slice:org.saddle.index.Slice[Int]):org.saddle.Mat[T]", "kind" : "def"}, {"label" : "col", "tail" : "(locs: Array[Int]): Mat[T]", "member" : "org.saddle.Mat.col", "link" : "org\/saddle\/Mat.html#col(locs:Array[Int]):org.saddle.Mat[T]", "kind" : "def"}, {"label" : "col", "tail" : "(locs: Int*): Mat[T]", "member" : "org.saddle.Mat.col", "link" : "org\/saddle\/Mat.html#col(locs:Int*):org.saddle.Mat[T]", "kind" : "def"}, {"label" : "col", "tail" : "(c: Int): Vec[T]", "member" : "org.saddle.Mat.col", "link" : "org\/saddle\/Mat.html#col(c:Int):org.saddle.Vec[T]", "kind" : "def"}, {"label" : "dropColsWithNA", "tail" : "(): Mat[T]", "member" : "org.saddle.Mat.dropColsWithNA", "link" : "org\/saddle\/Mat.html#dropColsWithNA:org.saddle.Mat[T]", "kind" : "def"}, {"label" : "dropRowsWithNA", "tail" : "(): Mat[T]", "member" : "org.saddle.Mat.dropRowsWithNA", "link" : "org\/saddle\/Mat.html#dropRowsWithNA:org.saddle.Mat[T]", "kind" : "def"}, {"label" : "colsWithNA", "tail" : "(): Set[Int]", "member" : "org.saddle.Mat.colsWithNA", "link" : "org\/saddle\/Mat.html#colsWithNA:Set[Int]", "kind" : "def"}, {"label" : "rowsWithNA", "tail" : "(): Set[Int]", "member" : "org.saddle.Mat.rowsWithNA", "link" : "org\/saddle\/Mat.html#rowsWithNA:Set[Int]", "kind" : "def"}, {"label" : "withoutCols", "tail" : "(locs: Int*): Mat[T]", "member" : "org.saddle.Mat.withoutCols", "link" : "org\/saddle\/Mat.html#withoutCols(locs:Int*):org.saddle.Mat[T]", "kind" : "def"}, {"label" : "withoutCols", "tail" : "(locs: Array[Int]): Mat[T]", "member" : "org.saddle.Mat.withoutCols", "link" : "org\/saddle\/Mat.html#withoutCols(locs:Array[Int]):org.saddle.Mat[T]", "kind" : "def"}, {"label" : "withoutRows", "tail" : "(locs: Int*): Mat[T]", "member" : "org.saddle.Mat.withoutRows", "link" : "org\/saddle\/Mat.html#withoutRows(locs:Int*):org.saddle.Mat[T]", "kind" : "def"}, {"label" : "takeCols", "tail" : "(locs: Int*): Mat[T]", "member" : "org.saddle.Mat.takeCols", "link" : "org\/saddle\/Mat.html#takeCols(locs:Int*):org.saddle.Mat[T]", "kind" : "def"}, {"label" : "takeCols", "tail" : "(locs: Array[Int]): Mat[T]", "member" : "org.saddle.Mat.takeCols", "link" : "org\/saddle\/Mat.html#takeCols(locs:Array[Int]):org.saddle.Mat[T]", "kind" : "def"}, {"label" : "takeRows", "tail" : "(locs: Int*): Mat[T]", "member" : "org.saddle.Mat.takeRows", "link" : "org\/saddle\/Mat.html#takeRows(locs:Int*):org.saddle.Mat[T]", "kind" : "def"}, {"label" : "at", "tail" : "(r: Slice[Int], c: Slice[Int]): Mat[T]", "member" : "org.saddle.Mat.at", "link" : "org\/saddle\/Mat.html#at(r:org.saddle.index.Slice[Int],c:org.saddle.index.Slice[Int]):org.saddle.Mat[T]", "kind" : "def"}, {"label" : "at", "tail" : "(r: Int, c: Array[Int]): Vec[T]", "member" : "org.saddle.Mat.at", "link" : "org\/saddle\/Mat.html#at(r:Int,c:Array[Int]):org.saddle.Vec[T]", "kind" : "def"}, {"label" : "at", "tail" : "(r: Array[Int], c: Int): Vec[T]", "member" : "org.saddle.Mat.at", "link" : "org\/saddle\/Mat.html#at(r:Array[Int],c:Int):org.saddle.Vec[T]", "kind" : "def"}, {"label" : "at", "tail" : "(r: Array[Int], c: Array[Int]): Mat[T]", "member" : "org.saddle.Mat.at", "link" : "org\/saddle\/Mat.html#at(r:Array[Int],c:Array[Int]):org.saddle.Mat[T]", "kind" : "def"}, {"label" : "at", "tail" : "(r: Int, c: Int): Scalar[T]", "member" : "org.saddle.Mat.at", "link" : "org\/saddle\/Mat.html#at(r:Int,c:Int):org.saddle.scalar.Scalar[T]", "kind" : "def"}, {"label" : "at", "tail" : "(i: Int): Scalar[T]", "member" : "org.saddle.Mat.at", "link" : "org\/saddle\/Mat.html#at(i:Int):org.saddle.scalar.Scalar[T]", "kind" : "def"}, {"label" : "isEmpty", "tail" : "(): Boolean", "member" : "org.saddle.Mat.isEmpty", "link" : "org\/saddle\/Mat.html#isEmpty:Boolean", "kind" : "def"}, {"label" : "isSquare", "tail" : "(): Boolean", "member" : "org.saddle.Mat.isSquare", "link" : "org\/saddle\/Mat.html#isSquare:Boolean", "kind" : "def"}, {"label" : "length", "tail" : "(): Int", "member" : "org.saddle.Mat.length", "link" : "org\/saddle\/Mat.html#length:Int", "kind" : "def"}, {"label" : "equals", "tail" : "(o: Any): Boolean", "member" : "org.saddle.Mat.equals", "link" : "org\/saddle\/Mat.html#equals(o:Any):Boolean", "kind" : "def"}, {"label" : "reshape", "tail" : "(r: Int, c: Int): Mat[T]", "member" : "org.saddle.Mat.reshape", "link" : "org\/saddle\/Mat.html#reshape(r:Int,c:Int):org.saddle.Mat[T]", "kind" : "def"}, {"label" : "withoutRows", "tail" : "(locs: Array[Int]): Mat[T]", "member" : "org.saddle.Mat.withoutRows", "link" : "org\/saddle\/Mat.html#withoutRows(locs:Array[Int]):org.saddle.Mat[T]", "kind" : "def"}, {"label" : "takeRows", "tail" : "(locs: Vec[Int]): Mat[T]", "member" : "org.saddle.Mat.takeRows", "link" : "org\/saddle\/Mat.html#takeRows(locs:org.saddle.Vec[Int]):org.saddle.Mat[T]", "kind" : "def"}, {"label" : "takeRows", "tail" : "(locs: Array[Int]): Mat[T]", "member" : "org.saddle.Mat.takeRows", "link" : "org\/saddle\/Mat.html#takeRows(locs:Array[Int]):org.saddle.Mat[T]", "kind" : "def"}, {"label" : "T", "tail" : "(): Mat[T]", "member" : "org.saddle.Mat.T", "link" : "org\/saddle\/Mat.html#T:org.saddle.Mat[T]", "kind" : "def"}, {"label" : "transpose", "tail" : "(): Mat[T]", "member" : "org.saddle.Mat.transpose", "link" : "org\/saddle\/Mat.html#transpose:org.saddle.Mat[T]", "kind" : "def"}, {"label" : "map", "tail" : "(f: (T) => B)(arg0: ST[B]): Mat[B]", "member" : "org.saddle.Mat.map", "link" : "org\/saddle\/Mat.html#map[B](f:T=>B)(implicitevidence$1:org.saddle.ST[B]):org.saddle.Mat[B]", "kind" : "def"}, {"label" : "copy", "tail" : "(): Mat[T]", "member" : "org.saddle.Mat.copy", "link" : "org\/saddle\/Mat.html#copy:org.saddle.Mat[T]", "kind" : "def"}, {"label" : "concat", "tail" : "(other: Mat[T]): Mat[T]", "member" : "org.saddle.Mat.concat", "link" : "org\/saddle\/Mat.html#concat(other:org.saddle.Mat[T]):org.saddle.Mat[T]", "kind" : "def"}, {"label" : "contents", "tail" : "(): Array[T]", "member" : "org.saddle.Mat.contents", "link" : "org\/saddle\/Mat.html#contents:Array[T]", "kind" : "def"}, {"label" : "toVec", "tail" : "(): Vec[T]", "member" : "org.saddle.Mat.toVec", "link" : "org\/saddle\/Mat.html#toVec:org.saddle.Vec[T]", "kind" : "def"}, {"label" : "raw", "tail" : "(r: Int, c: Int): T", "member" : "org.saddle.Mat.raw", "link" : "org\/saddle\/Mat.html#raw(r:Int,c:Int):T", "kind" : "def"}, {"label" : "raw", "tail" : "(i: Int): T", "member" : "org.saddle.Mat.raw", "link" : "org\/saddle\/Mat.html#raw(i:Int):T", "kind" : "def"}, {"label" : "toArray", "tail" : "(): Array[T]", "member" : "org.saddle.Mat.toArray", "link" : "org\/saddle\/Mat.html#toArray:Array[T]", "kind" : "def"}, {"member" : "org.saddle.Mat#<init>", "error" : "unsupported entity"}, {"label" : "scalarTag", "tail" : ": ScalarTag[T]", "member" : "org.saddle.Mat.scalarTag", "link" : "org\/saddle\/Mat.html#scalarTag:org.saddle.scalar.ScalarTag[T]", "kind" : "val"}, {"label" : "numCols", "tail" : ": Int", "member" : "org.saddle.Mat.numCols", "link" : "org\/saddle\/Mat.html#numCols:Int", "kind" : "val"}, {"label" : "numRows", "tail" : ": Int", "member" : "org.saddle.Mat.numRows", "link" : "org\/saddle\/Mat.html#numRows:Int", "kind" : "val"}, {"label" : "**=", "tail" : "(other: B)(op: BinOpInPlace[Power, Mat[T], B]): Unit", "member" : "org.saddle.ops.NumericOps.**=", "link" : "org\/saddle\/Mat.html#**=[B](other:B)(implicitop:org.saddle.ops.BinOpInPlace[org.saddle.ops.Power,This,B]):Unit", "kind" : "def"}, {"label" : "%=", "tail" : "(other: B)(op: BinOpInPlace[Mod, Mat[T], B]): Unit", "member" : "org.saddle.ops.NumericOps.%=", "link" : "org\/saddle\/Mat.html#%=[B](other:B)(implicitop:org.saddle.ops.BinOpInPlace[org.saddle.ops.Mod,This,B]):Unit", "kind" : "def"}, {"label" : "\/=", "tail" : "(other: B)(op: BinOpInPlace[Divide, Mat[T], B]): Unit", "member" : "org.saddle.ops.NumericOps.\/=", "link" : "org\/saddle\/Mat.html#\/=[B](other:B)(implicitop:org.saddle.ops.BinOpInPlace[org.saddle.ops.Divide,This,B]):Unit", "kind" : "def"}, {"label" : "*=", "tail" : "(other: B)(op: BinOpInPlace[Multiply, Mat[T], B]): Unit", "member" : "org.saddle.ops.NumericOps.*=", "link" : "org\/saddle\/Mat.html#*=[B](other:B)(implicitop:org.saddle.ops.BinOpInPlace[org.saddle.ops.Multiply,This,B]):Unit", "kind" : "def"}, {"label" : "-=", "tail" : "(other: B)(op: BinOpInPlace[Subtract, Mat[T], B]): Unit", "member" : "org.saddle.ops.NumericOps.-=", "link" : "org\/saddle\/Mat.html#-=[B](other:B)(implicitop:org.saddle.ops.BinOpInPlace[org.saddle.ops.Subtract,This,B]):Unit", "kind" : "def"}, {"label" : "+=", "tail" : "(other: B)(op: BinOpInPlace[Add, Mat[T], B]): Unit", "member" : "org.saddle.ops.NumericOps.+=", "link" : "org\/saddle\/Mat.html#+=[B](other:B)(implicitop:org.saddle.ops.BinOpInPlace[org.saddle.ops.Add,This,B]):Unit", "kind" : "def"}, {"label" : "outer", "tail" : "(other: B)(op: BinOp[OuterProd, Mat[T], B, That]): That", "member" : "org.saddle.ops.NumericOps.outer", "link" : "org\/saddle\/Mat.html#outer[B,That](other:B)(implicitop:org.saddle.ops.BinOp[org.saddle.ops.OuterProd,This,B,That]):That", "kind" : "def"}, {"label" : "dot", "tail" : "(other: B)(op: BinOp[InnerProd, Mat[T], B, That]): That", "member" : "org.saddle.ops.NumericOps.dot", "link" : "org\/saddle\/Mat.html#dot[B,That](other:B)(implicitop:org.saddle.ops.BinOp[org.saddle.ops.InnerProd,This,B,That]):That", "kind" : "def"}, {"label" : "xor", "tail" : "(other: B)(op: BinOp[XorOp, Mat[T], B, That]): That", "member" : "org.saddle.ops.NumericOps.xor", "link" : "org\/saddle\/Mat.html#xor[B,That](other:B)(implicitop:org.saddle.ops.BinOp[org.saddle.ops.XorOp,This,B,That]):That", "kind" : "def"}, {"label" : "&&", "tail" : "(other: B)(op: BinOp[AndOp, Mat[T], B, That]): That", "member" : "org.saddle.ops.NumericOps.&&", "link" : "org\/saddle\/Mat.html#&&[B,That](other:B)(implicitop:org.saddle.ops.BinOp[org.saddle.ops.AndOp,This,B,That]):That", "kind" : "def"}, {"label" : "||", "tail" : "(other: B)(op: BinOp[OrOp, Mat[T], B, That]): That", "member" : "org.saddle.ops.NumericOps.||", "link" : "org\/saddle\/Mat.html#||[B,That](other:B)(implicitop:org.saddle.ops.BinOp[org.saddle.ops.OrOp,This,B,That]):That", "kind" : "def"}, {"label" : "<>", "tail" : "(other: B)(op: BinOp[NeqOp, Mat[T], B, That]): That", "member" : "org.saddle.ops.NumericOps.<>", "link" : "org\/saddle\/Mat.html#<>[B,That](other:B)(implicitop:org.saddle.ops.BinOp[org.saddle.ops.NeqOp,This,B,That]):That", "kind" : "def"}, {"label" : "=?", "tail" : "(other: B)(op: BinOp[EqOp, Mat[T], B, That]): That", "member" : "org.saddle.ops.NumericOps.=?", "link" : "org\/saddle\/Mat.html#=?[B,That](other:B)(implicitop:org.saddle.ops.BinOp[org.saddle.ops.EqOp,This,B,That]):That", "kind" : "def"}, {"label" : ">=", "tail" : "(other: B)(op: BinOp[GteOp, Mat[T], B, That]): That", "member" : "org.saddle.ops.NumericOps.>=", "link" : "org\/saddle\/Mat.html#>=[B,That](other:B)(implicitop:org.saddle.ops.BinOp[org.saddle.ops.GteOp,This,B,That]):That", "kind" : "def"}, {"label" : ">", "tail" : "(other: B)(op: BinOp[GtOp, Mat[T], B, That]): That", "member" : "org.saddle.ops.NumericOps.>", "link" : "org\/saddle\/Mat.html#>[B,That](other:B)(implicitop:org.saddle.ops.BinOp[org.saddle.ops.GtOp,This,B,That]):That", "kind" : "def"}, {"label" : "<=", "tail" : "(other: B)(op: BinOp[LteOp, Mat[T], B, That]): That", "member" : "org.saddle.ops.NumericOps.<=", "link" : "org\/saddle\/Mat.html#<=[B,That](other:B)(implicitop:org.saddle.ops.BinOp[org.saddle.ops.LteOp,This,B,That]):That", "kind" : "def"}, {"label" : "<", "tail" : "(other: B)(op: BinOp[LtOp, Mat[T], B, That]): That", "member" : "org.saddle.ops.NumericOps.<", "link" : "org\/saddle\/Mat.html#<[B,That](other:B)(implicitop:org.saddle.ops.BinOp[org.saddle.ops.LtOp,This,B,That]):That", "kind" : "def"}, {"label" : ">>>", "tail" : "(other: B)(op: BinOp[BitUShr, Mat[T], B, That]): That", "member" : "org.saddle.ops.NumericOps.>>>", "link" : "org\/saddle\/Mat.html#>>>[B,That](other:B)(implicitop:org.saddle.ops.BinOp[org.saddle.ops.BitUShr,This,B,That]):That", "kind" : "def"}, {"label" : ">>", "tail" : "(other: B)(op: BinOp[BitShr, Mat[T], B, That]): That", "member" : "org.saddle.ops.NumericOps.>>", "link" : "org\/saddle\/Mat.html#>>[B,That](other:B)(implicitop:org.saddle.ops.BinOp[org.saddle.ops.BitShr,This,B,That]):That", "kind" : "def"}, {"label" : "<<", "tail" : "(other: B)(op: BinOp[BitShl, Mat[T], B, That]): That", "member" : "org.saddle.ops.NumericOps.<<", "link" : "org\/saddle\/Mat.html#<<[B,That](other:B)(implicitop:org.saddle.ops.BinOp[org.saddle.ops.BitShl,This,B,That]):That", "kind" : "def"}, {"label" : "^", "tail" : "(other: B)(op: BinOp[BitXor, Mat[T], B, That]): That", "member" : "org.saddle.ops.NumericOps.^", "link" : "org\/saddle\/Mat.html#^[B,That](other:B)(implicitop:org.saddle.ops.BinOp[org.saddle.ops.BitXor,This,B,That]):That", "kind" : "def"}, {"label" : "|", "tail" : "(other: B)(op: BinOp[BitOr, Mat[T], B, That]): That", "member" : "org.saddle.ops.NumericOps.|", "link" : "org\/saddle\/Mat.html#|[B,That](other:B)(implicitop:org.saddle.ops.BinOp[org.saddle.ops.BitOr,This,B,That]):That", "kind" : "def"}, {"label" : "&", "tail" : "(other: B)(op: BinOp[BitAnd, Mat[T], B, That]): That", "member" : "org.saddle.ops.NumericOps.&", "link" : "org\/saddle\/Mat.html#&[B,That](other:B)(implicitop:org.saddle.ops.BinOp[org.saddle.ops.BitAnd,This,B,That]):That", "kind" : "def"}, {"label" : "**", "tail" : "(other: B)(op: BinOp[Power, Mat[T], B, That]): That", "member" : "org.saddle.ops.NumericOps.**", "link" : "org\/saddle\/Mat.html#**[B,That](other:B)(implicitop:org.saddle.ops.BinOp[org.saddle.ops.Power,This,B,That]):That", "kind" : "def"}, {"label" : "%", "tail" : "(other: B)(op: BinOp[Mod, Mat[T], B, That]): That", "member" : "org.saddle.ops.NumericOps.%", "link" : "org\/saddle\/Mat.html#%[B,That](other:B)(implicitop:org.saddle.ops.BinOp[org.saddle.ops.Mod,This,B,That]):That", "kind" : "def"}, {"label" : "*", "tail" : "(other: B)(op: BinOp[Multiply, Mat[T], B, That]): That", "member" : "org.saddle.ops.NumericOps.*", "link" : "org\/saddle\/Mat.html#*[B,That](other:B)(implicitop:org.saddle.ops.BinOp[org.saddle.ops.Multiply,This,B,That]):That", "kind" : "def"}, {"label" : "\/", "tail" : "(other: B)(op: BinOp[Divide, Mat[T], B, That]): That", "member" : "org.saddle.ops.NumericOps.\/", "link" : "org\/saddle\/Mat.html#\/[B,That](other:B)(implicitop:org.saddle.ops.BinOp[org.saddle.ops.Divide,This,B,That]):That", "kind" : "def"}, {"label" : "-", "tail" : "(other: B)(op: BinOp[Subtract, Mat[T], B, That]): That", "member" : "org.saddle.ops.NumericOps.-", "link" : "org\/saddle\/Mat.html#-[B,That](other:B)(implicitop:org.saddle.ops.BinOp[org.saddle.ops.Subtract,This,B,That]):That", "kind" : "def"}, {"label" : "+", "tail" : "(other: B)(op: BinOp[Add, Mat[T], B, That]): That", "member" : "org.saddle.ops.NumericOps.+", "link" : "org\/saddle\/Mat.html#+[B,That](other:B)(implicitop:org.saddle.ops.BinOp[org.saddle.ops.Add,This,B,That]):That", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/saddle\/Mat.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/saddle\/Mat.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/saddle\/Mat.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/saddle\/Mat.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/saddle\/Mat.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/saddle\/Mat.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/saddle\/Mat.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/Mat.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/Mat.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/Mat.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/saddle\/Mat.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/saddle\/Mat.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/saddle\/Mat.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "org\/saddle\/Mat.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/saddle\/Mat.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/saddle\/Mat.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "ident", "tail" : "(n: Int): Mat[Double]", "member" : "org.saddle.Mat.ident", "link" : "org\/saddle\/Mat$.html#ident(n:Int):org.saddle.Mat[Double]", "kind" : "def"}, {"label" : "fromRows", "tail" : "(rows: Vec[T]*)(arg0: ST[T]): Mat[T]", "member" : "org.saddle.Mat.fromRows", "link" : "org\/saddle\/Mat$.html#fromRows[T](rows:org.saddle.Vec[T]*)(implicitevidence$10:org.saddle.ST[T]):org.saddle.Mat[T]", "kind" : "def"}, {"label" : "apply", "tail" : "(values: Vec[T]*)(arg0: ST[T]): Mat[T]", "member" : "org.saddle.Mat.apply", "link" : "org\/saddle\/Mat$.html#apply[T](values:org.saddle.Vec[T]*)(implicitevidence$9:org.saddle.ST[T]):org.saddle.Mat[T]", "kind" : "def"}, {"label" : "apply", "tail" : "(values: Array[Vec[T]])(arg0: ST[T]): Mat[T]", "member" : "org.saddle.Mat.apply", "link" : "org\/saddle\/Mat$.html#apply[T](values:Array[org.saddle.Vec[T]])(implicitevidence$8:org.saddle.ST[T]):org.saddle.Mat[T]", "kind" : "def"}, {"label" : "apply", "tail" : "(values: Array[Array[T]])(arg0: ST[T]): Mat[T]", "member" : "org.saddle.Mat.apply", "link" : "org\/saddle\/Mat$.html#apply[T](values:Array[Array[T]])(implicitevidence$7:org.saddle.ST[T]):org.saddle.Mat[T]", "kind" : "def"}, {"label" : "apply", "tail" : "(numRows: Int, numCols: Int)(st: ST[T]): Mat[T]", "member" : "org.saddle.Mat.apply", "link" : "org\/saddle\/Mat$.html#apply[T](numRows:Int,numCols:Int)(implicitst:org.saddle.ST[T]):org.saddle.Mat[T]", "kind" : "def"}, {"label" : "empty", "tail" : "(arg0: ST[T]): Mat[T]", "member" : "org.saddle.Mat.empty", "link" : "org\/saddle\/Mat$.html#empty[T](implicitevidence$6:org.saddle.ST[T]):org.saddle.Mat[T]", "kind" : "def"}, {"label" : "apply", "tail" : "(rows: Int, cols: Int, vec: Vec[T])(st: ST[T]): Mat[T]", "member" : "org.saddle.Mat.apply", "link" : "org\/saddle\/Mat$.html#apply[T](rows:Int,cols:Int,vec:org.saddle.Vec[T])(implicitst:org.saddle.ST[T]):org.saddle.Mat[T]", "kind" : "def"}, {"label" : "apply", "tail" : "(rows: Int, cols: Int, arr: Array[T])(st: ST[T]): Mat[T]", "member" : "org.saddle.Mat.apply", "link" : "org\/saddle\/Mat$.html#apply[T](rows:Int,cols:Int,arr:Array[T])(implicitst:org.saddle.ST[T]):org.saddle.Mat[T]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/saddle\/Mat$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/saddle\/Mat$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/saddle\/Mat$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/saddle\/Mat$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/saddle\/Mat$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/saddle\/Mat$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/saddle\/Mat$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/Mat$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/Mat$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/Mat$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/saddle\/Mat$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/saddle\/Mat$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/saddle\/Mat$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/saddle\/Mat$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/saddle\/Mat$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/saddle\/Mat$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "org\/saddle\/Mat$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/saddle\/Mat$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/saddle\/Mat$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/saddle\/Mat.html", "kind" : "class"}, {"name" : "org.saddle.Numeric", "trait" : "org\/saddle\/Numeric.html", "kind" : "trait", "members_trait" : [{"label" : "toOrdering", "tail" : "(): Ordering[T]", "member" : "cats.kernel.Order.toOrdering", "link" : "org\/saddle\/Numeric.html#toOrdering:Ordering[A]", "kind" : "def"}, {"label" : "gt", "tail" : "(x: T, y: T): Boolean", "member" : "cats.kernel.Order.gt", "link" : "org\/saddle\/Numeric.html#gt(x:A,y:A):Boolean", "kind" : "def"}, {"label" : "gteqv", "tail" : "(x: T, y: T): Boolean", "member" : "cats.kernel.Order.gteqv", "link" : "org\/saddle\/Numeric.html#gteqv(x:A,y:A):Boolean", "kind" : "def"}, {"label" : "lt", "tail" : "(x: T, y: T): Boolean", "member" : "cats.kernel.Order.lt", "link" : "org\/saddle\/Numeric.html#lt(x:A,y:A):Boolean", "kind" : "def"}, {"label" : "lteqv", "tail" : "(x: T, y: T): Boolean", "member" : "cats.kernel.Order.lteqv", "link" : "org\/saddle\/Numeric.html#lteqv(x:A,y:A):Boolean", "kind" : "def"}, {"label" : "neqv", "tail" : "(x: T, y: T): Boolean", "member" : "cats.kernel.Order.neqv", "link" : "org\/saddle\/Numeric.html#neqv(x:A,y:A):Boolean", "kind" : "def"}, {"label" : "eqv", "tail" : "(x: T, y: T): Boolean", "member" : "cats.kernel.Order.eqv", "link" : "org\/saddle\/Numeric.html#eqv(x:A,y:A):Boolean", "kind" : "def"}, {"label" : "max", "tail" : "(x: T, y: T): T", "member" : "cats.kernel.Order.max", "link" : "org\/saddle\/Numeric.html#max(x:A,y:A):A", "kind" : "def"}, {"label" : "min", "tail" : "(x: T, y: T): T", "member" : "cats.kernel.Order.min", "link" : "org\/saddle\/Numeric.html#min(x:A,y:A):A", "kind" : "def"}, {"label" : "partialCompare", "tail" : "(x: T, y: T): Double", "member" : "cats.kernel.Order.partialCompare", "link" : "org\/saddle\/Numeric.html#partialCompare(x:A,y:A):Double", "kind" : "def"}, {"label" : "comparison", "tail" : "(x: T, y: T): Comparison", "member" : "cats.kernel.Order.comparison", "link" : "org\/saddle\/Numeric.html#comparison(x:A,y:A):cats.kernel.Comparison", "kind" : "def"}, {"label" : "pmax", "tail" : "(x: T, y: T): Option[T]", "member" : "cats.kernel.PartialOrder.pmax", "link" : "org\/saddle\/Numeric.html#pmax(x:A,y:A):Option[A]", "kind" : "def"}, {"label" : "pmin", "tail" : "(x: T, y: T): Option[T]", "member" : "cats.kernel.PartialOrder.pmin", "link" : "org\/saddle\/Numeric.html#pmin(x:A,y:A):Option[A]", "kind" : "def"}, {"label" : "tryCompare", "tail" : "(x: T, y: T): Option[Int]", "member" : "cats.kernel.PartialOrder.tryCompare", "link" : "org\/saddle\/Numeric.html#tryCompare(x:A,y:A):Option[Int]", "kind" : "def"}, {"label" : "partialComparison", "tail" : "(x: T, y: T): Option[Comparison]", "member" : "cats.kernel.PartialOrder.partialComparison", "link" : "org\/saddle\/Numeric.html#partialComparison(x:A,y:A):Option[cats.kernel.Comparison]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/saddle\/Numeric.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/saddle\/Numeric.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/saddle\/Numeric.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/saddle\/Numeric.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/saddle\/Numeric.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/saddle\/Numeric.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/saddle\/Numeric.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/Numeric.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/Numeric.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/Numeric.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/saddle\/Numeric.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/saddle\/Numeric.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/saddle\/Numeric.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/saddle\/Numeric.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/saddle\/Numeric.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/saddle\/Numeric.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "org\/saddle\/Numeric.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/saddle\/Numeric.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/saddle\/Numeric.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "toDouble", "tail" : "(a: T): Double", "member" : "org.saddle.Numeric.toDouble", "link" : "org\/saddle\/Numeric.html#toDouble(a:T):Double", "kind" : "abstract def"}, {"label" : "times", "tail" : "(a: T, b: T): T", "member" : "org.saddle.Numeric.times", "link" : "org\/saddle\/Numeric.html#times(a:T,b:T):T", "kind" : "abstract def"}, {"label" : "one", "tail" : "(): T", "member" : "org.saddle.Numeric.one", "link" : "org\/saddle\/Numeric.html#one:T", "kind" : "abstract def"}, {"label" : "zero", "tail" : "(): T", "member" : "org.saddle.Numeric.zero", "link" : "org\/saddle\/Numeric.html#zero:T", "kind" : "abstract def"}, {"label" : "abs", "tail" : "(a: T): T", "member" : "org.saddle.Numeric.abs", "link" : "org\/saddle\/Numeric.html#abs(a:T):T", "kind" : "abstract def"}, {"label" : "negate", "tail" : "(a: T): T", "member" : "org.saddle.Numeric.negate", "link" : "org\/saddle\/Numeric.html#negate(a:T):T", "kind" : "abstract def"}, {"label" : "minus", "tail" : "(a: T, b: T): T", "member" : "org.saddle.Numeric.minus", "link" : "org\/saddle\/Numeric.html#minus(a:T,b:T):T", "kind" : "abstract def"}, {"label" : "plus", "tail" : "(a: T, b: T): T", "member" : "org.saddle.Numeric.plus", "link" : "org\/saddle\/Numeric.html#plus(a:T,b:T):T", "kind" : "abstract def"}, {"label" : "compare", "tail" : "(x: T, y: T): Int", "member" : "cats.kernel.Order.compare", "link" : "org\/saddle\/Numeric.html#compare(x:A,y:A):Int", "kind" : "abstract def"}], "shortDescription" : ""}, {"name" : "org.saddle.OptionToScalar", "shortDescription" : "", "members_class" : [{"label" : "toScalar", "tail" : "(): Scalar[T]", "member" : "org.saddle.OptionToScalar.toScalar", "link" : "org\/saddle\/package$$OptionToScalar.html#toScalar:org.saddle.scalar.Scalar[T]", "kind" : "def"}, {"member" : "org.saddle.OptionToScalar#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/saddle\/package$$OptionToScalar.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/saddle\/package$$OptionToScalar.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/saddle\/package$$OptionToScalar.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/saddle\/package$$OptionToScalar.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/saddle\/package$$OptionToScalar.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/saddle\/package$$OptionToScalar.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/saddle\/package$$OptionToScalar.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/package$$OptionToScalar.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/package$$OptionToScalar.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/package$$OptionToScalar.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/saddle\/package$$OptionToScalar.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/saddle\/package$$OptionToScalar.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/saddle\/package$$OptionToScalar.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/saddle\/package$$OptionToScalar.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/saddle\/package$$OptionToScalar.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/saddle\/package$$OptionToScalar.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "org\/saddle\/package$$OptionToScalar.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/saddle\/package$$OptionToScalar.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/saddle\/package$$OptionToScalar.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/saddle\/package$$OptionToScalar.html", "kind" : "class"}, {"name" : "org.saddle.order", "shortDescription" : "", "object" : "org\/saddle\/order$.html", "members_object" : [{"label" : "tuple22", "tail" : "(arg0: ORD[T1], arg1: ORD[T2], arg2: ORD[T3], arg3: ORD[T4], arg4: ORD[T5], arg5: ORD[T6], arg6: ORD[T7], arg7: ORD[T8], arg8: ORD[T9], arg9: ORD[T10], arg10: ORD[T11], arg11: ORD[T12], arg12: ORD[T13], arg13: ORD[T14], arg14: ORD[T15], arg15: ORD[T16], arg16: ORD[T17], arg17: ORD[T18], arg18: ORD[T19], arg19: ORD[T20], arg20: ORD[T21], arg21: ORD[T22]): ORD[(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22)]", "member" : "org.saddle.util.OrderInstances.tuple22", "link" : "org\/saddle\/order$.html#tuple22[T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22](implicitevidence$232:org.saddle.ORD[T1],implicitevidence$233:org.saddle.ORD[T2],implicitevidence$234:org.saddle.ORD[T3],implicitevidence$235:org.saddle.ORD[T4],implicitevidence$236:org.saddle.ORD[T5],implicitevidence$237:org.saddle.ORD[T6],implicitevidence$238:org.saddle.ORD[T7],implicitevidence$239:org.saddle.ORD[T8],implicitevidence$240:org.saddle.ORD[T9],implicitevidence$241:org.saddle.ORD[T10],implicitevidence$242:org.saddle.ORD[T11],implicitevidence$243:org.saddle.ORD[T12],implicitevidence$244:org.saddle.ORD[T13],implicitevidence$245:org.saddle.ORD[T14],implicitevidence$246:org.saddle.ORD[T15],implicitevidence$247:org.saddle.ORD[T16],implicitevidence$248:org.saddle.ORD[T17],implicitevidence$249:org.saddle.ORD[T18],implicitevidence$250:org.saddle.ORD[T19],implicitevidence$251:org.saddle.ORD[T20],implicitevidence$252:org.saddle.ORD[T21],implicitevidence$253:org.saddle.ORD[T22]):org.saddle.ORD[(T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22)]", "kind" : "implicit def"}, {"label" : "tuple21", "tail" : "(arg0: ORD[T1], arg1: ORD[T2], arg2: ORD[T3], arg3: ORD[T4], arg4: ORD[T5], arg5: ORD[T6], arg6: ORD[T7], arg7: ORD[T8], arg8: ORD[T9], arg9: ORD[T10], arg10: ORD[T11], arg11: ORD[T12], arg12: ORD[T13], arg13: ORD[T14], arg14: ORD[T15], arg15: ORD[T16], arg16: ORD[T17], arg17: ORD[T18], arg18: ORD[T19], arg19: ORD[T20], arg20: ORD[T21]): ORD[(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21)]", "member" : "org.saddle.util.OrderInstances.tuple21", "link" : "org\/saddle\/order$.html#tuple21[T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21](implicitevidence$211:org.saddle.ORD[T1],implicitevidence$212:org.saddle.ORD[T2],implicitevidence$213:org.saddle.ORD[T3],implicitevidence$214:org.saddle.ORD[T4],implicitevidence$215:org.saddle.ORD[T5],implicitevidence$216:org.saddle.ORD[T6],implicitevidence$217:org.saddle.ORD[T7],implicitevidence$218:org.saddle.ORD[T8],implicitevidence$219:org.saddle.ORD[T9],implicitevidence$220:org.saddle.ORD[T10],implicitevidence$221:org.saddle.ORD[T11],implicitevidence$222:org.saddle.ORD[T12],implicitevidence$223:org.saddle.ORD[T13],implicitevidence$224:org.saddle.ORD[T14],implicitevidence$225:org.saddle.ORD[T15],implicitevidence$226:org.saddle.ORD[T16],implicitevidence$227:org.saddle.ORD[T17],implicitevidence$228:org.saddle.ORD[T18],implicitevidence$229:org.saddle.ORD[T19],implicitevidence$230:org.saddle.ORD[T20],implicitevidence$231:org.saddle.ORD[T21]):org.saddle.ORD[(T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21)]", "kind" : "implicit def"}, {"label" : "tuple20", "tail" : "(arg0: ORD[T1], arg1: ORD[T2], arg2: ORD[T3], arg3: ORD[T4], arg4: ORD[T5], arg5: ORD[T6], arg6: ORD[T7], arg7: ORD[T8], arg8: ORD[T9], arg9: ORD[T10], arg10: ORD[T11], arg11: ORD[T12], arg12: ORD[T13], arg13: ORD[T14], arg14: ORD[T15], arg15: ORD[T16], arg16: ORD[T17], arg17: ORD[T18], arg18: ORD[T19], arg19: ORD[T20]): ORD[(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20)]", "member" : "org.saddle.util.OrderInstances.tuple20", "link" : "org\/saddle\/order$.html#tuple20[T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20](implicitevidence$191:org.saddle.ORD[T1],implicitevidence$192:org.saddle.ORD[T2],implicitevidence$193:org.saddle.ORD[T3],implicitevidence$194:org.saddle.ORD[T4],implicitevidence$195:org.saddle.ORD[T5],implicitevidence$196:org.saddle.ORD[T6],implicitevidence$197:org.saddle.ORD[T7],implicitevidence$198:org.saddle.ORD[T8],implicitevidence$199:org.saddle.ORD[T9],implicitevidence$200:org.saddle.ORD[T10],implicitevidence$201:org.saddle.ORD[T11],implicitevidence$202:org.saddle.ORD[T12],implicitevidence$203:org.saddle.ORD[T13],implicitevidence$204:org.saddle.ORD[T14],implicitevidence$205:org.saddle.ORD[T15],implicitevidence$206:org.saddle.ORD[T16],implicitevidence$207:org.saddle.ORD[T17],implicitevidence$208:org.saddle.ORD[T18],implicitevidence$209:org.saddle.ORD[T19],implicitevidence$210:org.saddle.ORD[T20]):org.saddle.ORD[(T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20)]", "kind" : "implicit def"}, {"label" : "tuple19", "tail" : "(arg0: ORD[T1], arg1: ORD[T2], arg2: ORD[T3], arg3: ORD[T4], arg4: ORD[T5], arg5: ORD[T6], arg6: ORD[T7], arg7: ORD[T8], arg8: ORD[T9], arg9: ORD[T10], arg10: ORD[T11], arg11: ORD[T12], arg12: ORD[T13], arg13: ORD[T14], arg14: ORD[T15], arg15: ORD[T16], arg16: ORD[T17], arg17: ORD[T18], arg18: ORD[T19]): ORD[(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19)]", "member" : "org.saddle.util.OrderInstances.tuple19", "link" : "org\/saddle\/order$.html#tuple19[T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19](implicitevidence$172:org.saddle.ORD[T1],implicitevidence$173:org.saddle.ORD[T2],implicitevidence$174:org.saddle.ORD[T3],implicitevidence$175:org.saddle.ORD[T4],implicitevidence$176:org.saddle.ORD[T5],implicitevidence$177:org.saddle.ORD[T6],implicitevidence$178:org.saddle.ORD[T7],implicitevidence$179:org.saddle.ORD[T8],implicitevidence$180:org.saddle.ORD[T9],implicitevidence$181:org.saddle.ORD[T10],implicitevidence$182:org.saddle.ORD[T11],implicitevidence$183:org.saddle.ORD[T12],implicitevidence$184:org.saddle.ORD[T13],implicitevidence$185:org.saddle.ORD[T14],implicitevidence$186:org.saddle.ORD[T15],implicitevidence$187:org.saddle.ORD[T16],implicitevidence$188:org.saddle.ORD[T17],implicitevidence$189:org.saddle.ORD[T18],implicitevidence$190:org.saddle.ORD[T19]):org.saddle.ORD[(T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19)]", "kind" : "implicit def"}, {"label" : "tuple18", "tail" : "(arg0: ORD[T1], arg1: ORD[T2], arg2: ORD[T3], arg3: ORD[T4], arg4: ORD[T5], arg5: ORD[T6], arg6: ORD[T7], arg7: ORD[T8], arg8: ORD[T9], arg9: ORD[T10], arg10: ORD[T11], arg11: ORD[T12], arg12: ORD[T13], arg13: ORD[T14], arg14: ORD[T15], arg15: ORD[T16], arg16: ORD[T17], arg17: ORD[T18]): ORD[(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18)]", "member" : "org.saddle.util.OrderInstances.tuple18", "link" : "org\/saddle\/order$.html#tuple18[T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18](implicitevidence$154:org.saddle.ORD[T1],implicitevidence$155:org.saddle.ORD[T2],implicitevidence$156:org.saddle.ORD[T3],implicitevidence$157:org.saddle.ORD[T4],implicitevidence$158:org.saddle.ORD[T5],implicitevidence$159:org.saddle.ORD[T6],implicitevidence$160:org.saddle.ORD[T7],implicitevidence$161:org.saddle.ORD[T8],implicitevidence$162:org.saddle.ORD[T9],implicitevidence$163:org.saddle.ORD[T10],implicitevidence$164:org.saddle.ORD[T11],implicitevidence$165:org.saddle.ORD[T12],implicitevidence$166:org.saddle.ORD[T13],implicitevidence$167:org.saddle.ORD[T14],implicitevidence$168:org.saddle.ORD[T15],implicitevidence$169:org.saddle.ORD[T16],implicitevidence$170:org.saddle.ORD[T17],implicitevidence$171:org.saddle.ORD[T18]):org.saddle.ORD[(T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18)]", "kind" : "implicit def"}, {"label" : "tuple17", "tail" : "(arg0: ORD[T1], arg1: ORD[T2], arg2: ORD[T3], arg3: ORD[T4], arg4: ORD[T5], arg5: ORD[T6], arg6: ORD[T7], arg7: ORD[T8], arg8: ORD[T9], arg9: ORD[T10], arg10: ORD[T11], arg11: ORD[T12], arg12: ORD[T13], arg13: ORD[T14], arg14: ORD[T15], arg15: ORD[T16], arg16: ORD[T17]): ORD[(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17)]", "member" : "org.saddle.util.OrderInstances.tuple17", "link" : "org\/saddle\/order$.html#tuple17[T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17](implicitevidence$137:org.saddle.ORD[T1],implicitevidence$138:org.saddle.ORD[T2],implicitevidence$139:org.saddle.ORD[T3],implicitevidence$140:org.saddle.ORD[T4],implicitevidence$141:org.saddle.ORD[T5],implicitevidence$142:org.saddle.ORD[T6],implicitevidence$143:org.saddle.ORD[T7],implicitevidence$144:org.saddle.ORD[T8],implicitevidence$145:org.saddle.ORD[T9],implicitevidence$146:org.saddle.ORD[T10],implicitevidence$147:org.saddle.ORD[T11],implicitevidence$148:org.saddle.ORD[T12],implicitevidence$149:org.saddle.ORD[T13],implicitevidence$150:org.saddle.ORD[T14],implicitevidence$151:org.saddle.ORD[T15],implicitevidence$152:org.saddle.ORD[T16],implicitevidence$153:org.saddle.ORD[T17]):org.saddle.ORD[(T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17)]", "kind" : "implicit def"}, {"label" : "tuple16", "tail" : "(arg0: ORD[T1], arg1: ORD[T2], arg2: ORD[T3], arg3: ORD[T4], arg4: ORD[T5], arg5: ORD[T6], arg6: ORD[T7], arg7: ORD[T8], arg8: ORD[T9], arg9: ORD[T10], arg10: ORD[T11], arg11: ORD[T12], arg12: ORD[T13], arg13: ORD[T14], arg14: ORD[T15], arg15: ORD[T16]): ORD[(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16)]", "member" : "org.saddle.util.OrderInstances.tuple16", "link" : "org\/saddle\/order$.html#tuple16[T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16](implicitevidence$121:org.saddle.ORD[T1],implicitevidence$122:org.saddle.ORD[T2],implicitevidence$123:org.saddle.ORD[T3],implicitevidence$124:org.saddle.ORD[T4],implicitevidence$125:org.saddle.ORD[T5],implicitevidence$126:org.saddle.ORD[T6],implicitevidence$127:org.saddle.ORD[T7],implicitevidence$128:org.saddle.ORD[T8],implicitevidence$129:org.saddle.ORD[T9],implicitevidence$130:org.saddle.ORD[T10],implicitevidence$131:org.saddle.ORD[T11],implicitevidence$132:org.saddle.ORD[T12],implicitevidence$133:org.saddle.ORD[T13],implicitevidence$134:org.saddle.ORD[T14],implicitevidence$135:org.saddle.ORD[T15],implicitevidence$136:org.saddle.ORD[T16]):org.saddle.ORD[(T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16)]", "kind" : "implicit def"}, {"label" : "tuple15", "tail" : "(arg0: ORD[T1], arg1: ORD[T2], arg2: ORD[T3], arg3: ORD[T4], arg4: ORD[T5], arg5: ORD[T6], arg6: ORD[T7], arg7: ORD[T8], arg8: ORD[T9], arg9: ORD[T10], arg10: ORD[T11], arg11: ORD[T12], arg12: ORD[T13], arg13: ORD[T14], arg14: ORD[T15]): ORD[(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15)]", "member" : "org.saddle.util.OrderInstances.tuple15", "link" : "org\/saddle\/order$.html#tuple15[T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15](implicitevidence$106:org.saddle.ORD[T1],implicitevidence$107:org.saddle.ORD[T2],implicitevidence$108:org.saddle.ORD[T3],implicitevidence$109:org.saddle.ORD[T4],implicitevidence$110:org.saddle.ORD[T5],implicitevidence$111:org.saddle.ORD[T6],implicitevidence$112:org.saddle.ORD[T7],implicitevidence$113:org.saddle.ORD[T8],implicitevidence$114:org.saddle.ORD[T9],implicitevidence$115:org.saddle.ORD[T10],implicitevidence$116:org.saddle.ORD[T11],implicitevidence$117:org.saddle.ORD[T12],implicitevidence$118:org.saddle.ORD[T13],implicitevidence$119:org.saddle.ORD[T14],implicitevidence$120:org.saddle.ORD[T15]):org.saddle.ORD[(T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15)]", "kind" : "implicit def"}, {"label" : "tuple14", "tail" : "(arg0: ORD[T1], arg1: ORD[T2], arg2: ORD[T3], arg3: ORD[T4], arg4: ORD[T5], arg5: ORD[T6], arg6: ORD[T7], arg7: ORD[T8], arg8: ORD[T9], arg9: ORD[T10], arg10: ORD[T11], arg11: ORD[T12], arg12: ORD[T13], arg13: ORD[T14]): ORD[(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14)]", "member" : "org.saddle.util.OrderInstances.tuple14", "link" : "org\/saddle\/order$.html#tuple14[T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14](implicitevidence$92:org.saddle.ORD[T1],implicitevidence$93:org.saddle.ORD[T2],implicitevidence$94:org.saddle.ORD[T3],implicitevidence$95:org.saddle.ORD[T4],implicitevidence$96:org.saddle.ORD[T5],implicitevidence$97:org.saddle.ORD[T6],implicitevidence$98:org.saddle.ORD[T7],implicitevidence$99:org.saddle.ORD[T8],implicitevidence$100:org.saddle.ORD[T9],implicitevidence$101:org.saddle.ORD[T10],implicitevidence$102:org.saddle.ORD[T11],implicitevidence$103:org.saddle.ORD[T12],implicitevidence$104:org.saddle.ORD[T13],implicitevidence$105:org.saddle.ORD[T14]):org.saddle.ORD[(T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14)]", "kind" : "implicit def"}, {"label" : "tuple13", "tail" : "(arg0: ORD[T1], arg1: ORD[T2], arg2: ORD[T3], arg3: ORD[T4], arg4: ORD[T5], arg5: ORD[T6], arg6: ORD[T7], arg7: ORD[T8], arg8: ORD[T9], arg9: ORD[T10], arg10: ORD[T11], arg11: ORD[T12], arg12: ORD[T13]): ORD[(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13)]", "member" : "org.saddle.util.OrderInstances.tuple13", "link" : "org\/saddle\/order$.html#tuple13[T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13](implicitevidence$79:org.saddle.ORD[T1],implicitevidence$80:org.saddle.ORD[T2],implicitevidence$81:org.saddle.ORD[T3],implicitevidence$82:org.saddle.ORD[T4],implicitevidence$83:org.saddle.ORD[T5],implicitevidence$84:org.saddle.ORD[T6],implicitevidence$85:org.saddle.ORD[T7],implicitevidence$86:org.saddle.ORD[T8],implicitevidence$87:org.saddle.ORD[T9],implicitevidence$88:org.saddle.ORD[T10],implicitevidence$89:org.saddle.ORD[T11],implicitevidence$90:org.saddle.ORD[T12],implicitevidence$91:org.saddle.ORD[T13]):org.saddle.ORD[(T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13)]", "kind" : "implicit def"}, {"label" : "tuple12", "tail" : "(arg0: ORD[T1], arg1: ORD[T2], arg2: ORD[T3], arg3: ORD[T4], arg4: ORD[T5], arg5: ORD[T6], arg6: ORD[T7], arg7: ORD[T8], arg8: ORD[T9], arg9: ORD[T10], arg10: ORD[T11], arg11: ORD[T12]): ORD[(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12)]", "member" : "org.saddle.util.OrderInstances.tuple12", "link" : "org\/saddle\/order$.html#tuple12[T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12](implicitevidence$67:org.saddle.ORD[T1],implicitevidence$68:org.saddle.ORD[T2],implicitevidence$69:org.saddle.ORD[T3],implicitevidence$70:org.saddle.ORD[T4],implicitevidence$71:org.saddle.ORD[T5],implicitevidence$72:org.saddle.ORD[T6],implicitevidence$73:org.saddle.ORD[T7],implicitevidence$74:org.saddle.ORD[T8],implicitevidence$75:org.saddle.ORD[T9],implicitevidence$76:org.saddle.ORD[T10],implicitevidence$77:org.saddle.ORD[T11],implicitevidence$78:org.saddle.ORD[T12]):org.saddle.ORD[(T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12)]", "kind" : "implicit def"}, {"label" : "tuple11", "tail" : "(arg0: ORD[T1], arg1: ORD[T2], arg2: ORD[T3], arg3: ORD[T4], arg4: ORD[T5], arg5: ORD[T6], arg6: ORD[T7], arg7: ORD[T8], arg8: ORD[T9], arg9: ORD[T10], arg10: ORD[T11]): ORD[(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11)]", "member" : "org.saddle.util.OrderInstances.tuple11", "link" : "org\/saddle\/order$.html#tuple11[T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11](implicitevidence$56:org.saddle.ORD[T1],implicitevidence$57:org.saddle.ORD[T2],implicitevidence$58:org.saddle.ORD[T3],implicitevidence$59:org.saddle.ORD[T4],implicitevidence$60:org.saddle.ORD[T5],implicitevidence$61:org.saddle.ORD[T6],implicitevidence$62:org.saddle.ORD[T7],implicitevidence$63:org.saddle.ORD[T8],implicitevidence$64:org.saddle.ORD[T9],implicitevidence$65:org.saddle.ORD[T10],implicitevidence$66:org.saddle.ORD[T11]):org.saddle.ORD[(T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11)]", "kind" : "implicit def"}, {"label" : "tuple10", "tail" : "(arg0: ORD[T1], arg1: ORD[T2], arg2: ORD[T3], arg3: ORD[T4], arg4: ORD[T5], arg5: ORD[T6], arg6: ORD[T7], arg7: ORD[T8], arg8: ORD[T9], arg9: ORD[T10]): ORD[(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10)]", "member" : "org.saddle.util.OrderInstances.tuple10", "link" : "org\/saddle\/order$.html#tuple10[T1,T2,T3,T4,T5,T6,T7,T8,T9,T10](implicitevidence$46:org.saddle.ORD[T1],implicitevidence$47:org.saddle.ORD[T2],implicitevidence$48:org.saddle.ORD[T3],implicitevidence$49:org.saddle.ORD[T4],implicitevidence$50:org.saddle.ORD[T5],implicitevidence$51:org.saddle.ORD[T6],implicitevidence$52:org.saddle.ORD[T7],implicitevidence$53:org.saddle.ORD[T8],implicitevidence$54:org.saddle.ORD[T9],implicitevidence$55:org.saddle.ORD[T10]):org.saddle.ORD[(T1,T2,T3,T4,T5,T6,T7,T8,T9,T10)]", "kind" : "implicit def"}, {"label" : "tuple9", "tail" : "(arg0: ORD[T1], arg1: ORD[T2], arg2: ORD[T3], arg3: ORD[T4], arg4: ORD[T5], arg5: ORD[T6], arg6: ORD[T7], arg7: ORD[T8], arg8: ORD[T9]): ORD[(T1, T2, T3, T4, T5, T6, T7, T8, T9)]", "member" : "org.saddle.util.OrderInstances.tuple9", "link" : "org\/saddle\/order$.html#tuple9[T1,T2,T3,T4,T5,T6,T7,T8,T9](implicitevidence$37:org.saddle.ORD[T1],implicitevidence$38:org.saddle.ORD[T2],implicitevidence$39:org.saddle.ORD[T3],implicitevidence$40:org.saddle.ORD[T4],implicitevidence$41:org.saddle.ORD[T5],implicitevidence$42:org.saddle.ORD[T6],implicitevidence$43:org.saddle.ORD[T7],implicitevidence$44:org.saddle.ORD[T8],implicitevidence$45:org.saddle.ORD[T9]):org.saddle.ORD[(T1,T2,T3,T4,T5,T6,T7,T8,T9)]", "kind" : "implicit def"}, {"label" : "tuple8", "tail" : "(arg0: ORD[T1], arg1: ORD[T2], arg2: ORD[T3], arg3: ORD[T4], arg4: ORD[T5], arg5: ORD[T6], arg6: ORD[T7], arg7: ORD[T8]): ORD[(T1, T2, T3, T4, T5, T6, T7, T8)]", "member" : "org.saddle.util.OrderInstances.tuple8", "link" : "org\/saddle\/order$.html#tuple8[T1,T2,T3,T4,T5,T6,T7,T8](implicitevidence$29:org.saddle.ORD[T1],implicitevidence$30:org.saddle.ORD[T2],implicitevidence$31:org.saddle.ORD[T3],implicitevidence$32:org.saddle.ORD[T4],implicitevidence$33:org.saddle.ORD[T5],implicitevidence$34:org.saddle.ORD[T6],implicitevidence$35:org.saddle.ORD[T7],implicitevidence$36:org.saddle.ORD[T8]):org.saddle.ORD[(T1,T2,T3,T4,T5,T6,T7,T8)]", "kind" : "implicit def"}, {"label" : "tuple7", "tail" : "(arg0: ORD[T1], arg1: ORD[T2], arg2: ORD[T3], arg3: ORD[T4], arg4: ORD[T5], arg5: ORD[T6], arg6: ORD[T7]): ORD[(T1, T2, T3, T4, T5, T6, T7)]", "member" : "org.saddle.util.OrderInstances.tuple7", "link" : "org\/saddle\/order$.html#tuple7[T1,T2,T3,T4,T5,T6,T7](implicitevidence$22:org.saddle.ORD[T1],implicitevidence$23:org.saddle.ORD[T2],implicitevidence$24:org.saddle.ORD[T3],implicitevidence$25:org.saddle.ORD[T4],implicitevidence$26:org.saddle.ORD[T5],implicitevidence$27:org.saddle.ORD[T6],implicitevidence$28:org.saddle.ORD[T7]):org.saddle.ORD[(T1,T2,T3,T4,T5,T6,T7)]", "kind" : "implicit def"}, {"label" : "tuple6", "tail" : "(arg0: ORD[T1], arg1: ORD[T2], arg2: ORD[T3], arg3: ORD[T4], arg4: ORD[T5], arg5: ORD[T6]): ORD[(T1, T2, T3, T4, T5, T6)]", "member" : "org.saddle.util.OrderInstances.tuple6", "link" : "org\/saddle\/order$.html#tuple6[T1,T2,T3,T4,T5,T6](implicitevidence$16:org.saddle.ORD[T1],implicitevidence$17:org.saddle.ORD[T2],implicitevidence$18:org.saddle.ORD[T3],implicitevidence$19:org.saddle.ORD[T4],implicitevidence$20:org.saddle.ORD[T5],implicitevidence$21:org.saddle.ORD[T6]):org.saddle.ORD[(T1,T2,T3,T4,T5,T6)]", "kind" : "implicit def"}, {"label" : "tuple5", "tail" : "(arg0: ORD[T1], arg1: ORD[T2], arg2: ORD[T3], arg3: ORD[T4], arg4: ORD[T5]): ORD[(T1, T2, T3, T4, T5)]", "member" : "org.saddle.util.OrderInstances.tuple5", "link" : "org\/saddle\/order$.html#tuple5[T1,T2,T3,T4,T5](implicitevidence$11:org.saddle.ORD[T1],implicitevidence$12:org.saddle.ORD[T2],implicitevidence$13:org.saddle.ORD[T3],implicitevidence$14:org.saddle.ORD[T4],implicitevidence$15:org.saddle.ORD[T5]):org.saddle.ORD[(T1,T2,T3,T4,T5)]", "kind" : "implicit def"}, {"label" : "tuple4", "tail" : "(arg0: ORD[T1], arg1: ORD[T2], arg2: ORD[T3], arg3: ORD[T4]): ORD[(T1, T2, T3, T4)]", "member" : "org.saddle.util.OrderInstances.tuple4", "link" : "org\/saddle\/order$.html#tuple4[T1,T2,T3,T4](implicitevidence$7:org.saddle.ORD[T1],implicitevidence$8:org.saddle.ORD[T2],implicitevidence$9:org.saddle.ORD[T3],implicitevidence$10:org.saddle.ORD[T4]):org.saddle.ORD[(T1,T2,T3,T4)]", "kind" : "implicit def"}, {"label" : "tuple3", "tail" : "(arg0: ORD[T1], arg1: ORD[T2], arg2: ORD[T3]): ORD[(T1, T2, T3)]", "member" : "org.saddle.util.OrderInstances.tuple3", "link" : "org\/saddle\/order$.html#tuple3[T1,T2,T3](implicitevidence$4:org.saddle.ORD[T1],implicitevidence$5:org.saddle.ORD[T2],implicitevidence$6:org.saddle.ORD[T3]):org.saddle.ORD[(T1,T2,T3)]", "kind" : "implicit def"}, {"label" : "tuple2", "tail" : "(arg0: ORD[T1], arg1: ORD[T2]): ORD[(T1, T2)]", "member" : "org.saddle.util.OrderInstances.tuple2", "link" : "org\/saddle\/order$.html#tuple2[T1,T2](implicitevidence$2:org.saddle.ORD[T1],implicitevidence$3:org.saddle.ORD[T2]):org.saddle.ORD[(T1,T2)]", "kind" : "implicit def"}, {"label" : "tuple1", "tail" : "(arg0: ORD[T]): ORD[(T)]", "member" : "org.saddle.util.OrderInstances.tuple1", "link" : "org\/saddle\/order$.html#tuple1[T](implicitevidence$1:org.saddle.ORD[T]):org.saddle.ORD[(T,)]", "kind" : "implicit def"}, {"label" : "fromOrdering", "tail" : "(ordering: Ordering[T]): ORD[T]", "member" : "org.saddle.util.OrderInstances.fromOrdering", "link" : "org\/saddle\/order$.html#fromOrdering[T](implicitordering:Ordering[T]):org.saddle.ORD[T]", "kind" : "implicit def"}, {"label" : "stringOrd", "tail" : "(): ORD[String]", "member" : "org.saddle.util.OrderInstances.stringOrd", "link" : "org\/saddle\/order$.html#stringOrd:org.saddle.ORD[String]", "kind" : "implicit def"}, {"label" : "shortOrd", "tail" : "(): ORD[Short]", "member" : "org.saddle.util.OrderInstances.shortOrd", "link" : "org\/saddle\/order$.html#shortOrd:org.saddle.ORD[Short]", "kind" : "implicit def"}, {"label" : "byteOrd", "tail" : "(): ORD[Byte]", "member" : "org.saddle.util.OrderInstances.byteOrd", "link" : "org\/saddle\/order$.html#byteOrd:org.saddle.ORD[Byte]", "kind" : "implicit def"}, {"label" : "floatOrd", "tail" : "(): ORD[Float]", "member" : "org.saddle.util.OrderInstances.floatOrd", "link" : "org\/saddle\/order$.html#floatOrd:org.saddle.ORD[Float]", "kind" : "implicit def"}, {"label" : "charOrd", "tail" : "(): ORD[Char]", "member" : "org.saddle.util.OrderInstances.charOrd", "link" : "org\/saddle\/order$.html#charOrd:org.saddle.ORD[Char]", "kind" : "implicit def"}, {"label" : "doubleOrd", "tail" : "(): ORD[Double]", "member" : "org.saddle.util.OrderInstances.doubleOrd", "link" : "org\/saddle\/order$.html#doubleOrd:org.saddle.ORD[Double]", "kind" : "implicit def"}, {"label" : "longOrd", "tail" : "(): ORD[Long]", "member" : "org.saddle.util.OrderInstances.longOrd", "link" : "org\/saddle\/order$.html#longOrd:org.saddle.ORD[Long]", "kind" : "implicit def"}, {"label" : "intOrd", "tail" : "(): ORD[Int]", "member" : "org.saddle.util.OrderInstances.intOrd", "link" : "org\/saddle\/order$.html#intOrd:org.saddle.ORD[Int]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/saddle\/order$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/saddle\/order$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/saddle\/order$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/saddle\/order$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/saddle\/order$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/saddle\/order$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/saddle\/order$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/order$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/order$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/order$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/saddle\/order$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/saddle\/order$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/saddle\/order$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/saddle\/order$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/saddle\/order$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/saddle\/order$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "org\/saddle\/order$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/saddle\/order$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/saddle\/order$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "org.saddle.PctMethod", "object" : "org\/saddle\/PctMethod$.html", "members_object" : [{"label" : "NIST", "tail" : "", "member" : "org.saddle.PctMethod.NIST", "link" : "org\/saddle\/PctMethod$.html#NIST", "kind" : "object"}, {"label" : "Excel", "tail" : "", "member" : "org.saddle.PctMethod.Excel", "link" : "org\/saddle\/PctMethod$.html#Excel", "kind" : "object"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/saddle\/PctMethod$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/saddle\/PctMethod$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/saddle\/PctMethod$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/saddle\/PctMethod$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/saddle\/PctMethod$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/saddle\/PctMethod$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/saddle\/PctMethod$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/PctMethod$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/PctMethod$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/PctMethod$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/saddle\/PctMethod$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/saddle\/PctMethod$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/saddle\/PctMethod$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/saddle\/PctMethod$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/saddle\/PctMethod$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/saddle\/PctMethod$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "org\/saddle\/PctMethod$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/saddle\/PctMethod$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/saddle\/PctMethod$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "org\/saddle\/PctMethod.html", "kind" : "trait", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/saddle\/PctMethod.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/saddle\/PctMethod.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/saddle\/PctMethod.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/saddle\/PctMethod.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/saddle\/PctMethod.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/saddle\/PctMethod.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/saddle\/PctMethod.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/PctMethod.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/PctMethod.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/PctMethod.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/saddle\/PctMethod.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/saddle\/PctMethod.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/saddle\/PctMethod.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/saddle\/PctMethod.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/saddle\/PctMethod.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/saddle\/PctMethod.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "org\/saddle\/PctMethod.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/saddle\/PctMethod.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/saddle\/PctMethod.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "Trait which specifies what percentile method to use"}, {"name" : "org.saddle.PrimitiveToScalar", "shortDescription" : "", "members_class" : [{"label" : "isNA", "tail" : "(): Boolean", "member" : "org.saddle.PrimitiveToScalar.isNA", "link" : "org\/saddle\/package$$PrimitiveToScalar.html#isNA:Boolean", "kind" : "def"}, {"label" : "toScalar", "tail" : "(): Scalar[T]", "member" : "org.saddle.PrimitiveToScalar.toScalar", "link" : "org\/saddle\/package$$PrimitiveToScalar.html#toScalar:org.saddle.scalar.Scalar[T]", "kind" : "def"}, {"member" : "org.saddle.PrimitiveToScalar#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/saddle\/package$$PrimitiveToScalar.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/saddle\/package$$PrimitiveToScalar.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/saddle\/package$$PrimitiveToScalar.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/saddle\/package$$PrimitiveToScalar.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/saddle\/package$$PrimitiveToScalar.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/saddle\/package$$PrimitiveToScalar.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/saddle\/package$$PrimitiveToScalar.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/package$$PrimitiveToScalar.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/package$$PrimitiveToScalar.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/package$$PrimitiveToScalar.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/saddle\/package$$PrimitiveToScalar.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/saddle\/package$$PrimitiveToScalar.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/saddle\/package$$PrimitiveToScalar.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/saddle\/package$$PrimitiveToScalar.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/saddle\/package$$PrimitiveToScalar.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/saddle\/package$$PrimitiveToScalar.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "org\/saddle\/package$$PrimitiveToScalar.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/saddle\/package$$PrimitiveToScalar.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/saddle\/package$$PrimitiveToScalar.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/saddle\/package$$PrimitiveToScalar.html", "kind" : "class"}, {"name" : "org.saddle.RankTie", "object" : "org\/saddle\/RankTie$.html", "members_object" : [{"label" : "Nat", "tail" : "", "member" : "org.saddle.RankTie.Nat", "link" : "org\/saddle\/RankTie$.html#Nat", "kind" : "object"}, {"label" : "Max", "tail" : "", "member" : "org.saddle.RankTie.Max", "link" : "org\/saddle\/RankTie$.html#Max", "kind" : "object"}, {"label" : "Min", "tail" : "", "member" : "org.saddle.RankTie.Min", "link" : "org\/saddle\/RankTie$.html#Min", "kind" : "object"}, {"label" : "Avg", "tail" : "", "member" : "org.saddle.RankTie.Avg", "link" : "org\/saddle\/RankTie$.html#Avg", "kind" : "object"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/saddle\/RankTie$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/saddle\/RankTie$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/saddle\/RankTie$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/saddle\/RankTie$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/saddle\/RankTie$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/saddle\/RankTie$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/saddle\/RankTie$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/RankTie$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/RankTie$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/RankTie$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/saddle\/RankTie$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/saddle\/RankTie$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/saddle\/RankTie$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/saddle\/RankTie$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/saddle\/RankTie$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/saddle\/RankTie$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "org\/saddle\/RankTie$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/saddle\/RankTie$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/saddle\/RankTie$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "org\/saddle\/RankTie.html", "kind" : "trait", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/saddle\/RankTie.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/saddle\/RankTie.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/saddle\/RankTie.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/saddle\/RankTie.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/saddle\/RankTie.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/saddle\/RankTie.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/saddle\/RankTie.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/RankTie.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/RankTie.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/RankTie.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/saddle\/RankTie.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/saddle\/RankTie.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/saddle\/RankTie.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/saddle\/RankTie.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/saddle\/RankTie.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/saddle\/RankTie.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "org\/saddle\/RankTie.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/saddle\/RankTie.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/saddle\/RankTie.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "Trait which specifies how to break a rank tie"}, {"name" : "org.saddle.SeqToFrame", "shortDescription" : "Augments Seq with a toFrame method that returns a new Frame instance.", "members_class" : [{"label" : "toFrame", "tail" : "(): Frame[RX, CX, T]", "member" : "org.saddle.SeqToFrame.toFrame", "link" : "org\/saddle\/package$$SeqToFrame.html#toFrame:org.saddle.Frame[RX,CX,T]", "kind" : "def"}, {"member" : "org.saddle.SeqToFrame#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/saddle\/package$$SeqToFrame.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/saddle\/package$$SeqToFrame.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/saddle\/package$$SeqToFrame.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/saddle\/package$$SeqToFrame.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/saddle\/package$$SeqToFrame.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/saddle\/package$$SeqToFrame.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/saddle\/package$$SeqToFrame.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/package$$SeqToFrame.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/package$$SeqToFrame.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/package$$SeqToFrame.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/saddle\/package$$SeqToFrame.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/saddle\/package$$SeqToFrame.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/saddle\/package$$SeqToFrame.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/saddle\/package$$SeqToFrame.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/saddle\/package$$SeqToFrame.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/saddle\/package$$SeqToFrame.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "org\/saddle\/package$$SeqToFrame.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/saddle\/package$$SeqToFrame.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/saddle\/package$$SeqToFrame.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/saddle\/package$$SeqToFrame.html", "kind" : "class"}, {"name" : "org.saddle.SeqToFrame2", "shortDescription" : "", "members_class" : [{"label" : "toFrame", "tail" : "(): Frame[RX, CX, T]", "member" : "org.saddle.SeqToFrame2.toFrame", "link" : "org\/saddle\/package$$SeqToFrame2.html#toFrame:org.saddle.Frame[RX,CX,T]", "kind" : "def"}, {"member" : "org.saddle.SeqToFrame2#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/saddle\/package$$SeqToFrame2.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/saddle\/package$$SeqToFrame2.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/saddle\/package$$SeqToFrame2.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/saddle\/package$$SeqToFrame2.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/saddle\/package$$SeqToFrame2.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/saddle\/package$$SeqToFrame2.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/saddle\/package$$SeqToFrame2.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/package$$SeqToFrame2.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/package$$SeqToFrame2.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/package$$SeqToFrame2.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/saddle\/package$$SeqToFrame2.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/saddle\/package$$SeqToFrame2.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/saddle\/package$$SeqToFrame2.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/saddle\/package$$SeqToFrame2.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/saddle\/package$$SeqToFrame2.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/saddle\/package$$SeqToFrame2.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "org\/saddle\/package$$SeqToFrame2.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/saddle\/package$$SeqToFrame2.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/saddle\/package$$SeqToFrame2.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/saddle\/package$$SeqToFrame2.html", "kind" : "class"}, {"name" : "org.saddle.SeqToIndex", "shortDescription" : "Augments Seq with a toIndex method that returns a new Index instance.", "members_class" : [{"label" : "toIndex", "tail" : "(): Index[X]", "member" : "org.saddle.SeqToIndex.toIndex", "link" : "org\/saddle\/package$$SeqToIndex.html#toIndex:org.saddle.Index[X]", "kind" : "def"}, {"member" : "org.saddle.SeqToIndex#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/saddle\/package$$SeqToIndex.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/saddle\/package$$SeqToIndex.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/saddle\/package$$SeqToIndex.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/saddle\/package$$SeqToIndex.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/saddle\/package$$SeqToIndex.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/saddle\/package$$SeqToIndex.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/saddle\/package$$SeqToIndex.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/package$$SeqToIndex.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/package$$SeqToIndex.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/package$$SeqToIndex.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/saddle\/package$$SeqToIndex.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/saddle\/package$$SeqToIndex.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/saddle\/package$$SeqToIndex.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/saddle\/package$$SeqToIndex.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/saddle\/package$$SeqToIndex.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/saddle\/package$$SeqToIndex.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "org\/saddle\/package$$SeqToIndex.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/saddle\/package$$SeqToIndex.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/saddle\/package$$SeqToIndex.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/saddle\/package$$SeqToIndex.html", "kind" : "class"}, {"name" : "org.saddle.SeqToMat", "shortDescription" : "", "members_class" : [{"label" : "toMat", "tail" : "(): Mat[T]", "member" : "org.saddle.SeqToMat.toMat", "link" : "org\/saddle\/package$$SeqToMat.html#toMat:org.saddle.Mat[T]", "kind" : "def"}, {"member" : "org.saddle.SeqToMat#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/saddle\/package$$SeqToMat.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/saddle\/package$$SeqToMat.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/saddle\/package$$SeqToMat.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/saddle\/package$$SeqToMat.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/saddle\/package$$SeqToMat.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/saddle\/package$$SeqToMat.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/saddle\/package$$SeqToMat.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/package$$SeqToMat.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/package$$SeqToMat.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/package$$SeqToMat.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/saddle\/package$$SeqToMat.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/saddle\/package$$SeqToMat.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/saddle\/package$$SeqToMat.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/saddle\/package$$SeqToMat.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/saddle\/package$$SeqToMat.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/saddle\/package$$SeqToMat.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "org\/saddle\/package$$SeqToMat.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/saddle\/package$$SeqToMat.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/saddle\/package$$SeqToMat.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/saddle\/package$$SeqToMat.html", "kind" : "class"}, {"name" : "org.saddle.SeqToSeries", "shortDescription" : "Augments Seq with a toSeries method that returns a new Series instance.", "members_class" : [{"label" : "toSeries", "tail" : "(): Series[X, T]", "member" : "org.saddle.SeqToSeries.toSeries", "link" : "org\/saddle\/package$$SeqToSeries.html#toSeries:org.saddle.Series[X,T]", "kind" : "def"}, {"member" : "org.saddle.SeqToSeries#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/saddle\/package$$SeqToSeries.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/saddle\/package$$SeqToSeries.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/saddle\/package$$SeqToSeries.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/saddle\/package$$SeqToSeries.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/saddle\/package$$SeqToSeries.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/saddle\/package$$SeqToSeries.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/saddle\/package$$SeqToSeries.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/package$$SeqToSeries.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/package$$SeqToSeries.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/package$$SeqToSeries.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/saddle\/package$$SeqToSeries.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/saddle\/package$$SeqToSeries.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/saddle\/package$$SeqToSeries.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/saddle\/package$$SeqToSeries.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/saddle\/package$$SeqToSeries.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/saddle\/package$$SeqToSeries.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "org\/saddle\/package$$SeqToSeries.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/saddle\/package$$SeqToSeries.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/saddle\/package$$SeqToSeries.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/saddle\/package$$SeqToSeries.html", "kind" : "class"}, {"name" : "org.saddle.SeqToVec", "shortDescription" : "Augments Seq with a toVec method that returns a new Vec instance.", "members_class" : [{"label" : "toVec", "tail" : "(): Vec[T]", "member" : "org.saddle.SeqToVec.toVec", "link" : "org\/saddle\/package$$SeqToVec.html#toVec:org.saddle.Vec[T]", "kind" : "def"}, {"member" : "org.saddle.SeqToVec#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/saddle\/package$$SeqToVec.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/saddle\/package$$SeqToVec.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/saddle\/package$$SeqToVec.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/saddle\/package$$SeqToVec.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/saddle\/package$$SeqToVec.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/saddle\/package$$SeqToVec.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/saddle\/package$$SeqToVec.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/package$$SeqToVec.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/package$$SeqToVec.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/package$$SeqToVec.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/saddle\/package$$SeqToVec.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/saddle\/package$$SeqToVec.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/saddle\/package$$SeqToVec.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/saddle\/package$$SeqToVec.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/saddle\/package$$SeqToVec.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/saddle\/package$$SeqToVec.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "org\/saddle\/package$$SeqToVec.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/saddle\/package$$SeqToVec.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/saddle\/package$$SeqToVec.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/saddle\/package$$SeqToVec.html", "kind" : "class"}, {"name" : "org.saddle.Series", "shortDescription" : "Series is an immutable container for 1D homogeneous data which is indexedby a an associated sequence of keys.", "object" : "org\/saddle\/Series$.html", "members_class" : [{"label" : "updated", "tail" : "(value: T, keys: Array[X]): Series[X, T]", "member" : "org.saddle.Series.updated", "link" : "org\/saddle\/Series.html#updated(value:T,keys:Array[X]):org.saddle.Series[X,T]", "kind" : "def"}, {"label" : "updated", "tail" : "(value: T, keys: X*): Series[X, T]", "member" : "org.saddle.Series.updated", "link" : "org\/saddle\/Series.html#updated(value:T,keys:X*):org.saddle.Series[X,T]", "kind" : "def"}, {"label" : "toFrame", "tail" : "(): Frame[X, Int, T]", "member" : "org.saddle.Series.toFrame", "link" : "org\/saddle\/Series.html#toFrame:org.saddle.Frame[X,Int,T]", "kind" : "def"}, {"label" : "countif", "tail" : "(test: (T) => Boolean): Int", "member" : "org.saddle.Series.countif", "link" : "org\/saddle\/Series.html#countif(test:T=>Boolean):Int", "kind" : "def"}, {"label" : "count", "tail" : "(): Int", "member" : "org.saddle.Series.count", "link" : "org\/saddle\/Series.html#count:Int", "kind" : "def"}, {"label" : "max", "tail" : "(na: NUM[T]): Scalar[T]", "member" : "org.saddle.Series.max", "link" : "org\/saddle\/Series.html#max(implicitna:org.saddle.NUM[T]):org.saddle.scalar.Scalar[T]", "kind" : "def"}, {"label" : "min", "tail" : "(na: NUM[T]): Scalar[T]", "member" : "org.saddle.Series.min", "link" : "org\/saddle\/Series.html#min(implicitna:org.saddle.NUM[T]):org.saddle.scalar.Scalar[T]", "kind" : "def"}, {"label" : "median", "tail" : "(na: NUM[T]): Double", "member" : "org.saddle.Series.median", "link" : "org\/saddle\/Series.html#median(implicitna:org.saddle.NUM[T]):Double", "kind" : "def"}, {"label" : "sum", "tail" : "(na: NUM[T]): T", "member" : "org.saddle.Series.sum", "link" : "org\/saddle\/Series.html#sum(implicitna:org.saddle.NUM[T]):T", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "org.saddle.Series.toString", "link" : "org\/saddle\/Series.html#toString():String", "kind" : "def"}, {"label" : "equals", "tail" : "(other: Any): Boolean", "member" : "org.saddle.Series.equals", "link" : "org\/saddle\/Series.html#equals(other:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "org.saddle.Series.hashCode", "link" : "org\/saddle\/Series.html#hashCode():Int", "kind" : "def"}, {"label" : "print", "tail" : "(len: Int, stream: OutputStream): Unit", "member" : "org.saddle.Series.print", "link" : "org\/saddle\/Series.html#print(len:Int,stream:java.io.OutputStream):Unit", "kind" : "def"}, {"label" : "stringify", "tail" : "(len: Int): String", "member" : "org.saddle.Series.stringify", "link" : "org\/saddle\/Series.html#stringify(len:Int):String", "kind" : "def"}, {"label" : "toSeq", "tail" : "(): IndexedSeq[(X, T)]", "member" : "org.saddle.Series.toSeq", "link" : "org\/saddle\/Series.html#toSeq:IndexedSeq[(X,T)]", "kind" : "def"}, {"label" : "toVec", "tail" : "(): Vec[T]", "member" : "org.saddle.Series.toVec", "link" : "org\/saddle\/Series.html#toVec:org.saddle.Vec[T]", "kind" : "def"}, {"label" : "proxyWith", "tail" : "(proxy: Series[X, T]): Series[X, T]", "member" : "org.saddle.Series.proxyWith", "link" : "org\/saddle\/Series.html#proxyWith(proxy:org.saddle.Series[X,T]):org.saddle.Series[X,T]", "kind" : "def"}, {"label" : "align", "tail" : "(other: Series[X, U], how: JoinType)(arg0: ST[U]): (Series[X, T], Series[X, U])", "member" : "org.saddle.Series.align", "link" : "org\/saddle\/Series.html#align[U](other:org.saddle.Series[X,U],how:org.saddle.index.JoinType)(implicitevidence$24:org.saddle.ST[U]):(org.saddle.Series[X,T],org.saddle.Series[X,U])", "kind" : "def"}, {"label" : "joinF", "tail" : "(other: Frame[X, _, T], how: JoinType): Frame[X, Int, T]", "member" : "org.saddle.Series.joinF", "link" : "org\/saddle\/Series.html#joinF(other:org.saddle.Frame[X,_,T],how:org.saddle.index.JoinType):org.saddle.Frame[X,Int,T]", "kind" : "def"}, {"label" : "join", "tail" : "(other: Series[X, T], how: JoinType): Frame[X, Int, T]", "member" : "org.saddle.Series.join", "link" : "org\/saddle\/Series.html#join(other:org.saddle.Series[X,T],how:org.saddle.index.JoinType):org.saddle.Frame[X,Int,T]", "kind" : "def"}, {"label" : "pivot", "tail" : "(split: Splitter[X, O1, O2], ord1: ORD[O1], ord2: ORD[O2], m1: ST[O1], m2: ST[O2]): Frame[O1, O2, T]", "member" : "org.saddle.Series.pivot", "link" : "org\/saddle\/Series.html#pivot[O1,O2](implicitsplit:org.saddle.index.Splitter[X,O1,O2],implicitord1:org.saddle.ORD[O1],implicitord2:org.saddle.ORD[O2],implicitm1:org.saddle.ST[O1],implicitm2:org.saddle.ST[O2]):org.saddle.Frame[O1,O2,T]", "kind" : "def"}, {"label" : "splitBy", "tail" : "(k: X): (Series[X, T], Series[X, T])", "member" : "org.saddle.Series.splitBy", "link" : "org\/saddle\/Series.html#splitBy(k:X):(org.saddle.Series[X,T],org.saddle.Series[X,T])", "kind" : "def"}, {"label" : "splitAt", "tail" : "(i: Int): (Series[X, T], Series[X, T])", "member" : "org.saddle.Series.splitAt", "link" : "org\/saddle\/Series.html#splitAt(i:Int):(org.saddle.Series[X,T],org.saddle.Series[X,T])", "kind" : "def"}, {"label" : "rolling", "tail" : "(winSz: Int, f: (Series[X, T]) => B)(arg0: ST[B]): Series[X, B]", "member" : "org.saddle.Series.rolling", "link" : "org\/saddle\/Series.html#rolling[B](winSz:Int,f:org.saddle.Series[X,T]=>B)(implicitevidence$23:org.saddle.ST[B]):org.saddle.Series[X,B]", "kind" : "def"}, {"label" : "groupBy", "tail" : "(ix: Index[Y])(arg0: ST[Y], arg1: ORD[Y]): SeriesGrouper[Y, X, T]", "member" : "org.saddle.Series.groupBy", "link" : "org\/saddle\/Series.html#groupBy[Y](ix:org.saddle.Index[Y])(implicitevidence$21:org.saddle.ST[Y],implicitevidence$22:org.saddle.ORD[Y]):org.saddle.groupby.SeriesGrouper[Y,X,T]", "kind" : "def"}, {"label" : "groupBy", "tail" : "(fn: (X) => Y)(arg0: ST[Y], arg1: ORD[Y]): SeriesGrouper[Y, X, T]", "member" : "org.saddle.Series.groupBy", "link" : "org\/saddle\/Series.html#groupBy[Y](fn:X=>Y)(implicitevidence$19:org.saddle.ST[Y],implicitevidence$20:org.saddle.ORD[Y]):org.saddle.groupby.SeriesGrouper[Y,X,T]", "kind" : "def"}, {"label" : "groupBy", "tail" : "(): SeriesGrouper[X, X, T]", "member" : "org.saddle.Series.groupBy", "link" : "org\/saddle\/Series.html#groupBy:org.saddle.groupby.SeriesGrouper[X,X,T]", "kind" : "def"}, {"label" : "reversed", "tail" : "(): Series[X, T]", "member" : "org.saddle.Series.reversed", "link" : "org\/saddle\/Series.html#reversed:org.saddle.Series[X,T]", "kind" : "def"}, {"label" : "sortedIx", "tail" : "(): Series[X, T]", "member" : "org.saddle.Series.sortedIx", "link" : "org\/saddle\/Series.html#sortedIx:org.saddle.Series[X,T]", "kind" : "def"}, {"label" : "sorted", "tail" : "(ev: ORD[T]): Series[X, T]", "member" : "org.saddle.Series.sorted", "link" : "org\/saddle\/Series.html#sorted(implicitev:org.saddle.ORD[T]):org.saddle.Series[X,T]", "kind" : "def"}, {"label" : "joinMap", "tail" : "(other: Series[X, U], how: JoinType)(f: (T, U) => V)(arg0: ST[U], arg1: ST[V]): Series[X, V]", "member" : "org.saddle.Series.joinMap", "link" : "org\/saddle\/Series.html#joinMap[U,V](other:org.saddle.Series[X,U],how:org.saddle.index.JoinType)(f:(T,U)=>V)(implicitevidence$17:org.saddle.ST[U],implicitevidence$18:org.saddle.ST[V]):org.saddle.Series[X,V]", "kind" : "def"}, {"label" : "scanLeft", "tail" : "(init: U)(f: (U, T) => U)(arg0: ST[U]): Series[X, U]", "member" : "org.saddle.Series.scanLeft", "link" : "org\/saddle\/Series.html#scanLeft[U](init:U)(f:(U,T)=>U)(implicitevidence$16:org.saddle.ST[U]):org.saddle.Series[X,U]", "kind" : "def"}, {"label" : "mapValues", "tail" : "(f: (T) => U)(arg0: ST[U]): Series[X, U]", "member" : "org.saddle.Series.mapValues", "link" : "org\/saddle\/Series.html#mapValues[U](f:T=>U)(implicitevidence$15:org.saddle.ST[U]):org.saddle.Series[X,U]", "kind" : "def"}, {"label" : "flatMap", "tail" : "(f: ((X, T)) => Iterable[(Y, U)])(arg0: ST[Y], arg1: ORD[Y], arg2: ST[U]): Series[Y, U]", "member" : "org.saddle.Series.flatMap", "link" : "org\/saddle\/Series.html#flatMap[Y,U](f:((X,T))=>Iterable[(Y,U)])(implicitevidence$12:org.saddle.ST[Y],implicitevidence$13:org.saddle.ORD[Y],implicitevidence$14:org.saddle.ST[U]):org.saddle.Series[Y,U]", "kind" : "def"}, {"label" : "map", "tail" : "(f: ((X, T)) => (Y, U))(arg0: ST[Y], arg1: ORD[Y], arg2: ST[U]): Series[Y, U]", "member" : "org.saddle.Series.map", "link" : "org\/saddle\/Series.html#map[Y,U](f:((X,T))=>(Y,U))(implicitevidence$9:org.saddle.ST[Y],implicitevidence$10:org.saddle.ORD[Y],implicitevidence$11:org.saddle.ST[U]):org.saddle.Series[Y,U]", "kind" : "def"}, {"label" : "exists", "tail" : "(pred: (T) => Boolean): Boolean", "member" : "org.saddle.Series.exists", "link" : "org\/saddle\/Series.html#exists(pred:T=>Boolean):Boolean", "kind" : "def"}, {"label" : "contains", "tail" : "(key: X): Boolean", "member" : "org.saddle.Series.contains", "link" : "org\/saddle\/Series.html#contains(key:X):Boolean", "kind" : "def"}, {"label" : "maxKey", "tail" : "(num: NUM[T]): Scalar[X]", "member" : "org.saddle.Series.maxKey", "link" : "org\/saddle\/Series.html#maxKey(implicitnum:org.saddle.NUM[T]):org.saddle.scalar.Scalar[X]", "kind" : "def"}, {"label" : "minKey", "tail" : "(num: NUM[T]): Scalar[X]", "member" : "org.saddle.Series.minKey", "link" : "org\/saddle\/Series.html#minKey(implicitnum:org.saddle.NUM[T]):org.saddle.scalar.Scalar[X]", "kind" : "def"}, {"label" : "findOneKey", "tail" : "(pred: (T) => Boolean): Scalar[X]", "member" : "org.saddle.Series.findOneKey", "link" : "org\/saddle\/Series.html#findOneKey(pred:T=>Boolean):org.saddle.scalar.Scalar[X]", "kind" : "def"}, {"label" : "findOne", "tail" : "(pred: (T) => Boolean): Int", "member" : "org.saddle.Series.findOne", "link" : "org\/saddle\/Series.html#findOne(pred:T=>Boolean):Int", "kind" : "def"}, {"label" : "findKey", "tail" : "(pred: (T) => Boolean): Index[X]", "member" : "org.saddle.Series.findKey", "link" : "org\/saddle\/Series.html#findKey(pred:T=>Boolean):org.saddle.Index[X]", "kind" : "def"}, {"label" : "find", "tail" : "(pred: (T) => Boolean): Vec[Int]", "member" : "org.saddle.Series.find", "link" : "org\/saddle\/Series.html#find(pred:T=>Boolean):org.saddle.Vec[Int]", "kind" : "def"}, {"label" : "where", "tail" : "(pred: Vec[Boolean]): Series[X, T]", "member" : "org.saddle.Series.where", "link" : "org\/saddle\/Series.html#where(pred:org.saddle.Vec[Boolean]):org.saddle.Series[X,T]", "kind" : "def"}, {"label" : "where", "tail" : "(pred: Series[_, Boolean]): Series[X, T]", "member" : "org.saddle.Series.where", "link" : "org\/saddle\/Series.html#where(pred:org.saddle.Series[_,Boolean]):org.saddle.Series[X,T]", "kind" : "def"}, {"label" : "filterAt", "tail" : "(pred: (Int) => Boolean): Series[X, T]", "member" : "org.saddle.Series.filterAt", "link" : "org\/saddle\/Series.html#filterAt(pred:Int=>Boolean):org.saddle.Series[X,T]", "kind" : "def"}, {"label" : "filterIx", "tail" : "(pred: (X) => Boolean): Series[X, T]", "member" : "org.saddle.Series.filterIx", "link" : "org\/saddle\/Series.html#filterIx(pred:X=>Boolean):org.saddle.Series[X,T]", "kind" : "def"}, {"label" : "filter", "tail" : "(pred: (T) => Boolean): Series[X, T]", "member" : "org.saddle.Series.filter", "link" : "org\/saddle\/Series.html#filter(pred:T=>Boolean):org.saddle.Series[X,T]", "kind" : "def"}, {"label" : "maskIx", "tail" : "(f: (X) => Boolean): Series[X, T]", "member" : "org.saddle.Series.maskIx", "link" : "org\/saddle\/Series.html#maskIx(f:X=>Boolean):org.saddle.Series[X,T]", "kind" : "def"}, {"label" : "mask", "tail" : "(f: (T) => Boolean): Series[X, T]", "member" : "org.saddle.Series.mask", "link" : "org\/saddle\/Series.html#mask(f:T=>Boolean):org.saddle.Series[X,T]", "kind" : "def"}, {"label" : "mask", "tail" : "(m: Vec[Boolean]): Series[X, T]", "member" : "org.saddle.Series.mask", "link" : "org\/saddle\/Series.html#mask(m:org.saddle.Vec[Boolean]):org.saddle.Series[X,T]", "kind" : "def"}, {"label" : "swap", "tail" : "(ord: ORD[T]): Series[T, X]", "member" : "org.saddle.Series.swap", "link" : "org\/saddle\/Series.html#swap(implicitord:org.saddle.ORD[T]):org.saddle.Series[T,X]", "kind" : "def"}, {"label" : "distinctIx", "tail" : "(): Series[X, T]", "member" : "org.saddle.Series.distinctIx", "link" : "org\/saddle\/Series.html#distinctIx:org.saddle.Series[X,T]", "kind" : "def"}, {"label" : "hasNA", "tail" : "(): Boolean", "member" : "org.saddle.Series.hasNA", "link" : "org\/saddle\/Series.html#hasNA:Boolean", "kind" : "def"}, {"label" : "dropNA", "tail" : "(): Series[X, T]", "member" : "org.saddle.Series.dropNA", "link" : "org\/saddle\/Series.html#dropNA:org.saddle.Series[X,T]", "kind" : "def"}, {"label" : "fillBackward", "tail" : "(limit: Int): Series[X, T]", "member" : "org.saddle.Series.fillBackward", "link" : "org\/saddle\/Series.html#fillBackward(limit:Int):org.saddle.Series[X,T]", "kind" : "def"}, {"label" : "fillForward", "tail" : "(limit: Int): Series[X, T]", "member" : "org.saddle.Series.fillForward", "link" : "org\/saddle\/Series.html#fillForward(limit:Int):org.saddle.Series[X,T]", "kind" : "def"}, {"label" : "fillNA", "tail" : "(method: FillMethod, limit: Int): Series[X, T]", "member" : "org.saddle.Series.fillNA", "link" : "org\/saddle\/Series.html#fillNA(method:org.saddle.FillMethod,limit:Int):org.saddle.Series[X,T]", "kind" : "def"}, {"label" : "fillNA", "tail" : "(f: (X) => T): Series[X, T]", "member" : "org.saddle.Series.fillNA", "link" : "org\/saddle\/Series.html#fillNA(f:X=>T):org.saddle.Series[X,T]", "kind" : "def"}, {"label" : "shift", "tail" : "(n: Int): Series[X, T]", "member" : "org.saddle.Series.shift", "link" : "org\/saddle\/Series.html#shift(n:Int):org.saddle.Series[X,T]", "kind" : "def"}, {"label" : "tail", "tail" : "(n: Int): Series[X, T]", "member" : "org.saddle.Series.tail", "link" : "org\/saddle\/Series.html#tail(n:Int):org.saddle.Series[X,T]", "kind" : "def"}, {"label" : "head", "tail" : "(n: Int): Series[X, T]", "member" : "org.saddle.Series.head", "link" : "org\/saddle\/Series.html#head(n:Int):org.saddle.Series[X,T]", "kind" : "def"}, {"label" : "take", "tail" : "(locs: Array[Int]): Series[X, T]", "member" : "org.saddle.Series.take", "link" : "org\/saddle\/Series.html#take(locs:Array[Int]):org.saddle.Series[X,T]", "kind" : "def"}, {"label" : "slice", "tail" : "(from: Int, until: Int, stride: Int): Series[X, T]", "member" : "org.saddle.Series.slice", "link" : "org\/saddle\/Series.html#slice(from:Int,until:Int,stride:Int):org.saddle.Series[X,T]", "kind" : "def"}, {"label" : "sliceBy", "tail" : "(rng: Slice[X]): Series[X, T]", "member" : "org.saddle.Series.sliceBy", "link" : "org\/saddle\/Series.html#sliceBy(rng:org.saddle.index.Slice[X]):org.saddle.Series[X,T]", "kind" : "def"}, {"label" : "sliceBy", "tail" : "(from: X, to: X, inclusive: Boolean): Series[X, T]", "member" : "org.saddle.Series.sliceBy", "link" : "org\/saddle\/Series.html#sliceBy(from:X,to:X,inclusive:Boolean):org.saddle.Series[X,T]", "kind" : "def"}, {"label" : "unary_-", "tail" : "(num: NUM[T]): Series[X, T]", "member" : "org.saddle.Series.unary_-", "link" : "org\/saddle\/Series.html#unary_-(implicitnum:org.saddle.NUM[T]):org.saddle.Series[X,T]", "kind" : "def"}, {"label" : "concat", "tail" : "(other: Series[X, T]): Series[X, T]", "member" : "org.saddle.Series.concat", "link" : "org\/saddle\/Series.html#concat(other:org.saddle.Series[X,T]):org.saddle.Series[X,T]", "kind" : "def"}, {"label" : "mapVec", "tail" : "(fn: (Vec[T]) => Vec[Y])(arg0: ST[Y]): Series[X, Y]", "member" : "org.saddle.Series.mapVec", "link" : "org\/saddle\/Series.html#mapVec[Y](fn:org.saddle.Vec[T]=>org.saddle.Vec[Y])(implicitevidence$8:org.saddle.ST[Y]):org.saddle.Series[X,Y]", "kind" : "def"}, {"label" : "mapIndex", "tail" : "(fn: (X) => Y)(arg0: ST[Y], arg1: ORD[Y]): Series[Y, T]", "member" : "org.saddle.Series.mapIndex", "link" : "org\/saddle\/Series.html#mapIndex[Y](fn:X=>Y)(implicitevidence$6:org.saddle.ST[Y],implicitevidence$7:org.saddle.ORD[Y]):org.saddle.Series[Y,T]", "kind" : "def"}, {"label" : "resetIndex", "tail" : "(): Series[Int, T]", "member" : "org.saddle.Series.resetIndex", "link" : "org\/saddle\/Series.html#resetIndex:org.saddle.Series[Int,T]", "kind" : "def"}, {"label" : "setIndex", "tail" : "(newIx: Index[Y])(arg0: ST[Y], arg1: ORD[Y]): Series[Y, T]", "member" : "org.saddle.Series.setIndex", "link" : "org\/saddle\/Series.html#setIndex[Y](newIx:org.saddle.Index[Y])(implicitevidence$4:org.saddle.ST[Y],implicitevidence$5:org.saddle.ORD[Y]):org.saddle.Series[Y,T]", "kind" : "def"}, {"label" : "reindex", "tail" : "(newIx: Index[X], fillMethod: FillMethod, limit: Int): Series[X, T]", "member" : "org.saddle.Series.reindex", "link" : "org\/saddle\/Series.html#reindex(newIx:org.saddle.Index[X],fillMethod:org.saddle.FillMethod,limit:Int):org.saddle.Series[X,T]", "kind" : "def"}, {"label" : "reindex", "tail" : "(keys: X*): Series[X, T]", "member" : "org.saddle.Series.reindex", "link" : "org\/saddle\/Series.html#reindex(keys:X*):org.saddle.Series[X,T]", "kind" : "def"}, {"label" : "reindex", "tail" : "(newIx: Index[X]): Series[X, T]", "member" : "org.saddle.Series.reindex", "link" : "org\/saddle\/Series.html#reindex(newIx:org.saddle.Index[X]):org.saddle.Series[X,T]", "kind" : "def"}, {"label" : "apply", "tail" : "(slice: Slice[X]): Series[X, T]", "member" : "org.saddle.Series.apply", "link" : "org\/saddle\/Series.html#apply(slice:org.saddle.index.Slice[X]):org.saddle.Series[X,T]", "kind" : "def"}, {"label" : "apply", "tail" : "(keys: X*): Series[X, T]", "member" : "org.saddle.Series.apply", "link" : "org\/saddle\/Series.html#apply(keys:X*):org.saddle.Series[X,T]", "kind" : "def"}, {"label" : "apply", "tail" : "(keys: Vec[X]): Series[X, T]", "member" : "org.saddle.Series.apply", "link" : "org\/saddle\/Series.html#apply(keys:org.saddle.Vec[X]):org.saddle.Series[X,T]", "kind" : "def"}, {"label" : "apply", "tail" : "(keys: Array[X]): Series[X, T]", "member" : "org.saddle.Series.apply", "link" : "org\/saddle\/Series.html#apply(keys:Array[X]):org.saddle.Series[X,T]", "kind" : "def"}, {"label" : "lastKey", "tail" : "(): Scalar[X]", "member" : "org.saddle.Series.lastKey", "link" : "org\/saddle\/Series.html#lastKey:org.saddle.scalar.Scalar[X]", "kind" : "def"}, {"label" : "firstKey", "tail" : "(): Scalar[X]", "member" : "org.saddle.Series.firstKey", "link" : "org\/saddle\/Series.html#firstKey:org.saddle.scalar.Scalar[X]", "kind" : "def"}, {"label" : "keyAt", "tail" : "(locs: Int*): Index[X]", "member" : "org.saddle.Series.keyAt", "link" : "org\/saddle\/Series.html#keyAt(locs:Int*):org.saddle.Index[X]", "kind" : "def"}, {"label" : "keyAt", "tail" : "(locs: Array[Int]): Index[X]", "member" : "org.saddle.Series.keyAt", "link" : "org\/saddle\/Series.html#keyAt(locs:Array[Int]):org.saddle.Index[X]", "kind" : "def"}, {"label" : "keyAt", "tail" : "(loc: Int): Scalar[X]", "member" : "org.saddle.Series.keyAt", "link" : "org\/saddle\/Series.html#keyAt(loc:Int):org.saddle.scalar.Scalar[X]", "kind" : "def"}, {"label" : "last", "tail" : "(key: X): Scalar[T]", "member" : "org.saddle.Series.last", "link" : "org\/saddle\/Series.html#last(key:X):org.saddle.scalar.Scalar[T]", "kind" : "def"}, {"label" : "last", "tail" : "(): Scalar[T]", "member" : "org.saddle.Series.last", "link" : "org\/saddle\/Series.html#last:org.saddle.scalar.Scalar[T]", "kind" : "def"}, {"label" : "getRaw", "tail" : "(key: X): T", "member" : "org.saddle.Series.getRaw", "link" : "org\/saddle\/Series.html#getRaw(key:X):T", "kind" : "def"}, {"label" : "get", "tail" : "(key: X): Scalar[T]", "member" : "org.saddle.Series.get", "link" : "org\/saddle\/Series.html#get(key:X):org.saddle.scalar.Scalar[T]", "kind" : "def"}, {"label" : "first", "tail" : "(key: X): Scalar[T]", "member" : "org.saddle.Series.first", "link" : "org\/saddle\/Series.html#first(key:X):org.saddle.scalar.Scalar[T]", "kind" : "def"}, {"label" : "first", "tail" : "(): Scalar[T]", "member" : "org.saddle.Series.first", "link" : "org\/saddle\/Series.html#first:org.saddle.scalar.Scalar[T]", "kind" : "def"}, {"label" : "at", "tail" : "(locs: Int*): Series[X, T]", "member" : "org.saddle.Series.at", "link" : "org\/saddle\/Series.html#at(locs:Int*):org.saddle.Series[X,T]", "kind" : "def"}, {"label" : "at", "tail" : "(locs: Array[Int]): Series[X, T]", "member" : "org.saddle.Series.at", "link" : "org\/saddle\/Series.html#at(locs:Array[Int]):org.saddle.Series[X,T]", "kind" : "def"}, {"label" : "at", "tail" : "(loc: Int): Scalar[T]", "member" : "org.saddle.Series.at", "link" : "org\/saddle\/Series.html#at(loc:Int):org.saddle.scalar.Scalar[T]", "kind" : "def"}, {"label" : "raw", "tail" : "(loc: Int): T", "member" : "org.saddle.Series.raw", "link" : "org\/saddle\/Series.html#raw(loc:Int):T", "kind" : "def"}, {"label" : "isEmpty", "tail" : "(): Boolean", "member" : "org.saddle.Series.isEmpty", "link" : "org\/saddle\/Series.html#isEmpty:Boolean", "kind" : "def"}, {"label" : "length", "tail" : "(): Int", "member" : "org.saddle.Series.length", "link" : "org\/saddle\/Series.html#length:Int", "kind" : "def"}, {"member" : "org.saddle.Series#<init>", "error" : "unsupported entity"}, {"label" : "index", "tail" : ": Index[X]", "member" : "org.saddle.Series.index", "link" : "org\/saddle\/Series.html#index:org.saddle.Index[X]", "kind" : "val"}, {"label" : "values", "tail" : ": Vec[T]", "member" : "org.saddle.Series.values", "link" : "org\/saddle\/Series.html#values:org.saddle.Vec[T]", "kind" : "val"}, {"label" : "**=", "tail" : "(other: B)(op: BinOpInPlace[Power, Series[X, T], B]): Unit", "member" : "org.saddle.ops.NumericOps.**=", "link" : "org\/saddle\/Series.html#**=[B](other:B)(implicitop:org.saddle.ops.BinOpInPlace[org.saddle.ops.Power,This,B]):Unit", "kind" : "def"}, {"label" : "%=", "tail" : "(other: B)(op: BinOpInPlace[Mod, Series[X, T], B]): Unit", "member" : "org.saddle.ops.NumericOps.%=", "link" : "org\/saddle\/Series.html#%=[B](other:B)(implicitop:org.saddle.ops.BinOpInPlace[org.saddle.ops.Mod,This,B]):Unit", "kind" : "def"}, {"label" : "\/=", "tail" : "(other: B)(op: BinOpInPlace[Divide, Series[X, T], B]): Unit", "member" : "org.saddle.ops.NumericOps.\/=", "link" : "org\/saddle\/Series.html#\/=[B](other:B)(implicitop:org.saddle.ops.BinOpInPlace[org.saddle.ops.Divide,This,B]):Unit", "kind" : "def"}, {"label" : "*=", "tail" : "(other: B)(op: BinOpInPlace[Multiply, Series[X, T], B]): Unit", "member" : "org.saddle.ops.NumericOps.*=", "link" : "org\/saddle\/Series.html#*=[B](other:B)(implicitop:org.saddle.ops.BinOpInPlace[org.saddle.ops.Multiply,This,B]):Unit", "kind" : "def"}, {"label" : "-=", "tail" : "(other: B)(op: BinOpInPlace[Subtract, Series[X, T], B]): Unit", "member" : "org.saddle.ops.NumericOps.-=", "link" : "org\/saddle\/Series.html#-=[B](other:B)(implicitop:org.saddle.ops.BinOpInPlace[org.saddle.ops.Subtract,This,B]):Unit", "kind" : "def"}, {"label" : "+=", "tail" : "(other: B)(op: BinOpInPlace[Add, Series[X, T], B]): Unit", "member" : "org.saddle.ops.NumericOps.+=", "link" : "org\/saddle\/Series.html#+=[B](other:B)(implicitop:org.saddle.ops.BinOpInPlace[org.saddle.ops.Add,This,B]):Unit", "kind" : "def"}, {"label" : "outer", "tail" : "(other: B)(op: BinOp[OuterProd, Series[X, T], B, That]): That", "member" : "org.saddle.ops.NumericOps.outer", "link" : "org\/saddle\/Series.html#outer[B,That](other:B)(implicitop:org.saddle.ops.BinOp[org.saddle.ops.OuterProd,This,B,That]):That", "kind" : "def"}, {"label" : "dot", "tail" : "(other: B)(op: BinOp[InnerProd, Series[X, T], B, That]): That", "member" : "org.saddle.ops.NumericOps.dot", "link" : "org\/saddle\/Series.html#dot[B,That](other:B)(implicitop:org.saddle.ops.BinOp[org.saddle.ops.InnerProd,This,B,That]):That", "kind" : "def"}, {"label" : "xor", "tail" : "(other: B)(op: BinOp[XorOp, Series[X, T], B, That]): That", "member" : "org.saddle.ops.NumericOps.xor", "link" : "org\/saddle\/Series.html#xor[B,That](other:B)(implicitop:org.saddle.ops.BinOp[org.saddle.ops.XorOp,This,B,That]):That", "kind" : "def"}, {"label" : "&&", "tail" : "(other: B)(op: BinOp[AndOp, Series[X, T], B, That]): That", "member" : "org.saddle.ops.NumericOps.&&", "link" : "org\/saddle\/Series.html#&&[B,That](other:B)(implicitop:org.saddle.ops.BinOp[org.saddle.ops.AndOp,This,B,That]):That", "kind" : "def"}, {"label" : "||", "tail" : "(other: B)(op: BinOp[OrOp, Series[X, T], B, That]): That", "member" : "org.saddle.ops.NumericOps.||", "link" : "org\/saddle\/Series.html#||[B,That](other:B)(implicitop:org.saddle.ops.BinOp[org.saddle.ops.OrOp,This,B,That]):That", "kind" : "def"}, {"label" : "<>", "tail" : "(other: B)(op: BinOp[NeqOp, Series[X, T], B, That]): That", "member" : "org.saddle.ops.NumericOps.<>", "link" : "org\/saddle\/Series.html#<>[B,That](other:B)(implicitop:org.saddle.ops.BinOp[org.saddle.ops.NeqOp,This,B,That]):That", "kind" : "def"}, {"label" : "=?", "tail" : "(other: B)(op: BinOp[EqOp, Series[X, T], B, That]): That", "member" : "org.saddle.ops.NumericOps.=?", "link" : "org\/saddle\/Series.html#=?[B,That](other:B)(implicitop:org.saddle.ops.BinOp[org.saddle.ops.EqOp,This,B,That]):That", "kind" : "def"}, {"label" : ">=", "tail" : "(other: B)(op: BinOp[GteOp, Series[X, T], B, That]): That", "member" : "org.saddle.ops.NumericOps.>=", "link" : "org\/saddle\/Series.html#>=[B,That](other:B)(implicitop:org.saddle.ops.BinOp[org.saddle.ops.GteOp,This,B,That]):That", "kind" : "def"}, {"label" : ">", "tail" : "(other: B)(op: BinOp[GtOp, Series[X, T], B, That]): That", "member" : "org.saddle.ops.NumericOps.>", "link" : "org\/saddle\/Series.html#>[B,That](other:B)(implicitop:org.saddle.ops.BinOp[org.saddle.ops.GtOp,This,B,That]):That", "kind" : "def"}, {"label" : "<=", "tail" : "(other: B)(op: BinOp[LteOp, Series[X, T], B, That]): That", "member" : "org.saddle.ops.NumericOps.<=", "link" : "org\/saddle\/Series.html#<=[B,That](other:B)(implicitop:org.saddle.ops.BinOp[org.saddle.ops.LteOp,This,B,That]):That", "kind" : "def"}, {"label" : "<", "tail" : "(other: B)(op: BinOp[LtOp, Series[X, T], B, That]): That", "member" : "org.saddle.ops.NumericOps.<", "link" : "org\/saddle\/Series.html#<[B,That](other:B)(implicitop:org.saddle.ops.BinOp[org.saddle.ops.LtOp,This,B,That]):That", "kind" : "def"}, {"label" : ">>>", "tail" : "(other: B)(op: BinOp[BitUShr, Series[X, T], B, That]): That", "member" : "org.saddle.ops.NumericOps.>>>", "link" : "org\/saddle\/Series.html#>>>[B,That](other:B)(implicitop:org.saddle.ops.BinOp[org.saddle.ops.BitUShr,This,B,That]):That", "kind" : "def"}, {"label" : ">>", "tail" : "(other: B)(op: BinOp[BitShr, Series[X, T], B, That]): That", "member" : "org.saddle.ops.NumericOps.>>", "link" : "org\/saddle\/Series.html#>>[B,That](other:B)(implicitop:org.saddle.ops.BinOp[org.saddle.ops.BitShr,This,B,That]):That", "kind" : "def"}, {"label" : "<<", "tail" : "(other: B)(op: BinOp[BitShl, Series[X, T], B, That]): That", "member" : "org.saddle.ops.NumericOps.<<", "link" : "org\/saddle\/Series.html#<<[B,That](other:B)(implicitop:org.saddle.ops.BinOp[org.saddle.ops.BitShl,This,B,That]):That", "kind" : "def"}, {"label" : "^", "tail" : "(other: B)(op: BinOp[BitXor, Series[X, T], B, That]): That", "member" : "org.saddle.ops.NumericOps.^", "link" : "org\/saddle\/Series.html#^[B,That](other:B)(implicitop:org.saddle.ops.BinOp[org.saddle.ops.BitXor,This,B,That]):That", "kind" : "def"}, {"label" : "|", "tail" : "(other: B)(op: BinOp[BitOr, Series[X, T], B, That]): That", "member" : "org.saddle.ops.NumericOps.|", "link" : "org\/saddle\/Series.html#|[B,That](other:B)(implicitop:org.saddle.ops.BinOp[org.saddle.ops.BitOr,This,B,That]):That", "kind" : "def"}, {"label" : "&", "tail" : "(other: B)(op: BinOp[BitAnd, Series[X, T], B, That]): That", "member" : "org.saddle.ops.NumericOps.&", "link" : "org\/saddle\/Series.html#&[B,That](other:B)(implicitop:org.saddle.ops.BinOp[org.saddle.ops.BitAnd,This,B,That]):That", "kind" : "def"}, {"label" : "**", "tail" : "(other: B)(op: BinOp[Power, Series[X, T], B, That]): That", "member" : "org.saddle.ops.NumericOps.**", "link" : "org\/saddle\/Series.html#**[B,That](other:B)(implicitop:org.saddle.ops.BinOp[org.saddle.ops.Power,This,B,That]):That", "kind" : "def"}, {"label" : "%", "tail" : "(other: B)(op: BinOp[Mod, Series[X, T], B, That]): That", "member" : "org.saddle.ops.NumericOps.%", "link" : "org\/saddle\/Series.html#%[B,That](other:B)(implicitop:org.saddle.ops.BinOp[org.saddle.ops.Mod,This,B,That]):That", "kind" : "def"}, {"label" : "*", "tail" : "(other: B)(op: BinOp[Multiply, Series[X, T], B, That]): That", "member" : "org.saddle.ops.NumericOps.*", "link" : "org\/saddle\/Series.html#*[B,That](other:B)(implicitop:org.saddle.ops.BinOp[org.saddle.ops.Multiply,This,B,That]):That", "kind" : "def"}, {"label" : "\/", "tail" : "(other: B)(op: BinOp[Divide, Series[X, T], B, That]): That", "member" : "org.saddle.ops.NumericOps.\/", "link" : "org\/saddle\/Series.html#\/[B,That](other:B)(implicitop:org.saddle.ops.BinOp[org.saddle.ops.Divide,This,B,That]):That", "kind" : "def"}, {"label" : "-", "tail" : "(other: B)(op: BinOp[Subtract, Series[X, T], B, That]): That", "member" : "org.saddle.ops.NumericOps.-", "link" : "org\/saddle\/Series.html#-[B,That](other:B)(implicitop:org.saddle.ops.BinOp[org.saddle.ops.Subtract,This,B,That]):That", "kind" : "def"}, {"label" : "+", "tail" : "(other: B)(op: BinOp[Add, Series[X, T], B, That]): That", "member" : "org.saddle.ops.NumericOps.+", "link" : "org\/saddle\/Series.html#+[B,That](other:B)(implicitop:org.saddle.ops.BinOp[org.saddle.ops.Add,This,B,That]):That", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/saddle\/Series.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/saddle\/Series.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/saddle\/Series.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/saddle\/Series.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/saddle\/Series.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/saddle\/Series.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/saddle\/Series.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/Series.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/Series.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/Series.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/saddle\/Series.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/saddle\/Series.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/saddle\/Series.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "org\/saddle\/Series.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/saddle\/Series.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/saddle\/Series.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "SrSrEOp", "tail" : "", "member" : "org.saddle.ops.BinOpSeries.SrSrEOp", "link" : "org\/saddle\/ops\/BinOpSeries.html#SrSrEOp[OP<:org.saddle.ops.ScalarOp,X,A,B,C]extendsBinOp[OP,org.saddle.Series[X,A],org.saddle.Series[X,B],org.saddle.Series[X,C]]", "kind" : "final class"}, {"label" : "SrScEOp", "tail" : "", "member" : "org.saddle.ops.BinOpSeries.SrScEOp", "link" : "org\/saddle\/ops\/BinOpSeries.html#SrScEOp[OP<:org.saddle.ops.ScalarOp,X,A,B,C]extendsBinOp[OP,org.saddle.Series[X,A],B,org.saddle.Series[X,C]]", "kind" : "final class"}, {"label" : "table", "tail" : "(data: Vec[T])(arg0: ST[T], arg1: ORD[T]): Series[T, Int]", "member" : "org.saddle.Series.table", "link" : "org\/saddle\/Series$.html#table[T](data:org.saddle.Vec[T])(implicitevidence$39:org.saddle.ST[T],implicitevidence$40:org.saddle.ORD[T]):org.saddle.Series[T,Int]", "kind" : "def"}, {"label" : "apply", "tail" : "(values: (X, T)*)(arg0: ST[X], arg1: ORD[X], arg2: ST[T]): Series[X, T]", "member" : "org.saddle.Series.apply", "link" : "org\/saddle\/Series$.html#apply[X,T](values:(X,T)*)(implicitevidence$36:org.saddle.ST[X],implicitevidence$37:org.saddle.ORD[X],implicitevidence$38:org.saddle.ST[T]):org.saddle.Series[X,T]", "kind" : "def"}, {"label" : "apply", "tail" : "(values: T*)(arg0: ST[T]): Series[Int, T]", "member" : "org.saddle.Series.apply", "link" : "org\/saddle\/Series$.html#apply[T](values:T*)(implicitevidence$35:org.saddle.ST[T]):org.saddle.Series[Int,T]", "kind" : "def"}, {"label" : "apply", "tail" : "(values: Vec[T])(arg0: ST[T]): Series[Int, T]", "member" : "org.saddle.Series.apply", "link" : "org\/saddle\/Series$.html#apply[T](values:org.saddle.Vec[T])(implicitevidence$34:org.saddle.ST[T]):org.saddle.Series[Int,T]", "kind" : "def"}, {"label" : "apply", "tail" : "(index: Index[X], values: Vec[T])(arg0: ST[X], arg1: ORD[X], arg2: ST[T]): Series[X, T]", "member" : "org.saddle.Series.apply", "link" : "org\/saddle\/Series$.html#apply[X,T](index:org.saddle.Index[X],values:org.saddle.Vec[T])(implicitevidence$31:org.saddle.ST[X],implicitevidence$32:org.saddle.ORD[X],implicitevidence$33:org.saddle.ST[T]):org.saddle.Series[X,T]", "kind" : "def"}, {"label" : "apply", "tail" : "(values: Vec[T], index: Index[X])(arg0: ST[X], arg1: ORD[X], arg2: ST[T]): Series[X, T]", "member" : "org.saddle.Series.apply", "link" : "org\/saddle\/Series$.html#apply[X,T](values:org.saddle.Vec[T],index:org.saddle.Index[X])(implicitevidence$28:org.saddle.ST[X],implicitevidence$29:org.saddle.ORD[X],implicitevidence$30:org.saddle.ST[T]):org.saddle.Series[X,T]", "kind" : "def"}, {"label" : "empty", "tail" : "(arg0: ST[X], arg1: ORD[X], arg2: ST[T]): Series[X, T]", "member" : "org.saddle.Series.empty", "link" : "org\/saddle\/Series$.html#empty[X,T](implicitevidence$25:org.saddle.ST[X],implicitevidence$26:org.saddle.ORD[X],implicitevidence$27:org.saddle.ST[T]):org.saddle.Series[X,T]", "kind" : "def"}, {"label" : "SrSrEOpBBB", "tail" : "(cm: ST[X], cmp: ORD[X], opv: BinOp[Op, Vec[Boolean], Vec[Boolean], Vec[Boolean]]): SrSrEOp[Op, X, Boolean, Boolean, Boolean]", "member" : "org.saddle.ops.BinOpSeries.SrSrEOpBBB", "link" : "org\/saddle\/Series$.html#SrSrEOpBBB[Op<:org.saddle.ops.ScalarOp,X](implicitcm:org.saddle.ST[X],implicitcmp:org.saddle.ORD[X],implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Boolean],org.saddle.Vec[Boolean],org.saddle.Vec[Boolean]]):BinOpSeries.this.SrSrEOp[Op,X,Boolean,Boolean,Boolean]", "kind" : "implicit def"}, {"label" : "SrSrEOpIIB", "tail" : "(cm: ST[X], cmp: ORD[X], opv: BinOp[Op, Vec[Int], Vec[Int], Vec[Boolean]]): SrSrEOp[Op, X, Int, Int, Boolean]", "member" : "org.saddle.ops.BinOpSeries.SrSrEOpIIB", "link" : "org\/saddle\/Series$.html#SrSrEOpIIB[Op<:org.saddle.ops.ScalarOp,X](implicitcm:org.saddle.ST[X],implicitcmp:org.saddle.ORD[X],implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Int],org.saddle.Vec[Int],org.saddle.Vec[Boolean]]):BinOpSeries.this.SrSrEOp[Op,X,Int,Int,Boolean]", "kind" : "implicit def"}, {"label" : "SrSrEOpILB", "tail" : "(cm: ST[X], cmp: ORD[X], opv: BinOp[Op, Vec[Int], Vec[Long], Vec[Boolean]]): SrSrEOp[Op, X, Int, Long, Boolean]", "member" : "org.saddle.ops.BinOpSeries.SrSrEOpILB", "link" : "org\/saddle\/Series$.html#SrSrEOpILB[Op<:org.saddle.ops.ScalarOp,X](implicitcm:org.saddle.ST[X],implicitcmp:org.saddle.ORD[X],implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Int],org.saddle.Vec[Long],org.saddle.Vec[Boolean]]):BinOpSeries.this.SrSrEOp[Op,X,Int,Long,Boolean]", "kind" : "implicit def"}, {"label" : "SrSrEOpIDB", "tail" : "(cm: ST[X], cmp: ORD[X], opv: BinOp[Op, Vec[Int], Vec[Double], Vec[Boolean]]): SrSrEOp[Op, X, Int, Double, Boolean]", "member" : "org.saddle.ops.BinOpSeries.SrSrEOpIDB", "link" : "org\/saddle\/Series$.html#SrSrEOpIDB[Op<:org.saddle.ops.ScalarOp,X](implicitcm:org.saddle.ST[X],implicitcmp:org.saddle.ORD[X],implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Int],org.saddle.Vec[Double],org.saddle.Vec[Boolean]]):BinOpSeries.this.SrSrEOp[Op,X,Int,Double,Boolean]", "kind" : "implicit def"}, {"label" : "SrSrEOpLIB", "tail" : "(cm: ST[X], cmp: ORD[X], opv: BinOp[Op, Vec[Long], Vec[Int], Vec[Boolean]]): SrSrEOp[Op, X, Long, Int, Boolean]", "member" : "org.saddle.ops.BinOpSeries.SrSrEOpLIB", "link" : "org\/saddle\/Series$.html#SrSrEOpLIB[Op<:org.saddle.ops.ScalarOp,X](implicitcm:org.saddle.ST[X],implicitcmp:org.saddle.ORD[X],implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Long],org.saddle.Vec[Int],org.saddle.Vec[Boolean]]):BinOpSeries.this.SrSrEOp[Op,X,Long,Int,Boolean]", "kind" : "implicit def"}, {"label" : "SrSrEOpLLB", "tail" : "(cm: ST[X], cmp: ORD[X], opv: BinOp[Op, Vec[Long], Vec[Long], Vec[Boolean]]): SrSrEOp[Op, X, Long, Long, Boolean]", "member" : "org.saddle.ops.BinOpSeries.SrSrEOpLLB", "link" : "org\/saddle\/Series$.html#SrSrEOpLLB[Op<:org.saddle.ops.ScalarOp,X](implicitcm:org.saddle.ST[X],implicitcmp:org.saddle.ORD[X],implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Long],org.saddle.Vec[Long],org.saddle.Vec[Boolean]]):BinOpSeries.this.SrSrEOp[Op,X,Long,Long,Boolean]", "kind" : "implicit def"}, {"label" : "SrSrEOpLDB", "tail" : "(cm: ST[X], cmp: ORD[X], opv: BinOp[Op, Vec[Long], Vec[Double], Vec[Boolean]]): SrSrEOp[Op, X, Long, Double, Boolean]", "member" : "org.saddle.ops.BinOpSeries.SrSrEOpLDB", "link" : "org\/saddle\/Series$.html#SrSrEOpLDB[Op<:org.saddle.ops.ScalarOp,X](implicitcm:org.saddle.ST[X],implicitcmp:org.saddle.ORD[X],implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Long],org.saddle.Vec[Double],org.saddle.Vec[Boolean]]):BinOpSeries.this.SrSrEOp[Op,X,Long,Double,Boolean]", "kind" : "implicit def"}, {"label" : "SrSrEOpDIB", "tail" : "(cm: ST[X], cmp: ORD[X], opv: BinOp[Op, Vec[Double], Vec[Int], Vec[Boolean]]): SrSrEOp[Op, X, Double, Int, Boolean]", "member" : "org.saddle.ops.BinOpSeries.SrSrEOpDIB", "link" : "org\/saddle\/Series$.html#SrSrEOpDIB[Op<:org.saddle.ops.ScalarOp,X](implicitcm:org.saddle.ST[X],implicitcmp:org.saddle.ORD[X],implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Double],org.saddle.Vec[Int],org.saddle.Vec[Boolean]]):BinOpSeries.this.SrSrEOp[Op,X,Double,Int,Boolean]", "kind" : "implicit def"}, {"label" : "SrSrEOpDLB", "tail" : "(cm: ST[X], cmp: ORD[X], opv: BinOp[Op, Vec[Double], Vec[Long], Vec[Boolean]]): SrSrEOp[Op, X, Double, Long, Boolean]", "member" : "org.saddle.ops.BinOpSeries.SrSrEOpDLB", "link" : "org\/saddle\/Series$.html#SrSrEOpDLB[Op<:org.saddle.ops.ScalarOp,X](implicitcm:org.saddle.ST[X],implicitcmp:org.saddle.ORD[X],implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Double],org.saddle.Vec[Long],org.saddle.Vec[Boolean]]):BinOpSeries.this.SrSrEOp[Op,X,Double,Long,Boolean]", "kind" : "implicit def"}, {"label" : "SrSrEOpDDB", "tail" : "(cm: ST[X], cmp: ORD[X], opv: BinOp[Op, Vec[Double], Vec[Double], Vec[Boolean]]): SrSrEOp[Op, X, Double, Double, Boolean]", "member" : "org.saddle.ops.BinOpSeries.SrSrEOpDDB", "link" : "org\/saddle\/Series$.html#SrSrEOpDDB[Op<:org.saddle.ops.ScalarOp,X](implicitcm:org.saddle.ST[X],implicitcmp:org.saddle.ORD[X],implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Double],org.saddle.Vec[Double],org.saddle.Vec[Boolean]]):BinOpSeries.this.SrSrEOp[Op,X,Double,Double,Boolean]", "kind" : "implicit def"}, {"label" : "SrSrEOpIII", "tail" : "(cm: ST[X], cmp: ORD[X], opv: BinOp[Op, Vec[Int], Vec[Int], Vec[Int]]): SrSrEOp[Op, X, Int, Int, Int]", "member" : "org.saddle.ops.BinOpSeries.SrSrEOpIII", "link" : "org\/saddle\/Series$.html#SrSrEOpIII[Op<:org.saddle.ops.ScalarOp,X](implicitcm:org.saddle.ST[X],implicitcmp:org.saddle.ORD[X],implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Int],org.saddle.Vec[Int],org.saddle.Vec[Int]]):BinOpSeries.this.SrSrEOp[Op,X,Int,Int,Int]", "kind" : "implicit def"}, {"label" : "SrSrEOpILL", "tail" : "(cm: ST[X], cmp: ORD[X], opv: BinOp[Op, Vec[Int], Vec[Long], Vec[Long]]): SrSrEOp[Op, X, Int, Long, Long]", "member" : "org.saddle.ops.BinOpSeries.SrSrEOpILL", "link" : "org\/saddle\/Series$.html#SrSrEOpILL[Op<:org.saddle.ops.ScalarOp,X](implicitcm:org.saddle.ST[X],implicitcmp:org.saddle.ORD[X],implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Int],org.saddle.Vec[Long],org.saddle.Vec[Long]]):BinOpSeries.this.SrSrEOp[Op,X,Int,Long,Long]", "kind" : "implicit def"}, {"label" : "SrSrEOpIDD", "tail" : "(cm: ST[X], cmp: ORD[X], opv: BinOp[Op, Vec[Int], Vec[Double], Vec[Double]]): SrSrEOp[Op, X, Int, Double, Double]", "member" : "org.saddle.ops.BinOpSeries.SrSrEOpIDD", "link" : "org\/saddle\/Series$.html#SrSrEOpIDD[Op<:org.saddle.ops.ScalarOp,X](implicitcm:org.saddle.ST[X],implicitcmp:org.saddle.ORD[X],implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Int],org.saddle.Vec[Double],org.saddle.Vec[Double]]):BinOpSeries.this.SrSrEOp[Op,X,Int,Double,Double]", "kind" : "implicit def"}, {"label" : "SrSrEOpLIL", "tail" : "(cm: ST[X], cmp: ORD[X], opv: BinOp[Op, Vec[Long], Vec[Int], Vec[Long]]): SrSrEOp[Op, X, Long, Int, Long]", "member" : "org.saddle.ops.BinOpSeries.SrSrEOpLIL", "link" : "org\/saddle\/Series$.html#SrSrEOpLIL[Op<:org.saddle.ops.ScalarOp,X](implicitcm:org.saddle.ST[X],implicitcmp:org.saddle.ORD[X],implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Long],org.saddle.Vec[Int],org.saddle.Vec[Long]]):BinOpSeries.this.SrSrEOp[Op,X,Long,Int,Long]", "kind" : "implicit def"}, {"label" : "SrSrEOpLLL", "tail" : "(cm: ST[X], cmp: ORD[X], opv: BinOp[Op, Vec[Long], Vec[Long], Vec[Long]]): SrSrEOp[Op, X, Long, Long, Long]", "member" : "org.saddle.ops.BinOpSeries.SrSrEOpLLL", "link" : "org\/saddle\/Series$.html#SrSrEOpLLL[Op<:org.saddle.ops.ScalarOp,X](implicitcm:org.saddle.ST[X],implicitcmp:org.saddle.ORD[X],implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Long],org.saddle.Vec[Long],org.saddle.Vec[Long]]):BinOpSeries.this.SrSrEOp[Op,X,Long,Long,Long]", "kind" : "implicit def"}, {"label" : "SrSrEOpLDD", "tail" : "(cm: ST[X], cmp: ORD[X], opv: BinOp[Op, Vec[Long], Vec[Double], Vec[Double]]): SrSrEOp[Op, X, Long, Double, Double]", "member" : "org.saddle.ops.BinOpSeries.SrSrEOpLDD", "link" : "org\/saddle\/Series$.html#SrSrEOpLDD[Op<:org.saddle.ops.ScalarOp,X](implicitcm:org.saddle.ST[X],implicitcmp:org.saddle.ORD[X],implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Long],org.saddle.Vec[Double],org.saddle.Vec[Double]]):BinOpSeries.this.SrSrEOp[Op,X,Long,Double,Double]", "kind" : "implicit def"}, {"label" : "SrSrEOpDLD", "tail" : "(cm: ST[X], cmp: ORD[X], opv: BinOp[Op, Vec[Double], Vec[Long], Vec[Double]]): SrSrEOp[Op, X, Double, Long, Double]", "member" : "org.saddle.ops.BinOpSeries.SrSrEOpDLD", "link" : "org\/saddle\/Series$.html#SrSrEOpDLD[Op<:org.saddle.ops.ScalarOp,X](implicitcm:org.saddle.ST[X],implicitcmp:org.saddle.ORD[X],implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Double],org.saddle.Vec[Long],org.saddle.Vec[Double]]):BinOpSeries.this.SrSrEOp[Op,X,Double,Long,Double]", "kind" : "implicit def"}, {"label" : "SrSrEOpDID", "tail" : "(cm: ST[X], cmp: ORD[X], opv: BinOp[Op, Vec[Double], Vec[Int], Vec[Double]]): SrSrEOp[Op, X, Double, Int, Double]", "member" : "org.saddle.ops.BinOpSeries.SrSrEOpDID", "link" : "org\/saddle\/Series$.html#SrSrEOpDID[Op<:org.saddle.ops.ScalarOp,X](implicitcm:org.saddle.ST[X],implicitcmp:org.saddle.ORD[X],implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Double],org.saddle.Vec[Int],org.saddle.Vec[Double]]):BinOpSeries.this.SrSrEOp[Op,X,Double,Int,Double]", "kind" : "implicit def"}, {"label" : "SrSrEOpDDD", "tail" : "(cm: ST[X], cmp: ORD[X], opv: BinOp[Op, Vec[Double], Vec[Double], Vec[Double]]): SrSrEOp[Op, X, Double, Double, Double]", "member" : "org.saddle.ops.BinOpSeries.SrSrEOpDDD", "link" : "org\/saddle\/Series$.html#SrSrEOpDDD[Op<:org.saddle.ops.ScalarOp,X](implicitcm:org.saddle.ST[X],implicitcmp:org.saddle.ORD[X],implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Double],org.saddle.Vec[Double],org.saddle.Vec[Double]]):BinOpSeries.this.SrSrEOp[Op,X,Double,Double,Double]", "kind" : "implicit def"}, {"label" : "SrScEOpBBB", "tail" : "(cm: ST[X], cmp: ORD[X], opv: BinOp[Op, Vec[Boolean], Boolean, Vec[Boolean]]): SrScEOp[Op, X, Boolean, Boolean, Boolean]", "member" : "org.saddle.ops.BinOpSeries.SrScEOpBBB", "link" : "org\/saddle\/Series$.html#SrScEOpBBB[Op<:org.saddle.ops.ScalarOp,X](implicitcm:org.saddle.ST[X],implicitcmp:org.saddle.ORD[X],implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Boolean],Boolean,org.saddle.Vec[Boolean]]):BinOpSeries.this.SrScEOp[Op,X,Boolean,Boolean,Boolean]", "kind" : "implicit def"}, {"label" : "SrScEOpIIB", "tail" : "(cm: ST[X], cmp: ORD[X], opv: BinOp[Op, Vec[Int], Int, Vec[Boolean]]): SrScEOp[Op, X, Int, Int, Boolean]", "member" : "org.saddle.ops.BinOpSeries.SrScEOpIIB", "link" : "org\/saddle\/Series$.html#SrScEOpIIB[Op<:org.saddle.ops.ScalarOp,X](implicitcm:org.saddle.ST[X],implicitcmp:org.saddle.ORD[X],implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Int],Int,org.saddle.Vec[Boolean]]):BinOpSeries.this.SrScEOp[Op,X,Int,Int,Boolean]", "kind" : "implicit def"}, {"label" : "SrScEOpILB", "tail" : "(cm: ST[X], cmp: ORD[X], opv: BinOp[Op, Vec[Int], Long, Vec[Boolean]]): SrScEOp[Op, X, Int, Long, Boolean]", "member" : "org.saddle.ops.BinOpSeries.SrScEOpILB", "link" : "org\/saddle\/Series$.html#SrScEOpILB[Op<:org.saddle.ops.ScalarOp,X](implicitcm:org.saddle.ST[X],implicitcmp:org.saddle.ORD[X],implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Int],Long,org.saddle.Vec[Boolean]]):BinOpSeries.this.SrScEOp[Op,X,Int,Long,Boolean]", "kind" : "implicit def"}, {"label" : "SrScEOpIDB", "tail" : "(cm: ST[X], cmp: ORD[X], opv: BinOp[Op, Vec[Int], Double, Vec[Boolean]]): SrScEOp[Op, X, Int, Double, Boolean]", "member" : "org.saddle.ops.BinOpSeries.SrScEOpIDB", "link" : "org\/saddle\/Series$.html#SrScEOpIDB[Op<:org.saddle.ops.ScalarOp,X](implicitcm:org.saddle.ST[X],implicitcmp:org.saddle.ORD[X],implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Int],Double,org.saddle.Vec[Boolean]]):BinOpSeries.this.SrScEOp[Op,X,Int,Double,Boolean]", "kind" : "implicit def"}, {"label" : "SrScEOpLIB", "tail" : "(cm: ST[X], cmp: ORD[X], opv: BinOp[Op, Vec[Long], Int, Vec[Boolean]]): SrScEOp[Op, X, Long, Int, Boolean]", "member" : "org.saddle.ops.BinOpSeries.SrScEOpLIB", "link" : "org\/saddle\/Series$.html#SrScEOpLIB[Op<:org.saddle.ops.ScalarOp,X](implicitcm:org.saddle.ST[X],implicitcmp:org.saddle.ORD[X],implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Long],Int,org.saddle.Vec[Boolean]]):BinOpSeries.this.SrScEOp[Op,X,Long,Int,Boolean]", "kind" : "implicit def"}, {"label" : "SrScEOpLLB", "tail" : "(cm: ST[X], cmp: ORD[X], opv: BinOp[Op, Vec[Long], Long, Vec[Boolean]]): SrScEOp[Op, X, Long, Long, Boolean]", "member" : "org.saddle.ops.BinOpSeries.SrScEOpLLB", "link" : "org\/saddle\/Series$.html#SrScEOpLLB[Op<:org.saddle.ops.ScalarOp,X](implicitcm:org.saddle.ST[X],implicitcmp:org.saddle.ORD[X],implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Long],Long,org.saddle.Vec[Boolean]]):BinOpSeries.this.SrScEOp[Op,X,Long,Long,Boolean]", "kind" : "implicit def"}, {"label" : "SrScEOpLDB", "tail" : "(cm: ST[X], cmp: ORD[X], opv: BinOp[Op, Vec[Long], Double, Vec[Boolean]]): SrScEOp[Op, X, Long, Double, Boolean]", "member" : "org.saddle.ops.BinOpSeries.SrScEOpLDB", "link" : "org\/saddle\/Series$.html#SrScEOpLDB[Op<:org.saddle.ops.ScalarOp,X](implicitcm:org.saddle.ST[X],implicitcmp:org.saddle.ORD[X],implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Long],Double,org.saddle.Vec[Boolean]]):BinOpSeries.this.SrScEOp[Op,X,Long,Double,Boolean]", "kind" : "implicit def"}, {"label" : "SrScEOpDIB", "tail" : "(cm: ST[X], cmp: ORD[X], opv: BinOp[Op, Vec[Double], Int, Vec[Boolean]]): SrScEOp[Op, X, Double, Int, Boolean]", "member" : "org.saddle.ops.BinOpSeries.SrScEOpDIB", "link" : "org\/saddle\/Series$.html#SrScEOpDIB[Op<:org.saddle.ops.ScalarOp,X](implicitcm:org.saddle.ST[X],implicitcmp:org.saddle.ORD[X],implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Double],Int,org.saddle.Vec[Boolean]]):BinOpSeries.this.SrScEOp[Op,X,Double,Int,Boolean]", "kind" : "implicit def"}, {"label" : "SrScEOpDLB", "tail" : "(cm: ST[X], cmp: ORD[X], opv: BinOp[Op, Vec[Double], Long, Vec[Boolean]]): SrScEOp[Op, X, Double, Long, Boolean]", "member" : "org.saddle.ops.BinOpSeries.SrScEOpDLB", "link" : "org\/saddle\/Series$.html#SrScEOpDLB[Op<:org.saddle.ops.ScalarOp,X](implicitcm:org.saddle.ST[X],implicitcmp:org.saddle.ORD[X],implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Double],Long,org.saddle.Vec[Boolean]]):BinOpSeries.this.SrScEOp[Op,X,Double,Long,Boolean]", "kind" : "implicit def"}, {"label" : "SrScEOpDDB", "tail" : "(cm: ST[X], cmp: ORD[X], opv: BinOp[Op, Vec[Double], Double, Vec[Boolean]]): SrScEOp[Op, X, Double, Double, Boolean]", "member" : "org.saddle.ops.BinOpSeries.SrScEOpDDB", "link" : "org\/saddle\/Series$.html#SrScEOpDDB[Op<:org.saddle.ops.ScalarOp,X](implicitcm:org.saddle.ST[X],implicitcmp:org.saddle.ORD[X],implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Double],Double,org.saddle.Vec[Boolean]]):BinOpSeries.this.SrScEOp[Op,X,Double,Double,Boolean]", "kind" : "implicit def"}, {"label" : "SrScEOpIII", "tail" : "(cm: ST[X], cmp: ORD[X], opv: BinOp[Op, Vec[Int], Int, Vec[Int]]): SrScEOp[Op, X, Int, Int, Int]", "member" : "org.saddle.ops.BinOpSeries.SrScEOpIII", "link" : "org\/saddle\/Series$.html#SrScEOpIII[Op<:org.saddle.ops.ScalarOp,X](implicitcm:org.saddle.ST[X],implicitcmp:org.saddle.ORD[X],implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Int],Int,org.saddle.Vec[Int]]):BinOpSeries.this.SrScEOp[Op,X,Int,Int,Int]", "kind" : "implicit def"}, {"label" : "SrScEOpILL", "tail" : "(cm: ST[X], cmp: ORD[X], opv: BinOp[Op, Vec[Int], Long, Vec[Long]]): SrScEOp[Op, X, Int, Long, Long]", "member" : "org.saddle.ops.BinOpSeries.SrScEOpILL", "link" : "org\/saddle\/Series$.html#SrScEOpILL[Op<:org.saddle.ops.ScalarOp,X](implicitcm:org.saddle.ST[X],implicitcmp:org.saddle.ORD[X],implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Int],Long,org.saddle.Vec[Long]]):BinOpSeries.this.SrScEOp[Op,X,Int,Long,Long]", "kind" : "implicit def"}, {"label" : "SrScEOpIDD", "tail" : "(cm: ST[X], cmp: ORD[X], opv: BinOp[Op, Vec[Int], Double, Vec[Double]]): SrScEOp[Op, X, Int, Double, Double]", "member" : "org.saddle.ops.BinOpSeries.SrScEOpIDD", "link" : "org\/saddle\/Series$.html#SrScEOpIDD[Op<:org.saddle.ops.ScalarOp,X](implicitcm:org.saddle.ST[X],implicitcmp:org.saddle.ORD[X],implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Int],Double,org.saddle.Vec[Double]]):BinOpSeries.this.SrScEOp[Op,X,Int,Double,Double]", "kind" : "implicit def"}, {"label" : "SrScEOpLIL", "tail" : "(cm: ST[X], cmp: ORD[X], opv: BinOp[Op, Vec[Long], Int, Vec[Long]]): SrScEOp[Op, X, Long, Int, Long]", "member" : "org.saddle.ops.BinOpSeries.SrScEOpLIL", "link" : "org\/saddle\/Series$.html#SrScEOpLIL[Op<:org.saddle.ops.ScalarOp,X](implicitcm:org.saddle.ST[X],implicitcmp:org.saddle.ORD[X],implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Long],Int,org.saddle.Vec[Long]]):BinOpSeries.this.SrScEOp[Op,X,Long,Int,Long]", "kind" : "implicit def"}, {"label" : "SrScEOpLLL", "tail" : "(cm: ST[X], cmp: ORD[X], opv: BinOp[Op, Vec[Long], Long, Vec[Long]]): SrScEOp[Op, X, Long, Long, Long]", "member" : "org.saddle.ops.BinOpSeries.SrScEOpLLL", "link" : "org\/saddle\/Series$.html#SrScEOpLLL[Op<:org.saddle.ops.ScalarOp,X](implicitcm:org.saddle.ST[X],implicitcmp:org.saddle.ORD[X],implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Long],Long,org.saddle.Vec[Long]]):BinOpSeries.this.SrScEOp[Op,X,Long,Long,Long]", "kind" : "implicit def"}, {"label" : "SrScEOpLDD", "tail" : "(cm: ST[X], cmp: ORD[X], opv: BinOp[Op, Vec[Long], Double, Vec[Double]]): SrScEOp[Op, X, Long, Double, Double]", "member" : "org.saddle.ops.BinOpSeries.SrScEOpLDD", "link" : "org\/saddle\/Series$.html#SrScEOpLDD[Op<:org.saddle.ops.ScalarOp,X](implicitcm:org.saddle.ST[X],implicitcmp:org.saddle.ORD[X],implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Long],Double,org.saddle.Vec[Double]]):BinOpSeries.this.SrScEOp[Op,X,Long,Double,Double]", "kind" : "implicit def"}, {"label" : "SrScEOpDID", "tail" : "(cm: ST[X], cmp: ORD[X], opv: BinOp[Op, Vec[Double], Int, Vec[Double]]): SrScEOp[Op, X, Double, Int, Double]", "member" : "org.saddle.ops.BinOpSeries.SrScEOpDID", "link" : "org\/saddle\/Series$.html#SrScEOpDID[Op<:org.saddle.ops.ScalarOp,X](implicitcm:org.saddle.ST[X],implicitcmp:org.saddle.ORD[X],implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Double],Int,org.saddle.Vec[Double]]):BinOpSeries.this.SrScEOp[Op,X,Double,Int,Double]", "kind" : "implicit def"}, {"label" : "SrScEOpDLD", "tail" : "(cm: ST[X], cmp: ORD[X], opv: BinOp[Op, Vec[Double], Long, Vec[Double]]): SrScEOp[Op, X, Double, Long, Double]", "member" : "org.saddle.ops.BinOpSeries.SrScEOpDLD", "link" : "org\/saddle\/Series$.html#SrScEOpDLD[Op<:org.saddle.ops.ScalarOp,X](implicitcm:org.saddle.ST[X],implicitcmp:org.saddle.ORD[X],implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Double],Long,org.saddle.Vec[Double]]):BinOpSeries.this.SrScEOp[Op,X,Double,Long,Double]", "kind" : "implicit def"}, {"label" : "SrScEOpDDD", "tail" : "(cm: ST[X], cmp: ORD[X], opv: BinOp[Op, Vec[Double], Double, Vec[Double]]): SrScEOp[Op, X, Double, Double, Double]", "member" : "org.saddle.ops.BinOpSeries.SrScEOpDDD", "link" : "org\/saddle\/Series$.html#SrScEOpDDD[Op<:org.saddle.ops.ScalarOp,X](implicitcm:org.saddle.ST[X],implicitcmp:org.saddle.ORD[X],implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Double],Double,org.saddle.Vec[Double]]):BinOpSeries.this.SrScEOp[Op,X,Double,Double,Double]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/saddle\/Series$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/saddle\/Series$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/saddle\/Series$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/saddle\/Series$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/saddle\/Series$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/saddle\/Series$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/saddle\/Series$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/Series$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/Series$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/Series$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/saddle\/Series$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/saddle\/Series$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/saddle\/Series$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/saddle\/Series$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/saddle\/Series$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/saddle\/Series$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "org\/saddle\/Series$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/saddle\/Series$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/saddle\/Series$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/saddle\/Series.html", "kind" : "class"}, {"name" : "org.saddle.Vec", "object" : "org\/saddle\/Vec$.html", "members_object" : [{"label" : "VecToBoolLogic", "tail" : "", "member" : "org.saddle.Vec.VecToBoolLogic", "link" : "org\/saddle\/Vec$.html#VecToBoolLogicextendsAnyRef", "kind" : "implicit class"}, {"label" : "empty", "tail" : "(arg0: ST[T]): Vec[T]", "member" : "org.saddle.Vec.empty", "link" : "org\/saddle\/Vec$.html#empty[T](implicitevidence$2:org.saddle.ST[T]):org.saddle.Vec[T]", "kind" : "def"}, {"label" : "apply", "tail" : "(values: T*)(arg0: ST[T]): Vec[T]", "member" : "org.saddle.Vec.apply", "link" : "org\/saddle\/Vec$.html#apply[T](values:T*)(implicitevidence$1:org.saddle.ST[T]):org.saddle.Vec[T]", "kind" : "def"}, {"label" : "apply", "tail" : "(arr: Array[T])(st: ST[T]): Vec[T]", "member" : "org.saddle.Vec.apply", "link" : "org\/saddle\/Vec$.html#apply[T](arr:Array[T])(implicitst:org.saddle.ST[T]):org.saddle.Vec[T]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/saddle\/Vec$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/saddle\/Vec$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/saddle\/Vec$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/saddle\/Vec$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/saddle\/Vec$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/saddle\/Vec$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/saddle\/Vec$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/Vec$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/Vec$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/Vec$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/saddle\/Vec$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/saddle\/Vec$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/saddle\/Vec$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/saddle\/Vec$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/saddle\/Vec$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/saddle\/Vec$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "org\/saddle\/Vec$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/saddle\/Vec$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/saddle\/Vec$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "org\/saddle\/Vec.html", "kind" : "trait", "members_trait" : [{"label" : "**=", "tail" : "(other: B)(op: BinOpInPlace[Power, Vec[T], B]): Unit", "member" : "org.saddle.ops.NumericOps.**=", "link" : "org\/saddle\/Vec.html#**=[B](other:B)(implicitop:org.saddle.ops.BinOpInPlace[org.saddle.ops.Power,This,B]):Unit", "kind" : "def"}, {"label" : "%=", "tail" : "(other: B)(op: BinOpInPlace[Mod, Vec[T], B]): Unit", "member" : "org.saddle.ops.NumericOps.%=", "link" : "org\/saddle\/Vec.html#%=[B](other:B)(implicitop:org.saddle.ops.BinOpInPlace[org.saddle.ops.Mod,This,B]):Unit", "kind" : "def"}, {"label" : "\/=", "tail" : "(other: B)(op: BinOpInPlace[Divide, Vec[T], B]): Unit", "member" : "org.saddle.ops.NumericOps.\/=", "link" : "org\/saddle\/Vec.html#\/=[B](other:B)(implicitop:org.saddle.ops.BinOpInPlace[org.saddle.ops.Divide,This,B]):Unit", "kind" : "def"}, {"label" : "*=", "tail" : "(other: B)(op: BinOpInPlace[Multiply, Vec[T], B]): Unit", "member" : "org.saddle.ops.NumericOps.*=", "link" : "org\/saddle\/Vec.html#*=[B](other:B)(implicitop:org.saddle.ops.BinOpInPlace[org.saddle.ops.Multiply,This,B]):Unit", "kind" : "def"}, {"label" : "-=", "tail" : "(other: B)(op: BinOpInPlace[Subtract, Vec[T], B]): Unit", "member" : "org.saddle.ops.NumericOps.-=", "link" : "org\/saddle\/Vec.html#-=[B](other:B)(implicitop:org.saddle.ops.BinOpInPlace[org.saddle.ops.Subtract,This,B]):Unit", "kind" : "def"}, {"label" : "+=", "tail" : "(other: B)(op: BinOpInPlace[Add, Vec[T], B]): Unit", "member" : "org.saddle.ops.NumericOps.+=", "link" : "org\/saddle\/Vec.html#+=[B](other:B)(implicitop:org.saddle.ops.BinOpInPlace[org.saddle.ops.Add,This,B]):Unit", "kind" : "def"}, {"label" : "outer", "tail" : "(other: B)(op: BinOp[OuterProd, Vec[T], B, That]): That", "member" : "org.saddle.ops.NumericOps.outer", "link" : "org\/saddle\/Vec.html#outer[B,That](other:B)(implicitop:org.saddle.ops.BinOp[org.saddle.ops.OuterProd,This,B,That]):That", "kind" : "def"}, {"label" : "dot", "tail" : "(other: B)(op: BinOp[InnerProd, Vec[T], B, That]): That", "member" : "org.saddle.ops.NumericOps.dot", "link" : "org\/saddle\/Vec.html#dot[B,That](other:B)(implicitop:org.saddle.ops.BinOp[org.saddle.ops.InnerProd,This,B,That]):That", "kind" : "def"}, {"label" : "xor", "tail" : "(other: B)(op: BinOp[XorOp, Vec[T], B, That]): That", "member" : "org.saddle.ops.NumericOps.xor", "link" : "org\/saddle\/Vec.html#xor[B,That](other:B)(implicitop:org.saddle.ops.BinOp[org.saddle.ops.XorOp,This,B,That]):That", "kind" : "def"}, {"label" : "&&", "tail" : "(other: B)(op: BinOp[AndOp, Vec[T], B, That]): That", "member" : "org.saddle.ops.NumericOps.&&", "link" : "org\/saddle\/Vec.html#&&[B,That](other:B)(implicitop:org.saddle.ops.BinOp[org.saddle.ops.AndOp,This,B,That]):That", "kind" : "def"}, {"label" : "||", "tail" : "(other: B)(op: BinOp[OrOp, Vec[T], B, That]): That", "member" : "org.saddle.ops.NumericOps.||", "link" : "org\/saddle\/Vec.html#||[B,That](other:B)(implicitop:org.saddle.ops.BinOp[org.saddle.ops.OrOp,This,B,That]):That", "kind" : "def"}, {"label" : "<>", "tail" : "(other: B)(op: BinOp[NeqOp, Vec[T], B, That]): That", "member" : "org.saddle.ops.NumericOps.<>", "link" : "org\/saddle\/Vec.html#<>[B,That](other:B)(implicitop:org.saddle.ops.BinOp[org.saddle.ops.NeqOp,This,B,That]):That", "kind" : "def"}, {"label" : "=?", "tail" : "(other: B)(op: BinOp[EqOp, Vec[T], B, That]): That", "member" : "org.saddle.ops.NumericOps.=?", "link" : "org\/saddle\/Vec.html#=?[B,That](other:B)(implicitop:org.saddle.ops.BinOp[org.saddle.ops.EqOp,This,B,That]):That", "kind" : "def"}, {"label" : ">=", "tail" : "(other: B)(op: BinOp[GteOp, Vec[T], B, That]): That", "member" : "org.saddle.ops.NumericOps.>=", "link" : "org\/saddle\/Vec.html#>=[B,That](other:B)(implicitop:org.saddle.ops.BinOp[org.saddle.ops.GteOp,This,B,That]):That", "kind" : "def"}, {"label" : ">", "tail" : "(other: B)(op: BinOp[GtOp, Vec[T], B, That]): That", "member" : "org.saddle.ops.NumericOps.>", "link" : "org\/saddle\/Vec.html#>[B,That](other:B)(implicitop:org.saddle.ops.BinOp[org.saddle.ops.GtOp,This,B,That]):That", "kind" : "def"}, {"label" : "<=", "tail" : "(other: B)(op: BinOp[LteOp, Vec[T], B, That]): That", "member" : "org.saddle.ops.NumericOps.<=", "link" : "org\/saddle\/Vec.html#<=[B,That](other:B)(implicitop:org.saddle.ops.BinOp[org.saddle.ops.LteOp,This,B,That]):That", "kind" : "def"}, {"label" : "<", "tail" : "(other: B)(op: BinOp[LtOp, Vec[T], B, That]): That", "member" : "org.saddle.ops.NumericOps.<", "link" : "org\/saddle\/Vec.html#<[B,That](other:B)(implicitop:org.saddle.ops.BinOp[org.saddle.ops.LtOp,This,B,That]):That", "kind" : "def"}, {"label" : ">>>", "tail" : "(other: B)(op: BinOp[BitUShr, Vec[T], B, That]): That", "member" : "org.saddle.ops.NumericOps.>>>", "link" : "org\/saddle\/Vec.html#>>>[B,That](other:B)(implicitop:org.saddle.ops.BinOp[org.saddle.ops.BitUShr,This,B,That]):That", "kind" : "def"}, {"label" : ">>", "tail" : "(other: B)(op: BinOp[BitShr, Vec[T], B, That]): That", "member" : "org.saddle.ops.NumericOps.>>", "link" : "org\/saddle\/Vec.html#>>[B,That](other:B)(implicitop:org.saddle.ops.BinOp[org.saddle.ops.BitShr,This,B,That]):That", "kind" : "def"}, {"label" : "<<", "tail" : "(other: B)(op: BinOp[BitShl, Vec[T], B, That]): That", "member" : "org.saddle.ops.NumericOps.<<", "link" : "org\/saddle\/Vec.html#<<[B,That](other:B)(implicitop:org.saddle.ops.BinOp[org.saddle.ops.BitShl,This,B,That]):That", "kind" : "def"}, {"label" : "^", "tail" : "(other: B)(op: BinOp[BitXor, Vec[T], B, That]): That", "member" : "org.saddle.ops.NumericOps.^", "link" : "org\/saddle\/Vec.html#^[B,That](other:B)(implicitop:org.saddle.ops.BinOp[org.saddle.ops.BitXor,This,B,That]):That", "kind" : "def"}, {"label" : "|", "tail" : "(other: B)(op: BinOp[BitOr, Vec[T], B, That]): That", "member" : "org.saddle.ops.NumericOps.|", "link" : "org\/saddle\/Vec.html#|[B,That](other:B)(implicitop:org.saddle.ops.BinOp[org.saddle.ops.BitOr,This,B,That]):That", "kind" : "def"}, {"label" : "&", "tail" : "(other: B)(op: BinOp[BitAnd, Vec[T], B, That]): That", "member" : "org.saddle.ops.NumericOps.&", "link" : "org\/saddle\/Vec.html#&[B,That](other:B)(implicitop:org.saddle.ops.BinOp[org.saddle.ops.BitAnd,This,B,That]):That", "kind" : "def"}, {"label" : "**", "tail" : "(other: B)(op: BinOp[Power, Vec[T], B, That]): That", "member" : "org.saddle.ops.NumericOps.**", "link" : "org\/saddle\/Vec.html#**[B,That](other:B)(implicitop:org.saddle.ops.BinOp[org.saddle.ops.Power,This,B,That]):That", "kind" : "def"}, {"label" : "%", "tail" : "(other: B)(op: BinOp[Mod, Vec[T], B, That]): That", "member" : "org.saddle.ops.NumericOps.%", "link" : "org\/saddle\/Vec.html#%[B,That](other:B)(implicitop:org.saddle.ops.BinOp[org.saddle.ops.Mod,This,B,That]):That", "kind" : "def"}, {"label" : "*", "tail" : "(other: B)(op: BinOp[Multiply, Vec[T], B, That]): That", "member" : "org.saddle.ops.NumericOps.*", "link" : "org\/saddle\/Vec.html#*[B,That](other:B)(implicitop:org.saddle.ops.BinOp[org.saddle.ops.Multiply,This,B,That]):That", "kind" : "def"}, {"label" : "\/", "tail" : "(other: B)(op: BinOp[Divide, Vec[T], B, That]): That", "member" : "org.saddle.ops.NumericOps.\/", "link" : "org\/saddle\/Vec.html#\/[B,That](other:B)(implicitop:org.saddle.ops.BinOp[org.saddle.ops.Divide,This,B,That]):That", "kind" : "def"}, {"label" : "-", "tail" : "(other: B)(op: BinOp[Subtract, Vec[T], B, That]): That", "member" : "org.saddle.ops.NumericOps.-", "link" : "org\/saddle\/Vec.html#-[B,That](other:B)(implicitop:org.saddle.ops.BinOp[org.saddle.ops.Subtract,This,B,That]):That", "kind" : "def"}, {"label" : "+", "tail" : "(other: B)(op: BinOp[Add, Vec[T], B, That]): That", "member" : "org.saddle.ops.NumericOps.+", "link" : "org\/saddle\/Vec.html#+[B,That](other:B)(implicitop:org.saddle.ops.BinOp[org.saddle.ops.Add,This,B,That]):That", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/saddle\/Vec.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/saddle\/Vec.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/saddle\/Vec.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/saddle\/Vec.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/saddle\/Vec.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/saddle\/Vec.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/saddle\/Vec.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/Vec.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/Vec.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/Vec.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/saddle\/Vec.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/saddle\/Vec.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/saddle\/Vec.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/saddle\/Vec.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/saddle\/Vec.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/saddle\/Vec.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "org\/saddle\/Vec.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/saddle\/Vec.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/saddle\/Vec.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "reshape", "tail" : "(rows: Int, cols: Int): Mat[T]", "member" : "org.saddle.Vec.reshape", "link" : "org\/saddle\/Vec.html#reshape(rows:Int,cols:Int):org.saddle.Mat[T]", "kind" : "abstract def"}, {"label" : "updated", "tail" : "(offsets: Array[Int], value: T): Vec[T]", "member" : "org.saddle.Vec.updated", "link" : "org\/saddle\/Vec.html#updated(offsets:Array[Int],value:T):org.saddle.Vec[T]", "kind" : "abstract def"}, {"label" : "update", "tail" : "(slice: Slice[Int], value: Vec[T]): Unit", "member" : "org.saddle.Vec.update", "link" : "org\/saddle\/Vec.html#update(slice:org.saddle.index.Slice[Int],value:org.saddle.Vec[T]):Unit", "kind" : "abstract def"}, {"label" : "update", "tail" : "(slice: Slice[Int], value: T): Unit", "member" : "org.saddle.Vec.update", "link" : "org\/saddle\/Vec.html#update(slice:org.saddle.index.Slice[Int],value:T):Unit", "kind" : "abstract def"}, {"label" : "update", "tail" : "(offset: Int, value: T): Unit", "member" : "org.saddle.Vec.update", "link" : "org\/saddle\/Vec.html#update(offset:Int,value:T):Unit", "kind" : "abstract def"}, {"label" : "updated", "tail" : "(offset: Int, value: T): Vec[T]", "member" : "org.saddle.Vec.updated", "link" : "org\/saddle\/Vec.html#updated(offset:Int,value:T):org.saddle.Vec[T]", "kind" : "abstract def"}, {"label" : "roundTo", "tail" : "(sig: Int)(ev: NUM[T]): Vec[Double]", "member" : "org.saddle.Vec.roundTo", "link" : "org\/saddle\/Vec.html#roundTo(sig:Int)(implicitev:org.saddle.NUM[T]):org.saddle.Vec[Double]", "kind" : "abstract def"}, {"label" : "print", "tail" : "(len: Int, stream: OutputStream): Unit", "member" : "org.saddle.Vec.print", "link" : "org\/saddle\/Vec.html#print(len:Int,stream:java.io.OutputStream):Unit", "kind" : "abstract def"}, {"label" : "stringify", "tail" : "(len: Int): String", "member" : "org.saddle.Vec.stringify", "link" : "org\/saddle\/Vec.html#stringify(len:Int):String", "kind" : "abstract def"}, {"label" : "toArray", "tail" : "(): Array[T]", "member" : "org.saddle.Vec.toArray", "link" : "org\/saddle\/Vec.html#toArray:Array[T]", "kind" : "abstract def"}, {"label" : "copy", "tail" : "(): Vec[T]", "member" : "org.saddle.Vec.copy", "link" : "org\/saddle\/Vec.html#copy:org.saddle.Vec[T]", "kind" : "abstract def"}, {"label" : "rank", "tail" : "(tie: RankTie, ascending: Boolean)(na: NUM[T]): Vec[Double]", "member" : "org.saddle.Vec.rank", "link" : "org\/saddle\/Vec.html#rank(tie:org.saddle.RankTie,ascending:Boolean)(implicitna:org.saddle.NUM[T]):org.saddle.Vec[Double]", "kind" : "abstract def"}, {"label" : "percentile", "tail" : "(tile: Double, method: PctMethod)(na: NUM[T]): Double", "member" : "org.saddle.Vec.percentile", "link" : "org\/saddle\/Vec.html#percentile(tile:Double,method:org.saddle.PctMethod)(implicitna:org.saddle.NUM[T]):Double", "kind" : "abstract def"}, {"label" : "mean", "tail" : "(na: NUM[T]): Double", "member" : "org.saddle.Vec.mean", "link" : "org\/saddle\/Vec.html#mean(implicitna:org.saddle.NUM[T]):Double", "kind" : "abstract def"}, {"label" : "median", "tail" : "(na: NUM[T]): Double", "member" : "org.saddle.Vec.median", "link" : "org\/saddle\/Vec.html#median(implicitna:org.saddle.NUM[T]):Double", "kind" : "abstract def"}, {"label" : "argmax", "tail" : "(na: NUM[T], st: ST[T], ord: ORD[T]): Int", "member" : "org.saddle.Vec.argmax", "link" : "org\/saddle\/Vec.html#argmax(implicitna:org.saddle.NUM[T],implicitst:org.saddle.ST[T],implicitord:org.saddle.ORD[T]):Int", "kind" : "abstract def"}, {"label" : "argmin", "tail" : "(na: NUM[T], st: ST[T], ord: ORD[T]): Int", "member" : "org.saddle.Vec.argmin", "link" : "org\/saddle\/Vec.html#argmin(implicitna:org.saddle.NUM[T],implicitst:org.saddle.ST[T],implicitord:org.saddle.ORD[T]):Int", "kind" : "abstract def"}, {"label" : "prod", "tail" : "(na: NUM[T], st: ST[T]): T", "member" : "org.saddle.Vec.prod", "link" : "org\/saddle\/Vec.html#prod(implicitna:org.saddle.NUM[T],implicitst:org.saddle.ST[T]):T", "kind" : "abstract def"}, {"label" : "countif", "tail" : "(test: (T) => Boolean): Int", "member" : "org.saddle.Vec.countif", "link" : "org\/saddle\/Vec.html#countif(test:T=>Boolean):Int", "kind" : "abstract def"}, {"label" : "count", "tail" : "(): Int", "member" : "org.saddle.Vec.count", "link" : "org\/saddle\/Vec.html#count:Int", "kind" : "abstract def"}, {"label" : "max", "tail" : "(na: NUM[T], st: ST[T]): Scalar[T]", "member" : "org.saddle.Vec.max", "link" : "org\/saddle\/Vec.html#max(implicitna:org.saddle.NUM[T],implicitst:org.saddle.ST[T]):org.saddle.scalar.Scalar[T]", "kind" : "abstract def"}, {"label" : "min", "tail" : "(na: NUM[T], st: ST[T]): Scalar[T]", "member" : "org.saddle.Vec.min", "link" : "org\/saddle\/Vec.html#min(implicitna:org.saddle.NUM[T],implicitst:org.saddle.ST[T]):org.saddle.scalar.Scalar[T]", "kind" : "abstract def"}, {"label" : "sum", "tail" : "(na: NUM[T], st: ST[T]): T", "member" : "org.saddle.Vec.sum", "link" : "org\/saddle\/Vec.html#sum(implicitna:org.saddle.NUM[T],implicitst:org.saddle.ST[T]):T", "kind" : "abstract def"}, {"label" : "toSeq", "tail" : "(): IndexedSeq[T]", "member" : "org.saddle.Vec.toSeq", "link" : "org\/saddle\/Vec.html#toSeq:IndexedSeq[T]", "kind" : "abstract def"}, {"label" : "fillBackward", "tail" : "(limit: Int): Vec[T]", "member" : "org.saddle.Vec.fillBackward", "link" : "org\/saddle\/Vec.html#fillBackward(limit:Int):org.saddle.Vec[T]", "kind" : "abstract def"}, {"label" : "fillForward", "tail" : "(limit: Int): Vec[T]", "member" : "org.saddle.Vec.fillForward", "link" : "org\/saddle\/Vec.html#fillForward(limit:Int):org.saddle.Vec[T]", "kind" : "abstract def"}, {"label" : "fillNA", "tail" : "(method: FillMethod, limit: Int): Vec[T]", "member" : "org.saddle.Vec.fillNA", "link" : "org\/saddle\/Vec.html#fillNA(method:org.saddle.FillMethod,limit:Int):org.saddle.Vec[T]", "kind" : "abstract def"}, {"label" : "fillNA", "tail" : "(f: (Int) => T): Vec[T]", "member" : "org.saddle.Vec.fillNA", "link" : "org\/saddle\/Vec.html#fillNA(f:Int=>T):org.saddle.Vec[T]", "kind" : "abstract def"}, {"label" : "shift", "tail" : "(n: Int): Vec[T]", "member" : "org.saddle.Vec.shift", "link" : "org\/saddle\/Vec.html#shift(n:Int):org.saddle.Vec[T]", "kind" : "abstract def"}, {"label" : "splitAt", "tail" : "(i: Int): (Vec[T], Vec[T])", "member" : "org.saddle.Vec.splitAt", "link" : "org\/saddle\/Vec.html#splitAt(i:Int):(org.saddle.Vec[T],org.saddle.Vec[T])", "kind" : "abstract def"}, {"label" : "sliceBy", "tail" : "(from: Int, to: Int, stride: Int): Vec[T]", "member" : "org.saddle.Vec.sliceBy", "link" : "org\/saddle\/Vec.html#sliceBy(from:Int,to:Int,stride:Int):org.saddle.Vec[T]", "kind" : "abstract def"}, {"label" : "view", "tail" : "(offsets1: Array[Int]): Vec[T]", "member" : "org.saddle.Vec.view", "link" : "org\/saddle\/Vec.html#view(offsets1:Array[Int]):org.saddle.Vec[T]", "kind" : "abstract def"}, {"label" : "slice", "tail" : "(from: Int, until: Int, stride: Int): Vec[T]", "member" : "org.saddle.Vec.slice", "link" : "org\/saddle\/Vec.html#slice(from:Int,until:Int,stride:Int):org.saddle.Vec[T]", "kind" : "abstract def"}, {"label" : "reversed", "tail" : "(): Vec[T]", "member" : "org.saddle.Vec.reversed", "link" : "org\/saddle\/Vec.html#reversed:org.saddle.Vec[T]", "kind" : "abstract def"}, {"label" : "sorted", "tail" : "(ev: ORD[T], st: ST[T]): Vec[T]", "member" : "org.saddle.Vec.sorted", "link" : "org\/saddle\/Vec.html#sorted(implicitev:org.saddle.ORD[T],implicitst:org.saddle.ST[T]):org.saddle.Vec[T]", "kind" : "abstract def"}, {"label" : "rolling", "tail" : "(winSz: Int, f: (Vec[T]) => B)(arg0: ST[B]): Vec[B]", "member" : "org.saddle.Vec.rolling", "link" : "org\/saddle\/Vec.html#rolling[B](winSz:Int,f:org.saddle.Vec[T]=>B)(implicitevidence$13:org.saddle.ST[B]):org.saddle.Vec[B]", "kind" : "abstract def"}, {"label" : "partition", "tail" : "(pred: Vec[Boolean]): (Vec[T], Vec[T])", "member" : "org.saddle.Vec.partition", "link" : "org\/saddle\/Vec.html#partition(pred:org.saddle.Vec[Boolean]):(org.saddle.Vec[T],org.saddle.Vec[T])", "kind" : "abstract def"}, {"label" : "whereNot", "tail" : "(pred: Vec[Boolean]): Vec[T]", "member" : "org.saddle.Vec.whereNot", "link" : "org\/saddle\/Vec.html#whereNot(pred:org.saddle.Vec[Boolean]):org.saddle.Vec[T]", "kind" : "abstract def"}, {"label" : "where", "tail" : "(pred: Vec[Boolean]): Vec[T]", "member" : "org.saddle.Vec.where", "link" : "org\/saddle\/Vec.html#where(pred:org.saddle.Vec[Boolean]):org.saddle.Vec[T]", "kind" : "abstract def"}, {"label" : "filterAt", "tail" : "(pred: (Int) => Boolean): Vec[T]", "member" : "org.saddle.Vec.filterAt", "link" : "org\/saddle\/Vec.html#filterAt(pred:Int=>Boolean):org.saddle.Vec[T]", "kind" : "abstract def"}, {"label" : "filter", "tail" : "(pred: (T) => Boolean): Vec[T]", "member" : "org.saddle.Vec.filter", "link" : "org\/saddle\/Vec.html#filter(pred:T=>Boolean):org.saddle.Vec[T]", "kind" : "abstract def"}, {"label" : "exists", "tail" : "(pred: (T) => Boolean): Boolean", "member" : "org.saddle.Vec.exists", "link" : "org\/saddle\/Vec.html#exists(pred:T=>Boolean):Boolean", "kind" : "abstract def"}, {"label" : "findOne", "tail" : "(pred: (T) => Boolean): Int", "member" : "org.saddle.Vec.findOne", "link" : "org\/saddle\/Vec.html#findOne(pred:T=>Boolean):Int", "kind" : "abstract def"}, {"label" : "find", "tail" : "(pred: (T) => Boolean): Vec[Int]", "member" : "org.saddle.Vec.find", "link" : "org\/saddle\/Vec.html#find(pred:T=>Boolean):org.saddle.Vec[Int]", "kind" : "abstract def"}, {"label" : "forall", "tail" : "(pred: (T) => Boolean)(op: (T) => Unit): Unit", "member" : "org.saddle.Vec.forall", "link" : "org\/saddle\/Vec.html#forall(pred:T=>Boolean)(op:T=>Unit):Unit", "kind" : "abstract def"}, {"label" : "foreach", "tail" : "(op: (T) => Unit): Unit", "member" : "org.saddle.Vec.foreach", "link" : "org\/saddle\/Vec.html#foreach(op:T=>Unit):Unit", "kind" : "abstract def"}, {"label" : "hasNA", "tail" : "(): Boolean", "member" : "org.saddle.Vec.hasNA", "link" : "org\/saddle\/Vec.html#hasNA:Boolean", "kind" : "abstract def"}, {"label" : "dropNA", "tail" : "(): Vec[T]", "member" : "org.saddle.Vec.dropNA", "link" : "org\/saddle\/Vec.html#dropNA:org.saddle.Vec[T]", "kind" : "abstract def"}, {"label" : "zipMapIdx", "tail" : "(f: (T, Int) => C)(arg0: ST[C]): Vec[C]", "member" : "org.saddle.Vec.zipMapIdx", "link" : "org\/saddle\/Vec.html#zipMapIdx[C](f:(T,Int)=>C)(implicitevidence$12:org.saddle.ST[C]):org.saddle.Vec[C]", "kind" : "abstract def"}, {"label" : "zipMap", "tail" : "(other: Vec[B])(f: (T, B) => C)(arg0: ST[B], arg1: ST[C]): Vec[C]", "member" : "org.saddle.Vec.zipMap", "link" : "org\/saddle\/Vec.html#zipMap[B,C](other:org.saddle.Vec[B])(f:(T,B)=>C)(implicitevidence$10:org.saddle.ST[B],implicitevidence$11:org.saddle.ST[C]):org.saddle.Vec[C]", "kind" : "abstract def"}, {"label" : "foldLeftWhile", "tail" : "(init: B)(f: (B, T) => B)(cond: (B, T) => Boolean)(arg0: ST[B]): B", "member" : "org.saddle.Vec.foldLeftWhile", "link" : "org\/saddle\/Vec.html#foldLeftWhile[B](init:B)(f:(B,T)=>B)(cond:(B,T)=>Boolean)(implicitevidence$9:org.saddle.ST[B]):B", "kind" : "abstract def"}, {"label" : "filterScanLeft", "tail" : "(pred: (T) => Boolean)(init: B)(f: (B, T) => B)(arg0: ST[B]): Vec[B]", "member" : "org.saddle.Vec.filterScanLeft", "link" : "org\/saddle\/Vec.html#filterScanLeft[B](pred:T=>Boolean)(init:B)(f:(B,T)=>B)(implicitevidence$8:org.saddle.ST[B]):org.saddle.Vec[B]", "kind" : "abstract def"}, {"label" : "filterFoldLeft", "tail" : "(pred: (T) => Boolean)(init: B)(f: (B, T) => B)(arg0: ST[B]): B", "member" : "org.saddle.Vec.filterFoldLeft", "link" : "org\/saddle\/Vec.html#filterFoldLeft[B](pred:T=>Boolean)(init:B)(f:(B,T)=>B)(implicitevidence$7:org.saddle.ST[B]):B", "kind" : "abstract def"}, {"label" : "scanLeft", "tail" : "(init: B)(f: (B, T) => B)(arg0: ST[B]): Vec[B]", "member" : "org.saddle.Vec.scanLeft", "link" : "org\/saddle\/Vec.html#scanLeft[B](init:B)(f:(B,T)=>B)(implicitevidence$6:org.saddle.ST[B]):org.saddle.Vec[B]", "kind" : "abstract def"}, {"label" : "foldLeft", "tail" : "(init: B)(f: (B, T) => B)(arg0: ST[B]): B", "member" : "org.saddle.Vec.foldLeft", "link" : "org\/saddle\/Vec.html#foldLeft[B](init:B)(f:(B,T)=>B)(implicitevidence$5:org.saddle.ST[B]):B", "kind" : "abstract def"}, {"label" : "flatMap", "tail" : "(f: (T) => Vec[B])(arg0: ST[B]): Vec[B]", "member" : "org.saddle.Vec.flatMap", "link" : "org\/saddle\/Vec.html#flatMap[B](f:T=>org.saddle.Vec[B])(implicitevidence$4:org.saddle.ST[B]):org.saddle.Vec[B]", "kind" : "abstract def"}, {"label" : "map", "tail" : "(f: (T) => B)(arg0: ST[B]): Vec[B]", "member" : "org.saddle.Vec.map", "link" : "org\/saddle\/Vec.html#map[B](f:T=>B)(implicitevidence$3:org.saddle.ST[B]):org.saddle.Vec[B]", "kind" : "abstract def"}, {"label" : "unary_-", "tail" : "(num: NUM[T]): Vec[T]", "member" : "org.saddle.Vec.unary_-", "link" : "org\/saddle\/Vec.html#unary_-(implicitnum:org.saddle.NUM[T]):org.saddle.Vec[T]", "kind" : "abstract def"}, {"label" : "concat", "tail" : "(v: Vec[T]): Vec[T]", "member" : "org.saddle.Vec.concat", "link" : "org\/saddle\/Vec.html#concat(v:org.saddle.Vec[T]):org.saddle.Vec[T]", "kind" : "abstract def"}, {"label" : "mask", "tail" : "(f: (T) => Boolean): Vec[T]", "member" : "org.saddle.Vec.mask", "link" : "org\/saddle\/Vec.html#mask(f:T=>Boolean):org.saddle.Vec[T]", "kind" : "abstract def"}, {"label" : "mask", "tail" : "(m: Vec[Boolean]): Vec[T]", "member" : "org.saddle.Vec.mask", "link" : "org\/saddle\/Vec.html#mask(m:org.saddle.Vec[Boolean]):org.saddle.Vec[T]", "kind" : "abstract def"}, {"label" : "without", "tail" : "(locs: Array[Int]): Vec[T]", "member" : "org.saddle.Vec.without", "link" : "org\/saddle\/Vec.html#without(locs:Array[Int]):org.saddle.Vec[T]", "kind" : "abstract def"}, {"label" : "dropRight", "tail" : "(i: Int): Vec[T]", "member" : "org.saddle.Vec.dropRight", "link" : "org\/saddle\/Vec.html#dropRight(i:Int):org.saddle.Vec[T]", "kind" : "abstract def"}, {"label" : "dropLeft", "tail" : "(i: Int): Vec[T]", "member" : "org.saddle.Vec.dropLeft", "link" : "org\/saddle\/Vec.html#dropLeft(i:Int):org.saddle.Vec[T]", "kind" : "abstract def"}, {"label" : "takeRight", "tail" : "(i: Int): Vec[T]", "member" : "org.saddle.Vec.takeRight", "link" : "org\/saddle\/Vec.html#takeRight(i:Int):org.saddle.Vec[T]", "kind" : "abstract def"}, {"label" : "takeLeft", "tail" : "(i: Int): Vec[T]", "member" : "org.saddle.Vec.takeLeft", "link" : "org\/saddle\/Vec.html#takeLeft(i:Int):org.saddle.Vec[T]", "kind" : "abstract def"}, {"label" : "take", "tail" : "(rng: Slice[Int]): Vec[T]", "member" : "org.saddle.Vec.take", "link" : "org\/saddle\/Vec.html#take(rng:org.saddle.index.Slice[Int]):org.saddle.Vec[T]", "kind" : "abstract def"}, {"label" : "take", "tail" : "(locs: Int*): Vec[T]", "member" : "org.saddle.Vec.take", "link" : "org\/saddle\/Vec.html#take(locs:Int*):org.saddle.Vec[T]", "kind" : "abstract def"}, {"label" : "take", "tail" : "(locs: Array[Int]): Vec[T]", "member" : "org.saddle.Vec.take", "link" : "org\/saddle\/Vec.html#take(locs:Array[Int]):org.saddle.Vec[T]", "kind" : "abstract def"}, {"label" : "isEmpty", "tail" : "(): Boolean", "member" : "org.saddle.Vec.isEmpty", "link" : "org\/saddle\/Vec.html#isEmpty:Boolean", "kind" : "abstract def"}, {"label" : "tail", "tail" : "(n: Int): Vec[T]", "member" : "org.saddle.Vec.tail", "link" : "org\/saddle\/Vec.html#tail(n:Int):org.saddle.Vec[T]", "kind" : "abstract def"}, {"label" : "head", "tail" : "(n: Int): Vec[T]", "member" : "org.saddle.Vec.head", "link" : "org\/saddle\/Vec.html#head(n:Int):org.saddle.Vec[T]", "kind" : "abstract def"}, {"label" : "contents", "tail" : "(): Array[T]", "member" : "org.saddle.Vec.contents", "link" : "org\/saddle\/Vec.html#contents:Array[T]", "kind" : "abstract def"}, {"label" : "last", "tail" : "(): Scalar[T]", "member" : "org.saddle.Vec.last", "link" : "org\/saddle\/Vec.html#last:org.saddle.scalar.Scalar[T]", "kind" : "abstract def"}, {"label" : "first", "tail" : "(): Scalar[T]", "member" : "org.saddle.Vec.first", "link" : "org\/saddle\/Vec.html#first:org.saddle.scalar.Scalar[T]", "kind" : "abstract def"}, {"label" : "apply", "tail" : "(loc: Int): T", "member" : "org.saddle.Vec.apply", "link" : "org\/saddle\/Vec.html#apply(loc:Int):T", "kind" : "abstract def"}, {"label" : "raw", "tail" : "(loc: Int): T", "member" : "org.saddle.Vec.raw", "link" : "org\/saddle\/Vec.html#raw(loc:Int):T", "kind" : "abstract def"}, {"label" : "at", "tail" : "(loc: Int): Scalar[T]", "member" : "org.saddle.Vec.at", "link" : "org\/saddle\/Vec.html#at(loc:Int):org.saddle.scalar.Scalar[T]", "kind" : "abstract def"}, {"label" : "needsCopy", "tail" : "(): Boolean", "member" : "org.saddle.Vec.needsCopy", "link" : "org\/saddle\/Vec.html#needsCopy:Boolean", "kind" : "abstract def"}, {"label" : "scalarTag", "tail" : "(): ScalarTag[T]", "member" : "org.saddle.Vec.scalarTag", "link" : "org\/saddle\/Vec.html#scalarTag:org.saddle.scalar.ScalarTag[T]", "kind" : "abstract def"}, {"label" : "length", "tail" : "(): Int", "member" : "org.saddle.Vec.length", "link" : "org\/saddle\/Vec.html#length:Int", "kind" : "abstract def"}], "shortDescription" : "Vec is an immutable container for 1D homogeneous data (a \"vector\")."}, {"name" : "org.saddle.VecDoubleOps", "shortDescription" : "Specialized methods for Vec[Double]", "members_class" : [{"label" : "sampleCovariance", "tail" : "(other: Vec[Double]): Double", "member" : "org.saddle.VecDoubleOps.sampleCovariance", "link" : "org\/saddle\/package$$VecDoubleOps.html#sampleCovariance(other:org.saddle.Vec[Double]):Double", "kind" : "def"}, {"label" : "pearson", "tail" : "(other: Vec[Double]): Double", "member" : "org.saddle.VecDoubleOps.pearson", "link" : "org\/saddle\/package$$VecDoubleOps.html#pearson(other:org.saddle.Vec[Double]):Double", "kind" : "def"}, {"label" : "demeaned", "tail" : "(): Vec[Double]", "member" : "org.saddle.VecDoubleOps.demeaned", "link" : "org\/saddle\/package$$VecDoubleOps.html#demeaned:org.saddle.Vec[Double]", "kind" : "def"}, {"label" : "sampleStandardDeviation", "tail" : "(): Double", "member" : "org.saddle.VecDoubleOps.sampleStandardDeviation", "link" : "org\/saddle\/package$$VecDoubleOps.html#sampleStandardDeviation:Double", "kind" : "def"}, {"label" : "sampleVariance", "tail" : "(): Double", "member" : "org.saddle.VecDoubleOps.sampleVariance", "link" : "org\/saddle\/package$$VecDoubleOps.html#sampleVariance:Double", "kind" : "def"}, {"label" : "mean2", "tail" : "(): Double", "member" : "org.saddle.VecDoubleOps.mean2", "link" : "org\/saddle\/package$$VecDoubleOps.html#mean2:Double", "kind" : "def"}, {"label" : "sum2", "tail" : "(): Double", "member" : "org.saddle.VecDoubleOps.sum2", "link" : "org\/saddle\/package$$VecDoubleOps.html#sum2:Double", "kind" : "def"}, {"label" : "min2", "tail" : "(): Double", "member" : "org.saddle.VecDoubleOps.min2", "link" : "org\/saddle\/package$$VecDoubleOps.html#min2:Double", "kind" : "def"}, {"label" : "max2", "tail" : "(): Double", "member" : "org.saddle.VecDoubleOps.max2", "link" : "org\/saddle\/package$$VecDoubleOps.html#max2:Double", "kind" : "def"}, {"member" : "org.saddle.VecDoubleOps#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/saddle\/package$$VecDoubleOps.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/saddle\/package$$VecDoubleOps.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/saddle\/package$$VecDoubleOps.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/saddle\/package$$VecDoubleOps.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/saddle\/package$$VecDoubleOps.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/saddle\/package$$VecDoubleOps.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/saddle\/package$$VecDoubleOps.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/package$$VecDoubleOps.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/package$$VecDoubleOps.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/package$$VecDoubleOps.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/saddle\/package$$VecDoubleOps.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/saddle\/package$$VecDoubleOps.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/saddle\/package$$VecDoubleOps.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/saddle\/package$$VecDoubleOps.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/saddle\/package$$VecDoubleOps.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/saddle\/package$$VecDoubleOps.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "org\/saddle\/package$$VecDoubleOps.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/saddle\/package$$VecDoubleOps.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/saddle\/package$$VecDoubleOps.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/saddle\/package$$VecDoubleOps.html", "kind" : "class"}], "org.saddle.spire.random.rng" : [{"name" : "org.saddle.spire.random.rng.Cmwc5", "shortDescription" : "", "object" : "org\/saddle\/spire\/random\/rng\/Cmwc5$.html", "members_class" : [{"label" : "nextLong", "tail" : "(): Long", "member" : "org.saddle.spire.random.rng.Cmwc5.nextLong", "link" : "org\/saddle\/spire\/random\/rng\/Cmwc5.html#nextLong():Long", "kind" : "def"}, {"label" : "setSeedBytes", "tail" : "(bytes: Array[Byte]): Unit", "member" : "org.saddle.spire.random.rng.Cmwc5.setSeedBytes", "link" : "org\/saddle\/spire\/random\/rng\/Cmwc5.html#setSeedBytes(bytes:Array[Byte]):Unit", "kind" : "def"}, {"label" : "getSeedBytes", "tail" : "(): Array[Byte]", "member" : "org.saddle.spire.random.rng.Cmwc5.getSeedBytes", "link" : "org\/saddle\/spire\/random\/rng\/Cmwc5.html#getSeedBytes():Array[Byte]", "kind" : "def"}, {"label" : "setSeed", "tail" : "(longs: Array[Long]): Unit", "member" : "org.saddle.spire.random.rng.Cmwc5.setSeed", "link" : "org\/saddle\/spire\/random\/rng\/Cmwc5.html#setSeed(longs:Array[Long]):Unit", "kind" : "def"}, {"label" : "getSeed", "tail" : "(): Array[Long]", "member" : "org.saddle.spire.random.rng.Cmwc5.getSeed", "link" : "org\/saddle\/spire\/random\/rng\/Cmwc5.html#getSeed:Array[Long]", "kind" : "def"}, {"label" : "copyInit", "tail" : "(): Cmwc5", "member" : "org.saddle.spire.random.rng.Cmwc5.copyInit", "link" : "org\/saddle\/spire\/random\/rng\/Cmwc5.html#copyInit:org.saddle.spire.random.rng.Cmwc5", "kind" : "def"}, {"member" : "org.saddle.spire.random.rng.Cmwc5#<init>", "error" : "unsupported entity"}, {"label" : "fillBytes", "tail" : "(arr: Array[Byte]): Unit", "member" : "org.saddle.spire.random.LongBasedGenerator.fillBytes", "link" : "org\/saddle\/spire\/random\/rng\/Cmwc5.html#fillBytes(arr:Array[Byte]):Unit", "kind" : "def"}, {"label" : "fillShorts", "tail" : "(arr: Array[Short]): Unit", "member" : "org.saddle.spire.random.LongBasedGenerator.fillShorts", "link" : "org\/saddle\/spire\/random\/rng\/Cmwc5.html#fillShorts(arr:Array[Short]):Unit", "kind" : "def"}, {"label" : "fillInts", "tail" : "(arr: Array[Int]): Unit", "member" : "org.saddle.spire.random.LongBasedGenerator.fillInts", "link" : "org\/saddle\/spire\/random\/rng\/Cmwc5.html#fillInts(arr:Array[Int]):Unit", "kind" : "def"}, {"label" : "nextInt", "tail" : "(): Int", "member" : "org.saddle.spire.random.LongBasedGenerator.nextInt", "link" : "org\/saddle\/spire\/random\/rng\/Cmwc5.html#nextInt():Int", "kind" : "def"}, {"label" : "generateGaussians", "tail" : "(n: Int, mean: Double, stddev: Double): Array[Double]", "member" : "org.saddle.spire.random.Generator.generateGaussians", "link" : "org\/saddle\/spire\/random\/rng\/Cmwc5.html#generateGaussians(n:Int,mean:Double,stddev:Double):Array[Double]", "kind" : "def"}, {"label" : "generateGaussians", "tail" : "(n: Int): Array[Double]", "member" : "org.saddle.spire.random.Generator.generateGaussians", "link" : "org\/saddle\/spire\/random\/rng\/Cmwc5.html#generateGaussians(n:Int):Array[Double]", "kind" : "def"}, {"label" : "fillGaussians", "tail" : "(arr: Array[Double], mean: Double, stddev: Double): Unit", "member" : "org.saddle.spire.random.Generator.fillGaussians", "link" : "org\/saddle\/spire\/random\/rng\/Cmwc5.html#fillGaussians(arr:Array[Double],mean:Double,stddev:Double):Unit", "kind" : "def"}, {"label" : "fillGaussians", "tail" : "(arr: Array[Double]): Unit", "member" : "org.saddle.spire.random.Generator.fillGaussians", "link" : "org\/saddle\/spire\/random\/rng\/Cmwc5.html#fillGaussians(arr:Array[Double]):Unit", "kind" : "def"}, {"label" : "nextGaussian", "tail" : "(mean: Double, stddev: Double): Double", "member" : "org.saddle.spire.random.Generator.nextGaussian", "link" : "org\/saddle\/spire\/random\/rng\/Cmwc5.html#nextGaussian(mean:Double,stddev:Double):Double", "kind" : "def"}, {"label" : "nextGaussian", "tail" : "(): Double", "member" : "org.saddle.spire.random.Generator.nextGaussian", "link" : "org\/saddle\/spire\/random\/rng\/Cmwc5.html#nextGaussian():Double", "kind" : "def"}, {"label" : "shuffle", "tail" : "(as: Array[A])(gen: Generator): Unit", "member" : "org.saddle.spire.random.Generator.shuffle", "link" : "org\/saddle\/spire\/random\/rng\/Cmwc5.html#shuffle[A](as:Array[A])(implicitgen:org.saddle.spire.random.Generator):Unit", "kind" : "def"}, {"label" : "sampleFromTraversable", "tail" : "(as: Iterable[A], size: Int)(arg0: ClassTag[A], gen: Generator): Array[A]", "member" : "org.saddle.spire.random.Generator.sampleFromTraversable", "link" : "org\/saddle\/spire\/random\/rng\/Cmwc5.html#sampleFromTraversable[A](as:Iterable[A],size:Int)(implicitevidence$2:org.saddle.spire.ClassTag[A],implicitgen:org.saddle.spire.random.Generator):Array[A]", "kind" : "def"}, {"label" : "sampleFromArray", "tail" : "(as: Array[A], size: Int)(arg0: ClassTag[A], gen: Generator): Array[A]", "member" : "org.saddle.spire.random.Generator.sampleFromArray", "link" : "org\/saddle\/spire\/random\/rng\/Cmwc5.html#sampleFromArray[A](as:Array[A],size:Int)(implicitevidence$1:org.saddle.spire.ClassTag[A],implicitgen:org.saddle.spire.random.Generator):Array[A]", "kind" : "def"}, {"label" : "chooseFromIterable", "tail" : "(as: Iterable[A])(gen: Generator): A", "member" : "org.saddle.spire.random.Generator.chooseFromIterable", "link" : "org\/saddle\/spire\/random\/rng\/Cmwc5.html#chooseFromIterable[A](as:Iterable[A])(implicitgen:org.saddle.spire.random.Generator):A", "kind" : "def"}, {"label" : "chooseFromSeq", "tail" : "(seq: Seq[A])(gen: Generator): A", "member" : "org.saddle.spire.random.Generator.chooseFromSeq", "link" : "org\/saddle\/spire\/random\/rng\/Cmwc5.html#chooseFromSeq[A](seq:Seq[A])(implicitgen:org.saddle.spire.random.Generator):A", "kind" : "def"}, {"label" : "chooseFromArray", "tail" : "(arr: Array[A])(gen: Generator): A", "member" : "org.saddle.spire.random.Generator.chooseFromArray", "link" : "org\/saddle\/spire\/random\/rng\/Cmwc5.html#chooseFromArray[A](arr:Array[A])(implicitgen:org.saddle.spire.random.Generator):A", "kind" : "def"}, {"label" : "oneOf", "tail" : "(as: A*): A", "member" : "org.saddle.spire.random.Generator.oneOf", "link" : "org\/saddle\/spire\/random\/rng\/Cmwc5.html#oneOf[A](as:A*):A", "kind" : "def"}, {"label" : "generateBytes", "tail" : "(n: Int): Array[Byte]", "member" : "org.saddle.spire.random.Generator.generateBytes", "link" : "org\/saddle\/spire\/random\/rng\/Cmwc5.html#generateBytes(n:Int):Array[Byte]", "kind" : "def"}, {"label" : "generateShorts", "tail" : "(n: Int): Array[Short]", "member" : "org.saddle.spire.random.Generator.generateShorts", "link" : "org\/saddle\/spire\/random\/rng\/Cmwc5.html#generateShorts(n:Int):Array[Short]", "kind" : "def"}, {"label" : "generateInts", "tail" : "(n: Int): Array[Int]", "member" : "org.saddle.spire.random.Generator.generateInts", "link" : "org\/saddle\/spire\/random\/rng\/Cmwc5.html#generateInts(n:Int):Array[Int]", "kind" : "def"}, {"label" : "fillLongs", "tail" : "(arr: Array[Long]): Unit", "member" : "org.saddle.spire.random.Generator.fillLongs", "link" : "org\/saddle\/spire\/random\/rng\/Cmwc5.html#fillLongs(arr:Array[Long]):Unit", "kind" : "def"}, {"label" : "generateLongs", "tail" : "(n: Int): Array[Long]", "member" : "org.saddle.spire.random.Generator.generateLongs", "link" : "org\/saddle\/spire\/random\/rng\/Cmwc5.html#generateLongs(n:Int):Array[Long]", "kind" : "def"}, {"label" : "nextDouble", "tail" : "(from: Double, until: Double): Double", "member" : "org.saddle.spire.random.Generator.nextDouble", "link" : "org\/saddle\/spire\/random\/rng\/Cmwc5.html#nextDouble(from:Double,until:Double):Double", "kind" : "def"}, {"label" : "nextDouble", "tail" : "(n: Double): Double", "member" : "org.saddle.spire.random.Generator.nextDouble", "link" : "org\/saddle\/spire\/random\/rng\/Cmwc5.html#nextDouble(n:Double):Double", "kind" : "def"}, {"label" : "nextDouble", "tail" : "(): Double", "member" : "org.saddle.spire.random.Generator.nextDouble", "link" : "org\/saddle\/spire\/random\/rng\/Cmwc5.html#nextDouble():Double", "kind" : "def"}, {"label" : "nextFloat", "tail" : "(from: Float, until: Float): Float", "member" : "org.saddle.spire.random.Generator.nextFloat", "link" : "org\/saddle\/spire\/random\/rng\/Cmwc5.html#nextFloat(from:Float,until:Float):Float", "kind" : "def"}, {"label" : "nextFloat", "tail" : "(n: Float): Float", "member" : "org.saddle.spire.random.Generator.nextFloat", "link" : "org\/saddle\/spire\/random\/rng\/Cmwc5.html#nextFloat(n:Float):Float", "kind" : "def"}, {"label" : "nextFloat", "tail" : "(): Float", "member" : "org.saddle.spire.random.Generator.nextFloat", "link" : "org\/saddle\/spire\/random\/rng\/Cmwc5.html#nextFloat():Float", "kind" : "def"}, {"label" : "nextBoolean", "tail" : "(): Boolean", "member" : "org.saddle.spire.random.Generator.nextBoolean", "link" : "org\/saddle\/spire\/random\/rng\/Cmwc5.html#nextBoolean():Boolean", "kind" : "def"}, {"label" : "nextLong", "tail" : "(from: Long, to: Long): Long", "member" : "org.saddle.spire.random.Generator.nextLong", "link" : "org\/saddle\/spire\/random\/rng\/Cmwc5.html#nextLong(from:Long,to:Long):Long", "kind" : "def"}, {"label" : "nextLong", "tail" : "(n: Long): Long", "member" : "org.saddle.spire.random.Generator.nextLong", "link" : "org\/saddle\/spire\/random\/rng\/Cmwc5.html#nextLong(n:Long):Long", "kind" : "def"}, {"label" : "nextInt", "tail" : "(from: Int, to: Int): Int", "member" : "org.saddle.spire.random.Generator.nextInt", "link" : "org\/saddle\/spire\/random\/rng\/Cmwc5.html#nextInt(from:Int,to:Int):Int", "kind" : "def"}, {"label" : "nextInt", "tail" : "(n: Int): Int", "member" : "org.saddle.spire.random.Generator.nextInt", "link" : "org\/saddle\/spire\/random\/rng\/Cmwc5.html#nextInt(n:Int):Int", "kind" : "def"}, {"label" : "nextBits", "tail" : "(n: Int): Int", "member" : "org.saddle.spire.random.Generator.nextBits", "link" : "org\/saddle\/spire\/random\/rng\/Cmwc5.html#nextBits(n:Int):Int", "kind" : "def"}, {"label" : "copy", "tail" : "(): Generator", "member" : "org.saddle.spire.random.Generator.copy", "link" : "org\/saddle\/spire\/random\/rng\/Cmwc5.html#copy:org.saddle.spire.random.Generator", "kind" : "def"}, {"label" : "value", "tail" : ": Double", "member" : "org.saddle.spire.random.Generator.value", "link" : "org\/saddle\/spire\/random\/rng\/Cmwc5.html#value:Double", "kind" : "var"}, {"label" : "extra", "tail" : ": Boolean", "member" : "org.saddle.spire.random.Generator.extra", "link" : "org\/saddle\/spire\/random\/rng\/Cmwc5.html#extra:Boolean", "kind" : "var"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/saddle\/spire\/random\/rng\/Cmwc5.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/saddle\/spire\/random\/rng\/Cmwc5.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/saddle\/spire\/random\/rng\/Cmwc5.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/saddle\/spire\/random\/rng\/Cmwc5.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/saddle\/spire\/random\/rng\/Cmwc5.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/saddle\/spire\/random\/rng\/Cmwc5.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/saddle\/spire\/random\/rng\/Cmwc5.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/spire\/random\/rng\/Cmwc5.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/spire\/random\/rng\/Cmwc5.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/spire\/random\/rng\/Cmwc5.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/saddle\/spire\/random\/rng\/Cmwc5.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/saddle\/spire\/random\/rng\/Cmwc5.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/saddle\/spire\/random\/rng\/Cmwc5.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/saddle\/spire\/random\/rng\/Cmwc5.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/saddle\/spire\/random\/rng\/Cmwc5.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/saddle\/spire\/random\/rng\/Cmwc5.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "org\/saddle\/spire\/random\/rng\/Cmwc5.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/saddle\/spire\/random\/rng\/Cmwc5.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/saddle\/spire\/random\/rng\/Cmwc5.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "fromTime", "tail" : "(time: Long): Cmwc5", "member" : "org.saddle.spire.random.rng.Cmwc5.fromTime", "link" : "org\/saddle\/spire\/random\/rng\/Cmwc5$.html#fromTime(time:Long):org.saddle.spire.random.rng.Cmwc5", "kind" : "def"}, {"label" : "fromSeed", "tail" : "(seed: Array[Long]): Cmwc5", "member" : "org.saddle.spire.random.rng.Cmwc5.fromSeed", "link" : "org\/saddle\/spire\/random\/rng\/Cmwc5$.html#fromSeed(seed:Array[Long]):org.saddle.spire.random.rng.Cmwc5", "kind" : "def"}, {"label" : "fromBytes", "tail" : "(bytes: Array[Byte]): Cmwc5", "member" : "org.saddle.spire.random.rng.Cmwc5.fromBytes", "link" : "org\/saddle\/spire\/random\/rng\/Cmwc5$.html#fromBytes(bytes:Array[Byte]):org.saddle.spire.random.rng.Cmwc5", "kind" : "def"}, {"label" : "randomSeed", "tail" : "(): Array[Long]", "member" : "org.saddle.spire.random.rng.Cmwc5.randomSeed", "link" : "org\/saddle\/spire\/random\/rng\/Cmwc5$.html#randomSeed():Array[Long]", "kind" : "def"}, {"label" : "apply", "tail" : "(seed: Array[Long]): Cmwc5", "member" : "org.saddle.spire.random.GeneratorCompanion.apply", "link" : "org\/saddle\/spire\/random\/rng\/Cmwc5$.html#apply(seed:S):G", "kind" : "final def"}, {"label" : "apply", "tail" : "(): Cmwc5", "member" : "org.saddle.spire.random.GeneratorCompanion.apply", "link" : "org\/saddle\/spire\/random\/rng\/Cmwc5$.html#apply():G", "kind" : "final def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/saddle\/spire\/random\/rng\/Cmwc5$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/saddle\/spire\/random\/rng\/Cmwc5$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/saddle\/spire\/random\/rng\/Cmwc5$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/saddle\/spire\/random\/rng\/Cmwc5$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/saddle\/spire\/random\/rng\/Cmwc5$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/saddle\/spire\/random\/rng\/Cmwc5$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/saddle\/spire\/random\/rng\/Cmwc5$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/spire\/random\/rng\/Cmwc5$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/spire\/random\/rng\/Cmwc5$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/spire\/random\/rng\/Cmwc5$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/saddle\/spire\/random\/rng\/Cmwc5$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/saddle\/spire\/random\/rng\/Cmwc5$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/saddle\/spire\/random\/rng\/Cmwc5$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/saddle\/spire\/random\/rng\/Cmwc5$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/saddle\/spire\/random\/rng\/Cmwc5$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/saddle\/spire\/random\/rng\/Cmwc5$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "org\/saddle\/spire\/random\/rng\/Cmwc5$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/saddle\/spire\/random\/rng\/Cmwc5$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/saddle\/spire\/random\/rng\/Cmwc5$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/saddle\/spire\/random\/rng\/Cmwc5.html", "kind" : "class"}, {"name" : "org.saddle.spire.random.rng.Lcg64", "shortDescription" : "", "object" : "org\/saddle\/spire\/random\/rng\/Lcg64$.html", "members_class" : [{"label" : "nextLong", "tail" : "(): Long", "member" : "org.saddle.spire.random.rng.Lcg64.nextLong", "link" : "org\/saddle\/spire\/random\/rng\/Lcg64.html#nextLong():Long", "kind" : "def"}, {"label" : "setSeedBytes", "tail" : "(bytes: Array[Byte]): Unit", "member" : "org.saddle.spire.random.rng.Lcg64.setSeedBytes", "link" : "org\/saddle\/spire\/random\/rng\/Lcg64.html#setSeedBytes(bytes:Array[Byte]):Unit", "kind" : "def"}, {"label" : "getSeedBytes", "tail" : "(): Array[Byte]", "member" : "org.saddle.spire.random.rng.Lcg64.getSeedBytes", "link" : "org\/saddle\/spire\/random\/rng\/Lcg64.html#getSeedBytes():Array[Byte]", "kind" : "def"}, {"label" : "setSeed", "tail" : "(n: Long): Unit", "member" : "org.saddle.spire.random.rng.Lcg64.setSeed", "link" : "org\/saddle\/spire\/random\/rng\/Lcg64.html#setSeed(n:Long):Unit", "kind" : "def"}, {"label" : "getSeed", "tail" : "(): Long", "member" : "org.saddle.spire.random.rng.Lcg64.getSeed", "link" : "org\/saddle\/spire\/random\/rng\/Lcg64.html#getSeed:Long", "kind" : "def"}, {"label" : "copyInit", "tail" : "(): Lcg64", "member" : "org.saddle.spire.random.rng.Lcg64.copyInit", "link" : "org\/saddle\/spire\/random\/rng\/Lcg64.html#copyInit:org.saddle.spire.random.rng.Lcg64", "kind" : "def"}, {"member" : "org.saddle.spire.random.rng.Lcg64#<init>", "error" : "unsupported entity"}, {"label" : "fillBytes", "tail" : "(arr: Array[Byte]): Unit", "member" : "org.saddle.spire.random.LongBasedGenerator.fillBytes", "link" : "org\/saddle\/spire\/random\/rng\/Lcg64.html#fillBytes(arr:Array[Byte]):Unit", "kind" : "def"}, {"label" : "fillShorts", "tail" : "(arr: Array[Short]): Unit", "member" : "org.saddle.spire.random.LongBasedGenerator.fillShorts", "link" : "org\/saddle\/spire\/random\/rng\/Lcg64.html#fillShorts(arr:Array[Short]):Unit", "kind" : "def"}, {"label" : "fillInts", "tail" : "(arr: Array[Int]): Unit", "member" : "org.saddle.spire.random.LongBasedGenerator.fillInts", "link" : "org\/saddle\/spire\/random\/rng\/Lcg64.html#fillInts(arr:Array[Int]):Unit", "kind" : "def"}, {"label" : "nextInt", "tail" : "(): Int", "member" : "org.saddle.spire.random.LongBasedGenerator.nextInt", "link" : "org\/saddle\/spire\/random\/rng\/Lcg64.html#nextInt():Int", "kind" : "def"}, {"label" : "generateGaussians", "tail" : "(n: Int, mean: Double, stddev: Double): Array[Double]", "member" : "org.saddle.spire.random.Generator.generateGaussians", "link" : "org\/saddle\/spire\/random\/rng\/Lcg64.html#generateGaussians(n:Int,mean:Double,stddev:Double):Array[Double]", "kind" : "def"}, {"label" : "generateGaussians", "tail" : "(n: Int): Array[Double]", "member" : "org.saddle.spire.random.Generator.generateGaussians", "link" : "org\/saddle\/spire\/random\/rng\/Lcg64.html#generateGaussians(n:Int):Array[Double]", "kind" : "def"}, {"label" : "fillGaussians", "tail" : "(arr: Array[Double], mean: Double, stddev: Double): Unit", "member" : "org.saddle.spire.random.Generator.fillGaussians", "link" : "org\/saddle\/spire\/random\/rng\/Lcg64.html#fillGaussians(arr:Array[Double],mean:Double,stddev:Double):Unit", "kind" : "def"}, {"label" : "fillGaussians", "tail" : "(arr: Array[Double]): Unit", "member" : "org.saddle.spire.random.Generator.fillGaussians", "link" : "org\/saddle\/spire\/random\/rng\/Lcg64.html#fillGaussians(arr:Array[Double]):Unit", "kind" : "def"}, {"label" : "nextGaussian", "tail" : "(mean: Double, stddev: Double): Double", "member" : "org.saddle.spire.random.Generator.nextGaussian", "link" : "org\/saddle\/spire\/random\/rng\/Lcg64.html#nextGaussian(mean:Double,stddev:Double):Double", "kind" : "def"}, {"label" : "nextGaussian", "tail" : "(): Double", "member" : "org.saddle.spire.random.Generator.nextGaussian", "link" : "org\/saddle\/spire\/random\/rng\/Lcg64.html#nextGaussian():Double", "kind" : "def"}, {"label" : "shuffle", "tail" : "(as: Array[A])(gen: Generator): Unit", "member" : "org.saddle.spire.random.Generator.shuffle", "link" : "org\/saddle\/spire\/random\/rng\/Lcg64.html#shuffle[A](as:Array[A])(implicitgen:org.saddle.spire.random.Generator):Unit", "kind" : "def"}, {"label" : "sampleFromTraversable", "tail" : "(as: Iterable[A], size: Int)(arg0: ClassTag[A], gen: Generator): Array[A]", "member" : "org.saddle.spire.random.Generator.sampleFromTraversable", "link" : "org\/saddle\/spire\/random\/rng\/Lcg64.html#sampleFromTraversable[A](as:Iterable[A],size:Int)(implicitevidence$2:org.saddle.spire.ClassTag[A],implicitgen:org.saddle.spire.random.Generator):Array[A]", "kind" : "def"}, {"label" : "sampleFromArray", "tail" : "(as: Array[A], size: Int)(arg0: ClassTag[A], gen: Generator): Array[A]", "member" : "org.saddle.spire.random.Generator.sampleFromArray", "link" : "org\/saddle\/spire\/random\/rng\/Lcg64.html#sampleFromArray[A](as:Array[A],size:Int)(implicitevidence$1:org.saddle.spire.ClassTag[A],implicitgen:org.saddle.spire.random.Generator):Array[A]", "kind" : "def"}, {"label" : "chooseFromIterable", "tail" : "(as: Iterable[A])(gen: Generator): A", "member" : "org.saddle.spire.random.Generator.chooseFromIterable", "link" : "org\/saddle\/spire\/random\/rng\/Lcg64.html#chooseFromIterable[A](as:Iterable[A])(implicitgen:org.saddle.spire.random.Generator):A", "kind" : "def"}, {"label" : "chooseFromSeq", "tail" : "(seq: Seq[A])(gen: Generator): A", "member" : "org.saddle.spire.random.Generator.chooseFromSeq", "link" : "org\/saddle\/spire\/random\/rng\/Lcg64.html#chooseFromSeq[A](seq:Seq[A])(implicitgen:org.saddle.spire.random.Generator):A", "kind" : "def"}, {"label" : "chooseFromArray", "tail" : "(arr: Array[A])(gen: Generator): A", "member" : "org.saddle.spire.random.Generator.chooseFromArray", "link" : "org\/saddle\/spire\/random\/rng\/Lcg64.html#chooseFromArray[A](arr:Array[A])(implicitgen:org.saddle.spire.random.Generator):A", "kind" : "def"}, {"label" : "oneOf", "tail" : "(as: A*): A", "member" : "org.saddle.spire.random.Generator.oneOf", "link" : "org\/saddle\/spire\/random\/rng\/Lcg64.html#oneOf[A](as:A*):A", "kind" : "def"}, {"label" : "generateBytes", "tail" : "(n: Int): Array[Byte]", "member" : "org.saddle.spire.random.Generator.generateBytes", "link" : "org\/saddle\/spire\/random\/rng\/Lcg64.html#generateBytes(n:Int):Array[Byte]", "kind" : "def"}, {"label" : "generateShorts", "tail" : "(n: Int): Array[Short]", "member" : "org.saddle.spire.random.Generator.generateShorts", "link" : "org\/saddle\/spire\/random\/rng\/Lcg64.html#generateShorts(n:Int):Array[Short]", "kind" : "def"}, {"label" : "generateInts", "tail" : "(n: Int): Array[Int]", "member" : "org.saddle.spire.random.Generator.generateInts", "link" : "org\/saddle\/spire\/random\/rng\/Lcg64.html#generateInts(n:Int):Array[Int]", "kind" : "def"}, {"label" : "fillLongs", "tail" : "(arr: Array[Long]): Unit", "member" : "org.saddle.spire.random.Generator.fillLongs", "link" : "org\/saddle\/spire\/random\/rng\/Lcg64.html#fillLongs(arr:Array[Long]):Unit", "kind" : "def"}, {"label" : "generateLongs", "tail" : "(n: Int): Array[Long]", "member" : "org.saddle.spire.random.Generator.generateLongs", "link" : "org\/saddle\/spire\/random\/rng\/Lcg64.html#generateLongs(n:Int):Array[Long]", "kind" : "def"}, {"label" : "nextDouble", "tail" : "(from: Double, until: Double): Double", "member" : "org.saddle.spire.random.Generator.nextDouble", "link" : "org\/saddle\/spire\/random\/rng\/Lcg64.html#nextDouble(from:Double,until:Double):Double", "kind" : "def"}, {"label" : "nextDouble", "tail" : "(n: Double): Double", "member" : "org.saddle.spire.random.Generator.nextDouble", "link" : "org\/saddle\/spire\/random\/rng\/Lcg64.html#nextDouble(n:Double):Double", "kind" : "def"}, {"label" : "nextDouble", "tail" : "(): Double", "member" : "org.saddle.spire.random.Generator.nextDouble", "link" : "org\/saddle\/spire\/random\/rng\/Lcg64.html#nextDouble():Double", "kind" : "def"}, {"label" : "nextFloat", "tail" : "(from: Float, until: Float): Float", "member" : "org.saddle.spire.random.Generator.nextFloat", "link" : "org\/saddle\/spire\/random\/rng\/Lcg64.html#nextFloat(from:Float,until:Float):Float", "kind" : "def"}, {"label" : "nextFloat", "tail" : "(n: Float): Float", "member" : "org.saddle.spire.random.Generator.nextFloat", "link" : "org\/saddle\/spire\/random\/rng\/Lcg64.html#nextFloat(n:Float):Float", "kind" : "def"}, {"label" : "nextFloat", "tail" : "(): Float", "member" : "org.saddle.spire.random.Generator.nextFloat", "link" : "org\/saddle\/spire\/random\/rng\/Lcg64.html#nextFloat():Float", "kind" : "def"}, {"label" : "nextBoolean", "tail" : "(): Boolean", "member" : "org.saddle.spire.random.Generator.nextBoolean", "link" : "org\/saddle\/spire\/random\/rng\/Lcg64.html#nextBoolean():Boolean", "kind" : "def"}, {"label" : "nextLong", "tail" : "(from: Long, to: Long): Long", "member" : "org.saddle.spire.random.Generator.nextLong", "link" : "org\/saddle\/spire\/random\/rng\/Lcg64.html#nextLong(from:Long,to:Long):Long", "kind" : "def"}, {"label" : "nextLong", "tail" : "(n: Long): Long", "member" : "org.saddle.spire.random.Generator.nextLong", "link" : "org\/saddle\/spire\/random\/rng\/Lcg64.html#nextLong(n:Long):Long", "kind" : "def"}, {"label" : "nextInt", "tail" : "(from: Int, to: Int): Int", "member" : "org.saddle.spire.random.Generator.nextInt", "link" : "org\/saddle\/spire\/random\/rng\/Lcg64.html#nextInt(from:Int,to:Int):Int", "kind" : "def"}, {"label" : "nextInt", "tail" : "(n: Int): Int", "member" : "org.saddle.spire.random.Generator.nextInt", "link" : "org\/saddle\/spire\/random\/rng\/Lcg64.html#nextInt(n:Int):Int", "kind" : "def"}, {"label" : "nextBits", "tail" : "(n: Int): Int", "member" : "org.saddle.spire.random.Generator.nextBits", "link" : "org\/saddle\/spire\/random\/rng\/Lcg64.html#nextBits(n:Int):Int", "kind" : "def"}, {"label" : "copy", "tail" : "(): Generator", "member" : "org.saddle.spire.random.Generator.copy", "link" : "org\/saddle\/spire\/random\/rng\/Lcg64.html#copy:org.saddle.spire.random.Generator", "kind" : "def"}, {"label" : "value", "tail" : ": Double", "member" : "org.saddle.spire.random.Generator.value", "link" : "org\/saddle\/spire\/random\/rng\/Lcg64.html#value:Double", "kind" : "var"}, {"label" : "extra", "tail" : ": Boolean", "member" : "org.saddle.spire.random.Generator.extra", "link" : "org\/saddle\/spire\/random\/rng\/Lcg64.html#extra:Boolean", "kind" : "var"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/saddle\/spire\/random\/rng\/Lcg64.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/saddle\/spire\/random\/rng\/Lcg64.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/saddle\/spire\/random\/rng\/Lcg64.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/saddle\/spire\/random\/rng\/Lcg64.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/saddle\/spire\/random\/rng\/Lcg64.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/saddle\/spire\/random\/rng\/Lcg64.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/saddle\/spire\/random\/rng\/Lcg64.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/spire\/random\/rng\/Lcg64.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/spire\/random\/rng\/Lcg64.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/spire\/random\/rng\/Lcg64.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/saddle\/spire\/random\/rng\/Lcg64.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/saddle\/spire\/random\/rng\/Lcg64.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/saddle\/spire\/random\/rng\/Lcg64.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/saddle\/spire\/random\/rng\/Lcg64.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/saddle\/spire\/random\/rng\/Lcg64.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/saddle\/spire\/random\/rng\/Lcg64.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "org\/saddle\/spire\/random\/rng\/Lcg64.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/saddle\/spire\/random\/rng\/Lcg64.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/saddle\/spire\/random\/rng\/Lcg64.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "step", "tail" : "(n: Long): Long", "member" : "org.saddle.spire.random.rng.Lcg64.step", "link" : "org\/saddle\/spire\/random\/rng\/Lcg64$.html#step(n:Long):Long", "kind" : "def"}, {"label" : "fromTime", "tail" : "(time: Long): Lcg64", "member" : "org.saddle.spire.random.rng.Lcg64.fromTime", "link" : "org\/saddle\/spire\/random\/rng\/Lcg64$.html#fromTime(time:Long):org.saddle.spire.random.rng.Lcg64", "kind" : "def"}, {"label" : "fromSeed", "tail" : "(seed: Long): Lcg64", "member" : "org.saddle.spire.random.rng.Lcg64.fromSeed", "link" : "org\/saddle\/spire\/random\/rng\/Lcg64$.html#fromSeed(seed:Long):org.saddle.spire.random.rng.Lcg64", "kind" : "def"}, {"label" : "fromBytes", "tail" : "(bytes: Array[Byte]): Lcg64", "member" : "org.saddle.spire.random.rng.Lcg64.fromBytes", "link" : "org\/saddle\/spire\/random\/rng\/Lcg64$.html#fromBytes(bytes:Array[Byte]):org.saddle.spire.random.rng.Lcg64", "kind" : "def"}, {"label" : "randomSeed", "tail" : "(): Long", "member" : "org.saddle.spire.random.rng.Lcg64.randomSeed", "link" : "org\/saddle\/spire\/random\/rng\/Lcg64$.html#randomSeed():Long", "kind" : "def"}, {"label" : "apply", "tail" : "(seed: Long): Lcg64", "member" : "org.saddle.spire.random.GeneratorCompanion.apply", "link" : "org\/saddle\/spire\/random\/rng\/Lcg64$.html#apply(seed:S):G", "kind" : "final def"}, {"label" : "apply", "tail" : "(): Lcg64", "member" : "org.saddle.spire.random.GeneratorCompanion.apply", "link" : "org\/saddle\/spire\/random\/rng\/Lcg64$.html#apply():G", "kind" : "final def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/saddle\/spire\/random\/rng\/Lcg64$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/saddle\/spire\/random\/rng\/Lcg64$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/saddle\/spire\/random\/rng\/Lcg64$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/saddle\/spire\/random\/rng\/Lcg64$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/saddle\/spire\/random\/rng\/Lcg64$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/saddle\/spire\/random\/rng\/Lcg64$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/saddle\/spire\/random\/rng\/Lcg64$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/spire\/random\/rng\/Lcg64$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/spire\/random\/rng\/Lcg64$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/spire\/random\/rng\/Lcg64$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/saddle\/spire\/random\/rng\/Lcg64$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/saddle\/spire\/random\/rng\/Lcg64$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/saddle\/spire\/random\/rng\/Lcg64$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/saddle\/spire\/random\/rng\/Lcg64$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/saddle\/spire\/random\/rng\/Lcg64$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/saddle\/spire\/random\/rng\/Lcg64$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "org\/saddle\/spire\/random\/rng\/Lcg64$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/saddle\/spire\/random\/rng\/Lcg64$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/saddle\/spire\/random\/rng\/Lcg64$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/saddle\/spire\/random\/rng\/Lcg64.html", "kind" : "class"}], "org" : [], "org.saddle.io.npy" : [{"name" : "org.saddle.io.npy.ByteType", "case object" : "org\/saddle\/io\/npy\/package$$ByteType$.html", "shortDescription" : "", "members_case object" : [{"label" : "width", "tail" : ": Int", "member" : "org.saddle.io.npy.ByteType.width", "link" : "org\/saddle\/io\/npy\/package$$ByteType$.html#width:Int", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "org\/saddle\/io\/npy\/package$$ByteType$.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "productElementName", "tail" : "(n: Int): String", "member" : "scala.Product.productElementName", "link" : "org\/saddle\/io\/npy\/package$$ByteType$.html#productElementName(n:Int):String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/saddle\/io\/npy\/package$$ByteType$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/saddle\/io\/npy\/package$$ByteType$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/saddle\/io\/npy\/package$$ByteType$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/saddle\/io\/npy\/package$$ByteType$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/saddle\/io\/npy\/package$$ByteType$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/saddle\/io\/npy\/package$$ByteType$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/saddle\/io\/npy\/package$$ByteType$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/io\/npy\/package$$ByteType$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/io\/npy\/package$$ByteType$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/io\/npy\/package$$ByteType$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/saddle\/io\/npy\/package$$ByteType$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/saddle\/io\/npy\/package$$ByteType$.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/saddle\/io\/npy\/package$$ByteType$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/saddle\/io\/npy\/package$$ByteType$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "org\/saddle\/io\/npy\/package$$ByteType$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/saddle\/io\/npy\/package$$ByteType$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/saddle\/io\/npy\/package$$ByteType$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "case object"}, {"name" : "org.saddle.io.npy.Descriptor", "shortDescription" : "", "members_case class" : [{"member" : "org.saddle.io.npy.Descriptor#<init>", "error" : "unsupported entity"}, {"label" : "dtype", "tail" : ": String", "member" : "org.saddle.io.npy.Descriptor.dtype", "link" : "org\/saddle\/io\/npy\/package$$Descriptor.html#dtype:String", "kind" : "val"}, {"label" : "shape", "tail" : ": List[Long]", "member" : "org.saddle.io.npy.Descriptor.shape", "link" : "org\/saddle\/io\/npy\/package$$Descriptor.html#shape:List[Long]", "kind" : "val"}, {"label" : "fortran", "tail" : ": Boolean", "member" : "org.saddle.io.npy.Descriptor.fortran", "link" : "org\/saddle\/io\/npy\/package$$Descriptor.html#fortran:Boolean", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "org\/saddle\/io\/npy\/package$$Descriptor.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/saddle\/io\/npy\/package$$Descriptor.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/saddle\/io\/npy\/package$$Descriptor.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/saddle\/io\/npy\/package$$Descriptor.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/saddle\/io\/npy\/package$$Descriptor.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/saddle\/io\/npy\/package$$Descriptor.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/saddle\/io\/npy\/package$$Descriptor.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/saddle\/io\/npy\/package$$Descriptor.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/io\/npy\/package$$Descriptor.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/io\/npy\/package$$Descriptor.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/io\/npy\/package$$Descriptor.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/saddle\/io\/npy\/package$$Descriptor.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/saddle\/io\/npy\/package$$Descriptor.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/saddle\/io\/npy\/package$$Descriptor.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "org\/saddle\/io\/npy\/package$$Descriptor.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/saddle\/io\/npy\/package$$Descriptor.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/saddle\/io\/npy\/package$$Descriptor.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "org\/saddle\/io\/npy\/package$$Descriptor.html", "kind" : "case class"}, {"name" : "org.saddle.io.npy.DoubleType", "case object" : "org\/saddle\/io\/npy\/package$$DoubleType$.html", "shortDescription" : "", "members_case object" : [{"label" : "width", "tail" : ": Int", "member" : "org.saddle.io.npy.DoubleType.width", "link" : "org\/saddle\/io\/npy\/package$$DoubleType$.html#width:Int", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "org\/saddle\/io\/npy\/package$$DoubleType$.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "productElementName", "tail" : "(n: Int): String", "member" : "scala.Product.productElementName", "link" : "org\/saddle\/io\/npy\/package$$DoubleType$.html#productElementName(n:Int):String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/saddle\/io\/npy\/package$$DoubleType$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/saddle\/io\/npy\/package$$DoubleType$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/saddle\/io\/npy\/package$$DoubleType$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/saddle\/io\/npy\/package$$DoubleType$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/saddle\/io\/npy\/package$$DoubleType$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/saddle\/io\/npy\/package$$DoubleType$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/saddle\/io\/npy\/package$$DoubleType$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/io\/npy\/package$$DoubleType$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/io\/npy\/package$$DoubleType$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/io\/npy\/package$$DoubleType$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/saddle\/io\/npy\/package$$DoubleType$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/saddle\/io\/npy\/package$$DoubleType$.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/saddle\/io\/npy\/package$$DoubleType$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/saddle\/io\/npy\/package$$DoubleType$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "org\/saddle\/io\/npy\/package$$DoubleType$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/saddle\/io\/npy\/package$$DoubleType$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/saddle\/io\/npy\/package$$DoubleType$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "case object"}, {"name" : "org.saddle.io.npy.DType", "trait" : "org\/saddle\/io\/npy\/package$$DType.html", "kind" : "trait", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/saddle\/io\/npy\/package$$DType.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/saddle\/io\/npy\/package$$DType.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/saddle\/io\/npy\/package$$DType.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/saddle\/io\/npy\/package$$DType.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/saddle\/io\/npy\/package$$DType.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/saddle\/io\/npy\/package$$DType.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/saddle\/io\/npy\/package$$DType.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/io\/npy\/package$$DType.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/io\/npy\/package$$DType.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/io\/npy\/package$$DType.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/saddle\/io\/npy\/package$$DType.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/saddle\/io\/npy\/package$$DType.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/saddle\/io\/npy\/package$$DType.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/saddle\/io\/npy\/package$$DType.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/saddle\/io\/npy\/package$$DType.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/saddle\/io\/npy\/package$$DType.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "org\/saddle\/io\/npy\/package$$DType.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/saddle\/io\/npy\/package$$DType.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/saddle\/io\/npy\/package$$DType.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "width", "tail" : "(): Int", "member" : "org.saddle.io.npy.DType.width", "link" : "org\/saddle\/io\/npy\/package$$DType.html#width:Int", "kind" : "abstract def"}], "shortDescription" : ""}, {"name" : "org.saddle.io.npy.FloatType", "case object" : "org\/saddle\/io\/npy\/package$$FloatType$.html", "shortDescription" : "", "members_case object" : [{"label" : "width", "tail" : ": Int", "member" : "org.saddle.io.npy.FloatType.width", "link" : "org\/saddle\/io\/npy\/package$$FloatType$.html#width:Int", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "org\/saddle\/io\/npy\/package$$FloatType$.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "productElementName", "tail" : "(n: Int): String", "member" : "scala.Product.productElementName", "link" : "org\/saddle\/io\/npy\/package$$FloatType$.html#productElementName(n:Int):String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/saddle\/io\/npy\/package$$FloatType$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/saddle\/io\/npy\/package$$FloatType$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/saddle\/io\/npy\/package$$FloatType$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/saddle\/io\/npy\/package$$FloatType$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/saddle\/io\/npy\/package$$FloatType$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/saddle\/io\/npy\/package$$FloatType$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/saddle\/io\/npy\/package$$FloatType$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/io\/npy\/package$$FloatType$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/io\/npy\/package$$FloatType$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/io\/npy\/package$$FloatType$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/saddle\/io\/npy\/package$$FloatType$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/saddle\/io\/npy\/package$$FloatType$.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/saddle\/io\/npy\/package$$FloatType$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/saddle\/io\/npy\/package$$FloatType$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "org\/saddle\/io\/npy\/package$$FloatType$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/saddle\/io\/npy\/package$$FloatType$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/saddle\/io\/npy\/package$$FloatType$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "case object"}, {"name" : "org.saddle.io.npy.IntType", "case object" : "org\/saddle\/io\/npy\/package$$IntType$.html", "shortDescription" : "", "members_case object" : [{"label" : "width", "tail" : ": Int", "member" : "org.saddle.io.npy.IntType.width", "link" : "org\/saddle\/io\/npy\/package$$IntType$.html#width:Int", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "org\/saddle\/io\/npy\/package$$IntType$.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "productElementName", "tail" : "(n: Int): String", "member" : "scala.Product.productElementName", "link" : "org\/saddle\/io\/npy\/package$$IntType$.html#productElementName(n:Int):String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/saddle\/io\/npy\/package$$IntType$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/saddle\/io\/npy\/package$$IntType$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/saddle\/io\/npy\/package$$IntType$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/saddle\/io\/npy\/package$$IntType$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/saddle\/io\/npy\/package$$IntType$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/saddle\/io\/npy\/package$$IntType$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/saddle\/io\/npy\/package$$IntType$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/io\/npy\/package$$IntType$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/io\/npy\/package$$IntType$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/io\/npy\/package$$IntType$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/saddle\/io\/npy\/package$$IntType$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/saddle\/io\/npy\/package$$IntType$.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/saddle\/io\/npy\/package$$IntType$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/saddle\/io\/npy\/package$$IntType$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "org\/saddle\/io\/npy\/package$$IntType$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/saddle\/io\/npy\/package$$IntType$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/saddle\/io\/npy\/package$$IntType$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "case object"}, {"name" : "org.saddle.io.npy.LongType", "case object" : "org\/saddle\/io\/npy\/package$$LongType$.html", "shortDescription" : "", "members_case object" : [{"label" : "width", "tail" : ": Int", "member" : "org.saddle.io.npy.LongType.width", "link" : "org\/saddle\/io\/npy\/package$$LongType$.html#width:Int", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "org\/saddle\/io\/npy\/package$$LongType$.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "productElementName", "tail" : "(n: Int): String", "member" : "scala.Product.productElementName", "link" : "org\/saddle\/io\/npy\/package$$LongType$.html#productElementName(n:Int):String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/saddle\/io\/npy\/package$$LongType$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/saddle\/io\/npy\/package$$LongType$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/saddle\/io\/npy\/package$$LongType$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/saddle\/io\/npy\/package$$LongType$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/saddle\/io\/npy\/package$$LongType$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/saddle\/io\/npy\/package$$LongType$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/saddle\/io\/npy\/package$$LongType$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/io\/npy\/package$$LongType$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/io\/npy\/package$$LongType$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/io\/npy\/package$$LongType$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/saddle\/io\/npy\/package$$LongType$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/saddle\/io\/npy\/package$$LongType$.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/saddle\/io\/npy\/package$$LongType$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/saddle\/io\/npy\/package$$LongType$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "org\/saddle\/io\/npy\/package$$LongType$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/saddle\/io\/npy\/package$$LongType$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/saddle\/io\/npy\/package$$LongType$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "case object"}], "org.saddle.mat" : [{"name" : "org.saddle.mat.MatCols", "shortDescription" : "", "object" : "org\/saddle\/mat\/MatCols$.html", "members_object" : [{"label" : "apply", "tail" : "(mat: Mat[A])(arg0: ST[A]): MatCols[A]", "member" : "org.saddle.mat.MatCols.apply", "link" : "org\/saddle\/mat\/MatCols$.html#apply[A](mat:org.saddle.Mat[A])(implicitevidence$4:org.saddle.ST[A]):org.saddle.mat.MatCols[A]", "kind" : "def"}, {"label" : "apply", "tail" : "(cols: Array[Vec[A]])(arg0: ST[A]): MatCols[A]", "member" : "org.saddle.mat.MatCols.apply", "link" : "org\/saddle\/mat\/MatCols$.html#apply[A](cols:Array[org.saddle.Vec[A]])(implicitevidence$3:org.saddle.ST[A]):org.saddle.mat.MatCols[A]", "kind" : "def"}, {"label" : "apply", "tail" : "(cols: Vec[A]*)(arg0: ST[A]): MatCols[A]", "member" : "org.saddle.mat.MatCols.apply", "link" : "org\/saddle\/mat\/MatCols$.html#apply[A](cols:org.saddle.Vec[A]*)(implicitevidence$2:org.saddle.ST[A]):org.saddle.mat.MatCols[A]", "kind" : "def"}, {"label" : "empty", "tail" : "(arg0: ST[A]): MatCols[A]", "member" : "org.saddle.mat.MatCols.empty", "link" : "org\/saddle\/mat\/MatCols$.html#empty[A](implicitevidence$1:org.saddle.ST[A]):org.saddle.mat.MatCols[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/saddle\/mat\/MatCols$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/saddle\/mat\/MatCols$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/saddle\/mat\/MatCols$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/saddle\/mat\/MatCols$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/saddle\/mat\/MatCols$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/saddle\/mat\/MatCols$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/saddle\/mat\/MatCols$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/mat\/MatCols$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/mat\/MatCols$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/mat\/MatCols$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/saddle\/mat\/MatCols$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/saddle\/mat\/MatCols$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/saddle\/mat\/MatCols$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/saddle\/mat\/MatCols$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/saddle\/mat\/MatCols$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/saddle\/mat\/MatCols$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "org\/saddle\/mat\/MatCols$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/saddle\/mat\/MatCols$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/saddle\/mat\/MatCols$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "org.saddle.mat.MatMath", "shortDescription" : "Matrix mathematical helper routines.", "object" : "org\/saddle\/mat\/MatMath$.html", "members_object" : [{"label" : "demeaned", "tail" : "(mat: Mat[Double]): Mat[Double]", "member" : "org.saddle.mat.MatMath.demeaned", "link" : "org\/saddle\/mat\/MatMath$.html#demeaned(mat:org.saddle.Mat[Double]):org.saddle.Mat[Double]", "kind" : "def"}, {"label" : "cov", "tail" : "(mat: Mat[Double], corr: Boolean): Mat[Double]", "member" : "org.saddle.mat.MatMath.cov", "link" : "org\/saddle\/mat\/MatMath$.html#cov(mat:org.saddle.Mat[Double],corr:Boolean):org.saddle.Mat[Double]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/saddle\/mat\/MatMath$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/saddle\/mat\/MatMath$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/saddle\/mat\/MatMath$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/saddle\/mat\/MatMath$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/saddle\/mat\/MatMath$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/saddle\/mat\/MatMath$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/saddle\/mat\/MatMath$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/mat\/MatMath$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/mat\/MatMath$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/mat\/MatMath$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/saddle\/mat\/MatMath$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/saddle\/mat\/MatMath$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/saddle\/mat\/MatMath$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/saddle\/mat\/MatMath$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/saddle\/mat\/MatMath$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/saddle\/mat\/MatMath$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "org\/saddle\/mat\/MatMath$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/saddle\/mat\/MatMath$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/saddle\/mat\/MatMath$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}], "org.saddle.npy" : [{"name" : "org.saddle.npy.Descriptor", "shortDescription" : "", "members_case class" : [{"member" : "org.saddle.npy.Descriptor#<init>", "error" : "unsupported entity"}, {"label" : "dtype", "tail" : ": String", "member" : "org.saddle.npy.Descriptor.dtype", "link" : "org\/saddle\/npy\/Descriptor.html#dtype:String", "kind" : "val"}, {"label" : "shape", "tail" : ": List[Int]", "member" : "org.saddle.npy.Descriptor.shape", "link" : "org\/saddle\/npy\/Descriptor.html#shape:List[Int]", "kind" : "val"}, {"label" : "fortran", "tail" : ": Boolean", "member" : "org.saddle.npy.Descriptor.fortran", "link" : "org\/saddle\/npy\/Descriptor.html#fortran:Boolean", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "org\/saddle\/npy\/Descriptor.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/saddle\/npy\/Descriptor.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/saddle\/npy\/Descriptor.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/saddle\/npy\/Descriptor.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/saddle\/npy\/Descriptor.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/saddle\/npy\/Descriptor.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/saddle\/npy\/Descriptor.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/saddle\/npy\/Descriptor.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/npy\/Descriptor.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/npy\/Descriptor.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/npy\/Descriptor.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/saddle\/npy\/Descriptor.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/saddle\/npy\/Descriptor.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/saddle\/npy\/Descriptor.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "org\/saddle\/npy\/Descriptor.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/saddle\/npy\/Descriptor.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/saddle\/npy\/Descriptor.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "org\/saddle\/npy\/Descriptor.html", "kind" : "case class"}, {"name" : "org.saddle.npy.Reader", "shortDescription" : "", "object" : "org\/saddle\/npy\/Reader$.html", "members_object" : [{"label" : "readVecDataFromChannel", "tail" : "(channel: ReadableByteChannel, len: Int, width: Int)(arg0: ST[T]): Either[String, Vec[T]]", "member" : "org.saddle.npy.Reader.readVecDataFromChannel", "link" : "org\/saddle\/npy\/Reader$.html#readVecDataFromChannel[T](channel:java.nio.channels.ReadableByteChannel,len:Int,width:Int)(implicitevidence$8:org.saddle.ST[T]):scala.util.Either[String,org.saddle.Vec[T]]", "kind" : "def"}, {"label" : "readMatFromArray", "tail" : "(array: Array[Byte])(arg0: ST[T]): Either[String, Mat[T]]", "member" : "org.saddle.npy.Reader.readMatFromArray", "link" : "org\/saddle\/npy\/Reader$.html#readMatFromArray[T](array:Array[Byte])(implicitevidence$7:org.saddle.ST[T]):scala.util.Either[String,org.saddle.Mat[T]]", "kind" : "def"}, {"label" : "readVecFromChannel", "tail" : "(channel: ReadableByteChannel)(arg0: ST[T]): Either[String, (Vec[T], List[Int])]", "member" : "org.saddle.npy.Reader.readVecFromChannel", "link" : "org\/saddle\/npy\/Reader$.html#readVecFromChannel[T](channel:java.nio.channels.ReadableByteChannel)(implicitevidence$6:org.saddle.ST[T]):scala.util.Either[String,(org.saddle.Vec[T],List[Int])]", "kind" : "def"}, {"label" : "readMatFromChannel", "tail" : "(channel: ReadableByteChannel)(arg0: ST[T]): Either[String, Mat[T]]", "member" : "org.saddle.npy.Reader.readMatFromChannel", "link" : "org\/saddle\/npy\/Reader$.html#readMatFromChannel[T](channel:java.nio.channels.ReadableByteChannel)(implicitevidence$5:org.saddle.ST[T]):scala.util.Either[String,org.saddle.Mat[T]]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/saddle\/npy\/Reader$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/saddle\/npy\/Reader$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/saddle\/npy\/Reader$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/saddle\/npy\/Reader$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/saddle\/npy\/Reader$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/saddle\/npy\/Reader$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/saddle\/npy\/Reader$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/npy\/Reader$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/npy\/Reader$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/npy\/Reader$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/saddle\/npy\/Reader$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/saddle\/npy\/Reader$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/saddle\/npy\/Reader$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/saddle\/npy\/Reader$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/saddle\/npy\/Reader$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/saddle\/npy\/Reader$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "org\/saddle\/npy\/Reader$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/saddle\/npy\/Reader$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/saddle\/npy\/Reader$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}], "org.saddle.io" : [], "org.saddle.ops" : [{"name" : "org.saddle.ops.Add", "trait" : "org\/saddle\/ops\/Add.html", "kind" : "trait", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/saddle\/ops\/Add.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/saddle\/ops\/Add.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/saddle\/ops\/Add.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/saddle\/ops\/Add.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/saddle\/ops\/Add.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/saddle\/ops\/Add.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/saddle\/ops\/Add.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/ops\/Add.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/ops\/Add.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/ops\/Add.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/saddle\/ops\/Add.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/saddle\/ops\/Add.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/saddle\/ops\/Add.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/saddle\/ops\/Add.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/saddle\/ops\/Add.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/saddle\/ops\/Add.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "org\/saddle\/ops\/Add.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/saddle\/ops\/Add.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/saddle\/ops\/Add.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}, {"name" : "org.saddle.ops.AndOp", "trait" : "org\/saddle\/ops\/AndOp.html", "kind" : "trait", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/saddle\/ops\/AndOp.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/saddle\/ops\/AndOp.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/saddle\/ops\/AndOp.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/saddle\/ops\/AndOp.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/saddle\/ops\/AndOp.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/saddle\/ops\/AndOp.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/saddle\/ops\/AndOp.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/ops\/AndOp.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/ops\/AndOp.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/ops\/AndOp.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/saddle\/ops\/AndOp.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/saddle\/ops\/AndOp.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/saddle\/ops\/AndOp.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/saddle\/ops\/AndOp.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/saddle\/ops\/AndOp.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/saddle\/ops\/AndOp.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "org\/saddle\/ops\/AndOp.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/saddle\/ops\/AndOp.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/saddle\/ops\/AndOp.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}, {"name" : "org.saddle.ops.BinOp", "trait" : "org\/saddle\/ops\/BinOp.html", "kind" : "trait", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/saddle\/ops\/BinOp.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/saddle\/ops\/BinOp.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/saddle\/ops\/BinOp.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/saddle\/ops\/BinOp.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/saddle\/ops\/BinOp.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/saddle\/ops\/BinOp.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/saddle\/ops\/BinOp.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/ops\/BinOp.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/ops\/BinOp.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/ops\/BinOp.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/saddle\/ops\/BinOp.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/saddle\/ops\/BinOp.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/saddle\/ops\/BinOp.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/saddle\/ops\/BinOp.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/saddle\/ops\/BinOp.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/saddle\/ops\/BinOp.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "org\/saddle\/ops\/BinOp.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/saddle\/ops\/BinOp.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/saddle\/ops\/BinOp.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "apply", "tail" : "(a: X, b: Y): Z", "member" : "org.saddle.ops.BinOp.apply", "link" : "org\/saddle\/ops\/BinOp.html#apply(a:X,b:Y):Z", "kind" : "abstract def"}], "shortDescription" : "Concrete implementations of BinOp provide primitive-specialized support forperforming binary operations on elements of the following objects, as wellas the objects themselves:"}, {"name" : "org.saddle.ops.BinOpFrame", "trait" : "org\/saddle\/ops\/BinOpFrame.html", "kind" : "trait", "members_trait" : [{"label" : "FrFrEOpBBB", "tail" : "(cm: ST[X], cmp: ORD[X], my: ST[Y], cmpY: ORD[Y], opv: BinOp[Op, Vec[Boolean], Vec[Boolean], Vec[Boolean]]): FrFrEOp[Op, X, Y, Boolean, Boolean, Boolean]", "member" : "org.saddle.ops.BinOpFrame.FrFrEOpBBB", "link" : "org\/saddle\/ops\/BinOpFrame.html#FrFrEOpBBB[Op<:org.saddle.ops.ScalarOp,X,Y](implicitcm:org.saddle.ST[X],implicitcmp:org.saddle.ORD[X],implicitmy:org.saddle.ST[Y],implicitcmpY:org.saddle.ORD[Y],implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Boolean],org.saddle.Vec[Boolean],org.saddle.Vec[Boolean]]):BinOpFrame.this.FrFrEOp[Op,X,Y,Boolean,Boolean,Boolean]", "kind" : "implicit def"}, {"label" : "FrFrEOpIIB", "tail" : "(cm: ST[X], cmp: ORD[X], my: ST[Y], cmpY: ORD[Y], opv: BinOp[Op, Vec[Int], Vec[Int], Vec[Boolean]]): FrFrEOp[Op, X, Y, Int, Int, Boolean]", "member" : "org.saddle.ops.BinOpFrame.FrFrEOpIIB", "link" : "org\/saddle\/ops\/BinOpFrame.html#FrFrEOpIIB[Op<:org.saddle.ops.ScalarOp,X,Y](implicitcm:org.saddle.ST[X],implicitcmp:org.saddle.ORD[X],implicitmy:org.saddle.ST[Y],implicitcmpY:org.saddle.ORD[Y],implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Int],org.saddle.Vec[Int],org.saddle.Vec[Boolean]]):BinOpFrame.this.FrFrEOp[Op,X,Y,Int,Int,Boolean]", "kind" : "implicit def"}, {"label" : "FrFrEOpILB", "tail" : "(cm: ST[X], cmp: ORD[X], my: ST[Y], cmpY: ORD[Y], opv: BinOp[Op, Vec[Int], Vec[Long], Vec[Boolean]]): FrFrEOp[Op, X, Y, Int, Long, Boolean]", "member" : "org.saddle.ops.BinOpFrame.FrFrEOpILB", "link" : "org\/saddle\/ops\/BinOpFrame.html#FrFrEOpILB[Op<:org.saddle.ops.ScalarOp,X,Y](implicitcm:org.saddle.ST[X],implicitcmp:org.saddle.ORD[X],implicitmy:org.saddle.ST[Y],implicitcmpY:org.saddle.ORD[Y],implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Int],org.saddle.Vec[Long],org.saddle.Vec[Boolean]]):BinOpFrame.this.FrFrEOp[Op,X,Y,Int,Long,Boolean]", "kind" : "implicit def"}, {"label" : "FrFrEOpIDB", "tail" : "(cm: ST[X], cmp: ORD[X], my: ST[Y], cmpY: ORD[Y], opv: BinOp[Op, Vec[Int], Vec[Double], Vec[Boolean]]): FrFrEOp[Op, X, Y, Int, Double, Boolean]", "member" : "org.saddle.ops.BinOpFrame.FrFrEOpIDB", "link" : "org\/saddle\/ops\/BinOpFrame.html#FrFrEOpIDB[Op<:org.saddle.ops.ScalarOp,X,Y](implicitcm:org.saddle.ST[X],implicitcmp:org.saddle.ORD[X],implicitmy:org.saddle.ST[Y],implicitcmpY:org.saddle.ORD[Y],implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Int],org.saddle.Vec[Double],org.saddle.Vec[Boolean]]):BinOpFrame.this.FrFrEOp[Op,X,Y,Int,Double,Boolean]", "kind" : "implicit def"}, {"label" : "FrFrEOpLIB", "tail" : "(cm: ST[X], cmp: ORD[X], my: ST[Y], cmpY: ORD[Y], opv: BinOp[Op, Vec[Long], Vec[Int], Vec[Boolean]]): FrFrEOp[Op, X, Y, Long, Int, Boolean]", "member" : "org.saddle.ops.BinOpFrame.FrFrEOpLIB", "link" : "org\/saddle\/ops\/BinOpFrame.html#FrFrEOpLIB[Op<:org.saddle.ops.ScalarOp,X,Y](implicitcm:org.saddle.ST[X],implicitcmp:org.saddle.ORD[X],implicitmy:org.saddle.ST[Y],implicitcmpY:org.saddle.ORD[Y],implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Long],org.saddle.Vec[Int],org.saddle.Vec[Boolean]]):BinOpFrame.this.FrFrEOp[Op,X,Y,Long,Int,Boolean]", "kind" : "implicit def"}, {"label" : "FrFrEOpLLB", "tail" : "(cm: ST[X], cmp: ORD[X], my: ST[Y], cmpY: ORD[Y], opv: BinOp[Op, Vec[Long], Vec[Long], Vec[Boolean]]): FrFrEOp[Op, X, Y, Long, Long, Boolean]", "member" : "org.saddle.ops.BinOpFrame.FrFrEOpLLB", "link" : "org\/saddle\/ops\/BinOpFrame.html#FrFrEOpLLB[Op<:org.saddle.ops.ScalarOp,X,Y](implicitcm:org.saddle.ST[X],implicitcmp:org.saddle.ORD[X],implicitmy:org.saddle.ST[Y],implicitcmpY:org.saddle.ORD[Y],implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Long],org.saddle.Vec[Long],org.saddle.Vec[Boolean]]):BinOpFrame.this.FrFrEOp[Op,X,Y,Long,Long,Boolean]", "kind" : "implicit def"}, {"label" : "FrFrEOpLDB", "tail" : "(cm: ST[X], cmp: ORD[X], my: ST[Y], cmpY: ORD[Y], opv: BinOp[Op, Vec[Long], Vec[Double], Vec[Boolean]]): FrFrEOp[Op, X, Y, Long, Double, Boolean]", "member" : "org.saddle.ops.BinOpFrame.FrFrEOpLDB", "link" : "org\/saddle\/ops\/BinOpFrame.html#FrFrEOpLDB[Op<:org.saddle.ops.ScalarOp,X,Y](implicitcm:org.saddle.ST[X],implicitcmp:org.saddle.ORD[X],implicitmy:org.saddle.ST[Y],implicitcmpY:org.saddle.ORD[Y],implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Long],org.saddle.Vec[Double],org.saddle.Vec[Boolean]]):BinOpFrame.this.FrFrEOp[Op,X,Y,Long,Double,Boolean]", "kind" : "implicit def"}, {"label" : "FrFrEOpDIB", "tail" : "(cm: ST[X], cmp: ORD[X], my: ST[Y], cmpY: ORD[Y], opv: BinOp[Op, Vec[Double], Vec[Int], Vec[Boolean]]): FrFrEOp[Op, X, Y, Double, Int, Boolean]", "member" : "org.saddle.ops.BinOpFrame.FrFrEOpDIB", "link" : "org\/saddle\/ops\/BinOpFrame.html#FrFrEOpDIB[Op<:org.saddle.ops.ScalarOp,X,Y](implicitcm:org.saddle.ST[X],implicitcmp:org.saddle.ORD[X],implicitmy:org.saddle.ST[Y],implicitcmpY:org.saddle.ORD[Y],implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Double],org.saddle.Vec[Int],org.saddle.Vec[Boolean]]):BinOpFrame.this.FrFrEOp[Op,X,Y,Double,Int,Boolean]", "kind" : "implicit def"}, {"label" : "FrFrEOpDLB", "tail" : "(cm: ST[X], cmp: ORD[X], my: ST[Y], cmpY: ORD[Y], opv: BinOp[Op, Vec[Double], Vec[Long], Vec[Boolean]]): FrFrEOp[Op, X, Y, Double, Long, Boolean]", "member" : "org.saddle.ops.BinOpFrame.FrFrEOpDLB", "link" : "org\/saddle\/ops\/BinOpFrame.html#FrFrEOpDLB[Op<:org.saddle.ops.ScalarOp,X,Y](implicitcm:org.saddle.ST[X],implicitcmp:org.saddle.ORD[X],implicitmy:org.saddle.ST[Y],implicitcmpY:org.saddle.ORD[Y],implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Double],org.saddle.Vec[Long],org.saddle.Vec[Boolean]]):BinOpFrame.this.FrFrEOp[Op,X,Y,Double,Long,Boolean]", "kind" : "implicit def"}, {"label" : "FrFrEOpDDB", "tail" : "(cm: ST[X], cmp: ORD[X], my: ST[Y], cmpY: ORD[Y], opv: BinOp[Op, Vec[Double], Vec[Double], Vec[Boolean]]): FrFrEOp[Op, X, Y, Double, Double, Boolean]", "member" : "org.saddle.ops.BinOpFrame.FrFrEOpDDB", "link" : "org\/saddle\/ops\/BinOpFrame.html#FrFrEOpDDB[Op<:org.saddle.ops.ScalarOp,X,Y](implicitcm:org.saddle.ST[X],implicitcmp:org.saddle.ORD[X],implicitmy:org.saddle.ST[Y],implicitcmpY:org.saddle.ORD[Y],implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Double],org.saddle.Vec[Double],org.saddle.Vec[Boolean]]):BinOpFrame.this.FrFrEOp[Op,X,Y,Double,Double,Boolean]", "kind" : "implicit def"}, {"label" : "FrFrEOpIII", "tail" : "(cm: ST[X], cmp: ORD[X], my: ST[Y], cmpY: ORD[Y], opv: BinOp[Op, Vec[Int], Vec[Int], Vec[Int]]): FrFrEOp[Op, X, Y, Int, Int, Int]", "member" : "org.saddle.ops.BinOpFrame.FrFrEOpIII", "link" : "org\/saddle\/ops\/BinOpFrame.html#FrFrEOpIII[Op<:org.saddle.ops.ScalarOp,X,Y](implicitcm:org.saddle.ST[X],implicitcmp:org.saddle.ORD[X],implicitmy:org.saddle.ST[Y],implicitcmpY:org.saddle.ORD[Y],implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Int],org.saddle.Vec[Int],org.saddle.Vec[Int]]):BinOpFrame.this.FrFrEOp[Op,X,Y,Int,Int,Int]", "kind" : "implicit def"}, {"label" : "FrFrEOpILL", "tail" : "(cm: ST[X], cmp: ORD[X], my: ST[Y], cmpY: ORD[Y], opv: BinOp[Op, Vec[Int], Vec[Long], Vec[Long]]): FrFrEOp[Op, X, Y, Int, Long, Long]", "member" : "org.saddle.ops.BinOpFrame.FrFrEOpILL", "link" : "org\/saddle\/ops\/BinOpFrame.html#FrFrEOpILL[Op<:org.saddle.ops.ScalarOp,X,Y](implicitcm:org.saddle.ST[X],implicitcmp:org.saddle.ORD[X],implicitmy:org.saddle.ST[Y],implicitcmpY:org.saddle.ORD[Y],implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Int],org.saddle.Vec[Long],org.saddle.Vec[Long]]):BinOpFrame.this.FrFrEOp[Op,X,Y,Int,Long,Long]", "kind" : "implicit def"}, {"label" : "FrFrEOpIDD", "tail" : "(cm: ST[X], cmp: ORD[X], my: ST[Y], cmpY: ORD[Y], opv: BinOp[Op, Vec[Int], Vec[Double], Vec[Double]]): FrFrEOp[Op, X, Y, Int, Double, Double]", "member" : "org.saddle.ops.BinOpFrame.FrFrEOpIDD", "link" : "org\/saddle\/ops\/BinOpFrame.html#FrFrEOpIDD[Op<:org.saddle.ops.ScalarOp,X,Y](implicitcm:org.saddle.ST[X],implicitcmp:org.saddle.ORD[X],implicitmy:org.saddle.ST[Y],implicitcmpY:org.saddle.ORD[Y],implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Int],org.saddle.Vec[Double],org.saddle.Vec[Double]]):BinOpFrame.this.FrFrEOp[Op,X,Y,Int,Double,Double]", "kind" : "implicit def"}, {"label" : "FrFrEOpLIL", "tail" : "(cm: ST[X], cmp: ORD[X], my: ST[Y], cmpY: ORD[Y], opv: BinOp[Op, Vec[Long], Vec[Int], Vec[Long]]): FrFrEOp[Op, X, Y, Long, Int, Long]", "member" : "org.saddle.ops.BinOpFrame.FrFrEOpLIL", "link" : "org\/saddle\/ops\/BinOpFrame.html#FrFrEOpLIL[Op<:org.saddle.ops.ScalarOp,X,Y](implicitcm:org.saddle.ST[X],implicitcmp:org.saddle.ORD[X],implicitmy:org.saddle.ST[Y],implicitcmpY:org.saddle.ORD[Y],implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Long],org.saddle.Vec[Int],org.saddle.Vec[Long]]):BinOpFrame.this.FrFrEOp[Op,X,Y,Long,Int,Long]", "kind" : "implicit def"}, {"label" : "FrFrEOpLLL", "tail" : "(cm: ST[X], cmp: ORD[X], my: ST[Y], cmpY: ORD[Y], opv: BinOp[Op, Vec[Long], Vec[Long], Vec[Long]]): FrFrEOp[Op, X, Y, Long, Long, Long]", "member" : "org.saddle.ops.BinOpFrame.FrFrEOpLLL", "link" : "org\/saddle\/ops\/BinOpFrame.html#FrFrEOpLLL[Op<:org.saddle.ops.ScalarOp,X,Y](implicitcm:org.saddle.ST[X],implicitcmp:org.saddle.ORD[X],implicitmy:org.saddle.ST[Y],implicitcmpY:org.saddle.ORD[Y],implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Long],org.saddle.Vec[Long],org.saddle.Vec[Long]]):BinOpFrame.this.FrFrEOp[Op,X,Y,Long,Long,Long]", "kind" : "implicit def"}, {"label" : "FrFrEOpLDD", "tail" : "(cm: ST[X], cmp: ORD[X], my: ST[Y], cmpY: ORD[Y], opv: BinOp[Op, Vec[Long], Vec[Double], Vec[Double]]): FrFrEOp[Op, X, Y, Long, Double, Double]", "member" : "org.saddle.ops.BinOpFrame.FrFrEOpLDD", "link" : "org\/saddle\/ops\/BinOpFrame.html#FrFrEOpLDD[Op<:org.saddle.ops.ScalarOp,X,Y](implicitcm:org.saddle.ST[X],implicitcmp:org.saddle.ORD[X],implicitmy:org.saddle.ST[Y],implicitcmpY:org.saddle.ORD[Y],implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Long],org.saddle.Vec[Double],org.saddle.Vec[Double]]):BinOpFrame.this.FrFrEOp[Op,X,Y,Long,Double,Double]", "kind" : "implicit def"}, {"label" : "FrFrEOpDLD", "tail" : "(cm: ST[X], cmp: ORD[X], my: ST[Y], cmpY: ORD[Y], opv: BinOp[Op, Vec[Double], Vec[Long], Vec[Double]]): FrFrEOp[Op, X, Y, Double, Long, Double]", "member" : "org.saddle.ops.BinOpFrame.FrFrEOpDLD", "link" : "org\/saddle\/ops\/BinOpFrame.html#FrFrEOpDLD[Op<:org.saddle.ops.ScalarOp,X,Y](implicitcm:org.saddle.ST[X],implicitcmp:org.saddle.ORD[X],implicitmy:org.saddle.ST[Y],implicitcmpY:org.saddle.ORD[Y],implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Double],org.saddle.Vec[Long],org.saddle.Vec[Double]]):BinOpFrame.this.FrFrEOp[Op,X,Y,Double,Long,Double]", "kind" : "implicit def"}, {"label" : "FrFrEOpDID", "tail" : "(cm: ST[X], cmp: ORD[X], my: ST[Y], cmpY: ORD[Y], opv: BinOp[Op, Vec[Double], Vec[Int], Vec[Double]]): FrFrEOp[Op, X, Y, Double, Int, Double]", "member" : "org.saddle.ops.BinOpFrame.FrFrEOpDID", "link" : "org\/saddle\/ops\/BinOpFrame.html#FrFrEOpDID[Op<:org.saddle.ops.ScalarOp,X,Y](implicitcm:org.saddle.ST[X],implicitcmp:org.saddle.ORD[X],implicitmy:org.saddle.ST[Y],implicitcmpY:org.saddle.ORD[Y],implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Double],org.saddle.Vec[Int],org.saddle.Vec[Double]]):BinOpFrame.this.FrFrEOp[Op,X,Y,Double,Int,Double]", "kind" : "implicit def"}, {"label" : "FrFrEOpDDD", "tail" : "(cm: ST[X], cmp: ORD[X], my: ST[Y], cmpY: ORD[Y], opv: BinOp[Op, Vec[Double], Vec[Double], Vec[Double]]): FrFrEOp[Op, X, Y, Double, Double, Double]", "member" : "org.saddle.ops.BinOpFrame.FrFrEOpDDD", "link" : "org\/saddle\/ops\/BinOpFrame.html#FrFrEOpDDD[Op<:org.saddle.ops.ScalarOp,X,Y](implicitcm:org.saddle.ST[X],implicitcmp:org.saddle.ORD[X],implicitmy:org.saddle.ST[Y],implicitcmpY:org.saddle.ORD[Y],implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Double],org.saddle.Vec[Double],org.saddle.Vec[Double]]):BinOpFrame.this.FrFrEOp[Op,X,Y,Double,Double,Double]", "kind" : "implicit def"}, {"label" : "FrFrEOp", "tail" : "", "member" : "org.saddle.ops.BinOpFrame.FrFrEOp", "link" : "org\/saddle\/ops\/BinOpFrame.html#FrFrEOp[OP<:org.saddle.ops.ScalarOp,X,Y,A,B,C]extendsBinOp[OP,org.saddle.Frame[X,Y,A],org.saddle.Frame[X,Y,B],org.saddle.Frame[X,Y,C]]", "kind" : "final class"}, {"label" : "FrScEOpBBB", "tail" : "(opv: BinOp[Op, Vec[Boolean], Boolean, Vec[Boolean]]): FrScEOp[Op, X, Y, Boolean, Boolean, Boolean]", "member" : "org.saddle.ops.BinOpFrame.FrScEOpBBB", "link" : "org\/saddle\/ops\/BinOpFrame.html#FrScEOpBBB[Op<:org.saddle.ops.ScalarOp,X,Y](implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Boolean],Boolean,org.saddle.Vec[Boolean]]):BinOpFrame.this.FrScEOp[Op,X,Y,Boolean,Boolean,Boolean]", "kind" : "implicit def"}, {"label" : "FrScEOpIIB", "tail" : "(opv: BinOp[Op, Vec[Int], Int, Vec[Boolean]]): FrScEOp[Op, X, Y, Int, Int, Boolean]", "member" : "org.saddle.ops.BinOpFrame.FrScEOpIIB", "link" : "org\/saddle\/ops\/BinOpFrame.html#FrScEOpIIB[Op<:org.saddle.ops.ScalarOp,X,Y](implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Int],Int,org.saddle.Vec[Boolean]]):BinOpFrame.this.FrScEOp[Op,X,Y,Int,Int,Boolean]", "kind" : "implicit def"}, {"label" : "FrScEOpILB", "tail" : "(opv: BinOp[Op, Vec[Int], Long, Vec[Boolean]]): FrScEOp[Op, X, Y, Int, Long, Boolean]", "member" : "org.saddle.ops.BinOpFrame.FrScEOpILB", "link" : "org\/saddle\/ops\/BinOpFrame.html#FrScEOpILB[Op<:org.saddle.ops.ScalarOp,X,Y](implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Int],Long,org.saddle.Vec[Boolean]]):BinOpFrame.this.FrScEOp[Op,X,Y,Int,Long,Boolean]", "kind" : "implicit def"}, {"label" : "FrScEOpIDB", "tail" : "(opv: BinOp[Op, Vec[Int], Double, Vec[Boolean]]): FrScEOp[Op, X, Y, Int, Double, Boolean]", "member" : "org.saddle.ops.BinOpFrame.FrScEOpIDB", "link" : "org\/saddle\/ops\/BinOpFrame.html#FrScEOpIDB[Op<:org.saddle.ops.ScalarOp,X,Y](implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Int],Double,org.saddle.Vec[Boolean]]):BinOpFrame.this.FrScEOp[Op,X,Y,Int,Double,Boolean]", "kind" : "implicit def"}, {"label" : "FrScEOpLIB", "tail" : "(opv: BinOp[Op, Vec[Long], Int, Vec[Boolean]]): FrScEOp[Op, X, Y, Long, Int, Boolean]", "member" : "org.saddle.ops.BinOpFrame.FrScEOpLIB", "link" : "org\/saddle\/ops\/BinOpFrame.html#FrScEOpLIB[Op<:org.saddle.ops.ScalarOp,X,Y](implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Long],Int,org.saddle.Vec[Boolean]]):BinOpFrame.this.FrScEOp[Op,X,Y,Long,Int,Boolean]", "kind" : "implicit def"}, {"label" : "FrScEOpLLB", "tail" : "(opv: BinOp[Op, Vec[Long], Long, Vec[Boolean]]): FrScEOp[Op, X, Y, Long, Long, Boolean]", "member" : "org.saddle.ops.BinOpFrame.FrScEOpLLB", "link" : "org\/saddle\/ops\/BinOpFrame.html#FrScEOpLLB[Op<:org.saddle.ops.ScalarOp,X,Y](implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Long],Long,org.saddle.Vec[Boolean]]):BinOpFrame.this.FrScEOp[Op,X,Y,Long,Long,Boolean]", "kind" : "implicit def"}, {"label" : "FrScEOpLDB", "tail" : "(opv: BinOp[Op, Vec[Long], Double, Vec[Boolean]]): FrScEOp[Op, X, Y, Long, Double, Boolean]", "member" : "org.saddle.ops.BinOpFrame.FrScEOpLDB", "link" : "org\/saddle\/ops\/BinOpFrame.html#FrScEOpLDB[Op<:org.saddle.ops.ScalarOp,X,Y](implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Long],Double,org.saddle.Vec[Boolean]]):BinOpFrame.this.FrScEOp[Op,X,Y,Long,Double,Boolean]", "kind" : "implicit def"}, {"label" : "FrScEOpDIB", "tail" : "(opv: BinOp[Op, Vec[Double], Int, Vec[Boolean]]): FrScEOp[Op, X, Y, Double, Int, Boolean]", "member" : "org.saddle.ops.BinOpFrame.FrScEOpDIB", "link" : "org\/saddle\/ops\/BinOpFrame.html#FrScEOpDIB[Op<:org.saddle.ops.ScalarOp,X,Y](implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Double],Int,org.saddle.Vec[Boolean]]):BinOpFrame.this.FrScEOp[Op,X,Y,Double,Int,Boolean]", "kind" : "implicit def"}, {"label" : "FrScEOpDLB", "tail" : "(opv: BinOp[Op, Vec[Double], Long, Vec[Boolean]]): FrScEOp[Op, X, Y, Double, Long, Boolean]", "member" : "org.saddle.ops.BinOpFrame.FrScEOpDLB", "link" : "org\/saddle\/ops\/BinOpFrame.html#FrScEOpDLB[Op<:org.saddle.ops.ScalarOp,X,Y](implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Double],Long,org.saddle.Vec[Boolean]]):BinOpFrame.this.FrScEOp[Op,X,Y,Double,Long,Boolean]", "kind" : "implicit def"}, {"label" : "FrScEOpDDB", "tail" : "(opv: BinOp[Op, Vec[Double], Double, Vec[Boolean]]): FrScEOp[Op, X, Y, Double, Double, Boolean]", "member" : "org.saddle.ops.BinOpFrame.FrScEOpDDB", "link" : "org\/saddle\/ops\/BinOpFrame.html#FrScEOpDDB[Op<:org.saddle.ops.ScalarOp,X,Y](implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Double],Double,org.saddle.Vec[Boolean]]):BinOpFrame.this.FrScEOp[Op,X,Y,Double,Double,Boolean]", "kind" : "implicit def"}, {"label" : "FrScEOpIII", "tail" : "(opv: BinOp[Op, Vec[Int], Int, Vec[Int]]): FrScEOp[Op, X, Y, Int, Int, Int]", "member" : "org.saddle.ops.BinOpFrame.FrScEOpIII", "link" : "org\/saddle\/ops\/BinOpFrame.html#FrScEOpIII[Op<:org.saddle.ops.ScalarOp,X,Y](implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Int],Int,org.saddle.Vec[Int]]):BinOpFrame.this.FrScEOp[Op,X,Y,Int,Int,Int]", "kind" : "implicit def"}, {"label" : "FrScEOpILL", "tail" : "(opv: BinOp[Op, Vec[Int], Long, Vec[Long]]): FrScEOp[Op, X, Y, Int, Long, Long]", "member" : "org.saddle.ops.BinOpFrame.FrScEOpILL", "link" : "org\/saddle\/ops\/BinOpFrame.html#FrScEOpILL[Op<:org.saddle.ops.ScalarOp,X,Y](implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Int],Long,org.saddle.Vec[Long]]):BinOpFrame.this.FrScEOp[Op,X,Y,Int,Long,Long]", "kind" : "implicit def"}, {"label" : "FrScEOpIDD", "tail" : "(opv: BinOp[Op, Vec[Int], Double, Vec[Double]]): FrScEOp[Op, X, Y, Int, Double, Double]", "member" : "org.saddle.ops.BinOpFrame.FrScEOpIDD", "link" : "org\/saddle\/ops\/BinOpFrame.html#FrScEOpIDD[Op<:org.saddle.ops.ScalarOp,X,Y](implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Int],Double,org.saddle.Vec[Double]]):BinOpFrame.this.FrScEOp[Op,X,Y,Int,Double,Double]", "kind" : "implicit def"}, {"label" : "FrScEOpLIL", "tail" : "(opv: BinOp[Op, Vec[Long], Int, Vec[Long]]): FrScEOp[Op, X, Y, Long, Int, Long]", "member" : "org.saddle.ops.BinOpFrame.FrScEOpLIL", "link" : "org\/saddle\/ops\/BinOpFrame.html#FrScEOpLIL[Op<:org.saddle.ops.ScalarOp,X,Y](implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Long],Int,org.saddle.Vec[Long]]):BinOpFrame.this.FrScEOp[Op,X,Y,Long,Int,Long]", "kind" : "implicit def"}, {"label" : "FrScEOpLLL", "tail" : "(opv: BinOp[Op, Vec[Long], Long, Vec[Long]]): FrScEOp[Op, X, Y, Long, Long, Long]", "member" : "org.saddle.ops.BinOpFrame.FrScEOpLLL", "link" : "org\/saddle\/ops\/BinOpFrame.html#FrScEOpLLL[Op<:org.saddle.ops.ScalarOp,X,Y](implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Long],Long,org.saddle.Vec[Long]]):BinOpFrame.this.FrScEOp[Op,X,Y,Long,Long,Long]", "kind" : "implicit def"}, {"label" : "FrScEOpLDD", "tail" : "(opv: BinOp[Op, Vec[Long], Double, Vec[Double]]): FrScEOp[Op, X, Y, Long, Double, Double]", "member" : "org.saddle.ops.BinOpFrame.FrScEOpLDD", "link" : "org\/saddle\/ops\/BinOpFrame.html#FrScEOpLDD[Op<:org.saddle.ops.ScalarOp,X,Y](implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Long],Double,org.saddle.Vec[Double]]):BinOpFrame.this.FrScEOp[Op,X,Y,Long,Double,Double]", "kind" : "implicit def"}, {"label" : "FrScEOpDID", "tail" : "(opv: BinOp[Op, Vec[Double], Int, Vec[Double]]): FrScEOp[Op, X, Y, Double, Int, Double]", "member" : "org.saddle.ops.BinOpFrame.FrScEOpDID", "link" : "org\/saddle\/ops\/BinOpFrame.html#FrScEOpDID[Op<:org.saddle.ops.ScalarOp,X,Y](implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Double],Int,org.saddle.Vec[Double]]):BinOpFrame.this.FrScEOp[Op,X,Y,Double,Int,Double]", "kind" : "implicit def"}, {"label" : "FrScEOpDLD", "tail" : "(opv: BinOp[Op, Vec[Double], Long, Vec[Double]]): FrScEOp[Op, X, Y, Double, Long, Double]", "member" : "org.saddle.ops.BinOpFrame.FrScEOpDLD", "link" : "org\/saddle\/ops\/BinOpFrame.html#FrScEOpDLD[Op<:org.saddle.ops.ScalarOp,X,Y](implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Double],Long,org.saddle.Vec[Double]]):BinOpFrame.this.FrScEOp[Op,X,Y,Double,Long,Double]", "kind" : "implicit def"}, {"label" : "FrScEOpDDD", "tail" : "(opv: BinOp[Op, Vec[Double], Double, Vec[Double]]): FrScEOp[Op, X, Y, Double, Double, Double]", "member" : "org.saddle.ops.BinOpFrame.FrScEOpDDD", "link" : "org\/saddle\/ops\/BinOpFrame.html#FrScEOpDDD[Op<:org.saddle.ops.ScalarOp,X,Y](implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Double],Double,org.saddle.Vec[Double]]):BinOpFrame.this.FrScEOp[Op,X,Y,Double,Double,Double]", "kind" : "implicit def"}, {"label" : "FrScEOp", "tail" : "", "member" : "org.saddle.ops.BinOpFrame.FrScEOp", "link" : "org\/saddle\/ops\/BinOpFrame.html#FrScEOp[OP<:org.saddle.ops.ScalarOp,X,Y,A,B,C]extendsBinOp[OP,org.saddle.Frame[X,Y,A],B,org.saddle.Frame[X,Y,C]]", "kind" : "final class"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/saddle\/ops\/BinOpFrame.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/saddle\/ops\/BinOpFrame.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/saddle\/ops\/BinOpFrame.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/saddle\/ops\/BinOpFrame.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/saddle\/ops\/BinOpFrame.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/saddle\/ops\/BinOpFrame.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/saddle\/ops\/BinOpFrame.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/ops\/BinOpFrame.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/ops\/BinOpFrame.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/ops\/BinOpFrame.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/saddle\/ops\/BinOpFrame.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/saddle\/ops\/BinOpFrame.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/saddle\/ops\/BinOpFrame.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/saddle\/ops\/BinOpFrame.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/saddle\/ops\/BinOpFrame.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/saddle\/ops\/BinOpFrame.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "org\/saddle\/ops\/BinOpFrame.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/saddle\/ops\/BinOpFrame.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/saddle\/ops\/BinOpFrame.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "Provides concrete implementations of binary operations fororg.saddle.Frame; these instances provide implicit support fororg.saddle.ops.NumericOps methods which are inherited by Frame."}, {"name" : "org.saddle.ops.BinOpInPlace", "trait" : "org\/saddle\/ops\/BinOpInPlace.html", "kind" : "trait", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/saddle\/ops\/BinOpInPlace.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/saddle\/ops\/BinOpInPlace.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/saddle\/ops\/BinOpInPlace.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/saddle\/ops\/BinOpInPlace.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/saddle\/ops\/BinOpInPlace.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/saddle\/ops\/BinOpInPlace.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/saddle\/ops\/BinOpInPlace.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/ops\/BinOpInPlace.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/ops\/BinOpInPlace.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/ops\/BinOpInPlace.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/saddle\/ops\/BinOpInPlace.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/saddle\/ops\/BinOpInPlace.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/saddle\/ops\/BinOpInPlace.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/saddle\/ops\/BinOpInPlace.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/saddle\/ops\/BinOpInPlace.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/saddle\/ops\/BinOpInPlace.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "org\/saddle\/ops\/BinOpInPlace.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/saddle\/ops\/BinOpInPlace.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/saddle\/ops\/BinOpInPlace.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "apply", "tail" : "(a: X, b: Y): Unit", "member" : "org.saddle.ops.BinOpInPlace.apply", "link" : "org\/saddle\/ops\/BinOpInPlace.html#apply(a:X,b:Y):Unit", "kind" : "abstract def"}], "shortDescription" : ""}, {"name" : "org.saddle.ops.BinOpMat", "trait" : "org\/saddle\/ops\/BinOpMat.html", "kind" : "trait", "members_trait" : [{"label" : "MatMatElemOpIII", "tail" : "(op: BinOp[Op, Int, Int, Int]): MatMatElemOp[Op, Int, Int, Int]", "member" : "org.saddle.ops.BinOpMat.MatMatElemOpIII", "link" : "org\/saddle\/ops\/BinOpMat.html#MatMatElemOpIII[Op<:org.saddle.ops.ScalarOp](implicitop:org.saddle.ops.BinOp[Op,Int,Int,Int]):BinOpMat.this.MatMatElemOp[Op,Int,Int,Int]", "kind" : "implicit def"}, {"label" : "MatMatElemOpILL", "tail" : "(op: BinOp[Op, Int, Long, Long]): MatMatElemOp[Op, Int, Long, Long]", "member" : "org.saddle.ops.BinOpMat.MatMatElemOpILL", "link" : "org\/saddle\/ops\/BinOpMat.html#MatMatElemOpILL[Op<:org.saddle.ops.ScalarOp](implicitop:org.saddle.ops.BinOp[Op,Int,Long,Long]):BinOpMat.this.MatMatElemOp[Op,Int,Long,Long]", "kind" : "implicit def"}, {"label" : "MatMatElemOpIDD", "tail" : "(op: BinOp[Op, Int, Double, Double]): MatMatElemOp[Op, Int, Double, Double]", "member" : "org.saddle.ops.BinOpMat.MatMatElemOpIDD", "link" : "org\/saddle\/ops\/BinOpMat.html#MatMatElemOpIDD[Op<:org.saddle.ops.ScalarOp](implicitop:org.saddle.ops.BinOp[Op,Int,Double,Double]):BinOpMat.this.MatMatElemOp[Op,Int,Double,Double]", "kind" : "implicit def"}, {"label" : "MatMatElemOpLIL", "tail" : "(op: BinOp[Op, Long, Int, Long]): MatMatElemOp[Op, Long, Int, Long]", "member" : "org.saddle.ops.BinOpMat.MatMatElemOpLIL", "link" : "org\/saddle\/ops\/BinOpMat.html#MatMatElemOpLIL[Op<:org.saddle.ops.ScalarOp](implicitop:org.saddle.ops.BinOp[Op,Long,Int,Long]):BinOpMat.this.MatMatElemOp[Op,Long,Int,Long]", "kind" : "implicit def"}, {"label" : "MatMatElemOpLLL", "tail" : "(op: BinOp[Op, Long, Long, Long]): MatMatElemOp[Op, Long, Long, Long]", "member" : "org.saddle.ops.BinOpMat.MatMatElemOpLLL", "link" : "org\/saddle\/ops\/BinOpMat.html#MatMatElemOpLLL[Op<:org.saddle.ops.ScalarOp](implicitop:org.saddle.ops.BinOp[Op,Long,Long,Long]):BinOpMat.this.MatMatElemOp[Op,Long,Long,Long]", "kind" : "implicit def"}, {"label" : "MatMatElemOpLDD", "tail" : "(op: BinOp[Op, Long, Double, Double]): MatMatElemOp[Op, Long, Double, Double]", "member" : "org.saddle.ops.BinOpMat.MatMatElemOpLDD", "link" : "org\/saddle\/ops\/BinOpMat.html#MatMatElemOpLDD[Op<:org.saddle.ops.ScalarOp](implicitop:org.saddle.ops.BinOp[Op,Long,Double,Double]):BinOpMat.this.MatMatElemOp[Op,Long,Double,Double]", "kind" : "implicit def"}, {"label" : "MatMatElemOpDID", "tail" : "(op: BinOp[Op, Double, Int, Double]): MatMatElemOp[Op, Double, Int, Double]", "member" : "org.saddle.ops.BinOpMat.MatMatElemOpDID", "link" : "org\/saddle\/ops\/BinOpMat.html#MatMatElemOpDID[Op<:org.saddle.ops.ScalarOp](implicitop:org.saddle.ops.BinOp[Op,Double,Int,Double]):BinOpMat.this.MatMatElemOp[Op,Double,Int,Double]", "kind" : "implicit def"}, {"label" : "MatMatElemOpDLD", "tail" : "(op: BinOp[Op, Double, Long, Double]): MatMatElemOp[Op, Double, Long, Double]", "member" : "org.saddle.ops.BinOpMat.MatMatElemOpDLD", "link" : "org\/saddle\/ops\/BinOpMat.html#MatMatElemOpDLD[Op<:org.saddle.ops.ScalarOp](implicitop:org.saddle.ops.BinOp[Op,Double,Long,Double]):BinOpMat.this.MatMatElemOp[Op,Double,Long,Double]", "kind" : "implicit def"}, {"label" : "MatMatElemOpDDD", "tail" : "(op: BinOp[Op, Double, Double, Double]): MatMatElemOp[Op, Double, Double, Double]", "member" : "org.saddle.ops.BinOpMat.MatMatElemOpDDD", "link" : "org\/saddle\/ops\/BinOpMat.html#MatMatElemOpDDD[Op<:org.saddle.ops.ScalarOp](implicitop:org.saddle.ops.BinOp[Op,Double,Double,Double]):BinOpMat.this.MatMatElemOp[Op,Double,Double,Double]", "kind" : "implicit def"}, {"label" : "MatMatElemOp", "tail" : "", "member" : "org.saddle.ops.BinOpMat.MatMatElemOp", "link" : "org\/saddle\/ops\/BinOpMat.html#MatMatElemOp[OP<:org.saddle.ops.ScalarOp,A,B,C]extendsBinOp[OP,org.saddle.Mat[A],org.saddle.Mat[B],org.saddle.Mat[C]]", "kind" : "final class"}, {"label" : "MatSclrElmOpLIB", "tail" : "(op: BinOp[Op, Long, Int, Boolean]): MatSclrElemOp[Op, Long, Int, Boolean]", "member" : "org.saddle.ops.BinOpMat.MatSclrElmOpLIB", "link" : "org\/saddle\/ops\/BinOpMat.html#MatSclrElmOpLIB[Op<:org.saddle.ops.ScalarOp](implicitop:org.saddle.ops.BinOp[Op,Long,Int,Boolean]):BinOpMat.this.MatSclrElemOp[Op,Long,Int,Boolean]", "kind" : "implicit def"}, {"label" : "MatSclrElmOpLLB", "tail" : "(op: BinOp[Op, Long, Long, Boolean]): MatSclrElemOp[Op, Long, Long, Boolean]", "member" : "org.saddle.ops.BinOpMat.MatSclrElmOpLLB", "link" : "org\/saddle\/ops\/BinOpMat.html#MatSclrElmOpLLB[Op<:org.saddle.ops.ScalarOp](implicitop:org.saddle.ops.BinOp[Op,Long,Long,Boolean]):BinOpMat.this.MatSclrElemOp[Op,Long,Long,Boolean]", "kind" : "implicit def"}, {"label" : "MatSclrElmOpIIB", "tail" : "(op: BinOp[Op, Int, Int, Boolean]): MatSclrElemOp[Op, Int, Int, Boolean]", "member" : "org.saddle.ops.BinOpMat.MatSclrElmOpIIB", "link" : "org\/saddle\/ops\/BinOpMat.html#MatSclrElmOpIIB[Op<:org.saddle.ops.ScalarOp](implicitop:org.saddle.ops.BinOp[Op,Int,Int,Boolean]):BinOpMat.this.MatSclrElemOp[Op,Int,Int,Boolean]", "kind" : "implicit def"}, {"label" : "MatSclrElmOpDIB", "tail" : "(op: BinOp[Op, Double, Int, Boolean]): MatSclrElemOp[Op, Double, Int, Boolean]", "member" : "org.saddle.ops.BinOpMat.MatSclrElmOpDIB", "link" : "org\/saddle\/ops\/BinOpMat.html#MatSclrElmOpDIB[Op<:org.saddle.ops.ScalarOp](implicitop:org.saddle.ops.BinOp[Op,Double,Int,Boolean]):BinOpMat.this.MatSclrElemOp[Op,Double,Int,Boolean]", "kind" : "implicit def"}, {"label" : "MatSclrElmOpIDB", "tail" : "(op: BinOp[Op, Int, Double, Boolean]): MatSclrElemOp[Op, Int, Double, Boolean]", "member" : "org.saddle.ops.BinOpMat.MatSclrElmOpIDB", "link" : "org\/saddle\/ops\/BinOpMat.html#MatSclrElmOpIDB[Op<:org.saddle.ops.ScalarOp](implicitop:org.saddle.ops.BinOp[Op,Int,Double,Boolean]):BinOpMat.this.MatSclrElemOp[Op,Int,Double,Boolean]", "kind" : "implicit def"}, {"label" : "MatSclrElmOpLDB", "tail" : "(op: BinOp[Op, Long, Double, Boolean]): MatSclrElemOp[Op, Long, Double, Boolean]", "member" : "org.saddle.ops.BinOpMat.MatSclrElmOpLDB", "link" : "org\/saddle\/ops\/BinOpMat.html#MatSclrElmOpLDB[Op<:org.saddle.ops.ScalarOp](implicitop:org.saddle.ops.BinOp[Op,Long,Double,Boolean]):BinOpMat.this.MatSclrElemOp[Op,Long,Double,Boolean]", "kind" : "implicit def"}, {"label" : "MatSclrElmOpDLB", "tail" : "(op: BinOp[Op, Double, Long, Boolean]): MatSclrElemOp[Op, Double, Long, Boolean]", "member" : "org.saddle.ops.BinOpMat.MatSclrElmOpDLB", "link" : "org\/saddle\/ops\/BinOpMat.html#MatSclrElmOpDLB[Op<:org.saddle.ops.ScalarOp](implicitop:org.saddle.ops.BinOp[Op,Double,Long,Boolean]):BinOpMat.this.MatSclrElemOp[Op,Double,Long,Boolean]", "kind" : "implicit def"}, {"label" : "MatSclrElmOpDDB", "tail" : "(op: BinOp[Op, Double, Double, Boolean]): MatSclrElemOp[Op, Double, Double, Boolean]", "member" : "org.saddle.ops.BinOpMat.MatSclrElmOpDDB", "link" : "org\/saddle\/ops\/BinOpMat.html#MatSclrElmOpDDB[Op<:org.saddle.ops.ScalarOp](implicitop:org.saddle.ops.BinOp[Op,Double,Double,Boolean]):BinOpMat.this.MatSclrElemOp[Op,Double,Double,Boolean]", "kind" : "implicit def"}, {"label" : "MatSclrElmOpBBB", "tail" : "(op: BinOp[Op, Boolean, Boolean, Boolean]): MatSclrElemOp[Op, Boolean, Boolean, Boolean]", "member" : "org.saddle.ops.BinOpMat.MatSclrElmOpBBB", "link" : "org\/saddle\/ops\/BinOpMat.html#MatSclrElmOpBBB[Op<:org.saddle.ops.ScalarOp](implicitop:org.saddle.ops.BinOp[Op,Boolean,Boolean,Boolean]):BinOpMat.this.MatSclrElemOp[Op,Boolean,Boolean,Boolean]", "kind" : "implicit def"}, {"label" : "MatSclrElmOpIII", "tail" : "(op: BinOp[Op, Int, Int, Int]): MatSclrElemOp[Op, Int, Int, Int]", "member" : "org.saddle.ops.BinOpMat.MatSclrElmOpIII", "link" : "org\/saddle\/ops\/BinOpMat.html#MatSclrElmOpIII[Op<:org.saddle.ops.ScalarOp](implicitop:org.saddle.ops.BinOp[Op,Int,Int,Int]):BinOpMat.this.MatSclrElemOp[Op,Int,Int,Int]", "kind" : "implicit def"}, {"label" : "MatSclrElmOpILL", "tail" : "(op: BinOp[Op, Int, Long, Long]): MatSclrElemOp[Op, Int, Long, Long]", "member" : "org.saddle.ops.BinOpMat.MatSclrElmOpILL", "link" : "org\/saddle\/ops\/BinOpMat.html#MatSclrElmOpILL[Op<:org.saddle.ops.ScalarOp](implicitop:org.saddle.ops.BinOp[Op,Int,Long,Long]):BinOpMat.this.MatSclrElemOp[Op,Int,Long,Long]", "kind" : "implicit def"}, {"label" : "MatSclrElmOpIDD", "tail" : "(op: BinOp[Op, Int, Double, Double]): MatSclrElemOp[Op, Int, Double, Double]", "member" : "org.saddle.ops.BinOpMat.MatSclrElmOpIDD", "link" : "org\/saddle\/ops\/BinOpMat.html#MatSclrElmOpIDD[Op<:org.saddle.ops.ScalarOp](implicitop:org.saddle.ops.BinOp[Op,Int,Double,Double]):BinOpMat.this.MatSclrElemOp[Op,Int,Double,Double]", "kind" : "implicit def"}, {"label" : "MatSclrElmOpLIL", "tail" : "(op: BinOp[Op, Long, Int, Long]): MatSclrElemOp[Op, Long, Int, Long]", "member" : "org.saddle.ops.BinOpMat.MatSclrElmOpLIL", "link" : "org\/saddle\/ops\/BinOpMat.html#MatSclrElmOpLIL[Op<:org.saddle.ops.ScalarOp](implicitop:org.saddle.ops.BinOp[Op,Long,Int,Long]):BinOpMat.this.MatSclrElemOp[Op,Long,Int,Long]", "kind" : "implicit def"}, {"label" : "MatSclrElmOpLLL", "tail" : "(op: BinOp[Op, Long, Long, Long]): MatSclrElemOp[Op, Long, Long, Long]", "member" : "org.saddle.ops.BinOpMat.MatSclrElmOpLLL", "link" : "org\/saddle\/ops\/BinOpMat.html#MatSclrElmOpLLL[Op<:org.saddle.ops.ScalarOp](implicitop:org.saddle.ops.BinOp[Op,Long,Long,Long]):BinOpMat.this.MatSclrElemOp[Op,Long,Long,Long]", "kind" : "implicit def"}, {"label" : "MatSclrElmOpLDD", "tail" : "(op: BinOp[Op, Long, Double, Double]): MatSclrElemOp[Op, Long, Double, Double]", "member" : "org.saddle.ops.BinOpMat.MatSclrElmOpLDD", "link" : "org\/saddle\/ops\/BinOpMat.html#MatSclrElmOpLDD[Op<:org.saddle.ops.ScalarOp](implicitop:org.saddle.ops.BinOp[Op,Long,Double,Double]):BinOpMat.this.MatSclrElemOp[Op,Long,Double,Double]", "kind" : "implicit def"}, {"label" : "MatSclrElmOpDID", "tail" : "(op: BinOp[Op, Double, Int, Double]): MatSclrElemOp[Op, Double, Int, Double]", "member" : "org.saddle.ops.BinOpMat.MatSclrElmOpDID", "link" : "org\/saddle\/ops\/BinOpMat.html#MatSclrElmOpDID[Op<:org.saddle.ops.ScalarOp](implicitop:org.saddle.ops.BinOp[Op,Double,Int,Double]):BinOpMat.this.MatSclrElemOp[Op,Double,Int,Double]", "kind" : "implicit def"}, {"label" : "MatSclrElmOpDLD", "tail" : "(op: BinOp[Op, Double, Long, Double]): MatSclrElemOp[Op, Double, Long, Double]", "member" : "org.saddle.ops.BinOpMat.MatSclrElmOpDLD", "link" : "org\/saddle\/ops\/BinOpMat.html#MatSclrElmOpDLD[Op<:org.saddle.ops.ScalarOp](implicitop:org.saddle.ops.BinOp[Op,Double,Long,Double]):BinOpMat.this.MatSclrElemOp[Op,Double,Long,Double]", "kind" : "implicit def"}, {"label" : "MatSclrElmOpDDD", "tail" : "(op: BinOp[Op, Double, Double, Double]): MatSclrElemOp[Op, Double, Double, Double]", "member" : "org.saddle.ops.BinOpMat.MatSclrElmOpDDD", "link" : "org\/saddle\/ops\/BinOpMat.html#MatSclrElmOpDDD[Op<:org.saddle.ops.ScalarOp](implicitop:org.saddle.ops.BinOp[Op,Double,Double,Double]):BinOpMat.this.MatSclrElemOp[Op,Double,Double,Double]", "kind" : "implicit def"}, {"label" : "MatSclrElemOp", "tail" : "", "member" : "org.saddle.ops.BinOpMat.MatSclrElemOp", "link" : "org\/saddle\/ops\/BinOpMat.html#MatSclrElemOp[OP<:org.saddle.ops.ScalarOp,A,B,C]extendsBinOp[OP,org.saddle.Mat[A],B,org.saddle.Mat[C]]", "kind" : "final class"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/saddle\/ops\/BinOpMat.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/saddle\/ops\/BinOpMat.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/saddle\/ops\/BinOpMat.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/saddle\/ops\/BinOpMat.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/saddle\/ops\/BinOpMat.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/saddle\/ops\/BinOpMat.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/saddle\/ops\/BinOpMat.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/ops\/BinOpMat.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/ops\/BinOpMat.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/ops\/BinOpMat.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/saddle\/ops\/BinOpMat.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/saddle\/ops\/BinOpMat.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/saddle\/ops\/BinOpMat.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/saddle\/ops\/BinOpMat.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/saddle\/ops\/BinOpMat.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/saddle\/ops\/BinOpMat.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "org\/saddle\/ops\/BinOpMat.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/saddle\/ops\/BinOpMat.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/saddle\/ops\/BinOpMat.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "Provides concrete implementations of binary operations fororg.saddle.Mat; these instances provide implicit support fororg.saddle.ops.NumericOps methods which are inherited by Mat."}, {"name" : "org.saddle.ops.BinOpMatInPlace", "trait" : "org\/saddle\/ops\/BinOpMatInPlace.html", "kind" : "trait", "members_trait" : [{"label" : "MatMatElemOpIpIII", "tail" : "(op: BinOp[Op, Int, Int, Int]): MatMatElemOpIp[Op, Int, Int]", "member" : "org.saddle.ops.BinOpMatInPlace.MatMatElemOpIpIII", "link" : "org\/saddle\/ops\/BinOpMatInPlace.html#MatMatElemOpIpIII[Op<:org.saddle.ops.ScalarOp](implicitop:org.saddle.ops.BinOp[Op,Int,Int,Int]):BinOpMatInPlace.this.MatMatElemOpIp[Op,Int,Int]", "kind" : "implicit def"}, {"label" : "MatMatElemOpIpLIL", "tail" : "(op: BinOp[Op, Long, Int, Long]): MatMatElemOpIp[Op, Long, Int]", "member" : "org.saddle.ops.BinOpMatInPlace.MatMatElemOpIpLIL", "link" : "org\/saddle\/ops\/BinOpMatInPlace.html#MatMatElemOpIpLIL[Op<:org.saddle.ops.ScalarOp](implicitop:org.saddle.ops.BinOp[Op,Long,Int,Long]):BinOpMatInPlace.this.MatMatElemOpIp[Op,Long,Int]", "kind" : "implicit def"}, {"label" : "MatMatElemOpIpLLL", "tail" : "(op: BinOp[Op, Long, Long, Long]): MatMatElemOpIp[Op, Long, Long]", "member" : "org.saddle.ops.BinOpMatInPlace.MatMatElemOpIpLLL", "link" : "org\/saddle\/ops\/BinOpMatInPlace.html#MatMatElemOpIpLLL[Op<:org.saddle.ops.ScalarOp](implicitop:org.saddle.ops.BinOp[Op,Long,Long,Long]):BinOpMatInPlace.this.MatMatElemOpIp[Op,Long,Long]", "kind" : "implicit def"}, {"label" : "MatMatElemOpIpDID", "tail" : "(op: BinOp[Op, Double, Int, Double]): MatMatElemOpIp[Op, Double, Int]", "member" : "org.saddle.ops.BinOpMatInPlace.MatMatElemOpIpDID", "link" : "org\/saddle\/ops\/BinOpMatInPlace.html#MatMatElemOpIpDID[Op<:org.saddle.ops.ScalarOp](implicitop:org.saddle.ops.BinOp[Op,Double,Int,Double]):BinOpMatInPlace.this.MatMatElemOpIp[Op,Double,Int]", "kind" : "implicit def"}, {"label" : "MatMatElemOpIpDLD", "tail" : "(op: BinOp[Op, Double, Long, Double]): MatMatElemOpIp[Op, Double, Long]", "member" : "org.saddle.ops.BinOpMatInPlace.MatMatElemOpIpDLD", "link" : "org\/saddle\/ops\/BinOpMatInPlace.html#MatMatElemOpIpDLD[Op<:org.saddle.ops.ScalarOp](implicitop:org.saddle.ops.BinOp[Op,Double,Long,Double]):BinOpMatInPlace.this.MatMatElemOpIp[Op,Double,Long]", "kind" : "implicit def"}, {"label" : "MatMatElemOpIpDDD", "tail" : "(op: BinOp[Op, Double, Double, Double]): MatMatElemOpIp[Op, Double, Double]", "member" : "org.saddle.ops.BinOpMatInPlace.MatMatElemOpIpDDD", "link" : "org\/saddle\/ops\/BinOpMatInPlace.html#MatMatElemOpIpDDD[Op<:org.saddle.ops.ScalarOp](implicitop:org.saddle.ops.BinOp[Op,Double,Double,Double]):BinOpMatInPlace.this.MatMatElemOpIp[Op,Double,Double]", "kind" : "implicit def"}, {"label" : "MatMatElemOpIp", "tail" : "", "member" : "org.saddle.ops.BinOpMatInPlace.MatMatElemOpIp", "link" : "org\/saddle\/ops\/BinOpMatInPlace.html#MatMatElemOpIp[OP<:org.saddle.ops.ScalarOp,A,B]extendsBinOpInPlace[OP,org.saddle.Mat[A],org.saddle.Mat[B]]", "kind" : "final class"}, {"label" : "MatSclrElmOpIpIII", "tail" : "(op: BinOp[Op, Int, Int, Int]): MatSclrElemOpIp[Op, Int, Int]", "member" : "org.saddle.ops.BinOpMatInPlace.MatSclrElmOpIpIII", "link" : "org\/saddle\/ops\/BinOpMatInPlace.html#MatSclrElmOpIpIII[Op<:org.saddle.ops.ScalarOp](implicitop:org.saddle.ops.BinOp[Op,Int,Int,Int]):BinOpMatInPlace.this.MatSclrElemOpIp[Op,Int,Int]", "kind" : "implicit def"}, {"label" : "MatSclrElmOpIpLIL", "tail" : "(op: BinOp[Op, Long, Int, Long]): MatSclrElemOpIp[Op, Long, Int]", "member" : "org.saddle.ops.BinOpMatInPlace.MatSclrElmOpIpLIL", "link" : "org\/saddle\/ops\/BinOpMatInPlace.html#MatSclrElmOpIpLIL[Op<:org.saddle.ops.ScalarOp](implicitop:org.saddle.ops.BinOp[Op,Long,Int,Long]):BinOpMatInPlace.this.MatSclrElemOpIp[Op,Long,Int]", "kind" : "implicit def"}, {"label" : "MatSclrElmOpIpLLL", "tail" : "(op: BinOp[Op, Long, Long, Long]): MatSclrElemOpIp[Op, Long, Long]", "member" : "org.saddle.ops.BinOpMatInPlace.MatSclrElmOpIpLLL", "link" : "org\/saddle\/ops\/BinOpMatInPlace.html#MatSclrElmOpIpLLL[Op<:org.saddle.ops.ScalarOp](implicitop:org.saddle.ops.BinOp[Op,Long,Long,Long]):BinOpMatInPlace.this.MatSclrElemOpIp[Op,Long,Long]", "kind" : "implicit def"}, {"label" : "MatSclrElmOpIpDID", "tail" : "(op: BinOp[Op, Double, Int, Double]): MatSclrElemOpIp[Op, Double, Int]", "member" : "org.saddle.ops.BinOpMatInPlace.MatSclrElmOpIpDID", "link" : "org\/saddle\/ops\/BinOpMatInPlace.html#MatSclrElmOpIpDID[Op<:org.saddle.ops.ScalarOp](implicitop:org.saddle.ops.BinOp[Op,Double,Int,Double]):BinOpMatInPlace.this.MatSclrElemOpIp[Op,Double,Int]", "kind" : "implicit def"}, {"label" : "MatSclrElmOpIpDLD", "tail" : "(op: BinOp[Op, Double, Long, Double]): MatSclrElemOpIp[Op, Double, Long]", "member" : "org.saddle.ops.BinOpMatInPlace.MatSclrElmOpIpDLD", "link" : "org\/saddle\/ops\/BinOpMatInPlace.html#MatSclrElmOpIpDLD[Op<:org.saddle.ops.ScalarOp](implicitop:org.saddle.ops.BinOp[Op,Double,Long,Double]):BinOpMatInPlace.this.MatSclrElemOpIp[Op,Double,Long]", "kind" : "implicit def"}, {"label" : "MatSclrElmOpIpDDD", "tail" : "(op: BinOp[Op, Double, Double, Double]): MatSclrElemOpIp[Op, Double, Double]", "member" : "org.saddle.ops.BinOpMatInPlace.MatSclrElmOpIpDDD", "link" : "org\/saddle\/ops\/BinOpMatInPlace.html#MatSclrElmOpIpDDD[Op<:org.saddle.ops.ScalarOp](implicitop:org.saddle.ops.BinOp[Op,Double,Double,Double]):BinOpMatInPlace.this.MatSclrElemOpIp[Op,Double,Double]", "kind" : "implicit def"}, {"label" : "MatSclrElemOpIp", "tail" : "", "member" : "org.saddle.ops.BinOpMatInPlace.MatSclrElemOpIp", "link" : "org\/saddle\/ops\/BinOpMatInPlace.html#MatSclrElemOpIp[OP<:org.saddle.ops.ScalarOp,A,B]extendsBinOpInPlace[OP,org.saddle.Mat[A],B]", "kind" : "final class"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/saddle\/ops\/BinOpMatInPlace.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/saddle\/ops\/BinOpMatInPlace.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/saddle\/ops\/BinOpMatInPlace.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/saddle\/ops\/BinOpMatInPlace.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/saddle\/ops\/BinOpMatInPlace.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/saddle\/ops\/BinOpMatInPlace.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/saddle\/ops\/BinOpMatInPlace.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/ops\/BinOpMatInPlace.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/ops\/BinOpMatInPlace.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/ops\/BinOpMatInPlace.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/saddle\/ops\/BinOpMatInPlace.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/saddle\/ops\/BinOpMatInPlace.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/saddle\/ops\/BinOpMatInPlace.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/saddle\/ops\/BinOpMatInPlace.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/saddle\/ops\/BinOpMatInPlace.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/saddle\/ops\/BinOpMatInPlace.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "org\/saddle\/ops\/BinOpMatInPlace.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/saddle\/ops\/BinOpMatInPlace.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/saddle\/ops\/BinOpMatInPlace.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}, {"name" : "org.saddle.ops.BinOps", "shortDescription" : "Contains implementations of primitive binary ops that are NA-aware", "object" : "org\/saddle\/ops\/BinOps$.html", "members_object" : [{"label" : "SrSrEOp", "tail" : "", "member" : "org.saddle.ops.BinOpSeries.SrSrEOp", "link" : "org\/saddle\/ops\/BinOpSeries.html#SrSrEOp[OP<:org.saddle.ops.ScalarOp,X,A,B,C]extendsBinOp[OP,org.saddle.Series[X,A],org.saddle.Series[X,B],org.saddle.Series[X,C]]", "kind" : "final class"}, {"label" : "SrScEOp", "tail" : "", "member" : "org.saddle.ops.BinOpSeries.SrScEOp", "link" : "org\/saddle\/ops\/BinOpSeries.html#SrScEOp[OP<:org.saddle.ops.ScalarOp,X,A,B,C]extendsBinOp[OP,org.saddle.Series[X,A],B,org.saddle.Series[X,C]]", "kind" : "final class"}, {"label" : "FrFrEOp", "tail" : "", "member" : "org.saddle.ops.BinOpFrame.FrFrEOp", "link" : "org\/saddle\/ops\/BinOpFrame.html#FrFrEOp[OP<:org.saddle.ops.ScalarOp,X,Y,A,B,C]extendsBinOp[OP,org.saddle.Frame[X,Y,A],org.saddle.Frame[X,Y,B],org.saddle.Frame[X,Y,C]]", "kind" : "final class"}, {"label" : "FrScEOp", "tail" : "", "member" : "org.saddle.ops.BinOpFrame.FrScEOp", "link" : "org\/saddle\/ops\/BinOpFrame.html#FrScEOp[OP<:org.saddle.ops.ScalarOp,X,Y,A,B,C]extendsBinOp[OP,org.saddle.Frame[X,Y,A],B,org.saddle.Frame[X,Y,C]]", "kind" : "final class"}, {"label" : "VecVecElemOpIp", "tail" : "", "member" : "org.saddle.ops.BinOpVecInPlace.VecVecElemOpIp", "link" : "org\/saddle\/ops\/BinOpVecInPlace.html#VecVecElemOpIp[OP<:org.saddle.ops.ScalarOp,A,B]extendsBinOpInPlace[OP,org.saddle.Vec[A],org.saddle.Vec[B]]", "kind" : "final class"}, {"label" : "VecSclrElemOpIp", "tail" : "", "member" : "org.saddle.ops.BinOpVecInPlace.VecSclrElemOpIp", "link" : "org\/saddle\/ops\/BinOpVecInPlace.html#VecSclrElemOpIp[OP<:org.saddle.ops.ScalarOp,A,B]extendsBinOpInPlace[OP,org.saddle.Vec[A],B]", "kind" : "final class"}, {"label" : "VecVecOuter", "tail" : "", "member" : "org.saddle.ops.BinOpVec.VecVecOuter", "link" : "org\/saddle\/ops\/BinOpVec.html#VecVecOuter[A,B,C]extendsBinOp[org.saddle.ops.OuterProd,org.saddle.Vec[A],org.saddle.Vec[B],org.saddle.Mat[C]]", "kind" : "final class"}, {"label" : "VecVecDot", "tail" : "", "member" : "org.saddle.ops.BinOpVec.VecVecDot", "link" : "org\/saddle\/ops\/BinOpVec.html#VecVecDot[A,B,C]extendsBinOp[org.saddle.ops.InnerProd,org.saddle.Vec[A],org.saddle.Vec[B],C]", "kind" : "final class"}, {"label" : "VecVecElemOp", "tail" : "", "member" : "org.saddle.ops.BinOpVec.VecVecElemOp", "link" : "org\/saddle\/ops\/BinOpVec.html#VecVecElemOp[OP<:org.saddle.ops.ScalarOp,A,B,C]extendsBinOp[OP,org.saddle.Vec[A],org.saddle.Vec[B],org.saddle.Vec[C]]", "kind" : "final class"}, {"label" : "VecSclrElemOp", "tail" : "", "member" : "org.saddle.ops.BinOpVec.VecSclrElemOp", "link" : "org\/saddle\/ops\/BinOpVec.html#VecSclrElemOp[OP<:org.saddle.ops.ScalarOp,A,B,C]extendsBinOp[OP,org.saddle.Vec[A],B,org.saddle.Vec[C]]", "kind" : "final class"}, {"label" : "MatMatElemOpIp", "tail" : "", "member" : "org.saddle.ops.BinOpMatInPlace.MatMatElemOpIp", "link" : "org\/saddle\/ops\/BinOpMatInPlace.html#MatMatElemOpIp[OP<:org.saddle.ops.ScalarOp,A,B]extendsBinOpInPlace[OP,org.saddle.Mat[A],org.saddle.Mat[B]]", "kind" : "final class"}, {"label" : "MatSclrElemOpIp", "tail" : "", "member" : "org.saddle.ops.BinOpMatInPlace.MatSclrElemOpIp", "link" : "org\/saddle\/ops\/BinOpMatInPlace.html#MatSclrElemOpIp[OP<:org.saddle.ops.ScalarOp,A,B]extendsBinOpInPlace[OP,org.saddle.Mat[A],B]", "kind" : "final class"}, {"label" : "MatMatElemOp", "tail" : "", "member" : "org.saddle.ops.BinOpMat.MatMatElemOp", "link" : "org\/saddle\/ops\/BinOpMat.html#MatMatElemOp[OP<:org.saddle.ops.ScalarOp,A,B,C]extendsBinOp[OP,org.saddle.Mat[A],org.saddle.Mat[B],org.saddle.Mat[C]]", "kind" : "final class"}, {"label" : "MatSclrElemOp", "tail" : "", "member" : "org.saddle.ops.BinOpMat.MatSclrElemOp", "link" : "org\/saddle\/ops\/BinOpMat.html#MatSclrElemOp[OP<:org.saddle.ops.ScalarOp,A,B,C]extendsBinOp[OP,org.saddle.Mat[A],B,org.saddle.Mat[C]]", "kind" : "final class"}, {"label" : "lteBB", "tail" : ": BinOp[LteOp, Boolean, Boolean, Boolean]", "member" : "org.saddle.ops.BinOps.lteBB", "link" : "org\/saddle\/ops\/BinOps$.html#lteBB:org.saddle.ops.BinOp[org.saddle.ops.LteOp,Boolean,Boolean,Boolean]", "kind" : "implicit val"}, {"label" : "lteII", "tail" : ": BinOp[LteOp, Int, Int, Boolean]", "member" : "org.saddle.ops.BinOps.lteII", "link" : "org\/saddle\/ops\/BinOps$.html#lteII:org.saddle.ops.BinOp[org.saddle.ops.LteOp,Int,Int,Boolean]", "kind" : "implicit val"}, {"label" : "lteID", "tail" : ": BinOp[LteOp, Int, Double, Boolean]", "member" : "org.saddle.ops.BinOps.lteID", "link" : "org\/saddle\/ops\/BinOps$.html#lteID:org.saddle.ops.BinOp[org.saddle.ops.LteOp,Int,Double,Boolean]", "kind" : "implicit val"}, {"label" : "lteLI", "tail" : ": BinOp[LteOp, Long, Int, Boolean]", "member" : "org.saddle.ops.BinOps.lteLI", "link" : "org\/saddle\/ops\/BinOps$.html#lteLI:org.saddle.ops.BinOp[org.saddle.ops.LteOp,Long,Int,Boolean]", "kind" : "implicit val"}, {"label" : "lteLL", "tail" : ": BinOp[LteOp, Long, Long, Boolean]", "member" : "org.saddle.ops.BinOps.lteLL", "link" : "org\/saddle\/ops\/BinOps$.html#lteLL:org.saddle.ops.BinOp[org.saddle.ops.LteOp,Long,Long,Boolean]", "kind" : "implicit val"}, {"label" : "lteLD", "tail" : ": BinOp[LteOp, Long, Double, Boolean]", "member" : "org.saddle.ops.BinOps.lteLD", "link" : "org\/saddle\/ops\/BinOps$.html#lteLD:org.saddle.ops.BinOp[org.saddle.ops.LteOp,Long,Double,Boolean]", "kind" : "implicit val"}, {"label" : "lteDI", "tail" : ": BinOp[LteOp, Double, Int, Boolean]", "member" : "org.saddle.ops.BinOps.lteDI", "link" : "org\/saddle\/ops\/BinOps$.html#lteDI:org.saddle.ops.BinOp[org.saddle.ops.LteOp,Double,Int,Boolean]", "kind" : "implicit val"}, {"label" : "lteDL", "tail" : ": BinOp[LteOp, Double, Long, Boolean]", "member" : "org.saddle.ops.BinOps.lteDL", "link" : "org\/saddle\/ops\/BinOps$.html#lteDL:org.saddle.ops.BinOp[org.saddle.ops.LteOp,Double,Long,Boolean]", "kind" : "implicit val"}, {"label" : "lteDD", "tail" : ": BinOp[LteOp, Double, Double, Boolean]", "member" : "org.saddle.ops.BinOps.lteDD", "link" : "org\/saddle\/ops\/BinOps$.html#lteDD:org.saddle.ops.BinOp[org.saddle.ops.LteOp,Double,Double,Boolean]", "kind" : "implicit val"}, {"label" : "gteBB", "tail" : ": BinOp[GteOp, Boolean, Boolean, Boolean]", "member" : "org.saddle.ops.BinOps.gteBB", "link" : "org\/saddle\/ops\/BinOps$.html#gteBB:org.saddle.ops.BinOp[org.saddle.ops.GteOp,Boolean,Boolean,Boolean]", "kind" : "implicit val"}, {"label" : "gteII", "tail" : ": BinOp[GteOp, Int, Int, Boolean]", "member" : "org.saddle.ops.BinOps.gteII", "link" : "org\/saddle\/ops\/BinOps$.html#gteII:org.saddle.ops.BinOp[org.saddle.ops.GteOp,Int,Int,Boolean]", "kind" : "implicit val"}, {"label" : "gteID", "tail" : ": BinOp[GteOp, Int, Double, Boolean]", "member" : "org.saddle.ops.BinOps.gteID", "link" : "org\/saddle\/ops\/BinOps$.html#gteID:org.saddle.ops.BinOp[org.saddle.ops.GteOp,Int,Double,Boolean]", "kind" : "implicit val"}, {"label" : "gteLI", "tail" : ": BinOp[GteOp, Long, Int, Boolean]", "member" : "org.saddle.ops.BinOps.gteLI", "link" : "org\/saddle\/ops\/BinOps$.html#gteLI:org.saddle.ops.BinOp[org.saddle.ops.GteOp,Long,Int,Boolean]", "kind" : "implicit val"}, {"label" : "gteLL", "tail" : ": BinOp[GteOp, Long, Long, Boolean]", "member" : "org.saddle.ops.BinOps.gteLL", "link" : "org\/saddle\/ops\/BinOps$.html#gteLL:org.saddle.ops.BinOp[org.saddle.ops.GteOp,Long,Long,Boolean]", "kind" : "implicit val"}, {"label" : "gteLD", "tail" : ": BinOp[GteOp, Long, Double, Boolean]", "member" : "org.saddle.ops.BinOps.gteLD", "link" : "org\/saddle\/ops\/BinOps$.html#gteLD:org.saddle.ops.BinOp[org.saddle.ops.GteOp,Long,Double,Boolean]", "kind" : "implicit val"}, {"label" : "gteDI", "tail" : ": BinOp[GteOp, Double, Int, Boolean]", "member" : "org.saddle.ops.BinOps.gteDI", "link" : "org\/saddle\/ops\/BinOps$.html#gteDI:org.saddle.ops.BinOp[org.saddle.ops.GteOp,Double,Int,Boolean]", "kind" : "implicit val"}, {"label" : "gteDL", "tail" : ": BinOp[GteOp, Double, Long, Boolean]", "member" : "org.saddle.ops.BinOps.gteDL", "link" : "org\/saddle\/ops\/BinOps$.html#gteDL:org.saddle.ops.BinOp[org.saddle.ops.GteOp,Double,Long,Boolean]", "kind" : "implicit val"}, {"label" : "gteDD", "tail" : ": BinOp[GteOp, Double, Double, Boolean]", "member" : "org.saddle.ops.BinOps.gteDD", "link" : "org\/saddle\/ops\/BinOps$.html#gteDD:org.saddle.ops.BinOp[org.saddle.ops.GteOp,Double,Double,Boolean]", "kind" : "implicit val"}, {"label" : "neqBB", "tail" : ": BinOp[NeqOp, Boolean, Boolean, Boolean]", "member" : "org.saddle.ops.BinOps.neqBB", "link" : "org\/saddle\/ops\/BinOps$.html#neqBB:org.saddle.ops.BinOp[org.saddle.ops.NeqOp,Boolean,Boolean,Boolean]", "kind" : "implicit val"}, {"label" : "neqII", "tail" : ": BinOp[NeqOp, Int, Int, Boolean]", "member" : "org.saddle.ops.BinOps.neqII", "link" : "org\/saddle\/ops\/BinOps$.html#neqII:org.saddle.ops.BinOp[org.saddle.ops.NeqOp,Int,Int,Boolean]", "kind" : "implicit val"}, {"label" : "neqID", "tail" : ": BinOp[NeqOp, Int, Double, Boolean]", "member" : "org.saddle.ops.BinOps.neqID", "link" : "org\/saddle\/ops\/BinOps$.html#neqID:org.saddle.ops.BinOp[org.saddle.ops.NeqOp,Int,Double,Boolean]", "kind" : "implicit val"}, {"label" : "neqLI", "tail" : ": BinOp[NeqOp, Long, Int, Boolean]", "member" : "org.saddle.ops.BinOps.neqLI", "link" : "org\/saddle\/ops\/BinOps$.html#neqLI:org.saddle.ops.BinOp[org.saddle.ops.NeqOp,Long,Int,Boolean]", "kind" : "implicit val"}, {"label" : "neqLL", "tail" : ": BinOp[NeqOp, Long, Long, Boolean]", "member" : "org.saddle.ops.BinOps.neqLL", "link" : "org\/saddle\/ops\/BinOps$.html#neqLL:org.saddle.ops.BinOp[org.saddle.ops.NeqOp,Long,Long,Boolean]", "kind" : "implicit val"}, {"label" : "neqLD", "tail" : ": BinOp[NeqOp, Long, Double, Boolean]", "member" : "org.saddle.ops.BinOps.neqLD", "link" : "org\/saddle\/ops\/BinOps$.html#neqLD:org.saddle.ops.BinOp[org.saddle.ops.NeqOp,Long,Double,Boolean]", "kind" : "implicit val"}, {"label" : "neqDI", "tail" : ": BinOp[NeqOp, Double, Int, Boolean]", "member" : "org.saddle.ops.BinOps.neqDI", "link" : "org\/saddle\/ops\/BinOps$.html#neqDI:org.saddle.ops.BinOp[org.saddle.ops.NeqOp,Double,Int,Boolean]", "kind" : "implicit val"}, {"label" : "neqDL", "tail" : ": BinOp[NeqOp, Double, Long, Boolean]", "member" : "org.saddle.ops.BinOps.neqDL", "link" : "org\/saddle\/ops\/BinOps$.html#neqDL:org.saddle.ops.BinOp[org.saddle.ops.NeqOp,Double,Long,Boolean]", "kind" : "implicit val"}, {"label" : "neqDD", "tail" : ": BinOp[NeqOp, Double, Double, Boolean]", "member" : "org.saddle.ops.BinOps.neqDD", "link" : "org\/saddle\/ops\/BinOps$.html#neqDD:org.saddle.ops.BinOp[org.saddle.ops.NeqOp,Double,Double,Boolean]", "kind" : "implicit val"}, {"label" : "eqBB", "tail" : ": BinOp[EqOp, Boolean, Boolean, Boolean]", "member" : "org.saddle.ops.BinOps.eqBB", "link" : "org\/saddle\/ops\/BinOps$.html#eqBB:org.saddle.ops.BinOp[org.saddle.ops.EqOp,Boolean,Boolean,Boolean]", "kind" : "implicit val"}, {"label" : "eqII", "tail" : ": BinOp[EqOp, Int, Int, Boolean]", "member" : "org.saddle.ops.BinOps.eqII", "link" : "org\/saddle\/ops\/BinOps$.html#eqII:org.saddle.ops.BinOp[org.saddle.ops.EqOp,Int,Int,Boolean]", "kind" : "implicit val"}, {"label" : "eqID", "tail" : ": BinOp[EqOp, Int, Double, Boolean]", "member" : "org.saddle.ops.BinOps.eqID", "link" : "org\/saddle\/ops\/BinOps$.html#eqID:org.saddle.ops.BinOp[org.saddle.ops.EqOp,Int,Double,Boolean]", "kind" : "implicit val"}, {"label" : "eqLI", "tail" : ": BinOp[EqOp, Long, Int, Boolean]", "member" : "org.saddle.ops.BinOps.eqLI", "link" : "org\/saddle\/ops\/BinOps$.html#eqLI:org.saddle.ops.BinOp[org.saddle.ops.EqOp,Long,Int,Boolean]", "kind" : "implicit val"}, {"label" : "eqLL", "tail" : ": BinOp[EqOp, Long, Long, Boolean]", "member" : "org.saddle.ops.BinOps.eqLL", "link" : "org\/saddle\/ops\/BinOps$.html#eqLL:org.saddle.ops.BinOp[org.saddle.ops.EqOp,Long,Long,Boolean]", "kind" : "implicit val"}, {"label" : "eqLD", "tail" : ": BinOp[EqOp, Long, Double, Boolean]", "member" : "org.saddle.ops.BinOps.eqLD", "link" : "org\/saddle\/ops\/BinOps$.html#eqLD:org.saddle.ops.BinOp[org.saddle.ops.EqOp,Long,Double,Boolean]", "kind" : "implicit val"}, {"label" : "eqDI", "tail" : ": BinOp[EqOp, Double, Int, Boolean]", "member" : "org.saddle.ops.BinOps.eqDI", "link" : "org\/saddle\/ops\/BinOps$.html#eqDI:org.saddle.ops.BinOp[org.saddle.ops.EqOp,Double,Int,Boolean]", "kind" : "implicit val"}, {"label" : "eqDL", "tail" : ": BinOp[EqOp, Double, Long, Boolean]", "member" : "org.saddle.ops.BinOps.eqDL", "link" : "org\/saddle\/ops\/BinOps$.html#eqDL:org.saddle.ops.BinOp[org.saddle.ops.EqOp,Double,Long,Boolean]", "kind" : "implicit val"}, {"label" : "eqDD", "tail" : ": BinOp[EqOp, Double, Double, Boolean]", "member" : "org.saddle.ops.BinOps.eqDD", "link" : "org\/saddle\/ops\/BinOps$.html#eqDD:org.saddle.ops.BinOp[org.saddle.ops.EqOp,Double,Double,Boolean]", "kind" : "implicit val"}, {"label" : "ltBB", "tail" : ": BinOp[LtOp, Boolean, Boolean, Boolean]", "member" : "org.saddle.ops.BinOps.ltBB", "link" : "org\/saddle\/ops\/BinOps$.html#ltBB:org.saddle.ops.BinOp[org.saddle.ops.LtOp,Boolean,Boolean,Boolean]", "kind" : "implicit val"}, {"label" : "ltII", "tail" : ": BinOp[LtOp, Int, Int, Boolean]", "member" : "org.saddle.ops.BinOps.ltII", "link" : "org\/saddle\/ops\/BinOps$.html#ltII:org.saddle.ops.BinOp[org.saddle.ops.LtOp,Int,Int,Boolean]", "kind" : "implicit val"}, {"label" : "ltID", "tail" : ": BinOp[LtOp, Int, Double, Boolean]", "member" : "org.saddle.ops.BinOps.ltID", "link" : "org\/saddle\/ops\/BinOps$.html#ltID:org.saddle.ops.BinOp[org.saddle.ops.LtOp,Int,Double,Boolean]", "kind" : "implicit val"}, {"label" : "ltLI", "tail" : ": BinOp[LtOp, Long, Int, Boolean]", "member" : "org.saddle.ops.BinOps.ltLI", "link" : "org\/saddle\/ops\/BinOps$.html#ltLI:org.saddle.ops.BinOp[org.saddle.ops.LtOp,Long,Int,Boolean]", "kind" : "implicit val"}, {"label" : "ltLL", "tail" : ": BinOp[LtOp, Long, Long, Boolean]", "member" : "org.saddle.ops.BinOps.ltLL", "link" : "org\/saddle\/ops\/BinOps$.html#ltLL:org.saddle.ops.BinOp[org.saddle.ops.LtOp,Long,Long,Boolean]", "kind" : "implicit val"}, {"label" : "ltLD", "tail" : ": BinOp[LtOp, Long, Double, Boolean]", "member" : "org.saddle.ops.BinOps.ltLD", "link" : "org\/saddle\/ops\/BinOps$.html#ltLD:org.saddle.ops.BinOp[org.saddle.ops.LtOp,Long,Double,Boolean]", "kind" : "implicit val"}, {"label" : "ltDI", "tail" : ": BinOp[LtOp, Double, Int, Boolean]", "member" : "org.saddle.ops.BinOps.ltDI", "link" : "org\/saddle\/ops\/BinOps$.html#ltDI:org.saddle.ops.BinOp[org.saddle.ops.LtOp,Double,Int,Boolean]", "kind" : "implicit val"}, {"label" : "ltDL", "tail" : ": BinOp[LtOp, Double, Long, Boolean]", "member" : "org.saddle.ops.BinOps.ltDL", "link" : "org\/saddle\/ops\/BinOps$.html#ltDL:org.saddle.ops.BinOp[org.saddle.ops.LtOp,Double,Long,Boolean]", "kind" : "implicit val"}, {"label" : "ltDD", "tail" : ": BinOp[LtOp, Double, Double, Boolean]", "member" : "org.saddle.ops.BinOps.ltDD", "link" : "org\/saddle\/ops\/BinOps$.html#ltDD:org.saddle.ops.BinOp[org.saddle.ops.LtOp,Double,Double,Boolean]", "kind" : "implicit val"}, {"label" : "gtBB", "tail" : ": BinOp[GtOp, Boolean, Boolean, Boolean]", "member" : "org.saddle.ops.BinOps.gtBB", "link" : "org\/saddle\/ops\/BinOps$.html#gtBB:org.saddle.ops.BinOp[org.saddle.ops.GtOp,Boolean,Boolean,Boolean]", "kind" : "implicit val"}, {"label" : "gtII", "tail" : ": BinOp[GtOp, Int, Int, Boolean]", "member" : "org.saddle.ops.BinOps.gtII", "link" : "org\/saddle\/ops\/BinOps$.html#gtII:org.saddle.ops.BinOp[org.saddle.ops.GtOp,Int,Int,Boolean]", "kind" : "implicit val"}, {"label" : "gtID", "tail" : ": BinOp[GtOp, Int, Double, Boolean]", "member" : "org.saddle.ops.BinOps.gtID", "link" : "org\/saddle\/ops\/BinOps$.html#gtID:org.saddle.ops.BinOp[org.saddle.ops.GtOp,Int,Double,Boolean]", "kind" : "implicit val"}, {"label" : "gtLI", "tail" : ": BinOp[GtOp, Long, Int, Boolean]", "member" : "org.saddle.ops.BinOps.gtLI", "link" : "org\/saddle\/ops\/BinOps$.html#gtLI:org.saddle.ops.BinOp[org.saddle.ops.GtOp,Long,Int,Boolean]", "kind" : "implicit val"}, {"label" : "gtLL", "tail" : ": BinOp[GtOp, Long, Long, Boolean]", "member" : "org.saddle.ops.BinOps.gtLL", "link" : "org\/saddle\/ops\/BinOps$.html#gtLL:org.saddle.ops.BinOp[org.saddle.ops.GtOp,Long,Long,Boolean]", "kind" : "implicit val"}, {"label" : "gtLD", "tail" : ": BinOp[GtOp, Long, Double, Boolean]", "member" : "org.saddle.ops.BinOps.gtLD", "link" : "org\/saddle\/ops\/BinOps$.html#gtLD:org.saddle.ops.BinOp[org.saddle.ops.GtOp,Long,Double,Boolean]", "kind" : "implicit val"}, {"label" : "gtDI", "tail" : ": BinOp[GtOp, Double, Int, Boolean]", "member" : "org.saddle.ops.BinOps.gtDI", "link" : "org\/saddle\/ops\/BinOps$.html#gtDI:org.saddle.ops.BinOp[org.saddle.ops.GtOp,Double,Int,Boolean]", "kind" : "implicit val"}, {"label" : "gtDL", "tail" : ": BinOp[GtOp, Double, Long, Boolean]", "member" : "org.saddle.ops.BinOps.gtDL", "link" : "org\/saddle\/ops\/BinOps$.html#gtDL:org.saddle.ops.BinOp[org.saddle.ops.GtOp,Double,Long,Boolean]", "kind" : "implicit val"}, {"label" : "gtDD", "tail" : ": BinOp[GtOp, Double, Double, Boolean]", "member" : "org.saddle.ops.BinOps.gtDD", "link" : "org\/saddle\/ops\/BinOps$.html#gtDD:org.saddle.ops.BinOp[org.saddle.ops.GtOp,Double,Double,Boolean]", "kind" : "implicit val"}, {"label" : "xorBB", "tail" : ": BinOp[XorOp, Boolean, Boolean, Boolean]", "member" : "org.saddle.ops.BinOps.xorBB", "link" : "org\/saddle\/ops\/BinOps$.html#xorBB:org.saddle.ops.BinOp[org.saddle.ops.XorOp,Boolean,Boolean,Boolean]", "kind" : "implicit val"}, {"label" : "orBB", "tail" : ": BinOp[OrOp, Boolean, Boolean, Boolean]", "member" : "org.saddle.ops.BinOps.orBB", "link" : "org\/saddle\/ops\/BinOps$.html#orBB:org.saddle.ops.BinOp[org.saddle.ops.OrOp,Boolean,Boolean,Boolean]", "kind" : "implicit val"}, {"label" : "andBB", "tail" : ": BinOp[AndOp, Boolean, Boolean, Boolean]", "member" : "org.saddle.ops.BinOps.andBB", "link" : "org\/saddle\/ops\/BinOps$.html#andBB:org.saddle.ops.BinOp[org.saddle.ops.AndOp,Boolean,Boolean,Boolean]", "kind" : "implicit val"}, {"label" : "ushrII", "tail" : ": BinOp[BitUShr, Int, Int, Int]", "member" : "org.saddle.ops.BinOps.ushrII", "link" : "org\/saddle\/ops\/BinOps$.html#ushrII:org.saddle.ops.BinOp[org.saddle.ops.BitUShr,Int,Int,Int]", "kind" : "implicit val"}, {"label" : "shrII", "tail" : ": BinOp[BitShr, Int, Int, Int]", "member" : "org.saddle.ops.BinOps.shrII", "link" : "org\/saddle\/ops\/BinOps$.html#shrII:org.saddle.ops.BinOp[org.saddle.ops.BitShr,Int,Int,Int]", "kind" : "implicit val"}, {"label" : "shlII", "tail" : ": BinOp[BitShl, Int, Int, Int]", "member" : "org.saddle.ops.BinOps.shlII", "link" : "org\/saddle\/ops\/BinOps$.html#shlII:org.saddle.ops.BinOp[org.saddle.ops.BitShl,Int,Int,Int]", "kind" : "implicit val"}, {"label" : "xorII", "tail" : ": BinOp[BitXor, Int, Int, Int]", "member" : "org.saddle.ops.BinOps.xorII", "link" : "org\/saddle\/ops\/BinOps$.html#xorII:org.saddle.ops.BinOp[org.saddle.ops.BitXor,Int,Int,Int]", "kind" : "implicit val"}, {"label" : "orII", "tail" : ": BinOp[BitOr, Int, Int, Int]", "member" : "org.saddle.ops.BinOps.orII", "link" : "org\/saddle\/ops\/BinOps$.html#orII:org.saddle.ops.BinOp[org.saddle.ops.BitOr,Int,Int,Int]", "kind" : "implicit val"}, {"label" : "andII", "tail" : ": BinOp[BitAnd, Int, Int, Int]", "member" : "org.saddle.ops.BinOps.andII", "link" : "org\/saddle\/ops\/BinOps$.html#andII:org.saddle.ops.BinOp[org.saddle.ops.BitAnd,Int,Int,Int]", "kind" : "implicit val"}, {"label" : "subII", "tail" : ": BinOp[Subtract, Int, Int, Int]", "member" : "org.saddle.ops.BinOps.subII", "link" : "org\/saddle\/ops\/BinOps$.html#subII:org.saddle.ops.BinOp[org.saddle.ops.Subtract,Int,Int,Int]", "kind" : "implicit val"}, {"label" : "divII", "tail" : ": BinOp[Divide, Int, Int, Int]", "member" : "org.saddle.ops.BinOps.divII", "link" : "org\/saddle\/ops\/BinOps$.html#divII:org.saddle.ops.BinOp[org.saddle.ops.Divide,Int,Int,Int]", "kind" : "implicit val"}, {"label" : "mulII", "tail" : ": BinOp[Multiply, Int, Int, Int]", "member" : "org.saddle.ops.BinOps.mulII", "link" : "org\/saddle\/ops\/BinOps$.html#mulII:org.saddle.ops.BinOp[org.saddle.ops.Multiply,Int,Int,Int]", "kind" : "implicit val"}, {"label" : "addII", "tail" : ": BinOp[Add, Int, Int, Int]", "member" : "org.saddle.ops.BinOps.addII", "link" : "org\/saddle\/ops\/BinOps$.html#addII:org.saddle.ops.BinOp[org.saddle.ops.Add,Int,Int,Int]", "kind" : "implicit val"}, {"label" : "modII", "tail" : ": BinOp[Mod, Int, Int, Int]", "member" : "org.saddle.ops.BinOps.modII", "link" : "org\/saddle\/ops\/BinOps$.html#modII:org.saddle.ops.BinOp[org.saddle.ops.Mod,Int,Int,Int]", "kind" : "implicit val"}, {"label" : "powII", "tail" : ": BinOp[Power, Int, Int, Int]", "member" : "org.saddle.ops.BinOps.powII", "link" : "org\/saddle\/ops\/BinOps$.html#powII:org.saddle.ops.BinOp[org.saddle.ops.Power,Int,Int,Int]", "kind" : "implicit val"}, {"label" : "xorLI", "tail" : ": BinOp[BitXor, Long, Int, Long]", "member" : "org.saddle.ops.BinOps.xorLI", "link" : "org\/saddle\/ops\/BinOps$.html#xorLI:org.saddle.ops.BinOp[org.saddle.ops.BitXor,Long,Int,Long]", "kind" : "implicit val"}, {"label" : "orLI", "tail" : ": BinOp[BitOr, Long, Int, Long]", "member" : "org.saddle.ops.BinOps.orLI", "link" : "org\/saddle\/ops\/BinOps$.html#orLI:org.saddle.ops.BinOp[org.saddle.ops.BitOr,Long,Int,Long]", "kind" : "implicit val"}, {"label" : "andLI", "tail" : ": BinOp[BitAnd, Long, Int, Long]", "member" : "org.saddle.ops.BinOps.andLI", "link" : "org\/saddle\/ops\/BinOps$.html#andLI:org.saddle.ops.BinOp[org.saddle.ops.BitAnd,Long,Int,Long]", "kind" : "implicit val"}, {"label" : "subLI", "tail" : ": BinOp[Subtract, Long, Int, Long]", "member" : "org.saddle.ops.BinOps.subLI", "link" : "org\/saddle\/ops\/BinOps$.html#subLI:org.saddle.ops.BinOp[org.saddle.ops.Subtract,Long,Int,Long]", "kind" : "implicit val"}, {"label" : "divLI", "tail" : ": BinOp[Divide, Long, Int, Long]", "member" : "org.saddle.ops.BinOps.divLI", "link" : "org\/saddle\/ops\/BinOps$.html#divLI:org.saddle.ops.BinOp[org.saddle.ops.Divide,Long,Int,Long]", "kind" : "implicit val"}, {"label" : "mulLI", "tail" : ": BinOp[Multiply, Long, Int, Long]", "member" : "org.saddle.ops.BinOps.mulLI", "link" : "org\/saddle\/ops\/BinOps$.html#mulLI:org.saddle.ops.BinOp[org.saddle.ops.Multiply,Long,Int,Long]", "kind" : "implicit val"}, {"label" : "addLI", "tail" : ": BinOp[Add, Long, Int, Long]", "member" : "org.saddle.ops.BinOps.addLI", "link" : "org\/saddle\/ops\/BinOps$.html#addLI:org.saddle.ops.BinOp[org.saddle.ops.Add,Long,Int,Long]", "kind" : "implicit val"}, {"label" : "modLI", "tail" : ": BinOp[Mod, Long, Int, Long]", "member" : "org.saddle.ops.BinOps.modLI", "link" : "org\/saddle\/ops\/BinOps$.html#modLI:org.saddle.ops.BinOp[org.saddle.ops.Mod,Long,Int,Long]", "kind" : "implicit val"}, {"label" : "powLI", "tail" : ": BinOp[Power, Long, Int, Long]", "member" : "org.saddle.ops.BinOps.powLI", "link" : "org\/saddle\/ops\/BinOps$.html#powLI:org.saddle.ops.BinOp[org.saddle.ops.Power,Long,Int,Long]", "kind" : "implicit val"}, {"label" : "xorIL", "tail" : ": BinOp[BitXor, Int, Long, Long]", "member" : "org.saddle.ops.BinOps.xorIL", "link" : "org\/saddle\/ops\/BinOps$.html#xorIL:org.saddle.ops.BinOp[org.saddle.ops.BitXor,Int,Long,Long]", "kind" : "implicit val"}, {"label" : "orIL", "tail" : ": BinOp[BitOr, Int, Long, Long]", "member" : "org.saddle.ops.BinOps.orIL", "link" : "org\/saddle\/ops\/BinOps$.html#orIL:org.saddle.ops.BinOp[org.saddle.ops.BitOr,Int,Long,Long]", "kind" : "implicit val"}, {"label" : "andIL", "tail" : ": BinOp[BitAnd, Int, Long, Long]", "member" : "org.saddle.ops.BinOps.andIL", "link" : "org\/saddle\/ops\/BinOps$.html#andIL:org.saddle.ops.BinOp[org.saddle.ops.BitAnd,Int,Long,Long]", "kind" : "implicit val"}, {"label" : "subIL", "tail" : ": BinOp[Subtract, Int, Long, Long]", "member" : "org.saddle.ops.BinOps.subIL", "link" : "org\/saddle\/ops\/BinOps$.html#subIL:org.saddle.ops.BinOp[org.saddle.ops.Subtract,Int,Long,Long]", "kind" : "implicit val"}, {"label" : "divIL", "tail" : ": BinOp[Divide, Int, Long, Long]", "member" : "org.saddle.ops.BinOps.divIL", "link" : "org\/saddle\/ops\/BinOps$.html#divIL:org.saddle.ops.BinOp[org.saddle.ops.Divide,Int,Long,Long]", "kind" : "implicit val"}, {"label" : "mulIL", "tail" : ": BinOp[Multiply, Int, Long, Long]", "member" : "org.saddle.ops.BinOps.mulIL", "link" : "org\/saddle\/ops\/BinOps$.html#mulIL:org.saddle.ops.BinOp[org.saddle.ops.Multiply,Int,Long,Long]", "kind" : "implicit val"}, {"label" : "addIL", "tail" : ": BinOp[Add, Int, Long, Long]", "member" : "org.saddle.ops.BinOps.addIL", "link" : "org\/saddle\/ops\/BinOps$.html#addIL:org.saddle.ops.BinOp[org.saddle.ops.Add,Int,Long,Long]", "kind" : "implicit val"}, {"label" : "modIL", "tail" : ": BinOp[Mod, Int, Long, Long]", "member" : "org.saddle.ops.BinOps.modIL", "link" : "org\/saddle\/ops\/BinOps$.html#modIL:org.saddle.ops.BinOp[org.saddle.ops.Mod,Int,Long,Long]", "kind" : "implicit val"}, {"label" : "powIL", "tail" : ": BinOp[Power, Int, Long, Long]", "member" : "org.saddle.ops.BinOps.powIL", "link" : "org\/saddle\/ops\/BinOps$.html#powIL:org.saddle.ops.BinOp[org.saddle.ops.Power,Int,Long,Long]", "kind" : "implicit val"}, {"label" : "xorLL", "tail" : ": BinOp[BitXor, Long, Long, Long]", "member" : "org.saddle.ops.BinOps.xorLL", "link" : "org\/saddle\/ops\/BinOps$.html#xorLL:org.saddle.ops.BinOp[org.saddle.ops.BitXor,Long,Long,Long]", "kind" : "implicit val"}, {"label" : "orLL", "tail" : ": BinOp[BitOr, Long, Long, Long]", "member" : "org.saddle.ops.BinOps.orLL", "link" : "org\/saddle\/ops\/BinOps$.html#orLL:org.saddle.ops.BinOp[org.saddle.ops.BitOr,Long,Long,Long]", "kind" : "implicit val"}, {"label" : "andLL", "tail" : ": BinOp[BitAnd, Long, Long, Long]", "member" : "org.saddle.ops.BinOps.andLL", "link" : "org\/saddle\/ops\/BinOps$.html#andLL:org.saddle.ops.BinOp[org.saddle.ops.BitAnd,Long,Long,Long]", "kind" : "implicit val"}, {"label" : "subLL", "tail" : ": BinOp[Subtract, Long, Long, Long]", "member" : "org.saddle.ops.BinOps.subLL", "link" : "org\/saddle\/ops\/BinOps$.html#subLL:org.saddle.ops.BinOp[org.saddle.ops.Subtract,Long,Long,Long]", "kind" : "implicit val"}, {"label" : "divLL", "tail" : ": BinOp[Divide, Long, Long, Long]", "member" : "org.saddle.ops.BinOps.divLL", "link" : "org\/saddle\/ops\/BinOps$.html#divLL:org.saddle.ops.BinOp[org.saddle.ops.Divide,Long,Long,Long]", "kind" : "implicit val"}, {"label" : "mulLL", "tail" : ": BinOp[Multiply, Long, Long, Long]", "member" : "org.saddle.ops.BinOps.mulLL", "link" : "org\/saddle\/ops\/BinOps$.html#mulLL:org.saddle.ops.BinOp[org.saddle.ops.Multiply,Long,Long,Long]", "kind" : "implicit val"}, {"label" : "addLL", "tail" : ": BinOp[Add, Long, Long, Long]", "member" : "org.saddle.ops.BinOps.addLL", "link" : "org\/saddle\/ops\/BinOps$.html#addLL:org.saddle.ops.BinOp[org.saddle.ops.Add,Long,Long,Long]", "kind" : "implicit val"}, {"label" : "modLL", "tail" : ": BinOp[Mod, Long, Long, Long]", "member" : "org.saddle.ops.BinOps.modLL", "link" : "org\/saddle\/ops\/BinOps$.html#modLL:org.saddle.ops.BinOp[org.saddle.ops.Mod,Long,Long,Long]", "kind" : "implicit val"}, {"label" : "powLL", "tail" : ": BinOp[Power, Long, Long, Long]", "member" : "org.saddle.ops.BinOps.powLL", "link" : "org\/saddle\/ops\/BinOps$.html#powLL:org.saddle.ops.BinOp[org.saddle.ops.Power,Long,Long,Long]", "kind" : "implicit val"}, {"label" : "subDI", "tail" : ": BinOp[Subtract, Double, Int, Double]", "member" : "org.saddle.ops.BinOps.subDI", "link" : "org\/saddle\/ops\/BinOps$.html#subDI:org.saddle.ops.BinOp[org.saddle.ops.Subtract,Double,Int,Double]", "kind" : "implicit val"}, {"label" : "divDI", "tail" : ": BinOp[Divide, Double, Int, Double]", "member" : "org.saddle.ops.BinOps.divDI", "link" : "org\/saddle\/ops\/BinOps$.html#divDI:org.saddle.ops.BinOp[org.saddle.ops.Divide,Double,Int,Double]", "kind" : "implicit val"}, {"label" : "mulDI", "tail" : ": BinOp[Multiply, Double, Int, Double]", "member" : "org.saddle.ops.BinOps.mulDI", "link" : "org\/saddle\/ops\/BinOps$.html#mulDI:org.saddle.ops.BinOp[org.saddle.ops.Multiply,Double,Int,Double]", "kind" : "implicit val"}, {"label" : "addDI", "tail" : ": BinOp[Add, Double, Int, Double]", "member" : "org.saddle.ops.BinOps.addDI", "link" : "org\/saddle\/ops\/BinOps$.html#addDI:org.saddle.ops.BinOp[org.saddle.ops.Add,Double,Int,Double]", "kind" : "implicit val"}, {"label" : "modDI", "tail" : ": BinOp[Mod, Double, Int, Double]", "member" : "org.saddle.ops.BinOps.modDI", "link" : "org\/saddle\/ops\/BinOps$.html#modDI:org.saddle.ops.BinOp[org.saddle.ops.Mod,Double,Int,Double]", "kind" : "implicit val"}, {"label" : "powDI", "tail" : ": BinOp[Power, Double, Int, Double]", "member" : "org.saddle.ops.BinOps.powDI", "link" : "org\/saddle\/ops\/BinOps$.html#powDI:org.saddle.ops.BinOp[org.saddle.ops.Power,Double,Int,Double]", "kind" : "implicit val"}, {"label" : "subID", "tail" : ": BinOp[Subtract, Int, Double, Double]", "member" : "org.saddle.ops.BinOps.subID", "link" : "org\/saddle\/ops\/BinOps$.html#subID:org.saddle.ops.BinOp[org.saddle.ops.Subtract,Int,Double,Double]", "kind" : "implicit val"}, {"label" : "divID", "tail" : ": BinOp[Divide, Int, Double, Double]", "member" : "org.saddle.ops.BinOps.divID", "link" : "org\/saddle\/ops\/BinOps$.html#divID:org.saddle.ops.BinOp[org.saddle.ops.Divide,Int,Double,Double]", "kind" : "implicit val"}, {"label" : "mulID", "tail" : ": BinOp[Multiply, Int, Double, Double]", "member" : "org.saddle.ops.BinOps.mulID", "link" : "org\/saddle\/ops\/BinOps$.html#mulID:org.saddle.ops.BinOp[org.saddle.ops.Multiply,Int,Double,Double]", "kind" : "implicit val"}, {"label" : "addID", "tail" : ": BinOp[Add, Int, Double, Double]", "member" : "org.saddle.ops.BinOps.addID", "link" : "org\/saddle\/ops\/BinOps$.html#addID:org.saddle.ops.BinOp[org.saddle.ops.Add,Int,Double,Double]", "kind" : "implicit val"}, {"label" : "modID", "tail" : ": BinOp[Mod, Int, Double, Double]", "member" : "org.saddle.ops.BinOps.modID", "link" : "org\/saddle\/ops\/BinOps$.html#modID:org.saddle.ops.BinOp[org.saddle.ops.Mod,Int,Double,Double]", "kind" : "implicit val"}, {"label" : "powID", "tail" : ": BinOp[Power, Int, Double, Double]", "member" : "org.saddle.ops.BinOps.powID", "link" : "org\/saddle\/ops\/BinOps$.html#powID:org.saddle.ops.BinOp[org.saddle.ops.Power,Int,Double,Double]", "kind" : "implicit val"}, {"label" : "subLD", "tail" : ": BinOp[Subtract, Long, Double, Double]", "member" : "org.saddle.ops.BinOps.subLD", "link" : "org\/saddle\/ops\/BinOps$.html#subLD:org.saddle.ops.BinOp[org.saddle.ops.Subtract,Long,Double,Double]", "kind" : "implicit val"}, {"label" : "divLD", "tail" : ": BinOp[Divide, Long, Double, Double]", "member" : "org.saddle.ops.BinOps.divLD", "link" : "org\/saddle\/ops\/BinOps$.html#divLD:org.saddle.ops.BinOp[org.saddle.ops.Divide,Long,Double,Double]", "kind" : "implicit val"}, {"label" : "mulLD", "tail" : ": BinOp[Multiply, Long, Double, Double]", "member" : "org.saddle.ops.BinOps.mulLD", "link" : "org\/saddle\/ops\/BinOps$.html#mulLD:org.saddle.ops.BinOp[org.saddle.ops.Multiply,Long,Double,Double]", "kind" : "implicit val"}, {"label" : "addLD", "tail" : ": BinOp[Add, Long, Double, Double]", "member" : "org.saddle.ops.BinOps.addLD", "link" : "org\/saddle\/ops\/BinOps$.html#addLD:org.saddle.ops.BinOp[org.saddle.ops.Add,Long,Double,Double]", "kind" : "implicit val"}, {"label" : "modLD", "tail" : ": BinOp[Mod, Long, Double, Double]", "member" : "org.saddle.ops.BinOps.modLD", "link" : "org\/saddle\/ops\/BinOps$.html#modLD:org.saddle.ops.BinOp[org.saddle.ops.Mod,Long,Double,Double]", "kind" : "implicit val"}, {"label" : "powLD", "tail" : ": BinOp[Power, Long, Double, Double]", "member" : "org.saddle.ops.BinOps.powLD", "link" : "org\/saddle\/ops\/BinOps$.html#powLD:org.saddle.ops.BinOp[org.saddle.ops.Power,Long,Double,Double]", "kind" : "implicit val"}, {"label" : "subDL", "tail" : ": BinOp[Subtract, Double, Long, Double]", "member" : "org.saddle.ops.BinOps.subDL", "link" : "org\/saddle\/ops\/BinOps$.html#subDL:org.saddle.ops.BinOp[org.saddle.ops.Subtract,Double,Long,Double]", "kind" : "implicit val"}, {"label" : "divDL", "tail" : ": BinOp[Divide, Double, Long, Double]", "member" : "org.saddle.ops.BinOps.divDL", "link" : "org\/saddle\/ops\/BinOps$.html#divDL:org.saddle.ops.BinOp[org.saddle.ops.Divide,Double,Long,Double]", "kind" : "implicit val"}, {"label" : "mulDL", "tail" : ": BinOp[Multiply, Double, Long, Double]", "member" : "org.saddle.ops.BinOps.mulDL", "link" : "org\/saddle\/ops\/BinOps$.html#mulDL:org.saddle.ops.BinOp[org.saddle.ops.Multiply,Double,Long,Double]", "kind" : "implicit val"}, {"label" : "addDL", "tail" : ": BinOp[Add, Double, Long, Double]", "member" : "org.saddle.ops.BinOps.addDL", "link" : "org\/saddle\/ops\/BinOps$.html#addDL:org.saddle.ops.BinOp[org.saddle.ops.Add,Double,Long,Double]", "kind" : "implicit val"}, {"label" : "modDL", "tail" : ": BinOp[Mod, Double, Long, Double]", "member" : "org.saddle.ops.BinOps.modDL", "link" : "org\/saddle\/ops\/BinOps$.html#modDL:org.saddle.ops.BinOp[org.saddle.ops.Mod,Double,Long,Double]", "kind" : "implicit val"}, {"label" : "powDL", "tail" : ": BinOp[Power, Double, Long, Double]", "member" : "org.saddle.ops.BinOps.powDL", "link" : "org\/saddle\/ops\/BinOps$.html#powDL:org.saddle.ops.BinOp[org.saddle.ops.Power,Double,Long,Double]", "kind" : "implicit val"}, {"label" : "subDD", "tail" : ": BinOp[Subtract, Double, Double, Double]", "member" : "org.saddle.ops.BinOps.subDD", "link" : "org\/saddle\/ops\/BinOps$.html#subDD:org.saddle.ops.BinOp[org.saddle.ops.Subtract,Double,Double,Double]", "kind" : "implicit val"}, {"label" : "divDD", "tail" : ": BinOp[Divide, Double, Double, Double]", "member" : "org.saddle.ops.BinOps.divDD", "link" : "org\/saddle\/ops\/BinOps$.html#divDD:org.saddle.ops.BinOp[org.saddle.ops.Divide,Double,Double,Double]", "kind" : "implicit val"}, {"label" : "mulDD", "tail" : ": BinOp[Multiply, Double, Double, Double]", "member" : "org.saddle.ops.BinOps.mulDD", "link" : "org\/saddle\/ops\/BinOps$.html#mulDD:org.saddle.ops.BinOp[org.saddle.ops.Multiply,Double,Double,Double]", "kind" : "implicit val"}, {"label" : "addDD", "tail" : ": BinOp[Add, Double, Double, Double]", "member" : "org.saddle.ops.BinOps.addDD", "link" : "org\/saddle\/ops\/BinOps$.html#addDD:org.saddle.ops.BinOp[org.saddle.ops.Add,Double,Double,Double]", "kind" : "implicit val"}, {"label" : "modDD", "tail" : ": BinOp[Mod, Double, Double, Double]", "member" : "org.saddle.ops.BinOps.modDD", "link" : "org\/saddle\/ops\/BinOps$.html#modDD:org.saddle.ops.BinOp[org.saddle.ops.Mod,Double,Double,Double]", "kind" : "implicit val"}, {"label" : "powDD", "tail" : ": BinOp[Power, Double, Double, Double]", "member" : "org.saddle.ops.BinOps.powDD", "link" : "org\/saddle\/ops\/BinOps$.html#powDD:org.saddle.ops.BinOp[org.saddle.ops.Power,Double,Double,Double]", "kind" : "implicit val"}, {"label" : "SrSrEOpBBB", "tail" : "(cm: ST[X], cmp: ORD[X], opv: BinOp[Op, Vec[Boolean], Vec[Boolean], Vec[Boolean]]): SrSrEOp[Op, X, Boolean, Boolean, Boolean]", "member" : "org.saddle.ops.BinOpSeries.SrSrEOpBBB", "link" : "org\/saddle\/ops\/BinOps$.html#SrSrEOpBBB[Op<:org.saddle.ops.ScalarOp,X](implicitcm:org.saddle.ST[X],implicitcmp:org.saddle.ORD[X],implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Boolean],org.saddle.Vec[Boolean],org.saddle.Vec[Boolean]]):BinOpSeries.this.SrSrEOp[Op,X,Boolean,Boolean,Boolean]", "kind" : "implicit def"}, {"label" : "SrSrEOpIIB", "tail" : "(cm: ST[X], cmp: ORD[X], opv: BinOp[Op, Vec[Int], Vec[Int], Vec[Boolean]]): SrSrEOp[Op, X, Int, Int, Boolean]", "member" : "org.saddle.ops.BinOpSeries.SrSrEOpIIB", "link" : "org\/saddle\/ops\/BinOps$.html#SrSrEOpIIB[Op<:org.saddle.ops.ScalarOp,X](implicitcm:org.saddle.ST[X],implicitcmp:org.saddle.ORD[X],implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Int],org.saddle.Vec[Int],org.saddle.Vec[Boolean]]):BinOpSeries.this.SrSrEOp[Op,X,Int,Int,Boolean]", "kind" : "implicit def"}, {"label" : "SrSrEOpILB", "tail" : "(cm: ST[X], cmp: ORD[X], opv: BinOp[Op, Vec[Int], Vec[Long], Vec[Boolean]]): SrSrEOp[Op, X, Int, Long, Boolean]", "member" : "org.saddle.ops.BinOpSeries.SrSrEOpILB", "link" : "org\/saddle\/ops\/BinOps$.html#SrSrEOpILB[Op<:org.saddle.ops.ScalarOp,X](implicitcm:org.saddle.ST[X],implicitcmp:org.saddle.ORD[X],implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Int],org.saddle.Vec[Long],org.saddle.Vec[Boolean]]):BinOpSeries.this.SrSrEOp[Op,X,Int,Long,Boolean]", "kind" : "implicit def"}, {"label" : "SrSrEOpIDB", "tail" : "(cm: ST[X], cmp: ORD[X], opv: BinOp[Op, Vec[Int], Vec[Double], Vec[Boolean]]): SrSrEOp[Op, X, Int, Double, Boolean]", "member" : "org.saddle.ops.BinOpSeries.SrSrEOpIDB", "link" : "org\/saddle\/ops\/BinOps$.html#SrSrEOpIDB[Op<:org.saddle.ops.ScalarOp,X](implicitcm:org.saddle.ST[X],implicitcmp:org.saddle.ORD[X],implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Int],org.saddle.Vec[Double],org.saddle.Vec[Boolean]]):BinOpSeries.this.SrSrEOp[Op,X,Int,Double,Boolean]", "kind" : "implicit def"}, {"label" : "SrSrEOpLIB", "tail" : "(cm: ST[X], cmp: ORD[X], opv: BinOp[Op, Vec[Long], Vec[Int], Vec[Boolean]]): SrSrEOp[Op, X, Long, Int, Boolean]", "member" : "org.saddle.ops.BinOpSeries.SrSrEOpLIB", "link" : "org\/saddle\/ops\/BinOps$.html#SrSrEOpLIB[Op<:org.saddle.ops.ScalarOp,X](implicitcm:org.saddle.ST[X],implicitcmp:org.saddle.ORD[X],implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Long],org.saddle.Vec[Int],org.saddle.Vec[Boolean]]):BinOpSeries.this.SrSrEOp[Op,X,Long,Int,Boolean]", "kind" : "implicit def"}, {"label" : "SrSrEOpLLB", "tail" : "(cm: ST[X], cmp: ORD[X], opv: BinOp[Op, Vec[Long], Vec[Long], Vec[Boolean]]): SrSrEOp[Op, X, Long, Long, Boolean]", "member" : "org.saddle.ops.BinOpSeries.SrSrEOpLLB", "link" : "org\/saddle\/ops\/BinOps$.html#SrSrEOpLLB[Op<:org.saddle.ops.ScalarOp,X](implicitcm:org.saddle.ST[X],implicitcmp:org.saddle.ORD[X],implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Long],org.saddle.Vec[Long],org.saddle.Vec[Boolean]]):BinOpSeries.this.SrSrEOp[Op,X,Long,Long,Boolean]", "kind" : "implicit def"}, {"label" : "SrSrEOpLDB", "tail" : "(cm: ST[X], cmp: ORD[X], opv: BinOp[Op, Vec[Long], Vec[Double], Vec[Boolean]]): SrSrEOp[Op, X, Long, Double, Boolean]", "member" : "org.saddle.ops.BinOpSeries.SrSrEOpLDB", "link" : "org\/saddle\/ops\/BinOps$.html#SrSrEOpLDB[Op<:org.saddle.ops.ScalarOp,X](implicitcm:org.saddle.ST[X],implicitcmp:org.saddle.ORD[X],implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Long],org.saddle.Vec[Double],org.saddle.Vec[Boolean]]):BinOpSeries.this.SrSrEOp[Op,X,Long,Double,Boolean]", "kind" : "implicit def"}, {"label" : "SrSrEOpDIB", "tail" : "(cm: ST[X], cmp: ORD[X], opv: BinOp[Op, Vec[Double], Vec[Int], Vec[Boolean]]): SrSrEOp[Op, X, Double, Int, Boolean]", "member" : "org.saddle.ops.BinOpSeries.SrSrEOpDIB", "link" : "org\/saddle\/ops\/BinOps$.html#SrSrEOpDIB[Op<:org.saddle.ops.ScalarOp,X](implicitcm:org.saddle.ST[X],implicitcmp:org.saddle.ORD[X],implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Double],org.saddle.Vec[Int],org.saddle.Vec[Boolean]]):BinOpSeries.this.SrSrEOp[Op,X,Double,Int,Boolean]", "kind" : "implicit def"}, {"label" : "SrSrEOpDLB", "tail" : "(cm: ST[X], cmp: ORD[X], opv: BinOp[Op, Vec[Double], Vec[Long], Vec[Boolean]]): SrSrEOp[Op, X, Double, Long, Boolean]", "member" : "org.saddle.ops.BinOpSeries.SrSrEOpDLB", "link" : "org\/saddle\/ops\/BinOps$.html#SrSrEOpDLB[Op<:org.saddle.ops.ScalarOp,X](implicitcm:org.saddle.ST[X],implicitcmp:org.saddle.ORD[X],implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Double],org.saddle.Vec[Long],org.saddle.Vec[Boolean]]):BinOpSeries.this.SrSrEOp[Op,X,Double,Long,Boolean]", "kind" : "implicit def"}, {"label" : "SrSrEOpDDB", "tail" : "(cm: ST[X], cmp: ORD[X], opv: BinOp[Op, Vec[Double], Vec[Double], Vec[Boolean]]): SrSrEOp[Op, X, Double, Double, Boolean]", "member" : "org.saddle.ops.BinOpSeries.SrSrEOpDDB", "link" : "org\/saddle\/ops\/BinOps$.html#SrSrEOpDDB[Op<:org.saddle.ops.ScalarOp,X](implicitcm:org.saddle.ST[X],implicitcmp:org.saddle.ORD[X],implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Double],org.saddle.Vec[Double],org.saddle.Vec[Boolean]]):BinOpSeries.this.SrSrEOp[Op,X,Double,Double,Boolean]", "kind" : "implicit def"}, {"label" : "SrSrEOpIII", "tail" : "(cm: ST[X], cmp: ORD[X], opv: BinOp[Op, Vec[Int], Vec[Int], Vec[Int]]): SrSrEOp[Op, X, Int, Int, Int]", "member" : "org.saddle.ops.BinOpSeries.SrSrEOpIII", "link" : "org\/saddle\/ops\/BinOps$.html#SrSrEOpIII[Op<:org.saddle.ops.ScalarOp,X](implicitcm:org.saddle.ST[X],implicitcmp:org.saddle.ORD[X],implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Int],org.saddle.Vec[Int],org.saddle.Vec[Int]]):BinOpSeries.this.SrSrEOp[Op,X,Int,Int,Int]", "kind" : "implicit def"}, {"label" : "SrSrEOpILL", "tail" : "(cm: ST[X], cmp: ORD[X], opv: BinOp[Op, Vec[Int], Vec[Long], Vec[Long]]): SrSrEOp[Op, X, Int, Long, Long]", "member" : "org.saddle.ops.BinOpSeries.SrSrEOpILL", "link" : "org\/saddle\/ops\/BinOps$.html#SrSrEOpILL[Op<:org.saddle.ops.ScalarOp,X](implicitcm:org.saddle.ST[X],implicitcmp:org.saddle.ORD[X],implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Int],org.saddle.Vec[Long],org.saddle.Vec[Long]]):BinOpSeries.this.SrSrEOp[Op,X,Int,Long,Long]", "kind" : "implicit def"}, {"label" : "SrSrEOpIDD", "tail" : "(cm: ST[X], cmp: ORD[X], opv: BinOp[Op, Vec[Int], Vec[Double], Vec[Double]]): SrSrEOp[Op, X, Int, Double, Double]", "member" : "org.saddle.ops.BinOpSeries.SrSrEOpIDD", "link" : "org\/saddle\/ops\/BinOps$.html#SrSrEOpIDD[Op<:org.saddle.ops.ScalarOp,X](implicitcm:org.saddle.ST[X],implicitcmp:org.saddle.ORD[X],implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Int],org.saddle.Vec[Double],org.saddle.Vec[Double]]):BinOpSeries.this.SrSrEOp[Op,X,Int,Double,Double]", "kind" : "implicit def"}, {"label" : "SrSrEOpLIL", "tail" : "(cm: ST[X], cmp: ORD[X], opv: BinOp[Op, Vec[Long], Vec[Int], Vec[Long]]): SrSrEOp[Op, X, Long, Int, Long]", "member" : "org.saddle.ops.BinOpSeries.SrSrEOpLIL", "link" : "org\/saddle\/ops\/BinOps$.html#SrSrEOpLIL[Op<:org.saddle.ops.ScalarOp,X](implicitcm:org.saddle.ST[X],implicitcmp:org.saddle.ORD[X],implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Long],org.saddle.Vec[Int],org.saddle.Vec[Long]]):BinOpSeries.this.SrSrEOp[Op,X,Long,Int,Long]", "kind" : "implicit def"}, {"label" : "SrSrEOpLLL", "tail" : "(cm: ST[X], cmp: ORD[X], opv: BinOp[Op, Vec[Long], Vec[Long], Vec[Long]]): SrSrEOp[Op, X, Long, Long, Long]", "member" : "org.saddle.ops.BinOpSeries.SrSrEOpLLL", "link" : "org\/saddle\/ops\/BinOps$.html#SrSrEOpLLL[Op<:org.saddle.ops.ScalarOp,X](implicitcm:org.saddle.ST[X],implicitcmp:org.saddle.ORD[X],implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Long],org.saddle.Vec[Long],org.saddle.Vec[Long]]):BinOpSeries.this.SrSrEOp[Op,X,Long,Long,Long]", "kind" : "implicit def"}, {"label" : "SrSrEOpLDD", "tail" : "(cm: ST[X], cmp: ORD[X], opv: BinOp[Op, Vec[Long], Vec[Double], Vec[Double]]): SrSrEOp[Op, X, Long, Double, Double]", "member" : "org.saddle.ops.BinOpSeries.SrSrEOpLDD", "link" : "org\/saddle\/ops\/BinOps$.html#SrSrEOpLDD[Op<:org.saddle.ops.ScalarOp,X](implicitcm:org.saddle.ST[X],implicitcmp:org.saddle.ORD[X],implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Long],org.saddle.Vec[Double],org.saddle.Vec[Double]]):BinOpSeries.this.SrSrEOp[Op,X,Long,Double,Double]", "kind" : "implicit def"}, {"label" : "SrSrEOpDLD", "tail" : "(cm: ST[X], cmp: ORD[X], opv: BinOp[Op, Vec[Double], Vec[Long], Vec[Double]]): SrSrEOp[Op, X, Double, Long, Double]", "member" : "org.saddle.ops.BinOpSeries.SrSrEOpDLD", "link" : "org\/saddle\/ops\/BinOps$.html#SrSrEOpDLD[Op<:org.saddle.ops.ScalarOp,X](implicitcm:org.saddle.ST[X],implicitcmp:org.saddle.ORD[X],implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Double],org.saddle.Vec[Long],org.saddle.Vec[Double]]):BinOpSeries.this.SrSrEOp[Op,X,Double,Long,Double]", "kind" : "implicit def"}, {"label" : "SrSrEOpDID", "tail" : "(cm: ST[X], cmp: ORD[X], opv: BinOp[Op, Vec[Double], Vec[Int], Vec[Double]]): SrSrEOp[Op, X, Double, Int, Double]", "member" : "org.saddle.ops.BinOpSeries.SrSrEOpDID", "link" : "org\/saddle\/ops\/BinOps$.html#SrSrEOpDID[Op<:org.saddle.ops.ScalarOp,X](implicitcm:org.saddle.ST[X],implicitcmp:org.saddle.ORD[X],implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Double],org.saddle.Vec[Int],org.saddle.Vec[Double]]):BinOpSeries.this.SrSrEOp[Op,X,Double,Int,Double]", "kind" : "implicit def"}, {"label" : "SrSrEOpDDD", "tail" : "(cm: ST[X], cmp: ORD[X], opv: BinOp[Op, Vec[Double], Vec[Double], Vec[Double]]): SrSrEOp[Op, X, Double, Double, Double]", "member" : "org.saddle.ops.BinOpSeries.SrSrEOpDDD", "link" : "org\/saddle\/ops\/BinOps$.html#SrSrEOpDDD[Op<:org.saddle.ops.ScalarOp,X](implicitcm:org.saddle.ST[X],implicitcmp:org.saddle.ORD[X],implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Double],org.saddle.Vec[Double],org.saddle.Vec[Double]]):BinOpSeries.this.SrSrEOp[Op,X,Double,Double,Double]", "kind" : "implicit def"}, {"label" : "SrScEOpBBB", "tail" : "(cm: ST[X], cmp: ORD[X], opv: BinOp[Op, Vec[Boolean], Boolean, Vec[Boolean]]): SrScEOp[Op, X, Boolean, Boolean, Boolean]", "member" : "org.saddle.ops.BinOpSeries.SrScEOpBBB", "link" : "org\/saddle\/ops\/BinOps$.html#SrScEOpBBB[Op<:org.saddle.ops.ScalarOp,X](implicitcm:org.saddle.ST[X],implicitcmp:org.saddle.ORD[X],implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Boolean],Boolean,org.saddle.Vec[Boolean]]):BinOpSeries.this.SrScEOp[Op,X,Boolean,Boolean,Boolean]", "kind" : "implicit def"}, {"label" : "SrScEOpIIB", "tail" : "(cm: ST[X], cmp: ORD[X], opv: BinOp[Op, Vec[Int], Int, Vec[Boolean]]): SrScEOp[Op, X, Int, Int, Boolean]", "member" : "org.saddle.ops.BinOpSeries.SrScEOpIIB", "link" : "org\/saddle\/ops\/BinOps$.html#SrScEOpIIB[Op<:org.saddle.ops.ScalarOp,X](implicitcm:org.saddle.ST[X],implicitcmp:org.saddle.ORD[X],implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Int],Int,org.saddle.Vec[Boolean]]):BinOpSeries.this.SrScEOp[Op,X,Int,Int,Boolean]", "kind" : "implicit def"}, {"label" : "SrScEOpILB", "tail" : "(cm: ST[X], cmp: ORD[X], opv: BinOp[Op, Vec[Int], Long, Vec[Boolean]]): SrScEOp[Op, X, Int, Long, Boolean]", "member" : "org.saddle.ops.BinOpSeries.SrScEOpILB", "link" : "org\/saddle\/ops\/BinOps$.html#SrScEOpILB[Op<:org.saddle.ops.ScalarOp,X](implicitcm:org.saddle.ST[X],implicitcmp:org.saddle.ORD[X],implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Int],Long,org.saddle.Vec[Boolean]]):BinOpSeries.this.SrScEOp[Op,X,Int,Long,Boolean]", "kind" : "implicit def"}, {"label" : "SrScEOpIDB", "tail" : "(cm: ST[X], cmp: ORD[X], opv: BinOp[Op, Vec[Int], Double, Vec[Boolean]]): SrScEOp[Op, X, Int, Double, Boolean]", "member" : "org.saddle.ops.BinOpSeries.SrScEOpIDB", "link" : "org\/saddle\/ops\/BinOps$.html#SrScEOpIDB[Op<:org.saddle.ops.ScalarOp,X](implicitcm:org.saddle.ST[X],implicitcmp:org.saddle.ORD[X],implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Int],Double,org.saddle.Vec[Boolean]]):BinOpSeries.this.SrScEOp[Op,X,Int,Double,Boolean]", "kind" : "implicit def"}, {"label" : "SrScEOpLIB", "tail" : "(cm: ST[X], cmp: ORD[X], opv: BinOp[Op, Vec[Long], Int, Vec[Boolean]]): SrScEOp[Op, X, Long, Int, Boolean]", "member" : "org.saddle.ops.BinOpSeries.SrScEOpLIB", "link" : "org\/saddle\/ops\/BinOps$.html#SrScEOpLIB[Op<:org.saddle.ops.ScalarOp,X](implicitcm:org.saddle.ST[X],implicitcmp:org.saddle.ORD[X],implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Long],Int,org.saddle.Vec[Boolean]]):BinOpSeries.this.SrScEOp[Op,X,Long,Int,Boolean]", "kind" : "implicit def"}, {"label" : "SrScEOpLLB", "tail" : "(cm: ST[X], cmp: ORD[X], opv: BinOp[Op, Vec[Long], Long, Vec[Boolean]]): SrScEOp[Op, X, Long, Long, Boolean]", "member" : "org.saddle.ops.BinOpSeries.SrScEOpLLB", "link" : "org\/saddle\/ops\/BinOps$.html#SrScEOpLLB[Op<:org.saddle.ops.ScalarOp,X](implicitcm:org.saddle.ST[X],implicitcmp:org.saddle.ORD[X],implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Long],Long,org.saddle.Vec[Boolean]]):BinOpSeries.this.SrScEOp[Op,X,Long,Long,Boolean]", "kind" : "implicit def"}, {"label" : "SrScEOpLDB", "tail" : "(cm: ST[X], cmp: ORD[X], opv: BinOp[Op, Vec[Long], Double, Vec[Boolean]]): SrScEOp[Op, X, Long, Double, Boolean]", "member" : "org.saddle.ops.BinOpSeries.SrScEOpLDB", "link" : "org\/saddle\/ops\/BinOps$.html#SrScEOpLDB[Op<:org.saddle.ops.ScalarOp,X](implicitcm:org.saddle.ST[X],implicitcmp:org.saddle.ORD[X],implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Long],Double,org.saddle.Vec[Boolean]]):BinOpSeries.this.SrScEOp[Op,X,Long,Double,Boolean]", "kind" : "implicit def"}, {"label" : "SrScEOpDIB", "tail" : "(cm: ST[X], cmp: ORD[X], opv: BinOp[Op, Vec[Double], Int, Vec[Boolean]]): SrScEOp[Op, X, Double, Int, Boolean]", "member" : "org.saddle.ops.BinOpSeries.SrScEOpDIB", "link" : "org\/saddle\/ops\/BinOps$.html#SrScEOpDIB[Op<:org.saddle.ops.ScalarOp,X](implicitcm:org.saddle.ST[X],implicitcmp:org.saddle.ORD[X],implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Double],Int,org.saddle.Vec[Boolean]]):BinOpSeries.this.SrScEOp[Op,X,Double,Int,Boolean]", "kind" : "implicit def"}, {"label" : "SrScEOpDLB", "tail" : "(cm: ST[X], cmp: ORD[X], opv: BinOp[Op, Vec[Double], Long, Vec[Boolean]]): SrScEOp[Op, X, Double, Long, Boolean]", "member" : "org.saddle.ops.BinOpSeries.SrScEOpDLB", "link" : "org\/saddle\/ops\/BinOps$.html#SrScEOpDLB[Op<:org.saddle.ops.ScalarOp,X](implicitcm:org.saddle.ST[X],implicitcmp:org.saddle.ORD[X],implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Double],Long,org.saddle.Vec[Boolean]]):BinOpSeries.this.SrScEOp[Op,X,Double,Long,Boolean]", "kind" : "implicit def"}, {"label" : "SrScEOpDDB", "tail" : "(cm: ST[X], cmp: ORD[X], opv: BinOp[Op, Vec[Double], Double, Vec[Boolean]]): SrScEOp[Op, X, Double, Double, Boolean]", "member" : "org.saddle.ops.BinOpSeries.SrScEOpDDB", "link" : "org\/saddle\/ops\/BinOps$.html#SrScEOpDDB[Op<:org.saddle.ops.ScalarOp,X](implicitcm:org.saddle.ST[X],implicitcmp:org.saddle.ORD[X],implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Double],Double,org.saddle.Vec[Boolean]]):BinOpSeries.this.SrScEOp[Op,X,Double,Double,Boolean]", "kind" : "implicit def"}, {"label" : "SrScEOpIII", "tail" : "(cm: ST[X], cmp: ORD[X], opv: BinOp[Op, Vec[Int], Int, Vec[Int]]): SrScEOp[Op, X, Int, Int, Int]", "member" : "org.saddle.ops.BinOpSeries.SrScEOpIII", "link" : "org\/saddle\/ops\/BinOps$.html#SrScEOpIII[Op<:org.saddle.ops.ScalarOp,X](implicitcm:org.saddle.ST[X],implicitcmp:org.saddle.ORD[X],implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Int],Int,org.saddle.Vec[Int]]):BinOpSeries.this.SrScEOp[Op,X,Int,Int,Int]", "kind" : "implicit def"}, {"label" : "SrScEOpILL", "tail" : "(cm: ST[X], cmp: ORD[X], opv: BinOp[Op, Vec[Int], Long, Vec[Long]]): SrScEOp[Op, X, Int, Long, Long]", "member" : "org.saddle.ops.BinOpSeries.SrScEOpILL", "link" : "org\/saddle\/ops\/BinOps$.html#SrScEOpILL[Op<:org.saddle.ops.ScalarOp,X](implicitcm:org.saddle.ST[X],implicitcmp:org.saddle.ORD[X],implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Int],Long,org.saddle.Vec[Long]]):BinOpSeries.this.SrScEOp[Op,X,Int,Long,Long]", "kind" : "implicit def"}, {"label" : "SrScEOpIDD", "tail" : "(cm: ST[X], cmp: ORD[X], opv: BinOp[Op, Vec[Int], Double, Vec[Double]]): SrScEOp[Op, X, Int, Double, Double]", "member" : "org.saddle.ops.BinOpSeries.SrScEOpIDD", "link" : "org\/saddle\/ops\/BinOps$.html#SrScEOpIDD[Op<:org.saddle.ops.ScalarOp,X](implicitcm:org.saddle.ST[X],implicitcmp:org.saddle.ORD[X],implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Int],Double,org.saddle.Vec[Double]]):BinOpSeries.this.SrScEOp[Op,X,Int,Double,Double]", "kind" : "implicit def"}, {"label" : "SrScEOpLIL", "tail" : "(cm: ST[X], cmp: ORD[X], opv: BinOp[Op, Vec[Long], Int, Vec[Long]]): SrScEOp[Op, X, Long, Int, Long]", "member" : "org.saddle.ops.BinOpSeries.SrScEOpLIL", "link" : "org\/saddle\/ops\/BinOps$.html#SrScEOpLIL[Op<:org.saddle.ops.ScalarOp,X](implicitcm:org.saddle.ST[X],implicitcmp:org.saddle.ORD[X],implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Long],Int,org.saddle.Vec[Long]]):BinOpSeries.this.SrScEOp[Op,X,Long,Int,Long]", "kind" : "implicit def"}, {"label" : "SrScEOpLLL", "tail" : "(cm: ST[X], cmp: ORD[X], opv: BinOp[Op, Vec[Long], Long, Vec[Long]]): SrScEOp[Op, X, Long, Long, Long]", "member" : "org.saddle.ops.BinOpSeries.SrScEOpLLL", "link" : "org\/saddle\/ops\/BinOps$.html#SrScEOpLLL[Op<:org.saddle.ops.ScalarOp,X](implicitcm:org.saddle.ST[X],implicitcmp:org.saddle.ORD[X],implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Long],Long,org.saddle.Vec[Long]]):BinOpSeries.this.SrScEOp[Op,X,Long,Long,Long]", "kind" : "implicit def"}, {"label" : "SrScEOpLDD", "tail" : "(cm: ST[X], cmp: ORD[X], opv: BinOp[Op, Vec[Long], Double, Vec[Double]]): SrScEOp[Op, X, Long, Double, Double]", "member" : "org.saddle.ops.BinOpSeries.SrScEOpLDD", "link" : "org\/saddle\/ops\/BinOps$.html#SrScEOpLDD[Op<:org.saddle.ops.ScalarOp,X](implicitcm:org.saddle.ST[X],implicitcmp:org.saddle.ORD[X],implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Long],Double,org.saddle.Vec[Double]]):BinOpSeries.this.SrScEOp[Op,X,Long,Double,Double]", "kind" : "implicit def"}, {"label" : "SrScEOpDID", "tail" : "(cm: ST[X], cmp: ORD[X], opv: BinOp[Op, Vec[Double], Int, Vec[Double]]): SrScEOp[Op, X, Double, Int, Double]", "member" : "org.saddle.ops.BinOpSeries.SrScEOpDID", "link" : "org\/saddle\/ops\/BinOps$.html#SrScEOpDID[Op<:org.saddle.ops.ScalarOp,X](implicitcm:org.saddle.ST[X],implicitcmp:org.saddle.ORD[X],implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Double],Int,org.saddle.Vec[Double]]):BinOpSeries.this.SrScEOp[Op,X,Double,Int,Double]", "kind" : "implicit def"}, {"label" : "SrScEOpDLD", "tail" : "(cm: ST[X], cmp: ORD[X], opv: BinOp[Op, Vec[Double], Long, Vec[Double]]): SrScEOp[Op, X, Double, Long, Double]", "member" : "org.saddle.ops.BinOpSeries.SrScEOpDLD", "link" : "org\/saddle\/ops\/BinOps$.html#SrScEOpDLD[Op<:org.saddle.ops.ScalarOp,X](implicitcm:org.saddle.ST[X],implicitcmp:org.saddle.ORD[X],implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Double],Long,org.saddle.Vec[Double]]):BinOpSeries.this.SrScEOp[Op,X,Double,Long,Double]", "kind" : "implicit def"}, {"label" : "SrScEOpDDD", "tail" : "(cm: ST[X], cmp: ORD[X], opv: BinOp[Op, Vec[Double], Double, Vec[Double]]): SrScEOp[Op, X, Double, Double, Double]", "member" : "org.saddle.ops.BinOpSeries.SrScEOpDDD", "link" : "org\/saddle\/ops\/BinOps$.html#SrScEOpDDD[Op<:org.saddle.ops.ScalarOp,X](implicitcm:org.saddle.ST[X],implicitcmp:org.saddle.ORD[X],implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Double],Double,org.saddle.Vec[Double]]):BinOpSeries.this.SrScEOp[Op,X,Double,Double,Double]", "kind" : "implicit def"}, {"label" : "FrFrEOpBBB", "tail" : "(cm: ST[X], cmp: ORD[X], my: ST[Y], cmpY: ORD[Y], opv: BinOp[Op, Vec[Boolean], Vec[Boolean], Vec[Boolean]]): FrFrEOp[Op, X, Y, Boolean, Boolean, Boolean]", "member" : "org.saddle.ops.BinOpFrame.FrFrEOpBBB", "link" : "org\/saddle\/ops\/BinOps$.html#FrFrEOpBBB[Op<:org.saddle.ops.ScalarOp,X,Y](implicitcm:org.saddle.ST[X],implicitcmp:org.saddle.ORD[X],implicitmy:org.saddle.ST[Y],implicitcmpY:org.saddle.ORD[Y],implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Boolean],org.saddle.Vec[Boolean],org.saddle.Vec[Boolean]]):BinOpFrame.this.FrFrEOp[Op,X,Y,Boolean,Boolean,Boolean]", "kind" : "implicit def"}, {"label" : "FrFrEOpIIB", "tail" : "(cm: ST[X], cmp: ORD[X], my: ST[Y], cmpY: ORD[Y], opv: BinOp[Op, Vec[Int], Vec[Int], Vec[Boolean]]): FrFrEOp[Op, X, Y, Int, Int, Boolean]", "member" : "org.saddle.ops.BinOpFrame.FrFrEOpIIB", "link" : "org\/saddle\/ops\/BinOps$.html#FrFrEOpIIB[Op<:org.saddle.ops.ScalarOp,X,Y](implicitcm:org.saddle.ST[X],implicitcmp:org.saddle.ORD[X],implicitmy:org.saddle.ST[Y],implicitcmpY:org.saddle.ORD[Y],implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Int],org.saddle.Vec[Int],org.saddle.Vec[Boolean]]):BinOpFrame.this.FrFrEOp[Op,X,Y,Int,Int,Boolean]", "kind" : "implicit def"}, {"label" : "FrFrEOpILB", "tail" : "(cm: ST[X], cmp: ORD[X], my: ST[Y], cmpY: ORD[Y], opv: BinOp[Op, Vec[Int], Vec[Long], Vec[Boolean]]): FrFrEOp[Op, X, Y, Int, Long, Boolean]", "member" : "org.saddle.ops.BinOpFrame.FrFrEOpILB", "link" : "org\/saddle\/ops\/BinOps$.html#FrFrEOpILB[Op<:org.saddle.ops.ScalarOp,X,Y](implicitcm:org.saddle.ST[X],implicitcmp:org.saddle.ORD[X],implicitmy:org.saddle.ST[Y],implicitcmpY:org.saddle.ORD[Y],implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Int],org.saddle.Vec[Long],org.saddle.Vec[Boolean]]):BinOpFrame.this.FrFrEOp[Op,X,Y,Int,Long,Boolean]", "kind" : "implicit def"}, {"label" : "FrFrEOpIDB", "tail" : "(cm: ST[X], cmp: ORD[X], my: ST[Y], cmpY: ORD[Y], opv: BinOp[Op, Vec[Int], Vec[Double], Vec[Boolean]]): FrFrEOp[Op, X, Y, Int, Double, Boolean]", "member" : "org.saddle.ops.BinOpFrame.FrFrEOpIDB", "link" : "org\/saddle\/ops\/BinOps$.html#FrFrEOpIDB[Op<:org.saddle.ops.ScalarOp,X,Y](implicitcm:org.saddle.ST[X],implicitcmp:org.saddle.ORD[X],implicitmy:org.saddle.ST[Y],implicitcmpY:org.saddle.ORD[Y],implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Int],org.saddle.Vec[Double],org.saddle.Vec[Boolean]]):BinOpFrame.this.FrFrEOp[Op,X,Y,Int,Double,Boolean]", "kind" : "implicit def"}, {"label" : "FrFrEOpLIB", "tail" : "(cm: ST[X], cmp: ORD[X], my: ST[Y], cmpY: ORD[Y], opv: BinOp[Op, Vec[Long], Vec[Int], Vec[Boolean]]): FrFrEOp[Op, X, Y, Long, Int, Boolean]", "member" : "org.saddle.ops.BinOpFrame.FrFrEOpLIB", "link" : "org\/saddle\/ops\/BinOps$.html#FrFrEOpLIB[Op<:org.saddle.ops.ScalarOp,X,Y](implicitcm:org.saddle.ST[X],implicitcmp:org.saddle.ORD[X],implicitmy:org.saddle.ST[Y],implicitcmpY:org.saddle.ORD[Y],implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Long],org.saddle.Vec[Int],org.saddle.Vec[Boolean]]):BinOpFrame.this.FrFrEOp[Op,X,Y,Long,Int,Boolean]", "kind" : "implicit def"}, {"label" : "FrFrEOpLLB", "tail" : "(cm: ST[X], cmp: ORD[X], my: ST[Y], cmpY: ORD[Y], opv: BinOp[Op, Vec[Long], Vec[Long], Vec[Boolean]]): FrFrEOp[Op, X, Y, Long, Long, Boolean]", "member" : "org.saddle.ops.BinOpFrame.FrFrEOpLLB", "link" : "org\/saddle\/ops\/BinOps$.html#FrFrEOpLLB[Op<:org.saddle.ops.ScalarOp,X,Y](implicitcm:org.saddle.ST[X],implicitcmp:org.saddle.ORD[X],implicitmy:org.saddle.ST[Y],implicitcmpY:org.saddle.ORD[Y],implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Long],org.saddle.Vec[Long],org.saddle.Vec[Boolean]]):BinOpFrame.this.FrFrEOp[Op,X,Y,Long,Long,Boolean]", "kind" : "implicit def"}, {"label" : "FrFrEOpLDB", "tail" : "(cm: ST[X], cmp: ORD[X], my: ST[Y], cmpY: ORD[Y], opv: BinOp[Op, Vec[Long], Vec[Double], Vec[Boolean]]): FrFrEOp[Op, X, Y, Long, Double, Boolean]", "member" : "org.saddle.ops.BinOpFrame.FrFrEOpLDB", "link" : "org\/saddle\/ops\/BinOps$.html#FrFrEOpLDB[Op<:org.saddle.ops.ScalarOp,X,Y](implicitcm:org.saddle.ST[X],implicitcmp:org.saddle.ORD[X],implicitmy:org.saddle.ST[Y],implicitcmpY:org.saddle.ORD[Y],implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Long],org.saddle.Vec[Double],org.saddle.Vec[Boolean]]):BinOpFrame.this.FrFrEOp[Op,X,Y,Long,Double,Boolean]", "kind" : "implicit def"}, {"label" : "FrFrEOpDIB", "tail" : "(cm: ST[X], cmp: ORD[X], my: ST[Y], cmpY: ORD[Y], opv: BinOp[Op, Vec[Double], Vec[Int], Vec[Boolean]]): FrFrEOp[Op, X, Y, Double, Int, Boolean]", "member" : "org.saddle.ops.BinOpFrame.FrFrEOpDIB", "link" : "org\/saddle\/ops\/BinOps$.html#FrFrEOpDIB[Op<:org.saddle.ops.ScalarOp,X,Y](implicitcm:org.saddle.ST[X],implicitcmp:org.saddle.ORD[X],implicitmy:org.saddle.ST[Y],implicitcmpY:org.saddle.ORD[Y],implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Double],org.saddle.Vec[Int],org.saddle.Vec[Boolean]]):BinOpFrame.this.FrFrEOp[Op,X,Y,Double,Int,Boolean]", "kind" : "implicit def"}, {"label" : "FrFrEOpDLB", "tail" : "(cm: ST[X], cmp: ORD[X], my: ST[Y], cmpY: ORD[Y], opv: BinOp[Op, Vec[Double], Vec[Long], Vec[Boolean]]): FrFrEOp[Op, X, Y, Double, Long, Boolean]", "member" : "org.saddle.ops.BinOpFrame.FrFrEOpDLB", "link" : "org\/saddle\/ops\/BinOps$.html#FrFrEOpDLB[Op<:org.saddle.ops.ScalarOp,X,Y](implicitcm:org.saddle.ST[X],implicitcmp:org.saddle.ORD[X],implicitmy:org.saddle.ST[Y],implicitcmpY:org.saddle.ORD[Y],implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Double],org.saddle.Vec[Long],org.saddle.Vec[Boolean]]):BinOpFrame.this.FrFrEOp[Op,X,Y,Double,Long,Boolean]", "kind" : "implicit def"}, {"label" : "FrFrEOpDDB", "tail" : "(cm: ST[X], cmp: ORD[X], my: ST[Y], cmpY: ORD[Y], opv: BinOp[Op, Vec[Double], Vec[Double], Vec[Boolean]]): FrFrEOp[Op, X, Y, Double, Double, Boolean]", "member" : "org.saddle.ops.BinOpFrame.FrFrEOpDDB", "link" : "org\/saddle\/ops\/BinOps$.html#FrFrEOpDDB[Op<:org.saddle.ops.ScalarOp,X,Y](implicitcm:org.saddle.ST[X],implicitcmp:org.saddle.ORD[X],implicitmy:org.saddle.ST[Y],implicitcmpY:org.saddle.ORD[Y],implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Double],org.saddle.Vec[Double],org.saddle.Vec[Boolean]]):BinOpFrame.this.FrFrEOp[Op,X,Y,Double,Double,Boolean]", "kind" : "implicit def"}, {"label" : "FrFrEOpIII", "tail" : "(cm: ST[X], cmp: ORD[X], my: ST[Y], cmpY: ORD[Y], opv: BinOp[Op, Vec[Int], Vec[Int], Vec[Int]]): FrFrEOp[Op, X, Y, Int, Int, Int]", "member" : "org.saddle.ops.BinOpFrame.FrFrEOpIII", "link" : "org\/saddle\/ops\/BinOps$.html#FrFrEOpIII[Op<:org.saddle.ops.ScalarOp,X,Y](implicitcm:org.saddle.ST[X],implicitcmp:org.saddle.ORD[X],implicitmy:org.saddle.ST[Y],implicitcmpY:org.saddle.ORD[Y],implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Int],org.saddle.Vec[Int],org.saddle.Vec[Int]]):BinOpFrame.this.FrFrEOp[Op,X,Y,Int,Int,Int]", "kind" : "implicit def"}, {"label" : "FrFrEOpILL", "tail" : "(cm: ST[X], cmp: ORD[X], my: ST[Y], cmpY: ORD[Y], opv: BinOp[Op, Vec[Int], Vec[Long], Vec[Long]]): FrFrEOp[Op, X, Y, Int, Long, Long]", "member" : "org.saddle.ops.BinOpFrame.FrFrEOpILL", "link" : "org\/saddle\/ops\/BinOps$.html#FrFrEOpILL[Op<:org.saddle.ops.ScalarOp,X,Y](implicitcm:org.saddle.ST[X],implicitcmp:org.saddle.ORD[X],implicitmy:org.saddle.ST[Y],implicitcmpY:org.saddle.ORD[Y],implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Int],org.saddle.Vec[Long],org.saddle.Vec[Long]]):BinOpFrame.this.FrFrEOp[Op,X,Y,Int,Long,Long]", "kind" : "implicit def"}, {"label" : "FrFrEOpIDD", "tail" : "(cm: ST[X], cmp: ORD[X], my: ST[Y], cmpY: ORD[Y], opv: BinOp[Op, Vec[Int], Vec[Double], Vec[Double]]): FrFrEOp[Op, X, Y, Int, Double, Double]", "member" : "org.saddle.ops.BinOpFrame.FrFrEOpIDD", "link" : "org\/saddle\/ops\/BinOps$.html#FrFrEOpIDD[Op<:org.saddle.ops.ScalarOp,X,Y](implicitcm:org.saddle.ST[X],implicitcmp:org.saddle.ORD[X],implicitmy:org.saddle.ST[Y],implicitcmpY:org.saddle.ORD[Y],implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Int],org.saddle.Vec[Double],org.saddle.Vec[Double]]):BinOpFrame.this.FrFrEOp[Op,X,Y,Int,Double,Double]", "kind" : "implicit def"}, {"label" : "FrFrEOpLIL", "tail" : "(cm: ST[X], cmp: ORD[X], my: ST[Y], cmpY: ORD[Y], opv: BinOp[Op, Vec[Long], Vec[Int], Vec[Long]]): FrFrEOp[Op, X, Y, Long, Int, Long]", "member" : "org.saddle.ops.BinOpFrame.FrFrEOpLIL", "link" : "org\/saddle\/ops\/BinOps$.html#FrFrEOpLIL[Op<:org.saddle.ops.ScalarOp,X,Y](implicitcm:org.saddle.ST[X],implicitcmp:org.saddle.ORD[X],implicitmy:org.saddle.ST[Y],implicitcmpY:org.saddle.ORD[Y],implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Long],org.saddle.Vec[Int],org.saddle.Vec[Long]]):BinOpFrame.this.FrFrEOp[Op,X,Y,Long,Int,Long]", "kind" : "implicit def"}, {"label" : "FrFrEOpLLL", "tail" : "(cm: ST[X], cmp: ORD[X], my: ST[Y], cmpY: ORD[Y], opv: BinOp[Op, Vec[Long], Vec[Long], Vec[Long]]): FrFrEOp[Op, X, Y, Long, Long, Long]", "member" : "org.saddle.ops.BinOpFrame.FrFrEOpLLL", "link" : "org\/saddle\/ops\/BinOps$.html#FrFrEOpLLL[Op<:org.saddle.ops.ScalarOp,X,Y](implicitcm:org.saddle.ST[X],implicitcmp:org.saddle.ORD[X],implicitmy:org.saddle.ST[Y],implicitcmpY:org.saddle.ORD[Y],implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Long],org.saddle.Vec[Long],org.saddle.Vec[Long]]):BinOpFrame.this.FrFrEOp[Op,X,Y,Long,Long,Long]", "kind" : "implicit def"}, {"label" : "FrFrEOpLDD", "tail" : "(cm: ST[X], cmp: ORD[X], my: ST[Y], cmpY: ORD[Y], opv: BinOp[Op, Vec[Long], Vec[Double], Vec[Double]]): FrFrEOp[Op, X, Y, Long, Double, Double]", "member" : "org.saddle.ops.BinOpFrame.FrFrEOpLDD", "link" : "org\/saddle\/ops\/BinOps$.html#FrFrEOpLDD[Op<:org.saddle.ops.ScalarOp,X,Y](implicitcm:org.saddle.ST[X],implicitcmp:org.saddle.ORD[X],implicitmy:org.saddle.ST[Y],implicitcmpY:org.saddle.ORD[Y],implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Long],org.saddle.Vec[Double],org.saddle.Vec[Double]]):BinOpFrame.this.FrFrEOp[Op,X,Y,Long,Double,Double]", "kind" : "implicit def"}, {"label" : "FrFrEOpDLD", "tail" : "(cm: ST[X], cmp: ORD[X], my: ST[Y], cmpY: ORD[Y], opv: BinOp[Op, Vec[Double], Vec[Long], Vec[Double]]): FrFrEOp[Op, X, Y, Double, Long, Double]", "member" : "org.saddle.ops.BinOpFrame.FrFrEOpDLD", "link" : "org\/saddle\/ops\/BinOps$.html#FrFrEOpDLD[Op<:org.saddle.ops.ScalarOp,X,Y](implicitcm:org.saddle.ST[X],implicitcmp:org.saddle.ORD[X],implicitmy:org.saddle.ST[Y],implicitcmpY:org.saddle.ORD[Y],implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Double],org.saddle.Vec[Long],org.saddle.Vec[Double]]):BinOpFrame.this.FrFrEOp[Op,X,Y,Double,Long,Double]", "kind" : "implicit def"}, {"label" : "FrFrEOpDID", "tail" : "(cm: ST[X], cmp: ORD[X], my: ST[Y], cmpY: ORD[Y], opv: BinOp[Op, Vec[Double], Vec[Int], Vec[Double]]): FrFrEOp[Op, X, Y, Double, Int, Double]", "member" : "org.saddle.ops.BinOpFrame.FrFrEOpDID", "link" : "org\/saddle\/ops\/BinOps$.html#FrFrEOpDID[Op<:org.saddle.ops.ScalarOp,X,Y](implicitcm:org.saddle.ST[X],implicitcmp:org.saddle.ORD[X],implicitmy:org.saddle.ST[Y],implicitcmpY:org.saddle.ORD[Y],implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Double],org.saddle.Vec[Int],org.saddle.Vec[Double]]):BinOpFrame.this.FrFrEOp[Op,X,Y,Double,Int,Double]", "kind" : "implicit def"}, {"label" : "FrFrEOpDDD", "tail" : "(cm: ST[X], cmp: ORD[X], my: ST[Y], cmpY: ORD[Y], opv: BinOp[Op, Vec[Double], Vec[Double], Vec[Double]]): FrFrEOp[Op, X, Y, Double, Double, Double]", "member" : "org.saddle.ops.BinOpFrame.FrFrEOpDDD", "link" : "org\/saddle\/ops\/BinOps$.html#FrFrEOpDDD[Op<:org.saddle.ops.ScalarOp,X,Y](implicitcm:org.saddle.ST[X],implicitcmp:org.saddle.ORD[X],implicitmy:org.saddle.ST[Y],implicitcmpY:org.saddle.ORD[Y],implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Double],org.saddle.Vec[Double],org.saddle.Vec[Double]]):BinOpFrame.this.FrFrEOp[Op,X,Y,Double,Double,Double]", "kind" : "implicit def"}, {"label" : "FrScEOpBBB", "tail" : "(opv: BinOp[Op, Vec[Boolean], Boolean, Vec[Boolean]]): FrScEOp[Op, X, Y, Boolean, Boolean, Boolean]", "member" : "org.saddle.ops.BinOpFrame.FrScEOpBBB", "link" : "org\/saddle\/ops\/BinOps$.html#FrScEOpBBB[Op<:org.saddle.ops.ScalarOp,X,Y](implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Boolean],Boolean,org.saddle.Vec[Boolean]]):BinOpFrame.this.FrScEOp[Op,X,Y,Boolean,Boolean,Boolean]", "kind" : "implicit def"}, {"label" : "FrScEOpIIB", "tail" : "(opv: BinOp[Op, Vec[Int], Int, Vec[Boolean]]): FrScEOp[Op, X, Y, Int, Int, Boolean]", "member" : "org.saddle.ops.BinOpFrame.FrScEOpIIB", "link" : "org\/saddle\/ops\/BinOps$.html#FrScEOpIIB[Op<:org.saddle.ops.ScalarOp,X,Y](implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Int],Int,org.saddle.Vec[Boolean]]):BinOpFrame.this.FrScEOp[Op,X,Y,Int,Int,Boolean]", "kind" : "implicit def"}, {"label" : "FrScEOpILB", "tail" : "(opv: BinOp[Op, Vec[Int], Long, Vec[Boolean]]): FrScEOp[Op, X, Y, Int, Long, Boolean]", "member" : "org.saddle.ops.BinOpFrame.FrScEOpILB", "link" : "org\/saddle\/ops\/BinOps$.html#FrScEOpILB[Op<:org.saddle.ops.ScalarOp,X,Y](implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Int],Long,org.saddle.Vec[Boolean]]):BinOpFrame.this.FrScEOp[Op,X,Y,Int,Long,Boolean]", "kind" : "implicit def"}, {"label" : "FrScEOpIDB", "tail" : "(opv: BinOp[Op, Vec[Int], Double, Vec[Boolean]]): FrScEOp[Op, X, Y, Int, Double, Boolean]", "member" : "org.saddle.ops.BinOpFrame.FrScEOpIDB", "link" : "org\/saddle\/ops\/BinOps$.html#FrScEOpIDB[Op<:org.saddle.ops.ScalarOp,X,Y](implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Int],Double,org.saddle.Vec[Boolean]]):BinOpFrame.this.FrScEOp[Op,X,Y,Int,Double,Boolean]", "kind" : "implicit def"}, {"label" : "FrScEOpLIB", "tail" : "(opv: BinOp[Op, Vec[Long], Int, Vec[Boolean]]): FrScEOp[Op, X, Y, Long, Int, Boolean]", "member" : "org.saddle.ops.BinOpFrame.FrScEOpLIB", "link" : "org\/saddle\/ops\/BinOps$.html#FrScEOpLIB[Op<:org.saddle.ops.ScalarOp,X,Y](implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Long],Int,org.saddle.Vec[Boolean]]):BinOpFrame.this.FrScEOp[Op,X,Y,Long,Int,Boolean]", "kind" : "implicit def"}, {"label" : "FrScEOpLLB", "tail" : "(opv: BinOp[Op, Vec[Long], Long, Vec[Boolean]]): FrScEOp[Op, X, Y, Long, Long, Boolean]", "member" : "org.saddle.ops.BinOpFrame.FrScEOpLLB", "link" : "org\/saddle\/ops\/BinOps$.html#FrScEOpLLB[Op<:org.saddle.ops.ScalarOp,X,Y](implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Long],Long,org.saddle.Vec[Boolean]]):BinOpFrame.this.FrScEOp[Op,X,Y,Long,Long,Boolean]", "kind" : "implicit def"}, {"label" : "FrScEOpLDB", "tail" : "(opv: BinOp[Op, Vec[Long], Double, Vec[Boolean]]): FrScEOp[Op, X, Y, Long, Double, Boolean]", "member" : "org.saddle.ops.BinOpFrame.FrScEOpLDB", "link" : "org\/saddle\/ops\/BinOps$.html#FrScEOpLDB[Op<:org.saddle.ops.ScalarOp,X,Y](implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Long],Double,org.saddle.Vec[Boolean]]):BinOpFrame.this.FrScEOp[Op,X,Y,Long,Double,Boolean]", "kind" : "implicit def"}, {"label" : "FrScEOpDIB", "tail" : "(opv: BinOp[Op, Vec[Double], Int, Vec[Boolean]]): FrScEOp[Op, X, Y, Double, Int, Boolean]", "member" : "org.saddle.ops.BinOpFrame.FrScEOpDIB", "link" : "org\/saddle\/ops\/BinOps$.html#FrScEOpDIB[Op<:org.saddle.ops.ScalarOp,X,Y](implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Double],Int,org.saddle.Vec[Boolean]]):BinOpFrame.this.FrScEOp[Op,X,Y,Double,Int,Boolean]", "kind" : "implicit def"}, {"label" : "FrScEOpDLB", "tail" : "(opv: BinOp[Op, Vec[Double], Long, Vec[Boolean]]): FrScEOp[Op, X, Y, Double, Long, Boolean]", "member" : "org.saddle.ops.BinOpFrame.FrScEOpDLB", "link" : "org\/saddle\/ops\/BinOps$.html#FrScEOpDLB[Op<:org.saddle.ops.ScalarOp,X,Y](implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Double],Long,org.saddle.Vec[Boolean]]):BinOpFrame.this.FrScEOp[Op,X,Y,Double,Long,Boolean]", "kind" : "implicit def"}, {"label" : "FrScEOpDDB", "tail" : "(opv: BinOp[Op, Vec[Double], Double, Vec[Boolean]]): FrScEOp[Op, X, Y, Double, Double, Boolean]", "member" : "org.saddle.ops.BinOpFrame.FrScEOpDDB", "link" : "org\/saddle\/ops\/BinOps$.html#FrScEOpDDB[Op<:org.saddle.ops.ScalarOp,X,Y](implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Double],Double,org.saddle.Vec[Boolean]]):BinOpFrame.this.FrScEOp[Op,X,Y,Double,Double,Boolean]", "kind" : "implicit def"}, {"label" : "FrScEOpIII", "tail" : "(opv: BinOp[Op, Vec[Int], Int, Vec[Int]]): FrScEOp[Op, X, Y, Int, Int, Int]", "member" : "org.saddle.ops.BinOpFrame.FrScEOpIII", "link" : "org\/saddle\/ops\/BinOps$.html#FrScEOpIII[Op<:org.saddle.ops.ScalarOp,X,Y](implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Int],Int,org.saddle.Vec[Int]]):BinOpFrame.this.FrScEOp[Op,X,Y,Int,Int,Int]", "kind" : "implicit def"}, {"label" : "FrScEOpILL", "tail" : "(opv: BinOp[Op, Vec[Int], Long, Vec[Long]]): FrScEOp[Op, X, Y, Int, Long, Long]", "member" : "org.saddle.ops.BinOpFrame.FrScEOpILL", "link" : "org\/saddle\/ops\/BinOps$.html#FrScEOpILL[Op<:org.saddle.ops.ScalarOp,X,Y](implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Int],Long,org.saddle.Vec[Long]]):BinOpFrame.this.FrScEOp[Op,X,Y,Int,Long,Long]", "kind" : "implicit def"}, {"label" : "FrScEOpIDD", "tail" : "(opv: BinOp[Op, Vec[Int], Double, Vec[Double]]): FrScEOp[Op, X, Y, Int, Double, Double]", "member" : "org.saddle.ops.BinOpFrame.FrScEOpIDD", "link" : "org\/saddle\/ops\/BinOps$.html#FrScEOpIDD[Op<:org.saddle.ops.ScalarOp,X,Y](implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Int],Double,org.saddle.Vec[Double]]):BinOpFrame.this.FrScEOp[Op,X,Y,Int,Double,Double]", "kind" : "implicit def"}, {"label" : "FrScEOpLIL", "tail" : "(opv: BinOp[Op, Vec[Long], Int, Vec[Long]]): FrScEOp[Op, X, Y, Long, Int, Long]", "member" : "org.saddle.ops.BinOpFrame.FrScEOpLIL", "link" : "org\/saddle\/ops\/BinOps$.html#FrScEOpLIL[Op<:org.saddle.ops.ScalarOp,X,Y](implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Long],Int,org.saddle.Vec[Long]]):BinOpFrame.this.FrScEOp[Op,X,Y,Long,Int,Long]", "kind" : "implicit def"}, {"label" : "FrScEOpLLL", "tail" : "(opv: BinOp[Op, Vec[Long], Long, Vec[Long]]): FrScEOp[Op, X, Y, Long, Long, Long]", "member" : "org.saddle.ops.BinOpFrame.FrScEOpLLL", "link" : "org\/saddle\/ops\/BinOps$.html#FrScEOpLLL[Op<:org.saddle.ops.ScalarOp,X,Y](implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Long],Long,org.saddle.Vec[Long]]):BinOpFrame.this.FrScEOp[Op,X,Y,Long,Long,Long]", "kind" : "implicit def"}, {"label" : "FrScEOpLDD", "tail" : "(opv: BinOp[Op, Vec[Long], Double, Vec[Double]]): FrScEOp[Op, X, Y, Long, Double, Double]", "member" : "org.saddle.ops.BinOpFrame.FrScEOpLDD", "link" : "org\/saddle\/ops\/BinOps$.html#FrScEOpLDD[Op<:org.saddle.ops.ScalarOp,X,Y](implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Long],Double,org.saddle.Vec[Double]]):BinOpFrame.this.FrScEOp[Op,X,Y,Long,Double,Double]", "kind" : "implicit def"}, {"label" : "FrScEOpDID", "tail" : "(opv: BinOp[Op, Vec[Double], Int, Vec[Double]]): FrScEOp[Op, X, Y, Double, Int, Double]", "member" : "org.saddle.ops.BinOpFrame.FrScEOpDID", "link" : "org\/saddle\/ops\/BinOps$.html#FrScEOpDID[Op<:org.saddle.ops.ScalarOp,X,Y](implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Double],Int,org.saddle.Vec[Double]]):BinOpFrame.this.FrScEOp[Op,X,Y,Double,Int,Double]", "kind" : "implicit def"}, {"label" : "FrScEOpDLD", "tail" : "(opv: BinOp[Op, Vec[Double], Long, Vec[Double]]): FrScEOp[Op, X, Y, Double, Long, Double]", "member" : "org.saddle.ops.BinOpFrame.FrScEOpDLD", "link" : "org\/saddle\/ops\/BinOps$.html#FrScEOpDLD[Op<:org.saddle.ops.ScalarOp,X,Y](implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Double],Long,org.saddle.Vec[Double]]):BinOpFrame.this.FrScEOp[Op,X,Y,Double,Long,Double]", "kind" : "implicit def"}, {"label" : "FrScEOpDDD", "tail" : "(opv: BinOp[Op, Vec[Double], Double, Vec[Double]]): FrScEOp[Op, X, Y, Double, Double, Double]", "member" : "org.saddle.ops.BinOpFrame.FrScEOpDDD", "link" : "org\/saddle\/ops\/BinOps$.html#FrScEOpDDD[Op<:org.saddle.ops.ScalarOp,X,Y](implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Double],Double,org.saddle.Vec[Double]]):BinOpFrame.this.FrScEOp[Op,X,Y,Double,Double,Double]", "kind" : "implicit def"}, {"label" : "VecVecElemOpBBBIp", "tail" : "(op: BinOp[Op, Boolean, Boolean, Boolean]): VecVecElemOpIp[Op, Boolean, Boolean]", "member" : "org.saddle.ops.BinOpVecInPlace.VecVecElemOpBBBIp", "link" : "org\/saddle\/ops\/BinOps$.html#VecVecElemOpBBBIp[Op<:org.saddle.ops.ScalarOp](implicitop:org.saddle.ops.BinOp[Op,Boolean,Boolean,Boolean]):BinOpVecInPlace.this.VecVecElemOpIp[Op,Boolean,Boolean]", "kind" : "implicit def"}, {"label" : "VecVelElemOpIIIIp", "tail" : "(op: BinOp[Op, Int, Int, Int]): VecVecElemOpIp[Op, Int, Int]", "member" : "org.saddle.ops.BinOpVecInPlace.VecVelElemOpIIIIp", "link" : "org\/saddle\/ops\/BinOps$.html#VecVelElemOpIIIIp[Op<:org.saddle.ops.ScalarOp](implicitop:org.saddle.ops.BinOp[Op,Int,Int,Int]):BinOpVecInPlace.this.VecVecElemOpIp[Op,Int,Int]", "kind" : "implicit def"}, {"label" : "VecVelElemOpLILIp", "tail" : "(op: BinOp[Op, Long, Int, Long]): VecVecElemOpIp[Op, Long, Int]", "member" : "org.saddle.ops.BinOpVecInPlace.VecVelElemOpLILIp", "link" : "org\/saddle\/ops\/BinOps$.html#VecVelElemOpLILIp[Op<:org.saddle.ops.ScalarOp](implicitop:org.saddle.ops.BinOp[Op,Long,Int,Long]):BinOpVecInPlace.this.VecVecElemOpIp[Op,Long,Int]", "kind" : "implicit def"}, {"label" : "VecVelElemOpLLLIp", "tail" : "(op: BinOp[Op, Long, Long, Long]): VecVecElemOpIp[Op, Long, Long]", "member" : "org.saddle.ops.BinOpVecInPlace.VecVelElemOpLLLIp", "link" : "org\/saddle\/ops\/BinOps$.html#VecVelElemOpLLLIp[Op<:org.saddle.ops.ScalarOp](implicitop:org.saddle.ops.BinOp[Op,Long,Long,Long]):BinOpVecInPlace.this.VecVecElemOpIp[Op,Long,Long]", "kind" : "implicit def"}, {"label" : "VecVelElemOpDIDIp", "tail" : "(op: BinOp[Op, Double, Int, Double]): VecVecElemOpIp[Op, Double, Int]", "member" : "org.saddle.ops.BinOpVecInPlace.VecVelElemOpDIDIp", "link" : "org\/saddle\/ops\/BinOps$.html#VecVelElemOpDIDIp[Op<:org.saddle.ops.ScalarOp](implicitop:org.saddle.ops.BinOp[Op,Double,Int,Double]):BinOpVecInPlace.this.VecVecElemOpIp[Op,Double,Int]", "kind" : "implicit def"}, {"label" : "VecVelElemOpDLDIp", "tail" : "(op: BinOp[Op, Double, Long, Double]): VecVecElemOpIp[Op, Double, Long]", "member" : "org.saddle.ops.BinOpVecInPlace.VecVelElemOpDLDIp", "link" : "org\/saddle\/ops\/BinOps$.html#VecVelElemOpDLDIp[Op<:org.saddle.ops.ScalarOp](implicitop:org.saddle.ops.BinOp[Op,Double,Long,Double]):BinOpVecInPlace.this.VecVecElemOpIp[Op,Double,Long]", "kind" : "implicit def"}, {"label" : "VecVelElemOpDDDIp", "tail" : "(op: BinOp[Op, Double, Double, Double]): VecVecElemOpIp[Op, Double, Double]", "member" : "org.saddle.ops.BinOpVecInPlace.VecVelElemOpDDDIp", "link" : "org\/saddle\/ops\/BinOps$.html#VecVelElemOpDDDIp[Op<:org.saddle.ops.ScalarOp](implicitop:org.saddle.ops.BinOp[Op,Double,Double,Double]):BinOpVecInPlace.this.VecVecElemOpIp[Op,Double,Double]", "kind" : "implicit def"}, {"label" : "VecSclrElmOpBBBIp", "tail" : "(op: BinOp[Op, Boolean, Boolean, Boolean]): VecSclrElemOpIp[Op, Boolean, Boolean]", "member" : "org.saddle.ops.BinOpVecInPlace.VecSclrElmOpBBBIp", "link" : "org\/saddle\/ops\/BinOps$.html#VecSclrElmOpBBBIp[Op<:org.saddle.ops.ScalarOp](implicitop:org.saddle.ops.BinOp[Op,Boolean,Boolean,Boolean]):BinOpVecInPlace.this.VecSclrElemOpIp[Op,Boolean,Boolean]", "kind" : "implicit def"}, {"label" : "VecSclrElmOpIIIIp", "tail" : "(op: BinOp[Op, Int, Int, Int]): VecSclrElemOpIp[Op, Int, Int]", "member" : "org.saddle.ops.BinOpVecInPlace.VecSclrElmOpIIIIp", "link" : "org\/saddle\/ops\/BinOps$.html#VecSclrElmOpIIIIp[Op<:org.saddle.ops.ScalarOp](implicitop:org.saddle.ops.BinOp[Op,Int,Int,Int]):BinOpVecInPlace.this.VecSclrElemOpIp[Op,Int,Int]", "kind" : "implicit def"}, {"label" : "VecSclrElmOpLILIp", "tail" : "(op: BinOp[Op, Long, Int, Long]): VecSclrElemOpIp[Op, Long, Int]", "member" : "org.saddle.ops.BinOpVecInPlace.VecSclrElmOpLILIp", "link" : "org\/saddle\/ops\/BinOps$.html#VecSclrElmOpLILIp[Op<:org.saddle.ops.ScalarOp](implicitop:org.saddle.ops.BinOp[Op,Long,Int,Long]):BinOpVecInPlace.this.VecSclrElemOpIp[Op,Long,Int]", "kind" : "implicit def"}, {"label" : "VecSclrElmOpLLLIp", "tail" : "(op: BinOp[Op, Long, Long, Long]): VecSclrElemOpIp[Op, Long, Long]", "member" : "org.saddle.ops.BinOpVecInPlace.VecSclrElmOpLLLIp", "link" : "org\/saddle\/ops\/BinOps$.html#VecSclrElmOpLLLIp[Op<:org.saddle.ops.ScalarOp](implicitop:org.saddle.ops.BinOp[Op,Long,Long,Long]):BinOpVecInPlace.this.VecSclrElemOpIp[Op,Long,Long]", "kind" : "implicit def"}, {"label" : "VecSclrElmOpDIDIp", "tail" : "(op: BinOp[Op, Double, Int, Double]): VecSclrElemOpIp[Op, Double, Int]", "member" : "org.saddle.ops.BinOpVecInPlace.VecSclrElmOpDIDIp", "link" : "org\/saddle\/ops\/BinOps$.html#VecSclrElmOpDIDIp[Op<:org.saddle.ops.ScalarOp](implicitop:org.saddle.ops.BinOp[Op,Double,Int,Double]):BinOpVecInPlace.this.VecSclrElemOpIp[Op,Double,Int]", "kind" : "implicit def"}, {"label" : "VecSclrElmOpDLDIp", "tail" : "(op: BinOp[Op, Double, Long, Double]): VecSclrElemOpIp[Op, Double, Long]", "member" : "org.saddle.ops.BinOpVecInPlace.VecSclrElmOpDLDIp", "link" : "org\/saddle\/ops\/BinOps$.html#VecSclrElmOpDLDIp[Op<:org.saddle.ops.ScalarOp](implicitop:org.saddle.ops.BinOp[Op,Double,Long,Double]):BinOpVecInPlace.this.VecSclrElemOpIp[Op,Double,Long]", "kind" : "implicit def"}, {"label" : "VecSclrElmOpDDDIp", "tail" : "(op: BinOp[Op, Double, Double, Double]): VecSclrElemOpIp[Op, Double, Double]", "member" : "org.saddle.ops.BinOpVecInPlace.VecSclrElmOpDDDIp", "link" : "org\/saddle\/ops\/BinOps$.html#VecSclrElmOpDDDIp[Op<:org.saddle.ops.ScalarOp](implicitop:org.saddle.ops.BinOp[Op,Double,Double,Double]):BinOpVecInPlace.this.VecSclrElemOpIp[Op,Double,Double]", "kind" : "implicit def"}, {"label" : "VecVecOuterOpIII", "tail" : "(opM: BinOp[Multiply, Int, Int, Int]): VecVecOuter[Int, Int, Int]", "member" : "org.saddle.ops.BinOpVec.VecVecOuterOpIII", "link" : "org\/saddle\/ops\/BinOps$.html#VecVecOuterOpIII(implicitopM:org.saddle.ops.BinOp[org.saddle.ops.Multiply,Int,Int,Int]):BinOpVec.this.VecVecOuter[Int,Int,Int]", "kind" : "implicit def"}, {"label" : "VecVecOuterOpILL", "tail" : "(opM: BinOp[Multiply, Int, Long, Long]): VecVecOuter[Int, Long, Long]", "member" : "org.saddle.ops.BinOpVec.VecVecOuterOpILL", "link" : "org\/saddle\/ops\/BinOps$.html#VecVecOuterOpILL(implicitopM:org.saddle.ops.BinOp[org.saddle.ops.Multiply,Int,Long,Long]):BinOpVec.this.VecVecOuter[Int,Long,Long]", "kind" : "implicit def"}, {"label" : "VecVecOuterOpIDD", "tail" : "(opM: BinOp[Multiply, Int, Double, Double]): VecVecOuter[Int, Double, Double]", "member" : "org.saddle.ops.BinOpVec.VecVecOuterOpIDD", "link" : "org\/saddle\/ops\/BinOps$.html#VecVecOuterOpIDD(implicitopM:org.saddle.ops.BinOp[org.saddle.ops.Multiply,Int,Double,Double]):BinOpVec.this.VecVecOuter[Int,Double,Double]", "kind" : "implicit def"}, {"label" : "VecVecOuterOpLIL", "tail" : "(opM: BinOp[Multiply, Long, Int, Long]): VecVecOuter[Long, Int, Long]", "member" : "org.saddle.ops.BinOpVec.VecVecOuterOpLIL", "link" : "org\/saddle\/ops\/BinOps$.html#VecVecOuterOpLIL(implicitopM:org.saddle.ops.BinOp[org.saddle.ops.Multiply,Long,Int,Long]):BinOpVec.this.VecVecOuter[Long,Int,Long]", "kind" : "implicit def"}, {"label" : "VecVecOuterOpLLL", "tail" : "(opM: BinOp[Multiply, Long, Long, Long]): VecVecOuter[Long, Long, Long]", "member" : "org.saddle.ops.BinOpVec.VecVecOuterOpLLL", "link" : "org\/saddle\/ops\/BinOps$.html#VecVecOuterOpLLL(implicitopM:org.saddle.ops.BinOp[org.saddle.ops.Multiply,Long,Long,Long]):BinOpVec.this.VecVecOuter[Long,Long,Long]", "kind" : "implicit def"}, {"label" : "VecVecOuterOpLDD", "tail" : "(opM: BinOp[Multiply, Long, Double, Double]): VecVecOuter[Long, Double, Double]", "member" : "org.saddle.ops.BinOpVec.VecVecOuterOpLDD", "link" : "org\/saddle\/ops\/BinOps$.html#VecVecOuterOpLDD(implicitopM:org.saddle.ops.BinOp[org.saddle.ops.Multiply,Long,Double,Double]):BinOpVec.this.VecVecOuter[Long,Double,Double]", "kind" : "implicit def"}, {"label" : "VecVecOuterOpDID", "tail" : "(opM: BinOp[Multiply, Double, Int, Double]): VecVecOuter[Double, Int, Double]", "member" : "org.saddle.ops.BinOpVec.VecVecOuterOpDID", "link" : "org\/saddle\/ops\/BinOps$.html#VecVecOuterOpDID(implicitopM:org.saddle.ops.BinOp[org.saddle.ops.Multiply,Double,Int,Double]):BinOpVec.this.VecVecOuter[Double,Int,Double]", "kind" : "implicit def"}, {"label" : "VecVecOuterOpDLD", "tail" : "(opM: BinOp[Multiply, Double, Long, Double]): VecVecOuter[Double, Long, Double]", "member" : "org.saddle.ops.BinOpVec.VecVecOuterOpDLD", "link" : "org\/saddle\/ops\/BinOps$.html#VecVecOuterOpDLD(implicitopM:org.saddle.ops.BinOp[org.saddle.ops.Multiply,Double,Long,Double]):BinOpVec.this.VecVecOuter[Double,Long,Double]", "kind" : "implicit def"}, {"label" : "VecVecOuterOpDDD", "tail" : "(opM: BinOp[Multiply, Double, Double, Double]): VecVecOuter[Double, Double, Double]", "member" : "org.saddle.ops.BinOpVec.VecVecOuterOpDDD", "link" : "org\/saddle\/ops\/BinOps$.html#VecVecOuterOpDDD(implicitopM:org.saddle.ops.BinOp[org.saddle.ops.Multiply,Double,Double,Double]):BinOpVec.this.VecVecOuter[Double,Double,Double]", "kind" : "implicit def"}, {"label" : "VecVecDotOpIII", "tail" : "(opA: BinOp[Add, Int, Int, Int], opM: BinOp[Multiply, Int, Int, Int]): VecVecDot[Int, Int, Int]", "member" : "org.saddle.ops.BinOpVec.VecVecDotOpIII", "link" : "org\/saddle\/ops\/BinOps$.html#VecVecDotOpIII(implicitopA:org.saddle.ops.BinOp[org.saddle.ops.Add,Int,Int,Int],implicitopM:org.saddle.ops.BinOp[org.saddle.ops.Multiply,Int,Int,Int]):BinOpVec.this.VecVecDot[Int,Int,Int]", "kind" : "implicit def"}, {"label" : "VecVecDotOpILL", "tail" : "(opA: BinOp[Add, Long, Long, Long], opM: BinOp[Multiply, Int, Long, Long]): VecVecDot[Int, Long, Long]", "member" : "org.saddle.ops.BinOpVec.VecVecDotOpILL", "link" : "org\/saddle\/ops\/BinOps$.html#VecVecDotOpILL(implicitopA:org.saddle.ops.BinOp[org.saddle.ops.Add,Long,Long,Long],implicitopM:org.saddle.ops.BinOp[org.saddle.ops.Multiply,Int,Long,Long]):BinOpVec.this.VecVecDot[Int,Long,Long]", "kind" : "implicit def"}, {"label" : "VecVecDotOpIDD", "tail" : "(opA: BinOp[Add, Double, Double, Double], opM: BinOp[Multiply, Int, Double, Double]): VecVecDot[Int, Double, Double]", "member" : "org.saddle.ops.BinOpVec.VecVecDotOpIDD", "link" : "org\/saddle\/ops\/BinOps$.html#VecVecDotOpIDD(implicitopA:org.saddle.ops.BinOp[org.saddle.ops.Add,Double,Double,Double],implicitopM:org.saddle.ops.BinOp[org.saddle.ops.Multiply,Int,Double,Double]):BinOpVec.this.VecVecDot[Int,Double,Double]", "kind" : "implicit def"}, {"label" : "VecVecDotOpLIL", "tail" : "(opA: BinOp[Add, Long, Long, Long], opM: BinOp[Multiply, Long, Int, Long]): VecVecDot[Long, Int, Long]", "member" : "org.saddle.ops.BinOpVec.VecVecDotOpLIL", "link" : "org\/saddle\/ops\/BinOps$.html#VecVecDotOpLIL(implicitopA:org.saddle.ops.BinOp[org.saddle.ops.Add,Long,Long,Long],implicitopM:org.saddle.ops.BinOp[org.saddle.ops.Multiply,Long,Int,Long]):BinOpVec.this.VecVecDot[Long,Int,Long]", "kind" : "implicit def"}, {"label" : "VecVecDotOpLLL", "tail" : "(opA: BinOp[Add, Long, Long, Long], opM: BinOp[Multiply, Long, Long, Long]): VecVecDot[Long, Long, Long]", "member" : "org.saddle.ops.BinOpVec.VecVecDotOpLLL", "link" : "org\/saddle\/ops\/BinOps$.html#VecVecDotOpLLL(implicitopA:org.saddle.ops.BinOp[org.saddle.ops.Add,Long,Long,Long],implicitopM:org.saddle.ops.BinOp[org.saddle.ops.Multiply,Long,Long,Long]):BinOpVec.this.VecVecDot[Long,Long,Long]", "kind" : "implicit def"}, {"label" : "VecVecDotOpLDD", "tail" : "(opA: BinOp[Add, Double, Double, Double], opM: BinOp[Multiply, Long, Double, Double]): VecVecDot[Long, Double, Double]", "member" : "org.saddle.ops.BinOpVec.VecVecDotOpLDD", "link" : "org\/saddle\/ops\/BinOps$.html#VecVecDotOpLDD(implicitopA:org.saddle.ops.BinOp[org.saddle.ops.Add,Double,Double,Double],implicitopM:org.saddle.ops.BinOp[org.saddle.ops.Multiply,Long,Double,Double]):BinOpVec.this.VecVecDot[Long,Double,Double]", "kind" : "implicit def"}, {"label" : "VecVecDotOpDID", "tail" : "(opA: BinOp[Add, Double, Double, Double], opM: BinOp[Multiply, Double, Int, Double]): VecVecDot[Double, Int, Double]", "member" : "org.saddle.ops.BinOpVec.VecVecDotOpDID", "link" : "org\/saddle\/ops\/BinOps$.html#VecVecDotOpDID(implicitopA:org.saddle.ops.BinOp[org.saddle.ops.Add,Double,Double,Double],implicitopM:org.saddle.ops.BinOp[org.saddle.ops.Multiply,Double,Int,Double]):BinOpVec.this.VecVecDot[Double,Int,Double]", "kind" : "implicit def"}, {"label" : "VecVecDotOpDLD", "tail" : "(opA: BinOp[Add, Double, Double, Double], opM: BinOp[Multiply, Double, Long, Double]): VecVecDot[Double, Long, Double]", "member" : "org.saddle.ops.BinOpVec.VecVecDotOpDLD", "link" : "org\/saddle\/ops\/BinOps$.html#VecVecDotOpDLD(implicitopA:org.saddle.ops.BinOp[org.saddle.ops.Add,Double,Double,Double],implicitopM:org.saddle.ops.BinOp[org.saddle.ops.Multiply,Double,Long,Double]):BinOpVec.this.VecVecDot[Double,Long,Double]", "kind" : "implicit def"}, {"label" : "VecVecDotOpDDD", "tail" : "(opA: BinOp[Add, Double, Double, Double], opM: BinOp[Multiply, Double, Double, Double]): VecVecDot[Double, Double, Double]", "member" : "org.saddle.ops.BinOpVec.VecVecDotOpDDD", "link" : "org\/saddle\/ops\/BinOps$.html#VecVecDotOpDDD(implicitopA:org.saddle.ops.BinOp[org.saddle.ops.Add,Double,Double,Double],implicitopM:org.saddle.ops.BinOp[org.saddle.ops.Multiply,Double,Double,Double]):BinOpVec.this.VecVecDot[Double,Double,Double]", "kind" : "implicit def"}, {"label" : "VecVecElemOpBBB", "tail" : "(op: BinOp[Op, Boolean, Boolean, Boolean]): VecVecElemOp[Op, Boolean, Boolean, Boolean]", "member" : "org.saddle.ops.BinOpVec.VecVecElemOpBBB", "link" : "org\/saddle\/ops\/BinOps$.html#VecVecElemOpBBB[Op<:org.saddle.ops.ScalarOp](implicitop:org.saddle.ops.BinOp[Op,Boolean,Boolean,Boolean]):BinOpVec.this.VecVecElemOp[Op,Boolean,Boolean,Boolean]", "kind" : "implicit def"}, {"label" : "VecVecElemOpIIB", "tail" : "(op: BinOp[Op, Int, Int, Boolean]): VecVecElemOp[Op, Int, Int, Boolean]", "member" : "org.saddle.ops.BinOpVec.VecVecElemOpIIB", "link" : "org\/saddle\/ops\/BinOps$.html#VecVecElemOpIIB[Op<:org.saddle.ops.ScalarOp](implicitop:org.saddle.ops.BinOp[Op,Int,Int,Boolean]):BinOpVec.this.VecVecElemOp[Op,Int,Int,Boolean]", "kind" : "implicit def"}, {"label" : "VecVecElemOpILB", "tail" : "(op: BinOp[Op, Int, Long, Boolean]): VecVecElemOp[Op, Int, Long, Boolean]", "member" : "org.saddle.ops.BinOpVec.VecVecElemOpILB", "link" : "org\/saddle\/ops\/BinOps$.html#VecVecElemOpILB[Op<:org.saddle.ops.ScalarOp](implicitop:org.saddle.ops.BinOp[Op,Int,Long,Boolean]):BinOpVec.this.VecVecElemOp[Op,Int,Long,Boolean]", "kind" : "implicit def"}, {"label" : "VecVecElemOpIDB", "tail" : "(op: BinOp[Op, Int, Double, Boolean]): VecVecElemOp[Op, Int, Double, Boolean]", "member" : "org.saddle.ops.BinOpVec.VecVecElemOpIDB", "link" : "org\/saddle\/ops\/BinOps$.html#VecVecElemOpIDB[Op<:org.saddle.ops.ScalarOp](implicitop:org.saddle.ops.BinOp[Op,Int,Double,Boolean]):BinOpVec.this.VecVecElemOp[Op,Int,Double,Boolean]", "kind" : "implicit def"}, {"label" : "VecVecElemOpLIB", "tail" : "(op: BinOp[Op, Long, Int, Boolean]): VecVecElemOp[Op, Long, Int, Boolean]", "member" : "org.saddle.ops.BinOpVec.VecVecElemOpLIB", "link" : "org\/saddle\/ops\/BinOps$.html#VecVecElemOpLIB[Op<:org.saddle.ops.ScalarOp](implicitop:org.saddle.ops.BinOp[Op,Long,Int,Boolean]):BinOpVec.this.VecVecElemOp[Op,Long,Int,Boolean]", "kind" : "implicit def"}, {"label" : "VecVecElemOpLLB", "tail" : "(op: BinOp[Op, Long, Long, Boolean]): VecVecElemOp[Op, Long, Long, Boolean]", "member" : "org.saddle.ops.BinOpVec.VecVecElemOpLLB", "link" : "org\/saddle\/ops\/BinOps$.html#VecVecElemOpLLB[Op<:org.saddle.ops.ScalarOp](implicitop:org.saddle.ops.BinOp[Op,Long,Long,Boolean]):BinOpVec.this.VecVecElemOp[Op,Long,Long,Boolean]", "kind" : "implicit def"}, {"label" : "VecVecElemOpLDB", "tail" : "(op: BinOp[Op, Long, Double, Boolean]): VecVecElemOp[Op, Long, Double, Boolean]", "member" : "org.saddle.ops.BinOpVec.VecVecElemOpLDB", "link" : "org\/saddle\/ops\/BinOps$.html#VecVecElemOpLDB[Op<:org.saddle.ops.ScalarOp](implicitop:org.saddle.ops.BinOp[Op,Long,Double,Boolean]):BinOpVec.this.VecVecElemOp[Op,Long,Double,Boolean]", "kind" : "implicit def"}, {"label" : "VecVecElemOpDIB", "tail" : "(op: BinOp[Op, Double, Int, Boolean]): VecVecElemOp[Op, Double, Int, Boolean]", "member" : "org.saddle.ops.BinOpVec.VecVecElemOpDIB", "link" : "org\/saddle\/ops\/BinOps$.html#VecVecElemOpDIB[Op<:org.saddle.ops.ScalarOp](implicitop:org.saddle.ops.BinOp[Op,Double,Int,Boolean]):BinOpVec.this.VecVecElemOp[Op,Double,Int,Boolean]", "kind" : "implicit def"}, {"label" : "VecVecElemOpDLB", "tail" : "(op: BinOp[Op, Double, Long, Boolean]): VecVecElemOp[Op, Double, Long, Boolean]", "member" : "org.saddle.ops.BinOpVec.VecVecElemOpDLB", "link" : "org\/saddle\/ops\/BinOps$.html#VecVecElemOpDLB[Op<:org.saddle.ops.ScalarOp](implicitop:org.saddle.ops.BinOp[Op,Double,Long,Boolean]):BinOpVec.this.VecVecElemOp[Op,Double,Long,Boolean]", "kind" : "implicit def"}, {"label" : "VecVecElemOpDDB", "tail" : "(op: BinOp[Op, Double, Double, Boolean]): VecVecElemOp[Op, Double, Double, Boolean]", "member" : "org.saddle.ops.BinOpVec.VecVecElemOpDDB", "link" : "org\/saddle\/ops\/BinOps$.html#VecVecElemOpDDB[Op<:org.saddle.ops.ScalarOp](implicitop:org.saddle.ops.BinOp[Op,Double,Double,Boolean]):BinOpVec.this.VecVecElemOp[Op,Double,Double,Boolean]", "kind" : "implicit def"}, {"label" : "VecVelElemOpIII", "tail" : "(op: BinOp[Op, Int, Int, Int]): VecVecElemOp[Op, Int, Int, Int]", "member" : "org.saddle.ops.BinOpVec.VecVelElemOpIII", "link" : "org\/saddle\/ops\/BinOps$.html#VecVelElemOpIII[Op<:org.saddle.ops.ScalarOp](implicitop:org.saddle.ops.BinOp[Op,Int,Int,Int]):BinOpVec.this.VecVecElemOp[Op,Int,Int,Int]", "kind" : "implicit def"}, {"label" : "VecVelElemOpILL", "tail" : "(op: BinOp[Op, Int, Long, Long]): VecVecElemOp[Op, Int, Long, Long]", "member" : "org.saddle.ops.BinOpVec.VecVelElemOpILL", "link" : "org\/saddle\/ops\/BinOps$.html#VecVelElemOpILL[Op<:org.saddle.ops.ScalarOp](implicitop:org.saddle.ops.BinOp[Op,Int,Long,Long]):BinOpVec.this.VecVecElemOp[Op,Int,Long,Long]", "kind" : "implicit def"}, {"label" : "VecVelElemOpIDD", "tail" : "(op: BinOp[Op, Int, Double, Double]): VecVecElemOp[Op, Int, Double, Double]", "member" : "org.saddle.ops.BinOpVec.VecVelElemOpIDD", "link" : "org\/saddle\/ops\/BinOps$.html#VecVelElemOpIDD[Op<:org.saddle.ops.ScalarOp](implicitop:org.saddle.ops.BinOp[Op,Int,Double,Double]):BinOpVec.this.VecVecElemOp[Op,Int,Double,Double]", "kind" : "implicit def"}, {"label" : "VecVelElemOpLIL", "tail" : "(op: BinOp[Op, Long, Int, Long]): VecVecElemOp[Op, Long, Int, Long]", "member" : "org.saddle.ops.BinOpVec.VecVelElemOpLIL", "link" : "org\/saddle\/ops\/BinOps$.html#VecVelElemOpLIL[Op<:org.saddle.ops.ScalarOp](implicitop:org.saddle.ops.BinOp[Op,Long,Int,Long]):BinOpVec.this.VecVecElemOp[Op,Long,Int,Long]", "kind" : "implicit def"}, {"label" : "VecVelElemOpLLL", "tail" : "(op: BinOp[Op, Long, Long, Long]): VecVecElemOp[Op, Long, Long, Long]", "member" : "org.saddle.ops.BinOpVec.VecVelElemOpLLL", "link" : "org\/saddle\/ops\/BinOps$.html#VecVelElemOpLLL[Op<:org.saddle.ops.ScalarOp](implicitop:org.saddle.ops.BinOp[Op,Long,Long,Long]):BinOpVec.this.VecVecElemOp[Op,Long,Long,Long]", "kind" : "implicit def"}, {"label" : "VecVelElemOpLDD", "tail" : "(op: BinOp[Op, Long, Double, Double]): VecVecElemOp[Op, Long, Double, Double]", "member" : "org.saddle.ops.BinOpVec.VecVelElemOpLDD", "link" : "org\/saddle\/ops\/BinOps$.html#VecVelElemOpLDD[Op<:org.saddle.ops.ScalarOp](implicitop:org.saddle.ops.BinOp[Op,Long,Double,Double]):BinOpVec.this.VecVecElemOp[Op,Long,Double,Double]", "kind" : "implicit def"}, {"label" : "VecVelElemOpDID", "tail" : "(op: BinOp[Op, Double, Int, Double]): VecVecElemOp[Op, Double, Int, Double]", "member" : "org.saddle.ops.BinOpVec.VecVelElemOpDID", "link" : "org\/saddle\/ops\/BinOps$.html#VecVelElemOpDID[Op<:org.saddle.ops.ScalarOp](implicitop:org.saddle.ops.BinOp[Op,Double,Int,Double]):BinOpVec.this.VecVecElemOp[Op,Double,Int,Double]", "kind" : "implicit def"}, {"label" : "VecVelElemOpDLD", "tail" : "(op: BinOp[Op, Double, Long, Double]): VecVecElemOp[Op, Double, Long, Double]", "member" : "org.saddle.ops.BinOpVec.VecVelElemOpDLD", "link" : "org\/saddle\/ops\/BinOps$.html#VecVelElemOpDLD[Op<:org.saddle.ops.ScalarOp](implicitop:org.saddle.ops.BinOp[Op,Double,Long,Double]):BinOpVec.this.VecVecElemOp[Op,Double,Long,Double]", "kind" : "implicit def"}, {"label" : "VecVelElemOpDDD", "tail" : "(op: BinOp[Op, Double, Double, Double]): VecVecElemOp[Op, Double, Double, Double]", "member" : "org.saddle.ops.BinOpVec.VecVelElemOpDDD", "link" : "org\/saddle\/ops\/BinOps$.html#VecVelElemOpDDD[Op<:org.saddle.ops.ScalarOp](implicitop:org.saddle.ops.BinOp[Op,Double,Double,Double]):BinOpVec.this.VecVecElemOp[Op,Double,Double,Double]", "kind" : "implicit def"}, {"label" : "VecSclrElmOpBBB", "tail" : "(op: BinOp[Op, Boolean, Boolean, Boolean]): VecSclrElemOp[Op, Boolean, Boolean, Boolean]", "member" : "org.saddle.ops.BinOpVec.VecSclrElmOpBBB", "link" : "org\/saddle\/ops\/BinOps$.html#VecSclrElmOpBBB[Op<:org.saddle.ops.ScalarOp](implicitop:org.saddle.ops.BinOp[Op,Boolean,Boolean,Boolean]):BinOpVec.this.VecSclrElemOp[Op,Boolean,Boolean,Boolean]", "kind" : "implicit def"}, {"label" : "VecSclrElmOpIIB", "tail" : "(op: BinOp[Op, Int, Int, Boolean]): VecSclrElemOp[Op, Int, Int, Boolean]", "member" : "org.saddle.ops.BinOpVec.VecSclrElmOpIIB", "link" : "org\/saddle\/ops\/BinOps$.html#VecSclrElmOpIIB[Op<:org.saddle.ops.ScalarOp](implicitop:org.saddle.ops.BinOp[Op,Int,Int,Boolean]):BinOpVec.this.VecSclrElemOp[Op,Int,Int,Boolean]", "kind" : "implicit def"}, {"label" : "VecSclrElmOpILB", "tail" : "(op: BinOp[Op, Int, Long, Boolean]): VecSclrElemOp[Op, Int, Long, Boolean]", "member" : "org.saddle.ops.BinOpVec.VecSclrElmOpILB", "link" : "org\/saddle\/ops\/BinOps$.html#VecSclrElmOpILB[Op<:org.saddle.ops.ScalarOp](implicitop:org.saddle.ops.BinOp[Op,Int,Long,Boolean]):BinOpVec.this.VecSclrElemOp[Op,Int,Long,Boolean]", "kind" : "implicit def"}, {"label" : "VecSclrElmOpIDB", "tail" : "(op: BinOp[Op, Int, Double, Boolean]): VecSclrElemOp[Op, Int, Double, Boolean]", "member" : "org.saddle.ops.BinOpVec.VecSclrElmOpIDB", "link" : "org\/saddle\/ops\/BinOps$.html#VecSclrElmOpIDB[Op<:org.saddle.ops.ScalarOp](implicitop:org.saddle.ops.BinOp[Op,Int,Double,Boolean]):BinOpVec.this.VecSclrElemOp[Op,Int,Double,Boolean]", "kind" : "implicit def"}, {"label" : "VecSclrElmOpLIB", "tail" : "(op: BinOp[Op, Long, Int, Boolean]): VecSclrElemOp[Op, Long, Int, Boolean]", "member" : "org.saddle.ops.BinOpVec.VecSclrElmOpLIB", "link" : "org\/saddle\/ops\/BinOps$.html#VecSclrElmOpLIB[Op<:org.saddle.ops.ScalarOp](implicitop:org.saddle.ops.BinOp[Op,Long,Int,Boolean]):BinOpVec.this.VecSclrElemOp[Op,Long,Int,Boolean]", "kind" : "implicit def"}, {"label" : "VecSclrElmOpLLB", "tail" : "(op: BinOp[Op, Long, Long, Boolean]): VecSclrElemOp[Op, Long, Long, Boolean]", "member" : "org.saddle.ops.BinOpVec.VecSclrElmOpLLB", "link" : "org\/saddle\/ops\/BinOps$.html#VecSclrElmOpLLB[Op<:org.saddle.ops.ScalarOp](implicitop:org.saddle.ops.BinOp[Op,Long,Long,Boolean]):BinOpVec.this.VecSclrElemOp[Op,Long,Long,Boolean]", "kind" : "implicit def"}, {"label" : "VecSclrElmOpLDB", "tail" : "(op: BinOp[Op, Long, Double, Boolean]): VecSclrElemOp[Op, Long, Double, Boolean]", "member" : "org.saddle.ops.BinOpVec.VecSclrElmOpLDB", "link" : "org\/saddle\/ops\/BinOps$.html#VecSclrElmOpLDB[Op<:org.saddle.ops.ScalarOp](implicitop:org.saddle.ops.BinOp[Op,Long,Double,Boolean]):BinOpVec.this.VecSclrElemOp[Op,Long,Double,Boolean]", "kind" : "implicit def"}, {"label" : "VecSclrElmOpDIB", "tail" : "(op: BinOp[Op, Double, Int, Boolean]): VecSclrElemOp[Op, Double, Int, Boolean]", "member" : "org.saddle.ops.BinOpVec.VecSclrElmOpDIB", "link" : "org\/saddle\/ops\/BinOps$.html#VecSclrElmOpDIB[Op<:org.saddle.ops.ScalarOp](implicitop:org.saddle.ops.BinOp[Op,Double,Int,Boolean]):BinOpVec.this.VecSclrElemOp[Op,Double,Int,Boolean]", "kind" : "implicit def"}, {"label" : "VecSclrElmOpDLB", "tail" : "(op: BinOp[Op, Double, Long, Boolean]): VecSclrElemOp[Op, Double, Long, Boolean]", "member" : "org.saddle.ops.BinOpVec.VecSclrElmOpDLB", "link" : "org\/saddle\/ops\/BinOps$.html#VecSclrElmOpDLB[Op<:org.saddle.ops.ScalarOp](implicitop:org.saddle.ops.BinOp[Op,Double,Long,Boolean]):BinOpVec.this.VecSclrElemOp[Op,Double,Long,Boolean]", "kind" : "implicit def"}, {"label" : "VecSclrElmOpDDB", "tail" : "(op: BinOp[Op, Double, Double, Boolean]): VecSclrElemOp[Op, Double, Double, Boolean]", "member" : "org.saddle.ops.BinOpVec.VecSclrElmOpDDB", "link" : "org\/saddle\/ops\/BinOps$.html#VecSclrElmOpDDB[Op<:org.saddle.ops.ScalarOp](implicitop:org.saddle.ops.BinOp[Op,Double,Double,Boolean]):BinOpVec.this.VecSclrElemOp[Op,Double,Double,Boolean]", "kind" : "implicit def"}, {"label" : "VecSclrElmOpIII", "tail" : "(op: BinOp[Op, Int, Int, Int]): VecSclrElemOp[Op, Int, Int, Int]", "member" : "org.saddle.ops.BinOpVec.VecSclrElmOpIII", "link" : "org\/saddle\/ops\/BinOps$.html#VecSclrElmOpIII[Op<:org.saddle.ops.ScalarOp](implicitop:org.saddle.ops.BinOp[Op,Int,Int,Int]):BinOpVec.this.VecSclrElemOp[Op,Int,Int,Int]", "kind" : "implicit def"}, {"label" : "VecSclrElmOpILL", "tail" : "(op: BinOp[Op, Int, Long, Long]): VecSclrElemOp[Op, Int, Long, Long]", "member" : "org.saddle.ops.BinOpVec.VecSclrElmOpILL", "link" : "org\/saddle\/ops\/BinOps$.html#VecSclrElmOpILL[Op<:org.saddle.ops.ScalarOp](implicitop:org.saddle.ops.BinOp[Op,Int,Long,Long]):BinOpVec.this.VecSclrElemOp[Op,Int,Long,Long]", "kind" : "implicit def"}, {"label" : "VecSclrElmOpIDD", "tail" : "(op: BinOp[Op, Int, Double, Double]): VecSclrElemOp[Op, Int, Double, Double]", "member" : "org.saddle.ops.BinOpVec.VecSclrElmOpIDD", "link" : "org\/saddle\/ops\/BinOps$.html#VecSclrElmOpIDD[Op<:org.saddle.ops.ScalarOp](implicitop:org.saddle.ops.BinOp[Op,Int,Double,Double]):BinOpVec.this.VecSclrElemOp[Op,Int,Double,Double]", "kind" : "implicit def"}, {"label" : "VecSclrElmOpLIL", "tail" : "(op: BinOp[Op, Long, Int, Long]): VecSclrElemOp[Op, Long, Int, Long]", "member" : "org.saddle.ops.BinOpVec.VecSclrElmOpLIL", "link" : "org\/saddle\/ops\/BinOps$.html#VecSclrElmOpLIL[Op<:org.saddle.ops.ScalarOp](implicitop:org.saddle.ops.BinOp[Op,Long,Int,Long]):BinOpVec.this.VecSclrElemOp[Op,Long,Int,Long]", "kind" : "implicit def"}, {"label" : "VecSclrElmOpLLL", "tail" : "(op: BinOp[Op, Long, Long, Long]): VecSclrElemOp[Op, Long, Long, Long]", "member" : "org.saddle.ops.BinOpVec.VecSclrElmOpLLL", "link" : "org\/saddle\/ops\/BinOps$.html#VecSclrElmOpLLL[Op<:org.saddle.ops.ScalarOp](implicitop:org.saddle.ops.BinOp[Op,Long,Long,Long]):BinOpVec.this.VecSclrElemOp[Op,Long,Long,Long]", "kind" : "implicit def"}, {"label" : "VecSclrElmOpLDD", "tail" : "(op: BinOp[Op, Long, Double, Double]): VecSclrElemOp[Op, Long, Double, Double]", "member" : "org.saddle.ops.BinOpVec.VecSclrElmOpLDD", "link" : "org\/saddle\/ops\/BinOps$.html#VecSclrElmOpLDD[Op<:org.saddle.ops.ScalarOp](implicitop:org.saddle.ops.BinOp[Op,Long,Double,Double]):BinOpVec.this.VecSclrElemOp[Op,Long,Double,Double]", "kind" : "implicit def"}, {"label" : "VecSclrElmOpDID", "tail" : "(op: BinOp[Op, Double, Int, Double]): VecSclrElemOp[Op, Double, Int, Double]", "member" : "org.saddle.ops.BinOpVec.VecSclrElmOpDID", "link" : "org\/saddle\/ops\/BinOps$.html#VecSclrElmOpDID[Op<:org.saddle.ops.ScalarOp](implicitop:org.saddle.ops.BinOp[Op,Double,Int,Double]):BinOpVec.this.VecSclrElemOp[Op,Double,Int,Double]", "kind" : "implicit def"}, {"label" : "VecSclrElmOpDLD", "tail" : "(op: BinOp[Op, Double, Long, Double]): VecSclrElemOp[Op, Double, Long, Double]", "member" : "org.saddle.ops.BinOpVec.VecSclrElmOpDLD", "link" : "org\/saddle\/ops\/BinOps$.html#VecSclrElmOpDLD[Op<:org.saddle.ops.ScalarOp](implicitop:org.saddle.ops.BinOp[Op,Double,Long,Double]):BinOpVec.this.VecSclrElemOp[Op,Double,Long,Double]", "kind" : "implicit def"}, {"label" : "VecSclrElmOpDDD", "tail" : "(op: BinOp[Op, Double, Double, Double]): VecSclrElemOp[Op, Double, Double, Double]", "member" : "org.saddle.ops.BinOpVec.VecSclrElmOpDDD", "link" : "org\/saddle\/ops\/BinOps$.html#VecSclrElmOpDDD[Op<:org.saddle.ops.ScalarOp](implicitop:org.saddle.ops.BinOp[Op,Double,Double,Double]):BinOpVec.this.VecSclrElemOp[Op,Double,Double,Double]", "kind" : "implicit def"}, {"label" : "MatMatElemOpIpIII", "tail" : "(op: BinOp[Op, Int, Int, Int]): MatMatElemOpIp[Op, Int, Int]", "member" : "org.saddle.ops.BinOpMatInPlace.MatMatElemOpIpIII", "link" : "org\/saddle\/ops\/BinOps$.html#MatMatElemOpIpIII[Op<:org.saddle.ops.ScalarOp](implicitop:org.saddle.ops.BinOp[Op,Int,Int,Int]):BinOpMatInPlace.this.MatMatElemOpIp[Op,Int,Int]", "kind" : "implicit def"}, {"label" : "MatMatElemOpIpLIL", "tail" : "(op: BinOp[Op, Long, Int, Long]): MatMatElemOpIp[Op, Long, Int]", "member" : "org.saddle.ops.BinOpMatInPlace.MatMatElemOpIpLIL", "link" : "org\/saddle\/ops\/BinOps$.html#MatMatElemOpIpLIL[Op<:org.saddle.ops.ScalarOp](implicitop:org.saddle.ops.BinOp[Op,Long,Int,Long]):BinOpMatInPlace.this.MatMatElemOpIp[Op,Long,Int]", "kind" : "implicit def"}, {"label" : "MatMatElemOpIpLLL", "tail" : "(op: BinOp[Op, Long, Long, Long]): MatMatElemOpIp[Op, Long, Long]", "member" : "org.saddle.ops.BinOpMatInPlace.MatMatElemOpIpLLL", "link" : "org\/saddle\/ops\/BinOps$.html#MatMatElemOpIpLLL[Op<:org.saddle.ops.ScalarOp](implicitop:org.saddle.ops.BinOp[Op,Long,Long,Long]):BinOpMatInPlace.this.MatMatElemOpIp[Op,Long,Long]", "kind" : "implicit def"}, {"label" : "MatMatElemOpIpDID", "tail" : "(op: BinOp[Op, Double, Int, Double]): MatMatElemOpIp[Op, Double, Int]", "member" : "org.saddle.ops.BinOpMatInPlace.MatMatElemOpIpDID", "link" : "org\/saddle\/ops\/BinOps$.html#MatMatElemOpIpDID[Op<:org.saddle.ops.ScalarOp](implicitop:org.saddle.ops.BinOp[Op,Double,Int,Double]):BinOpMatInPlace.this.MatMatElemOpIp[Op,Double,Int]", "kind" : "implicit def"}, {"label" : "MatMatElemOpIpDLD", "tail" : "(op: BinOp[Op, Double, Long, Double]): MatMatElemOpIp[Op, Double, Long]", "member" : "org.saddle.ops.BinOpMatInPlace.MatMatElemOpIpDLD", "link" : "org\/saddle\/ops\/BinOps$.html#MatMatElemOpIpDLD[Op<:org.saddle.ops.ScalarOp](implicitop:org.saddle.ops.BinOp[Op,Double,Long,Double]):BinOpMatInPlace.this.MatMatElemOpIp[Op,Double,Long]", "kind" : "implicit def"}, {"label" : "MatMatElemOpIpDDD", "tail" : "(op: BinOp[Op, Double, Double, Double]): MatMatElemOpIp[Op, Double, Double]", "member" : "org.saddle.ops.BinOpMatInPlace.MatMatElemOpIpDDD", "link" : "org\/saddle\/ops\/BinOps$.html#MatMatElemOpIpDDD[Op<:org.saddle.ops.ScalarOp](implicitop:org.saddle.ops.BinOp[Op,Double,Double,Double]):BinOpMatInPlace.this.MatMatElemOpIp[Op,Double,Double]", "kind" : "implicit def"}, {"label" : "MatSclrElmOpIpIII", "tail" : "(op: BinOp[Op, Int, Int, Int]): MatSclrElemOpIp[Op, Int, Int]", "member" : "org.saddle.ops.BinOpMatInPlace.MatSclrElmOpIpIII", "link" : "org\/saddle\/ops\/BinOps$.html#MatSclrElmOpIpIII[Op<:org.saddle.ops.ScalarOp](implicitop:org.saddle.ops.BinOp[Op,Int,Int,Int]):BinOpMatInPlace.this.MatSclrElemOpIp[Op,Int,Int]", "kind" : "implicit def"}, {"label" : "MatSclrElmOpIpLIL", "tail" : "(op: BinOp[Op, Long, Int, Long]): MatSclrElemOpIp[Op, Long, Int]", "member" : "org.saddle.ops.BinOpMatInPlace.MatSclrElmOpIpLIL", "link" : "org\/saddle\/ops\/BinOps$.html#MatSclrElmOpIpLIL[Op<:org.saddle.ops.ScalarOp](implicitop:org.saddle.ops.BinOp[Op,Long,Int,Long]):BinOpMatInPlace.this.MatSclrElemOpIp[Op,Long,Int]", "kind" : "implicit def"}, {"label" : "MatSclrElmOpIpLLL", "tail" : "(op: BinOp[Op, Long, Long, Long]): MatSclrElemOpIp[Op, Long, Long]", "member" : "org.saddle.ops.BinOpMatInPlace.MatSclrElmOpIpLLL", "link" : "org\/saddle\/ops\/BinOps$.html#MatSclrElmOpIpLLL[Op<:org.saddle.ops.ScalarOp](implicitop:org.saddle.ops.BinOp[Op,Long,Long,Long]):BinOpMatInPlace.this.MatSclrElemOpIp[Op,Long,Long]", "kind" : "implicit def"}, {"label" : "MatSclrElmOpIpDID", "tail" : "(op: BinOp[Op, Double, Int, Double]): MatSclrElemOpIp[Op, Double, Int]", "member" : "org.saddle.ops.BinOpMatInPlace.MatSclrElmOpIpDID", "link" : "org\/saddle\/ops\/BinOps$.html#MatSclrElmOpIpDID[Op<:org.saddle.ops.ScalarOp](implicitop:org.saddle.ops.BinOp[Op,Double,Int,Double]):BinOpMatInPlace.this.MatSclrElemOpIp[Op,Double,Int]", "kind" : "implicit def"}, {"label" : "MatSclrElmOpIpDLD", "tail" : "(op: BinOp[Op, Double, Long, Double]): MatSclrElemOpIp[Op, Double, Long]", "member" : "org.saddle.ops.BinOpMatInPlace.MatSclrElmOpIpDLD", "link" : "org\/saddle\/ops\/BinOps$.html#MatSclrElmOpIpDLD[Op<:org.saddle.ops.ScalarOp](implicitop:org.saddle.ops.BinOp[Op,Double,Long,Double]):BinOpMatInPlace.this.MatSclrElemOpIp[Op,Double,Long]", "kind" : "implicit def"}, {"label" : "MatSclrElmOpIpDDD", "tail" : "(op: BinOp[Op, Double, Double, Double]): MatSclrElemOpIp[Op, Double, Double]", "member" : "org.saddle.ops.BinOpMatInPlace.MatSclrElmOpIpDDD", "link" : "org\/saddle\/ops\/BinOps$.html#MatSclrElmOpIpDDD[Op<:org.saddle.ops.ScalarOp](implicitop:org.saddle.ops.BinOp[Op,Double,Double,Double]):BinOpMatInPlace.this.MatSclrElemOpIp[Op,Double,Double]", "kind" : "implicit def"}, {"label" : "MatMatElemOpIII", "tail" : "(op: BinOp[Op, Int, Int, Int]): MatMatElemOp[Op, Int, Int, Int]", "member" : "org.saddle.ops.BinOpMat.MatMatElemOpIII", "link" : "org\/saddle\/ops\/BinOps$.html#MatMatElemOpIII[Op<:org.saddle.ops.ScalarOp](implicitop:org.saddle.ops.BinOp[Op,Int,Int,Int]):BinOpMat.this.MatMatElemOp[Op,Int,Int,Int]", "kind" : "implicit def"}, {"label" : "MatMatElemOpILL", "tail" : "(op: BinOp[Op, Int, Long, Long]): MatMatElemOp[Op, Int, Long, Long]", "member" : "org.saddle.ops.BinOpMat.MatMatElemOpILL", "link" : "org\/saddle\/ops\/BinOps$.html#MatMatElemOpILL[Op<:org.saddle.ops.ScalarOp](implicitop:org.saddle.ops.BinOp[Op,Int,Long,Long]):BinOpMat.this.MatMatElemOp[Op,Int,Long,Long]", "kind" : "implicit def"}, {"label" : "MatMatElemOpIDD", "tail" : "(op: BinOp[Op, Int, Double, Double]): MatMatElemOp[Op, Int, Double, Double]", "member" : "org.saddle.ops.BinOpMat.MatMatElemOpIDD", "link" : "org\/saddle\/ops\/BinOps$.html#MatMatElemOpIDD[Op<:org.saddle.ops.ScalarOp](implicitop:org.saddle.ops.BinOp[Op,Int,Double,Double]):BinOpMat.this.MatMatElemOp[Op,Int,Double,Double]", "kind" : "implicit def"}, {"label" : "MatMatElemOpLIL", "tail" : "(op: BinOp[Op, Long, Int, Long]): MatMatElemOp[Op, Long, Int, Long]", "member" : "org.saddle.ops.BinOpMat.MatMatElemOpLIL", "link" : "org\/saddle\/ops\/BinOps$.html#MatMatElemOpLIL[Op<:org.saddle.ops.ScalarOp](implicitop:org.saddle.ops.BinOp[Op,Long,Int,Long]):BinOpMat.this.MatMatElemOp[Op,Long,Int,Long]", "kind" : "implicit def"}, {"label" : "MatMatElemOpLLL", "tail" : "(op: BinOp[Op, Long, Long, Long]): MatMatElemOp[Op, Long, Long, Long]", "member" : "org.saddle.ops.BinOpMat.MatMatElemOpLLL", "link" : "org\/saddle\/ops\/BinOps$.html#MatMatElemOpLLL[Op<:org.saddle.ops.ScalarOp](implicitop:org.saddle.ops.BinOp[Op,Long,Long,Long]):BinOpMat.this.MatMatElemOp[Op,Long,Long,Long]", "kind" : "implicit def"}, {"label" : "MatMatElemOpLDD", "tail" : "(op: BinOp[Op, Long, Double, Double]): MatMatElemOp[Op, Long, Double, Double]", "member" : "org.saddle.ops.BinOpMat.MatMatElemOpLDD", "link" : "org\/saddle\/ops\/BinOps$.html#MatMatElemOpLDD[Op<:org.saddle.ops.ScalarOp](implicitop:org.saddle.ops.BinOp[Op,Long,Double,Double]):BinOpMat.this.MatMatElemOp[Op,Long,Double,Double]", "kind" : "implicit def"}, {"label" : "MatMatElemOpDID", "tail" : "(op: BinOp[Op, Double, Int, Double]): MatMatElemOp[Op, Double, Int, Double]", "member" : "org.saddle.ops.BinOpMat.MatMatElemOpDID", "link" : "org\/saddle\/ops\/BinOps$.html#MatMatElemOpDID[Op<:org.saddle.ops.ScalarOp](implicitop:org.saddle.ops.BinOp[Op,Double,Int,Double]):BinOpMat.this.MatMatElemOp[Op,Double,Int,Double]", "kind" : "implicit def"}, {"label" : "MatMatElemOpDLD", "tail" : "(op: BinOp[Op, Double, Long, Double]): MatMatElemOp[Op, Double, Long, Double]", "member" : "org.saddle.ops.BinOpMat.MatMatElemOpDLD", "link" : "org\/saddle\/ops\/BinOps$.html#MatMatElemOpDLD[Op<:org.saddle.ops.ScalarOp](implicitop:org.saddle.ops.BinOp[Op,Double,Long,Double]):BinOpMat.this.MatMatElemOp[Op,Double,Long,Double]", "kind" : "implicit def"}, {"label" : "MatMatElemOpDDD", "tail" : "(op: BinOp[Op, Double, Double, Double]): MatMatElemOp[Op, Double, Double, Double]", "member" : "org.saddle.ops.BinOpMat.MatMatElemOpDDD", "link" : "org\/saddle\/ops\/BinOps$.html#MatMatElemOpDDD[Op<:org.saddle.ops.ScalarOp](implicitop:org.saddle.ops.BinOp[Op,Double,Double,Double]):BinOpMat.this.MatMatElemOp[Op,Double,Double,Double]", "kind" : "implicit def"}, {"label" : "MatSclrElmOpLIB", "tail" : "(op: BinOp[Op, Long, Int, Boolean]): MatSclrElemOp[Op, Long, Int, Boolean]", "member" : "org.saddle.ops.BinOpMat.MatSclrElmOpLIB", "link" : "org\/saddle\/ops\/BinOps$.html#MatSclrElmOpLIB[Op<:org.saddle.ops.ScalarOp](implicitop:org.saddle.ops.BinOp[Op,Long,Int,Boolean]):BinOpMat.this.MatSclrElemOp[Op,Long,Int,Boolean]", "kind" : "implicit def"}, {"label" : "MatSclrElmOpLLB", "tail" : "(op: BinOp[Op, Long, Long, Boolean]): MatSclrElemOp[Op, Long, Long, Boolean]", "member" : "org.saddle.ops.BinOpMat.MatSclrElmOpLLB", "link" : "org\/saddle\/ops\/BinOps$.html#MatSclrElmOpLLB[Op<:org.saddle.ops.ScalarOp](implicitop:org.saddle.ops.BinOp[Op,Long,Long,Boolean]):BinOpMat.this.MatSclrElemOp[Op,Long,Long,Boolean]", "kind" : "implicit def"}, {"label" : "MatSclrElmOpIIB", "tail" : "(op: BinOp[Op, Int, Int, Boolean]): MatSclrElemOp[Op, Int, Int, Boolean]", "member" : "org.saddle.ops.BinOpMat.MatSclrElmOpIIB", "link" : "org\/saddle\/ops\/BinOps$.html#MatSclrElmOpIIB[Op<:org.saddle.ops.ScalarOp](implicitop:org.saddle.ops.BinOp[Op,Int,Int,Boolean]):BinOpMat.this.MatSclrElemOp[Op,Int,Int,Boolean]", "kind" : "implicit def"}, {"label" : "MatSclrElmOpDIB", "tail" : "(op: BinOp[Op, Double, Int, Boolean]): MatSclrElemOp[Op, Double, Int, Boolean]", "member" : "org.saddle.ops.BinOpMat.MatSclrElmOpDIB", "link" : "org\/saddle\/ops\/BinOps$.html#MatSclrElmOpDIB[Op<:org.saddle.ops.ScalarOp](implicitop:org.saddle.ops.BinOp[Op,Double,Int,Boolean]):BinOpMat.this.MatSclrElemOp[Op,Double,Int,Boolean]", "kind" : "implicit def"}, {"label" : "MatSclrElmOpIDB", "tail" : "(op: BinOp[Op, Int, Double, Boolean]): MatSclrElemOp[Op, Int, Double, Boolean]", "member" : "org.saddle.ops.BinOpMat.MatSclrElmOpIDB", "link" : "org\/saddle\/ops\/BinOps$.html#MatSclrElmOpIDB[Op<:org.saddle.ops.ScalarOp](implicitop:org.saddle.ops.BinOp[Op,Int,Double,Boolean]):BinOpMat.this.MatSclrElemOp[Op,Int,Double,Boolean]", "kind" : "implicit def"}, {"label" : "MatSclrElmOpLDB", "tail" : "(op: BinOp[Op, Long, Double, Boolean]): MatSclrElemOp[Op, Long, Double, Boolean]", "member" : "org.saddle.ops.BinOpMat.MatSclrElmOpLDB", "link" : "org\/saddle\/ops\/BinOps$.html#MatSclrElmOpLDB[Op<:org.saddle.ops.ScalarOp](implicitop:org.saddle.ops.BinOp[Op,Long,Double,Boolean]):BinOpMat.this.MatSclrElemOp[Op,Long,Double,Boolean]", "kind" : "implicit def"}, {"label" : "MatSclrElmOpDLB", "tail" : "(op: BinOp[Op, Double, Long, Boolean]): MatSclrElemOp[Op, Double, Long, Boolean]", "member" : "org.saddle.ops.BinOpMat.MatSclrElmOpDLB", "link" : "org\/saddle\/ops\/BinOps$.html#MatSclrElmOpDLB[Op<:org.saddle.ops.ScalarOp](implicitop:org.saddle.ops.BinOp[Op,Double,Long,Boolean]):BinOpMat.this.MatSclrElemOp[Op,Double,Long,Boolean]", "kind" : "implicit def"}, {"label" : "MatSclrElmOpDDB", "tail" : "(op: BinOp[Op, Double, Double, Boolean]): MatSclrElemOp[Op, Double, Double, Boolean]", "member" : "org.saddle.ops.BinOpMat.MatSclrElmOpDDB", "link" : "org\/saddle\/ops\/BinOps$.html#MatSclrElmOpDDB[Op<:org.saddle.ops.ScalarOp](implicitop:org.saddle.ops.BinOp[Op,Double,Double,Boolean]):BinOpMat.this.MatSclrElemOp[Op,Double,Double,Boolean]", "kind" : "implicit def"}, {"label" : "MatSclrElmOpBBB", "tail" : "(op: BinOp[Op, Boolean, Boolean, Boolean]): MatSclrElemOp[Op, Boolean, Boolean, Boolean]", "member" : "org.saddle.ops.BinOpMat.MatSclrElmOpBBB", "link" : "org\/saddle\/ops\/BinOps$.html#MatSclrElmOpBBB[Op<:org.saddle.ops.ScalarOp](implicitop:org.saddle.ops.BinOp[Op,Boolean,Boolean,Boolean]):BinOpMat.this.MatSclrElemOp[Op,Boolean,Boolean,Boolean]", "kind" : "implicit def"}, {"label" : "MatSclrElmOpIII", "tail" : "(op: BinOp[Op, Int, Int, Int]): MatSclrElemOp[Op, Int, Int, Int]", "member" : "org.saddle.ops.BinOpMat.MatSclrElmOpIII", "link" : "org\/saddle\/ops\/BinOps$.html#MatSclrElmOpIII[Op<:org.saddle.ops.ScalarOp](implicitop:org.saddle.ops.BinOp[Op,Int,Int,Int]):BinOpMat.this.MatSclrElemOp[Op,Int,Int,Int]", "kind" : "implicit def"}, {"label" : "MatSclrElmOpILL", "tail" : "(op: BinOp[Op, Int, Long, Long]): MatSclrElemOp[Op, Int, Long, Long]", "member" : "org.saddle.ops.BinOpMat.MatSclrElmOpILL", "link" : "org\/saddle\/ops\/BinOps$.html#MatSclrElmOpILL[Op<:org.saddle.ops.ScalarOp](implicitop:org.saddle.ops.BinOp[Op,Int,Long,Long]):BinOpMat.this.MatSclrElemOp[Op,Int,Long,Long]", "kind" : "implicit def"}, {"label" : "MatSclrElmOpIDD", "tail" : "(op: BinOp[Op, Int, Double, Double]): MatSclrElemOp[Op, Int, Double, Double]", "member" : "org.saddle.ops.BinOpMat.MatSclrElmOpIDD", "link" : "org\/saddle\/ops\/BinOps$.html#MatSclrElmOpIDD[Op<:org.saddle.ops.ScalarOp](implicitop:org.saddle.ops.BinOp[Op,Int,Double,Double]):BinOpMat.this.MatSclrElemOp[Op,Int,Double,Double]", "kind" : "implicit def"}, {"label" : "MatSclrElmOpLIL", "tail" : "(op: BinOp[Op, Long, Int, Long]): MatSclrElemOp[Op, Long, Int, Long]", "member" : "org.saddle.ops.BinOpMat.MatSclrElmOpLIL", "link" : "org\/saddle\/ops\/BinOps$.html#MatSclrElmOpLIL[Op<:org.saddle.ops.ScalarOp](implicitop:org.saddle.ops.BinOp[Op,Long,Int,Long]):BinOpMat.this.MatSclrElemOp[Op,Long,Int,Long]", "kind" : "implicit def"}, {"label" : "MatSclrElmOpLLL", "tail" : "(op: BinOp[Op, Long, Long, Long]): MatSclrElemOp[Op, Long, Long, Long]", "member" : "org.saddle.ops.BinOpMat.MatSclrElmOpLLL", "link" : "org\/saddle\/ops\/BinOps$.html#MatSclrElmOpLLL[Op<:org.saddle.ops.ScalarOp](implicitop:org.saddle.ops.BinOp[Op,Long,Long,Long]):BinOpMat.this.MatSclrElemOp[Op,Long,Long,Long]", "kind" : "implicit def"}, {"label" : "MatSclrElmOpLDD", "tail" : "(op: BinOp[Op, Long, Double, Double]): MatSclrElemOp[Op, Long, Double, Double]", "member" : "org.saddle.ops.BinOpMat.MatSclrElmOpLDD", "link" : "org\/saddle\/ops\/BinOps$.html#MatSclrElmOpLDD[Op<:org.saddle.ops.ScalarOp](implicitop:org.saddle.ops.BinOp[Op,Long,Double,Double]):BinOpMat.this.MatSclrElemOp[Op,Long,Double,Double]", "kind" : "implicit def"}, {"label" : "MatSclrElmOpDID", "tail" : "(op: BinOp[Op, Double, Int, Double]): MatSclrElemOp[Op, Double, Int, Double]", "member" : "org.saddle.ops.BinOpMat.MatSclrElmOpDID", "link" : "org\/saddle\/ops\/BinOps$.html#MatSclrElmOpDID[Op<:org.saddle.ops.ScalarOp](implicitop:org.saddle.ops.BinOp[Op,Double,Int,Double]):BinOpMat.this.MatSclrElemOp[Op,Double,Int,Double]", "kind" : "implicit def"}, {"label" : "MatSclrElmOpDLD", "tail" : "(op: BinOp[Op, Double, Long, Double]): MatSclrElemOp[Op, Double, Long, Double]", "member" : "org.saddle.ops.BinOpMat.MatSclrElmOpDLD", "link" : "org\/saddle\/ops\/BinOps$.html#MatSclrElmOpDLD[Op<:org.saddle.ops.ScalarOp](implicitop:org.saddle.ops.BinOp[Op,Double,Long,Double]):BinOpMat.this.MatSclrElemOp[Op,Double,Long,Double]", "kind" : "implicit def"}, {"label" : "MatSclrElmOpDDD", "tail" : "(op: BinOp[Op, Double, Double, Double]): MatSclrElemOp[Op, Double, Double, Double]", "member" : "org.saddle.ops.BinOpMat.MatSclrElmOpDDD", "link" : "org\/saddle\/ops\/BinOps$.html#MatSclrElmOpDDD[Op<:org.saddle.ops.ScalarOp](implicitop:org.saddle.ops.BinOp[Op,Double,Double,Double]):BinOpMat.this.MatSclrElemOp[Op,Double,Double,Double]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/saddle\/ops\/BinOps$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/saddle\/ops\/BinOps$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/saddle\/ops\/BinOps$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/saddle\/ops\/BinOps$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/saddle\/ops\/BinOps$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/saddle\/ops\/BinOps$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/saddle\/ops\/BinOps$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/ops\/BinOps$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/ops\/BinOps$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/ops\/BinOps$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/saddle\/ops\/BinOps$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/saddle\/ops\/BinOps$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/saddle\/ops\/BinOps$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/saddle\/ops\/BinOps$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/saddle\/ops\/BinOps$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/saddle\/ops\/BinOps$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "org\/saddle\/ops\/BinOps$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/saddle\/ops\/BinOps$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/saddle\/ops\/BinOps$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "org.saddle.ops.BinOpSeries", "trait" : "org\/saddle\/ops\/BinOpSeries.html", "kind" : "trait", "members_trait" : [{"label" : "SrSrEOpBBB", "tail" : "(cm: ST[X], cmp: ORD[X], opv: BinOp[Op, Vec[Boolean], Vec[Boolean], Vec[Boolean]]): SrSrEOp[Op, X, Boolean, Boolean, Boolean]", "member" : "org.saddle.ops.BinOpSeries.SrSrEOpBBB", "link" : "org\/saddle\/ops\/BinOpSeries.html#SrSrEOpBBB[Op<:org.saddle.ops.ScalarOp,X](implicitcm:org.saddle.ST[X],implicitcmp:org.saddle.ORD[X],implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Boolean],org.saddle.Vec[Boolean],org.saddle.Vec[Boolean]]):BinOpSeries.this.SrSrEOp[Op,X,Boolean,Boolean,Boolean]", "kind" : "implicit def"}, {"label" : "SrSrEOpIIB", "tail" : "(cm: ST[X], cmp: ORD[X], opv: BinOp[Op, Vec[Int], Vec[Int], Vec[Boolean]]): SrSrEOp[Op, X, Int, Int, Boolean]", "member" : "org.saddle.ops.BinOpSeries.SrSrEOpIIB", "link" : "org\/saddle\/ops\/BinOpSeries.html#SrSrEOpIIB[Op<:org.saddle.ops.ScalarOp,X](implicitcm:org.saddle.ST[X],implicitcmp:org.saddle.ORD[X],implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Int],org.saddle.Vec[Int],org.saddle.Vec[Boolean]]):BinOpSeries.this.SrSrEOp[Op,X,Int,Int,Boolean]", "kind" : "implicit def"}, {"label" : "SrSrEOpILB", "tail" : "(cm: ST[X], cmp: ORD[X], opv: BinOp[Op, Vec[Int], Vec[Long], Vec[Boolean]]): SrSrEOp[Op, X, Int, Long, Boolean]", "member" : "org.saddle.ops.BinOpSeries.SrSrEOpILB", "link" : "org\/saddle\/ops\/BinOpSeries.html#SrSrEOpILB[Op<:org.saddle.ops.ScalarOp,X](implicitcm:org.saddle.ST[X],implicitcmp:org.saddle.ORD[X],implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Int],org.saddle.Vec[Long],org.saddle.Vec[Boolean]]):BinOpSeries.this.SrSrEOp[Op,X,Int,Long,Boolean]", "kind" : "implicit def"}, {"label" : "SrSrEOpIDB", "tail" : "(cm: ST[X], cmp: ORD[X], opv: BinOp[Op, Vec[Int], Vec[Double], Vec[Boolean]]): SrSrEOp[Op, X, Int, Double, Boolean]", "member" : "org.saddle.ops.BinOpSeries.SrSrEOpIDB", "link" : "org\/saddle\/ops\/BinOpSeries.html#SrSrEOpIDB[Op<:org.saddle.ops.ScalarOp,X](implicitcm:org.saddle.ST[X],implicitcmp:org.saddle.ORD[X],implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Int],org.saddle.Vec[Double],org.saddle.Vec[Boolean]]):BinOpSeries.this.SrSrEOp[Op,X,Int,Double,Boolean]", "kind" : "implicit def"}, {"label" : "SrSrEOpLIB", "tail" : "(cm: ST[X], cmp: ORD[X], opv: BinOp[Op, Vec[Long], Vec[Int], Vec[Boolean]]): SrSrEOp[Op, X, Long, Int, Boolean]", "member" : "org.saddle.ops.BinOpSeries.SrSrEOpLIB", "link" : "org\/saddle\/ops\/BinOpSeries.html#SrSrEOpLIB[Op<:org.saddle.ops.ScalarOp,X](implicitcm:org.saddle.ST[X],implicitcmp:org.saddle.ORD[X],implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Long],org.saddle.Vec[Int],org.saddle.Vec[Boolean]]):BinOpSeries.this.SrSrEOp[Op,X,Long,Int,Boolean]", "kind" : "implicit def"}, {"label" : "SrSrEOpLLB", "tail" : "(cm: ST[X], cmp: ORD[X], opv: BinOp[Op, Vec[Long], Vec[Long], Vec[Boolean]]): SrSrEOp[Op, X, Long, Long, Boolean]", "member" : "org.saddle.ops.BinOpSeries.SrSrEOpLLB", "link" : "org\/saddle\/ops\/BinOpSeries.html#SrSrEOpLLB[Op<:org.saddle.ops.ScalarOp,X](implicitcm:org.saddle.ST[X],implicitcmp:org.saddle.ORD[X],implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Long],org.saddle.Vec[Long],org.saddle.Vec[Boolean]]):BinOpSeries.this.SrSrEOp[Op,X,Long,Long,Boolean]", "kind" : "implicit def"}, {"label" : "SrSrEOpLDB", "tail" : "(cm: ST[X], cmp: ORD[X], opv: BinOp[Op, Vec[Long], Vec[Double], Vec[Boolean]]): SrSrEOp[Op, X, Long, Double, Boolean]", "member" : "org.saddle.ops.BinOpSeries.SrSrEOpLDB", "link" : "org\/saddle\/ops\/BinOpSeries.html#SrSrEOpLDB[Op<:org.saddle.ops.ScalarOp,X](implicitcm:org.saddle.ST[X],implicitcmp:org.saddle.ORD[X],implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Long],org.saddle.Vec[Double],org.saddle.Vec[Boolean]]):BinOpSeries.this.SrSrEOp[Op,X,Long,Double,Boolean]", "kind" : "implicit def"}, {"label" : "SrSrEOpDIB", "tail" : "(cm: ST[X], cmp: ORD[X], opv: BinOp[Op, Vec[Double], Vec[Int], Vec[Boolean]]): SrSrEOp[Op, X, Double, Int, Boolean]", "member" : "org.saddle.ops.BinOpSeries.SrSrEOpDIB", "link" : "org\/saddle\/ops\/BinOpSeries.html#SrSrEOpDIB[Op<:org.saddle.ops.ScalarOp,X](implicitcm:org.saddle.ST[X],implicitcmp:org.saddle.ORD[X],implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Double],org.saddle.Vec[Int],org.saddle.Vec[Boolean]]):BinOpSeries.this.SrSrEOp[Op,X,Double,Int,Boolean]", "kind" : "implicit def"}, {"label" : "SrSrEOpDLB", "tail" : "(cm: ST[X], cmp: ORD[X], opv: BinOp[Op, Vec[Double], Vec[Long], Vec[Boolean]]): SrSrEOp[Op, X, Double, Long, Boolean]", "member" : "org.saddle.ops.BinOpSeries.SrSrEOpDLB", "link" : "org\/saddle\/ops\/BinOpSeries.html#SrSrEOpDLB[Op<:org.saddle.ops.ScalarOp,X](implicitcm:org.saddle.ST[X],implicitcmp:org.saddle.ORD[X],implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Double],org.saddle.Vec[Long],org.saddle.Vec[Boolean]]):BinOpSeries.this.SrSrEOp[Op,X,Double,Long,Boolean]", "kind" : "implicit def"}, {"label" : "SrSrEOpDDB", "tail" : "(cm: ST[X], cmp: ORD[X], opv: BinOp[Op, Vec[Double], Vec[Double], Vec[Boolean]]): SrSrEOp[Op, X, Double, Double, Boolean]", "member" : "org.saddle.ops.BinOpSeries.SrSrEOpDDB", "link" : "org\/saddle\/ops\/BinOpSeries.html#SrSrEOpDDB[Op<:org.saddle.ops.ScalarOp,X](implicitcm:org.saddle.ST[X],implicitcmp:org.saddle.ORD[X],implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Double],org.saddle.Vec[Double],org.saddle.Vec[Boolean]]):BinOpSeries.this.SrSrEOp[Op,X,Double,Double,Boolean]", "kind" : "implicit def"}, {"label" : "SrSrEOpIII", "tail" : "(cm: ST[X], cmp: ORD[X], opv: BinOp[Op, Vec[Int], Vec[Int], Vec[Int]]): SrSrEOp[Op, X, Int, Int, Int]", "member" : "org.saddle.ops.BinOpSeries.SrSrEOpIII", "link" : "org\/saddle\/ops\/BinOpSeries.html#SrSrEOpIII[Op<:org.saddle.ops.ScalarOp,X](implicitcm:org.saddle.ST[X],implicitcmp:org.saddle.ORD[X],implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Int],org.saddle.Vec[Int],org.saddle.Vec[Int]]):BinOpSeries.this.SrSrEOp[Op,X,Int,Int,Int]", "kind" : "implicit def"}, {"label" : "SrSrEOpILL", "tail" : "(cm: ST[X], cmp: ORD[X], opv: BinOp[Op, Vec[Int], Vec[Long], Vec[Long]]): SrSrEOp[Op, X, Int, Long, Long]", "member" : "org.saddle.ops.BinOpSeries.SrSrEOpILL", "link" : "org\/saddle\/ops\/BinOpSeries.html#SrSrEOpILL[Op<:org.saddle.ops.ScalarOp,X](implicitcm:org.saddle.ST[X],implicitcmp:org.saddle.ORD[X],implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Int],org.saddle.Vec[Long],org.saddle.Vec[Long]]):BinOpSeries.this.SrSrEOp[Op,X,Int,Long,Long]", "kind" : "implicit def"}, {"label" : "SrSrEOpIDD", "tail" : "(cm: ST[X], cmp: ORD[X], opv: BinOp[Op, Vec[Int], Vec[Double], Vec[Double]]): SrSrEOp[Op, X, Int, Double, Double]", "member" : "org.saddle.ops.BinOpSeries.SrSrEOpIDD", "link" : "org\/saddle\/ops\/BinOpSeries.html#SrSrEOpIDD[Op<:org.saddle.ops.ScalarOp,X](implicitcm:org.saddle.ST[X],implicitcmp:org.saddle.ORD[X],implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Int],org.saddle.Vec[Double],org.saddle.Vec[Double]]):BinOpSeries.this.SrSrEOp[Op,X,Int,Double,Double]", "kind" : "implicit def"}, {"label" : "SrSrEOpLIL", "tail" : "(cm: ST[X], cmp: ORD[X], opv: BinOp[Op, Vec[Long], Vec[Int], Vec[Long]]): SrSrEOp[Op, X, Long, Int, Long]", "member" : "org.saddle.ops.BinOpSeries.SrSrEOpLIL", "link" : "org\/saddle\/ops\/BinOpSeries.html#SrSrEOpLIL[Op<:org.saddle.ops.ScalarOp,X](implicitcm:org.saddle.ST[X],implicitcmp:org.saddle.ORD[X],implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Long],org.saddle.Vec[Int],org.saddle.Vec[Long]]):BinOpSeries.this.SrSrEOp[Op,X,Long,Int,Long]", "kind" : "implicit def"}, {"label" : "SrSrEOpLLL", "tail" : "(cm: ST[X], cmp: ORD[X], opv: BinOp[Op, Vec[Long], Vec[Long], Vec[Long]]): SrSrEOp[Op, X, Long, Long, Long]", "member" : "org.saddle.ops.BinOpSeries.SrSrEOpLLL", "link" : "org\/saddle\/ops\/BinOpSeries.html#SrSrEOpLLL[Op<:org.saddle.ops.ScalarOp,X](implicitcm:org.saddle.ST[X],implicitcmp:org.saddle.ORD[X],implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Long],org.saddle.Vec[Long],org.saddle.Vec[Long]]):BinOpSeries.this.SrSrEOp[Op,X,Long,Long,Long]", "kind" : "implicit def"}, {"label" : "SrSrEOpLDD", "tail" : "(cm: ST[X], cmp: ORD[X], opv: BinOp[Op, Vec[Long], Vec[Double], Vec[Double]]): SrSrEOp[Op, X, Long, Double, Double]", "member" : "org.saddle.ops.BinOpSeries.SrSrEOpLDD", "link" : "org\/saddle\/ops\/BinOpSeries.html#SrSrEOpLDD[Op<:org.saddle.ops.ScalarOp,X](implicitcm:org.saddle.ST[X],implicitcmp:org.saddle.ORD[X],implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Long],org.saddle.Vec[Double],org.saddle.Vec[Double]]):BinOpSeries.this.SrSrEOp[Op,X,Long,Double,Double]", "kind" : "implicit def"}, {"label" : "SrSrEOpDLD", "tail" : "(cm: ST[X], cmp: ORD[X], opv: BinOp[Op, Vec[Double], Vec[Long], Vec[Double]]): SrSrEOp[Op, X, Double, Long, Double]", "member" : "org.saddle.ops.BinOpSeries.SrSrEOpDLD", "link" : "org\/saddle\/ops\/BinOpSeries.html#SrSrEOpDLD[Op<:org.saddle.ops.ScalarOp,X](implicitcm:org.saddle.ST[X],implicitcmp:org.saddle.ORD[X],implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Double],org.saddle.Vec[Long],org.saddle.Vec[Double]]):BinOpSeries.this.SrSrEOp[Op,X,Double,Long,Double]", "kind" : "implicit def"}, {"label" : "SrSrEOpDID", "tail" : "(cm: ST[X], cmp: ORD[X], opv: BinOp[Op, Vec[Double], Vec[Int], Vec[Double]]): SrSrEOp[Op, X, Double, Int, Double]", "member" : "org.saddle.ops.BinOpSeries.SrSrEOpDID", "link" : "org\/saddle\/ops\/BinOpSeries.html#SrSrEOpDID[Op<:org.saddle.ops.ScalarOp,X](implicitcm:org.saddle.ST[X],implicitcmp:org.saddle.ORD[X],implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Double],org.saddle.Vec[Int],org.saddle.Vec[Double]]):BinOpSeries.this.SrSrEOp[Op,X,Double,Int,Double]", "kind" : "implicit def"}, {"label" : "SrSrEOpDDD", "tail" : "(cm: ST[X], cmp: ORD[X], opv: BinOp[Op, Vec[Double], Vec[Double], Vec[Double]]): SrSrEOp[Op, X, Double, Double, Double]", "member" : "org.saddle.ops.BinOpSeries.SrSrEOpDDD", "link" : "org\/saddle\/ops\/BinOpSeries.html#SrSrEOpDDD[Op<:org.saddle.ops.ScalarOp,X](implicitcm:org.saddle.ST[X],implicitcmp:org.saddle.ORD[X],implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Double],org.saddle.Vec[Double],org.saddle.Vec[Double]]):BinOpSeries.this.SrSrEOp[Op,X,Double,Double,Double]", "kind" : "implicit def"}, {"label" : "SrSrEOp", "tail" : "", "member" : "org.saddle.ops.BinOpSeries.SrSrEOp", "link" : "org\/saddle\/ops\/BinOpSeries.html#SrSrEOp[OP<:org.saddle.ops.ScalarOp,X,A,B,C]extendsBinOp[OP,org.saddle.Series[X,A],org.saddle.Series[X,B],org.saddle.Series[X,C]]", "kind" : "final class"}, {"label" : "SrScEOpBBB", "tail" : "(cm: ST[X], cmp: ORD[X], opv: BinOp[Op, Vec[Boolean], Boolean, Vec[Boolean]]): SrScEOp[Op, X, Boolean, Boolean, Boolean]", "member" : "org.saddle.ops.BinOpSeries.SrScEOpBBB", "link" : "org\/saddle\/ops\/BinOpSeries.html#SrScEOpBBB[Op<:org.saddle.ops.ScalarOp,X](implicitcm:org.saddle.ST[X],implicitcmp:org.saddle.ORD[X],implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Boolean],Boolean,org.saddle.Vec[Boolean]]):BinOpSeries.this.SrScEOp[Op,X,Boolean,Boolean,Boolean]", "kind" : "implicit def"}, {"label" : "SrScEOpIIB", "tail" : "(cm: ST[X], cmp: ORD[X], opv: BinOp[Op, Vec[Int], Int, Vec[Boolean]]): SrScEOp[Op, X, Int, Int, Boolean]", "member" : "org.saddle.ops.BinOpSeries.SrScEOpIIB", "link" : "org\/saddle\/ops\/BinOpSeries.html#SrScEOpIIB[Op<:org.saddle.ops.ScalarOp,X](implicitcm:org.saddle.ST[X],implicitcmp:org.saddle.ORD[X],implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Int],Int,org.saddle.Vec[Boolean]]):BinOpSeries.this.SrScEOp[Op,X,Int,Int,Boolean]", "kind" : "implicit def"}, {"label" : "SrScEOpILB", "tail" : "(cm: ST[X], cmp: ORD[X], opv: BinOp[Op, Vec[Int], Long, Vec[Boolean]]): SrScEOp[Op, X, Int, Long, Boolean]", "member" : "org.saddle.ops.BinOpSeries.SrScEOpILB", "link" : "org\/saddle\/ops\/BinOpSeries.html#SrScEOpILB[Op<:org.saddle.ops.ScalarOp,X](implicitcm:org.saddle.ST[X],implicitcmp:org.saddle.ORD[X],implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Int],Long,org.saddle.Vec[Boolean]]):BinOpSeries.this.SrScEOp[Op,X,Int,Long,Boolean]", "kind" : "implicit def"}, {"label" : "SrScEOpIDB", "tail" : "(cm: ST[X], cmp: ORD[X], opv: BinOp[Op, Vec[Int], Double, Vec[Boolean]]): SrScEOp[Op, X, Int, Double, Boolean]", "member" : "org.saddle.ops.BinOpSeries.SrScEOpIDB", "link" : "org\/saddle\/ops\/BinOpSeries.html#SrScEOpIDB[Op<:org.saddle.ops.ScalarOp,X](implicitcm:org.saddle.ST[X],implicitcmp:org.saddle.ORD[X],implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Int],Double,org.saddle.Vec[Boolean]]):BinOpSeries.this.SrScEOp[Op,X,Int,Double,Boolean]", "kind" : "implicit def"}, {"label" : "SrScEOpLIB", "tail" : "(cm: ST[X], cmp: ORD[X], opv: BinOp[Op, Vec[Long], Int, Vec[Boolean]]): SrScEOp[Op, X, Long, Int, Boolean]", "member" : "org.saddle.ops.BinOpSeries.SrScEOpLIB", "link" : "org\/saddle\/ops\/BinOpSeries.html#SrScEOpLIB[Op<:org.saddle.ops.ScalarOp,X](implicitcm:org.saddle.ST[X],implicitcmp:org.saddle.ORD[X],implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Long],Int,org.saddle.Vec[Boolean]]):BinOpSeries.this.SrScEOp[Op,X,Long,Int,Boolean]", "kind" : "implicit def"}, {"label" : "SrScEOpLLB", "tail" : "(cm: ST[X], cmp: ORD[X], opv: BinOp[Op, Vec[Long], Long, Vec[Boolean]]): SrScEOp[Op, X, Long, Long, Boolean]", "member" : "org.saddle.ops.BinOpSeries.SrScEOpLLB", "link" : "org\/saddle\/ops\/BinOpSeries.html#SrScEOpLLB[Op<:org.saddle.ops.ScalarOp,X](implicitcm:org.saddle.ST[X],implicitcmp:org.saddle.ORD[X],implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Long],Long,org.saddle.Vec[Boolean]]):BinOpSeries.this.SrScEOp[Op,X,Long,Long,Boolean]", "kind" : "implicit def"}, {"label" : "SrScEOpLDB", "tail" : "(cm: ST[X], cmp: ORD[X], opv: BinOp[Op, Vec[Long], Double, Vec[Boolean]]): SrScEOp[Op, X, Long, Double, Boolean]", "member" : "org.saddle.ops.BinOpSeries.SrScEOpLDB", "link" : "org\/saddle\/ops\/BinOpSeries.html#SrScEOpLDB[Op<:org.saddle.ops.ScalarOp,X](implicitcm:org.saddle.ST[X],implicitcmp:org.saddle.ORD[X],implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Long],Double,org.saddle.Vec[Boolean]]):BinOpSeries.this.SrScEOp[Op,X,Long,Double,Boolean]", "kind" : "implicit def"}, {"label" : "SrScEOpDIB", "tail" : "(cm: ST[X], cmp: ORD[X], opv: BinOp[Op, Vec[Double], Int, Vec[Boolean]]): SrScEOp[Op, X, Double, Int, Boolean]", "member" : "org.saddle.ops.BinOpSeries.SrScEOpDIB", "link" : "org\/saddle\/ops\/BinOpSeries.html#SrScEOpDIB[Op<:org.saddle.ops.ScalarOp,X](implicitcm:org.saddle.ST[X],implicitcmp:org.saddle.ORD[X],implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Double],Int,org.saddle.Vec[Boolean]]):BinOpSeries.this.SrScEOp[Op,X,Double,Int,Boolean]", "kind" : "implicit def"}, {"label" : "SrScEOpDLB", "tail" : "(cm: ST[X], cmp: ORD[X], opv: BinOp[Op, Vec[Double], Long, Vec[Boolean]]): SrScEOp[Op, X, Double, Long, Boolean]", "member" : "org.saddle.ops.BinOpSeries.SrScEOpDLB", "link" : "org\/saddle\/ops\/BinOpSeries.html#SrScEOpDLB[Op<:org.saddle.ops.ScalarOp,X](implicitcm:org.saddle.ST[X],implicitcmp:org.saddle.ORD[X],implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Double],Long,org.saddle.Vec[Boolean]]):BinOpSeries.this.SrScEOp[Op,X,Double,Long,Boolean]", "kind" : "implicit def"}, {"label" : "SrScEOpDDB", "tail" : "(cm: ST[X], cmp: ORD[X], opv: BinOp[Op, Vec[Double], Double, Vec[Boolean]]): SrScEOp[Op, X, Double, Double, Boolean]", "member" : "org.saddle.ops.BinOpSeries.SrScEOpDDB", "link" : "org\/saddle\/ops\/BinOpSeries.html#SrScEOpDDB[Op<:org.saddle.ops.ScalarOp,X](implicitcm:org.saddle.ST[X],implicitcmp:org.saddle.ORD[X],implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Double],Double,org.saddle.Vec[Boolean]]):BinOpSeries.this.SrScEOp[Op,X,Double,Double,Boolean]", "kind" : "implicit def"}, {"label" : "SrScEOpIII", "tail" : "(cm: ST[X], cmp: ORD[X], opv: BinOp[Op, Vec[Int], Int, Vec[Int]]): SrScEOp[Op, X, Int, Int, Int]", "member" : "org.saddle.ops.BinOpSeries.SrScEOpIII", "link" : "org\/saddle\/ops\/BinOpSeries.html#SrScEOpIII[Op<:org.saddle.ops.ScalarOp,X](implicitcm:org.saddle.ST[X],implicitcmp:org.saddle.ORD[X],implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Int],Int,org.saddle.Vec[Int]]):BinOpSeries.this.SrScEOp[Op,X,Int,Int,Int]", "kind" : "implicit def"}, {"label" : "SrScEOpILL", "tail" : "(cm: ST[X], cmp: ORD[X], opv: BinOp[Op, Vec[Int], Long, Vec[Long]]): SrScEOp[Op, X, Int, Long, Long]", "member" : "org.saddle.ops.BinOpSeries.SrScEOpILL", "link" : "org\/saddle\/ops\/BinOpSeries.html#SrScEOpILL[Op<:org.saddle.ops.ScalarOp,X](implicitcm:org.saddle.ST[X],implicitcmp:org.saddle.ORD[X],implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Int],Long,org.saddle.Vec[Long]]):BinOpSeries.this.SrScEOp[Op,X,Int,Long,Long]", "kind" : "implicit def"}, {"label" : "SrScEOpIDD", "tail" : "(cm: ST[X], cmp: ORD[X], opv: BinOp[Op, Vec[Int], Double, Vec[Double]]): SrScEOp[Op, X, Int, Double, Double]", "member" : "org.saddle.ops.BinOpSeries.SrScEOpIDD", "link" : "org\/saddle\/ops\/BinOpSeries.html#SrScEOpIDD[Op<:org.saddle.ops.ScalarOp,X](implicitcm:org.saddle.ST[X],implicitcmp:org.saddle.ORD[X],implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Int],Double,org.saddle.Vec[Double]]):BinOpSeries.this.SrScEOp[Op,X,Int,Double,Double]", "kind" : "implicit def"}, {"label" : "SrScEOpLIL", "tail" : "(cm: ST[X], cmp: ORD[X], opv: BinOp[Op, Vec[Long], Int, Vec[Long]]): SrScEOp[Op, X, Long, Int, Long]", "member" : "org.saddle.ops.BinOpSeries.SrScEOpLIL", "link" : "org\/saddle\/ops\/BinOpSeries.html#SrScEOpLIL[Op<:org.saddle.ops.ScalarOp,X](implicitcm:org.saddle.ST[X],implicitcmp:org.saddle.ORD[X],implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Long],Int,org.saddle.Vec[Long]]):BinOpSeries.this.SrScEOp[Op,X,Long,Int,Long]", "kind" : "implicit def"}, {"label" : "SrScEOpLLL", "tail" : "(cm: ST[X], cmp: ORD[X], opv: BinOp[Op, Vec[Long], Long, Vec[Long]]): SrScEOp[Op, X, Long, Long, Long]", "member" : "org.saddle.ops.BinOpSeries.SrScEOpLLL", "link" : "org\/saddle\/ops\/BinOpSeries.html#SrScEOpLLL[Op<:org.saddle.ops.ScalarOp,X](implicitcm:org.saddle.ST[X],implicitcmp:org.saddle.ORD[X],implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Long],Long,org.saddle.Vec[Long]]):BinOpSeries.this.SrScEOp[Op,X,Long,Long,Long]", "kind" : "implicit def"}, {"label" : "SrScEOpLDD", "tail" : "(cm: ST[X], cmp: ORD[X], opv: BinOp[Op, Vec[Long], Double, Vec[Double]]): SrScEOp[Op, X, Long, Double, Double]", "member" : "org.saddle.ops.BinOpSeries.SrScEOpLDD", "link" : "org\/saddle\/ops\/BinOpSeries.html#SrScEOpLDD[Op<:org.saddle.ops.ScalarOp,X](implicitcm:org.saddle.ST[X],implicitcmp:org.saddle.ORD[X],implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Long],Double,org.saddle.Vec[Double]]):BinOpSeries.this.SrScEOp[Op,X,Long,Double,Double]", "kind" : "implicit def"}, {"label" : "SrScEOpDID", "tail" : "(cm: ST[X], cmp: ORD[X], opv: BinOp[Op, Vec[Double], Int, Vec[Double]]): SrScEOp[Op, X, Double, Int, Double]", "member" : "org.saddle.ops.BinOpSeries.SrScEOpDID", "link" : "org\/saddle\/ops\/BinOpSeries.html#SrScEOpDID[Op<:org.saddle.ops.ScalarOp,X](implicitcm:org.saddle.ST[X],implicitcmp:org.saddle.ORD[X],implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Double],Int,org.saddle.Vec[Double]]):BinOpSeries.this.SrScEOp[Op,X,Double,Int,Double]", "kind" : "implicit def"}, {"label" : "SrScEOpDLD", "tail" : "(cm: ST[X], cmp: ORD[X], opv: BinOp[Op, Vec[Double], Long, Vec[Double]]): SrScEOp[Op, X, Double, Long, Double]", "member" : "org.saddle.ops.BinOpSeries.SrScEOpDLD", "link" : "org\/saddle\/ops\/BinOpSeries.html#SrScEOpDLD[Op<:org.saddle.ops.ScalarOp,X](implicitcm:org.saddle.ST[X],implicitcmp:org.saddle.ORD[X],implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Double],Long,org.saddle.Vec[Double]]):BinOpSeries.this.SrScEOp[Op,X,Double,Long,Double]", "kind" : "implicit def"}, {"label" : "SrScEOpDDD", "tail" : "(cm: ST[X], cmp: ORD[X], opv: BinOp[Op, Vec[Double], Double, Vec[Double]]): SrScEOp[Op, X, Double, Double, Double]", "member" : "org.saddle.ops.BinOpSeries.SrScEOpDDD", "link" : "org\/saddle\/ops\/BinOpSeries.html#SrScEOpDDD[Op<:org.saddle.ops.ScalarOp,X](implicitcm:org.saddle.ST[X],implicitcmp:org.saddle.ORD[X],implicitopv:org.saddle.ops.BinOp[Op,org.saddle.Vec[Double],Double,org.saddle.Vec[Double]]):BinOpSeries.this.SrScEOp[Op,X,Double,Double,Double]", "kind" : "implicit def"}, {"label" : "SrScEOp", "tail" : "", "member" : "org.saddle.ops.BinOpSeries.SrScEOp", "link" : "org\/saddle\/ops\/BinOpSeries.html#SrScEOp[OP<:org.saddle.ops.ScalarOp,X,A,B,C]extendsBinOp[OP,org.saddle.Series[X,A],B,org.saddle.Series[X,C]]", "kind" : "final class"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/saddle\/ops\/BinOpSeries.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/saddle\/ops\/BinOpSeries.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/saddle\/ops\/BinOpSeries.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/saddle\/ops\/BinOpSeries.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/saddle\/ops\/BinOpSeries.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/saddle\/ops\/BinOpSeries.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/saddle\/ops\/BinOpSeries.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/ops\/BinOpSeries.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/ops\/BinOpSeries.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/ops\/BinOpSeries.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/saddle\/ops\/BinOpSeries.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/saddle\/ops\/BinOpSeries.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/saddle\/ops\/BinOpSeries.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/saddle\/ops\/BinOpSeries.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/saddle\/ops\/BinOpSeries.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/saddle\/ops\/BinOpSeries.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "org\/saddle\/ops\/BinOpSeries.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/saddle\/ops\/BinOpSeries.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/saddle\/ops\/BinOpSeries.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "Provides concrete implementations of binary operations fororg.saddle.Series; these instances provide implicit support fororg.saddle.ops.NumericOps methods which are inherited by Series."}, {"name" : "org.saddle.ops.BinOpVec", "trait" : "org\/saddle\/ops\/BinOpVec.html", "kind" : "trait", "members_trait" : [{"label" : "VecVecOuterOpIII", "tail" : "(opM: BinOp[Multiply, Int, Int, Int]): VecVecOuter[Int, Int, Int]", "member" : "org.saddle.ops.BinOpVec.VecVecOuterOpIII", "link" : "org\/saddle\/ops\/BinOpVec.html#VecVecOuterOpIII(implicitopM:org.saddle.ops.BinOp[org.saddle.ops.Multiply,Int,Int,Int]):BinOpVec.this.VecVecOuter[Int,Int,Int]", "kind" : "implicit def"}, {"label" : "VecVecOuterOpILL", "tail" : "(opM: BinOp[Multiply, Int, Long, Long]): VecVecOuter[Int, Long, Long]", "member" : "org.saddle.ops.BinOpVec.VecVecOuterOpILL", "link" : "org\/saddle\/ops\/BinOpVec.html#VecVecOuterOpILL(implicitopM:org.saddle.ops.BinOp[org.saddle.ops.Multiply,Int,Long,Long]):BinOpVec.this.VecVecOuter[Int,Long,Long]", "kind" : "implicit def"}, {"label" : "VecVecOuterOpIDD", "tail" : "(opM: BinOp[Multiply, Int, Double, Double]): VecVecOuter[Int, Double, Double]", "member" : "org.saddle.ops.BinOpVec.VecVecOuterOpIDD", "link" : "org\/saddle\/ops\/BinOpVec.html#VecVecOuterOpIDD(implicitopM:org.saddle.ops.BinOp[org.saddle.ops.Multiply,Int,Double,Double]):BinOpVec.this.VecVecOuter[Int,Double,Double]", "kind" : "implicit def"}, {"label" : "VecVecOuterOpLIL", "tail" : "(opM: BinOp[Multiply, Long, Int, Long]): VecVecOuter[Long, Int, Long]", "member" : "org.saddle.ops.BinOpVec.VecVecOuterOpLIL", "link" : "org\/saddle\/ops\/BinOpVec.html#VecVecOuterOpLIL(implicitopM:org.saddle.ops.BinOp[org.saddle.ops.Multiply,Long,Int,Long]):BinOpVec.this.VecVecOuter[Long,Int,Long]", "kind" : "implicit def"}, {"label" : "VecVecOuterOpLLL", "tail" : "(opM: BinOp[Multiply, Long, Long, Long]): VecVecOuter[Long, Long, Long]", "member" : "org.saddle.ops.BinOpVec.VecVecOuterOpLLL", "link" : "org\/saddle\/ops\/BinOpVec.html#VecVecOuterOpLLL(implicitopM:org.saddle.ops.BinOp[org.saddle.ops.Multiply,Long,Long,Long]):BinOpVec.this.VecVecOuter[Long,Long,Long]", "kind" : "implicit def"}, {"label" : "VecVecOuterOpLDD", "tail" : "(opM: BinOp[Multiply, Long, Double, Double]): VecVecOuter[Long, Double, Double]", "member" : "org.saddle.ops.BinOpVec.VecVecOuterOpLDD", "link" : "org\/saddle\/ops\/BinOpVec.html#VecVecOuterOpLDD(implicitopM:org.saddle.ops.BinOp[org.saddle.ops.Multiply,Long,Double,Double]):BinOpVec.this.VecVecOuter[Long,Double,Double]", "kind" : "implicit def"}, {"label" : "VecVecOuterOpDID", "tail" : "(opM: BinOp[Multiply, Double, Int, Double]): VecVecOuter[Double, Int, Double]", "member" : "org.saddle.ops.BinOpVec.VecVecOuterOpDID", "link" : "org\/saddle\/ops\/BinOpVec.html#VecVecOuterOpDID(implicitopM:org.saddle.ops.BinOp[org.saddle.ops.Multiply,Double,Int,Double]):BinOpVec.this.VecVecOuter[Double,Int,Double]", "kind" : "implicit def"}, {"label" : "VecVecOuterOpDLD", "tail" : "(opM: BinOp[Multiply, Double, Long, Double]): VecVecOuter[Double, Long, Double]", "member" : "org.saddle.ops.BinOpVec.VecVecOuterOpDLD", "link" : "org\/saddle\/ops\/BinOpVec.html#VecVecOuterOpDLD(implicitopM:org.saddle.ops.BinOp[org.saddle.ops.Multiply,Double,Long,Double]):BinOpVec.this.VecVecOuter[Double,Long,Double]", "kind" : "implicit def"}, {"label" : "VecVecOuterOpDDD", "tail" : "(opM: BinOp[Multiply, Double, Double, Double]): VecVecOuter[Double, Double, Double]", "member" : "org.saddle.ops.BinOpVec.VecVecOuterOpDDD", "link" : "org\/saddle\/ops\/BinOpVec.html#VecVecOuterOpDDD(implicitopM:org.saddle.ops.BinOp[org.saddle.ops.Multiply,Double,Double,Double]):BinOpVec.this.VecVecOuter[Double,Double,Double]", "kind" : "implicit def"}, {"label" : "VecVecOuter", "tail" : "", "member" : "org.saddle.ops.BinOpVec.VecVecOuter", "link" : "org\/saddle\/ops\/BinOpVec.html#VecVecOuter[A,B,C]extendsBinOp[org.saddle.ops.OuterProd,org.saddle.Vec[A],org.saddle.Vec[B],org.saddle.Mat[C]]", "kind" : "final class"}, {"label" : "VecVecDotOpIII", "tail" : "(opA: BinOp[Add, Int, Int, Int], opM: BinOp[Multiply, Int, Int, Int]): VecVecDot[Int, Int, Int]", "member" : "org.saddle.ops.BinOpVec.VecVecDotOpIII", "link" : "org\/saddle\/ops\/BinOpVec.html#VecVecDotOpIII(implicitopA:org.saddle.ops.BinOp[org.saddle.ops.Add,Int,Int,Int],implicitopM:org.saddle.ops.BinOp[org.saddle.ops.Multiply,Int,Int,Int]):BinOpVec.this.VecVecDot[Int,Int,Int]", "kind" : "implicit def"}, {"label" : "VecVecDotOpILL", "tail" : "(opA: BinOp[Add, Long, Long, Long], opM: BinOp[Multiply, Int, Long, Long]): VecVecDot[Int, Long, Long]", "member" : "org.saddle.ops.BinOpVec.VecVecDotOpILL", "link" : "org\/saddle\/ops\/BinOpVec.html#VecVecDotOpILL(implicitopA:org.saddle.ops.BinOp[org.saddle.ops.Add,Long,Long,Long],implicitopM:org.saddle.ops.BinOp[org.saddle.ops.Multiply,Int,Long,Long]):BinOpVec.this.VecVecDot[Int,Long,Long]", "kind" : "implicit def"}, {"label" : "VecVecDotOpIDD", "tail" : "(opA: BinOp[Add, Double, Double, Double], opM: BinOp[Multiply, Int, Double, Double]): VecVecDot[Int, Double, Double]", "member" : "org.saddle.ops.BinOpVec.VecVecDotOpIDD", "link" : "org\/saddle\/ops\/BinOpVec.html#VecVecDotOpIDD(implicitopA:org.saddle.ops.BinOp[org.saddle.ops.Add,Double,Double,Double],implicitopM:org.saddle.ops.BinOp[org.saddle.ops.Multiply,Int,Double,Double]):BinOpVec.this.VecVecDot[Int,Double,Double]", "kind" : "implicit def"}, {"label" : "VecVecDotOpLIL", "tail" : "(opA: BinOp[Add, Long, Long, Long], opM: BinOp[Multiply, Long, Int, Long]): VecVecDot[Long, Int, Long]", "member" : "org.saddle.ops.BinOpVec.VecVecDotOpLIL", "link" : "org\/saddle\/ops\/BinOpVec.html#VecVecDotOpLIL(implicitopA:org.saddle.ops.BinOp[org.saddle.ops.Add,Long,Long,Long],implicitopM:org.saddle.ops.BinOp[org.saddle.ops.Multiply,Long,Int,Long]):BinOpVec.this.VecVecDot[Long,Int,Long]", "kind" : "implicit def"}, {"label" : "VecVecDotOpLLL", "tail" : "(opA: BinOp[Add, Long, Long, Long], opM: BinOp[Multiply, Long, Long, Long]): VecVecDot[Long, Long, Long]", "member" : "org.saddle.ops.BinOpVec.VecVecDotOpLLL", "link" : "org\/saddle\/ops\/BinOpVec.html#VecVecDotOpLLL(implicitopA:org.saddle.ops.BinOp[org.saddle.ops.Add,Long,Long,Long],implicitopM:org.saddle.ops.BinOp[org.saddle.ops.Multiply,Long,Long,Long]):BinOpVec.this.VecVecDot[Long,Long,Long]", "kind" : "implicit def"}, {"label" : "VecVecDotOpLDD", "tail" : "(opA: BinOp[Add, Double, Double, Double], opM: BinOp[Multiply, Long, Double, Double]): VecVecDot[Long, Double, Double]", "member" : "org.saddle.ops.BinOpVec.VecVecDotOpLDD", "link" : "org\/saddle\/ops\/BinOpVec.html#VecVecDotOpLDD(implicitopA:org.saddle.ops.BinOp[org.saddle.ops.Add,Double,Double,Double],implicitopM:org.saddle.ops.BinOp[org.saddle.ops.Multiply,Long,Double,Double]):BinOpVec.this.VecVecDot[Long,Double,Double]", "kind" : "implicit def"}, {"label" : "VecVecDotOpDID", "tail" : "(opA: BinOp[Add, Double, Double, Double], opM: BinOp[Multiply, Double, Int, Double]): VecVecDot[Double, Int, Double]", "member" : "org.saddle.ops.BinOpVec.VecVecDotOpDID", "link" : "org\/saddle\/ops\/BinOpVec.html#VecVecDotOpDID(implicitopA:org.saddle.ops.BinOp[org.saddle.ops.Add,Double,Double,Double],implicitopM:org.saddle.ops.BinOp[org.saddle.ops.Multiply,Double,Int,Double]):BinOpVec.this.VecVecDot[Double,Int,Double]", "kind" : "implicit def"}, {"label" : "VecVecDotOpDLD", "tail" : "(opA: BinOp[Add, Double, Double, Double], opM: BinOp[Multiply, Double, Long, Double]): VecVecDot[Double, Long, Double]", "member" : "org.saddle.ops.BinOpVec.VecVecDotOpDLD", "link" : "org\/saddle\/ops\/BinOpVec.html#VecVecDotOpDLD(implicitopA:org.saddle.ops.BinOp[org.saddle.ops.Add,Double,Double,Double],implicitopM:org.saddle.ops.BinOp[org.saddle.ops.Multiply,Double,Long,Double]):BinOpVec.this.VecVecDot[Double,Long,Double]", "kind" : "implicit def"}, {"label" : "VecVecDotOpDDD", "tail" : "(opA: BinOp[Add, Double, Double, Double], opM: BinOp[Multiply, Double, Double, Double]): VecVecDot[Double, Double, Double]", "member" : "org.saddle.ops.BinOpVec.VecVecDotOpDDD", "link" : "org\/saddle\/ops\/BinOpVec.html#VecVecDotOpDDD(implicitopA:org.saddle.ops.BinOp[org.saddle.ops.Add,Double,Double,Double],implicitopM:org.saddle.ops.BinOp[org.saddle.ops.Multiply,Double,Double,Double]):BinOpVec.this.VecVecDot[Double,Double,Double]", "kind" : "implicit def"}, {"label" : "VecVecDot", "tail" : "", "member" : "org.saddle.ops.BinOpVec.VecVecDot", "link" : "org\/saddle\/ops\/BinOpVec.html#VecVecDot[A,B,C]extendsBinOp[org.saddle.ops.InnerProd,org.saddle.Vec[A],org.saddle.Vec[B],C]", "kind" : "final class"}, {"label" : "VecVecElemOpBBB", "tail" : "(op: BinOp[Op, Boolean, Boolean, Boolean]): VecVecElemOp[Op, Boolean, Boolean, Boolean]", "member" : "org.saddle.ops.BinOpVec.VecVecElemOpBBB", "link" : "org\/saddle\/ops\/BinOpVec.html#VecVecElemOpBBB[Op<:org.saddle.ops.ScalarOp](implicitop:org.saddle.ops.BinOp[Op,Boolean,Boolean,Boolean]):BinOpVec.this.VecVecElemOp[Op,Boolean,Boolean,Boolean]", "kind" : "implicit def"}, {"label" : "VecVecElemOpIIB", "tail" : "(op: BinOp[Op, Int, Int, Boolean]): VecVecElemOp[Op, Int, Int, Boolean]", "member" : "org.saddle.ops.BinOpVec.VecVecElemOpIIB", "link" : "org\/saddle\/ops\/BinOpVec.html#VecVecElemOpIIB[Op<:org.saddle.ops.ScalarOp](implicitop:org.saddle.ops.BinOp[Op,Int,Int,Boolean]):BinOpVec.this.VecVecElemOp[Op,Int,Int,Boolean]", "kind" : "implicit def"}, {"label" : "VecVecElemOpILB", "tail" : "(op: BinOp[Op, Int, Long, Boolean]): VecVecElemOp[Op, Int, Long, Boolean]", "member" : "org.saddle.ops.BinOpVec.VecVecElemOpILB", "link" : "org\/saddle\/ops\/BinOpVec.html#VecVecElemOpILB[Op<:org.saddle.ops.ScalarOp](implicitop:org.saddle.ops.BinOp[Op,Int,Long,Boolean]):BinOpVec.this.VecVecElemOp[Op,Int,Long,Boolean]", "kind" : "implicit def"}, {"label" : "VecVecElemOpIDB", "tail" : "(op: BinOp[Op, Int, Double, Boolean]): VecVecElemOp[Op, Int, Double, Boolean]", "member" : "org.saddle.ops.BinOpVec.VecVecElemOpIDB", "link" : "org\/saddle\/ops\/BinOpVec.html#VecVecElemOpIDB[Op<:org.saddle.ops.ScalarOp](implicitop:org.saddle.ops.BinOp[Op,Int,Double,Boolean]):BinOpVec.this.VecVecElemOp[Op,Int,Double,Boolean]", "kind" : "implicit def"}, {"label" : "VecVecElemOpLIB", "tail" : "(op: BinOp[Op, Long, Int, Boolean]): VecVecElemOp[Op, Long, Int, Boolean]", "member" : "org.saddle.ops.BinOpVec.VecVecElemOpLIB", "link" : "org\/saddle\/ops\/BinOpVec.html#VecVecElemOpLIB[Op<:org.saddle.ops.ScalarOp](implicitop:org.saddle.ops.BinOp[Op,Long,Int,Boolean]):BinOpVec.this.VecVecElemOp[Op,Long,Int,Boolean]", "kind" : "implicit def"}, {"label" : "VecVecElemOpLLB", "tail" : "(op: BinOp[Op, Long, Long, Boolean]): VecVecElemOp[Op, Long, Long, Boolean]", "member" : "org.saddle.ops.BinOpVec.VecVecElemOpLLB", "link" : "org\/saddle\/ops\/BinOpVec.html#VecVecElemOpLLB[Op<:org.saddle.ops.ScalarOp](implicitop:org.saddle.ops.BinOp[Op,Long,Long,Boolean]):BinOpVec.this.VecVecElemOp[Op,Long,Long,Boolean]", "kind" : "implicit def"}, {"label" : "VecVecElemOpLDB", "tail" : "(op: BinOp[Op, Long, Double, Boolean]): VecVecElemOp[Op, Long, Double, Boolean]", "member" : "org.saddle.ops.BinOpVec.VecVecElemOpLDB", "link" : "org\/saddle\/ops\/BinOpVec.html#VecVecElemOpLDB[Op<:org.saddle.ops.ScalarOp](implicitop:org.saddle.ops.BinOp[Op,Long,Double,Boolean]):BinOpVec.this.VecVecElemOp[Op,Long,Double,Boolean]", "kind" : "implicit def"}, {"label" : "VecVecElemOpDIB", "tail" : "(op: BinOp[Op, Double, Int, Boolean]): VecVecElemOp[Op, Double, Int, Boolean]", "member" : "org.saddle.ops.BinOpVec.VecVecElemOpDIB", "link" : "org\/saddle\/ops\/BinOpVec.html#VecVecElemOpDIB[Op<:org.saddle.ops.ScalarOp](implicitop:org.saddle.ops.BinOp[Op,Double,Int,Boolean]):BinOpVec.this.VecVecElemOp[Op,Double,Int,Boolean]", "kind" : "implicit def"}, {"label" : "VecVecElemOpDLB", "tail" : "(op: BinOp[Op, Double, Long, Boolean]): VecVecElemOp[Op, Double, Long, Boolean]", "member" : "org.saddle.ops.BinOpVec.VecVecElemOpDLB", "link" : "org\/saddle\/ops\/BinOpVec.html#VecVecElemOpDLB[Op<:org.saddle.ops.ScalarOp](implicitop:org.saddle.ops.BinOp[Op,Double,Long,Boolean]):BinOpVec.this.VecVecElemOp[Op,Double,Long,Boolean]", "kind" : "implicit def"}, {"label" : "VecVecElemOpDDB", "tail" : "(op: BinOp[Op, Double, Double, Boolean]): VecVecElemOp[Op, Double, Double, Boolean]", "member" : "org.saddle.ops.BinOpVec.VecVecElemOpDDB", "link" : "org\/saddle\/ops\/BinOpVec.html#VecVecElemOpDDB[Op<:org.saddle.ops.ScalarOp](implicitop:org.saddle.ops.BinOp[Op,Double,Double,Boolean]):BinOpVec.this.VecVecElemOp[Op,Double,Double,Boolean]", "kind" : "implicit def"}, {"label" : "VecVelElemOpIII", "tail" : "(op: BinOp[Op, Int, Int, Int]): VecVecElemOp[Op, Int, Int, Int]", "member" : "org.saddle.ops.BinOpVec.VecVelElemOpIII", "link" : "org\/saddle\/ops\/BinOpVec.html#VecVelElemOpIII[Op<:org.saddle.ops.ScalarOp](implicitop:org.saddle.ops.BinOp[Op,Int,Int,Int]):BinOpVec.this.VecVecElemOp[Op,Int,Int,Int]", "kind" : "implicit def"}, {"label" : "VecVelElemOpILL", "tail" : "(op: BinOp[Op, Int, Long, Long]): VecVecElemOp[Op, Int, Long, Long]", "member" : "org.saddle.ops.BinOpVec.VecVelElemOpILL", "link" : "org\/saddle\/ops\/BinOpVec.html#VecVelElemOpILL[Op<:org.saddle.ops.ScalarOp](implicitop:org.saddle.ops.BinOp[Op,Int,Long,Long]):BinOpVec.this.VecVecElemOp[Op,Int,Long,Long]", "kind" : "implicit def"}, {"label" : "VecVelElemOpIDD", "tail" : "(op: BinOp[Op, Int, Double, Double]): VecVecElemOp[Op, Int, Double, Double]", "member" : "org.saddle.ops.BinOpVec.VecVelElemOpIDD", "link" : "org\/saddle\/ops\/BinOpVec.html#VecVelElemOpIDD[Op<:org.saddle.ops.ScalarOp](implicitop:org.saddle.ops.BinOp[Op,Int,Double,Double]):BinOpVec.this.VecVecElemOp[Op,Int,Double,Double]", "kind" : "implicit def"}, {"label" : "VecVelElemOpLIL", "tail" : "(op: BinOp[Op, Long, Int, Long]): VecVecElemOp[Op, Long, Int, Long]", "member" : "org.saddle.ops.BinOpVec.VecVelElemOpLIL", "link" : "org\/saddle\/ops\/BinOpVec.html#VecVelElemOpLIL[Op<:org.saddle.ops.ScalarOp](implicitop:org.saddle.ops.BinOp[Op,Long,Int,Long]):BinOpVec.this.VecVecElemOp[Op,Long,Int,Long]", "kind" : "implicit def"}, {"label" : "VecVelElemOpLLL", "tail" : "(op: BinOp[Op, Long, Long, Long]): VecVecElemOp[Op, Long, Long, Long]", "member" : "org.saddle.ops.BinOpVec.VecVelElemOpLLL", "link" : "org\/saddle\/ops\/BinOpVec.html#VecVelElemOpLLL[Op<:org.saddle.ops.ScalarOp](implicitop:org.saddle.ops.BinOp[Op,Long,Long,Long]):BinOpVec.this.VecVecElemOp[Op,Long,Long,Long]", "kind" : "implicit def"}, {"label" : "VecVelElemOpLDD", "tail" : "(op: BinOp[Op, Long, Double, Double]): VecVecElemOp[Op, Long, Double, Double]", "member" : "org.saddle.ops.BinOpVec.VecVelElemOpLDD", "link" : "org\/saddle\/ops\/BinOpVec.html#VecVelElemOpLDD[Op<:org.saddle.ops.ScalarOp](implicitop:org.saddle.ops.BinOp[Op,Long,Double,Double]):BinOpVec.this.VecVecElemOp[Op,Long,Double,Double]", "kind" : "implicit def"}, {"label" : "VecVelElemOpDID", "tail" : "(op: BinOp[Op, Double, Int, Double]): VecVecElemOp[Op, Double, Int, Double]", "member" : "org.saddle.ops.BinOpVec.VecVelElemOpDID", "link" : "org\/saddle\/ops\/BinOpVec.html#VecVelElemOpDID[Op<:org.saddle.ops.ScalarOp](implicitop:org.saddle.ops.BinOp[Op,Double,Int,Double]):BinOpVec.this.VecVecElemOp[Op,Double,Int,Double]", "kind" : "implicit def"}, {"label" : "VecVelElemOpDLD", "tail" : "(op: BinOp[Op, Double, Long, Double]): VecVecElemOp[Op, Double, Long, Double]", "member" : "org.saddle.ops.BinOpVec.VecVelElemOpDLD", "link" : "org\/saddle\/ops\/BinOpVec.html#VecVelElemOpDLD[Op<:org.saddle.ops.ScalarOp](implicitop:org.saddle.ops.BinOp[Op,Double,Long,Double]):BinOpVec.this.VecVecElemOp[Op,Double,Long,Double]", "kind" : "implicit def"}, {"label" : "VecVelElemOpDDD", "tail" : "(op: BinOp[Op, Double, Double, Double]): VecVecElemOp[Op, Double, Double, Double]", "member" : "org.saddle.ops.BinOpVec.VecVelElemOpDDD", "link" : "org\/saddle\/ops\/BinOpVec.html#VecVelElemOpDDD[Op<:org.saddle.ops.ScalarOp](implicitop:org.saddle.ops.BinOp[Op,Double,Double,Double]):BinOpVec.this.VecVecElemOp[Op,Double,Double,Double]", "kind" : "implicit def"}, {"label" : "VecVecElemOp", "tail" : "", "member" : "org.saddle.ops.BinOpVec.VecVecElemOp", "link" : "org\/saddle\/ops\/BinOpVec.html#VecVecElemOp[OP<:org.saddle.ops.ScalarOp,A,B,C]extendsBinOp[OP,org.saddle.Vec[A],org.saddle.Vec[B],org.saddle.Vec[C]]", "kind" : "final class"}, {"label" : "VecSclrElmOpBBB", "tail" : "(op: BinOp[Op, Boolean, Boolean, Boolean]): VecSclrElemOp[Op, Boolean, Boolean, Boolean]", "member" : "org.saddle.ops.BinOpVec.VecSclrElmOpBBB", "link" : "org\/saddle\/ops\/BinOpVec.html#VecSclrElmOpBBB[Op<:org.saddle.ops.ScalarOp](implicitop:org.saddle.ops.BinOp[Op,Boolean,Boolean,Boolean]):BinOpVec.this.VecSclrElemOp[Op,Boolean,Boolean,Boolean]", "kind" : "implicit def"}, {"label" : "VecSclrElmOpIIB", "tail" : "(op: BinOp[Op, Int, Int, Boolean]): VecSclrElemOp[Op, Int, Int, Boolean]", "member" : "org.saddle.ops.BinOpVec.VecSclrElmOpIIB", "link" : "org\/saddle\/ops\/BinOpVec.html#VecSclrElmOpIIB[Op<:org.saddle.ops.ScalarOp](implicitop:org.saddle.ops.BinOp[Op,Int,Int,Boolean]):BinOpVec.this.VecSclrElemOp[Op,Int,Int,Boolean]", "kind" : "implicit def"}, {"label" : "VecSclrElmOpILB", "tail" : "(op: BinOp[Op, Int, Long, Boolean]): VecSclrElemOp[Op, Int, Long, Boolean]", "member" : "org.saddle.ops.BinOpVec.VecSclrElmOpILB", "link" : "org\/saddle\/ops\/BinOpVec.html#VecSclrElmOpILB[Op<:org.saddle.ops.ScalarOp](implicitop:org.saddle.ops.BinOp[Op,Int,Long,Boolean]):BinOpVec.this.VecSclrElemOp[Op,Int,Long,Boolean]", "kind" : "implicit def"}, {"label" : "VecSclrElmOpIDB", "tail" : "(op: BinOp[Op, Int, Double, Boolean]): VecSclrElemOp[Op, Int, Double, Boolean]", "member" : "org.saddle.ops.BinOpVec.VecSclrElmOpIDB", "link" : "org\/saddle\/ops\/BinOpVec.html#VecSclrElmOpIDB[Op<:org.saddle.ops.ScalarOp](implicitop:org.saddle.ops.BinOp[Op,Int,Double,Boolean]):BinOpVec.this.VecSclrElemOp[Op,Int,Double,Boolean]", "kind" : "implicit def"}, {"label" : "VecSclrElmOpLIB", "tail" : "(op: BinOp[Op, Long, Int, Boolean]): VecSclrElemOp[Op, Long, Int, Boolean]", "member" : "org.saddle.ops.BinOpVec.VecSclrElmOpLIB", "link" : "org\/saddle\/ops\/BinOpVec.html#VecSclrElmOpLIB[Op<:org.saddle.ops.ScalarOp](implicitop:org.saddle.ops.BinOp[Op,Long,Int,Boolean]):BinOpVec.this.VecSclrElemOp[Op,Long,Int,Boolean]", "kind" : "implicit def"}, {"label" : "VecSclrElmOpLLB", "tail" : "(op: BinOp[Op, Long, Long, Boolean]): VecSclrElemOp[Op, Long, Long, Boolean]", "member" : "org.saddle.ops.BinOpVec.VecSclrElmOpLLB", "link" : "org\/saddle\/ops\/BinOpVec.html#VecSclrElmOpLLB[Op<:org.saddle.ops.ScalarOp](implicitop:org.saddle.ops.BinOp[Op,Long,Long,Boolean]):BinOpVec.this.VecSclrElemOp[Op,Long,Long,Boolean]", "kind" : "implicit def"}, {"label" : "VecSclrElmOpLDB", "tail" : "(op: BinOp[Op, Long, Double, Boolean]): VecSclrElemOp[Op, Long, Double, Boolean]", "member" : "org.saddle.ops.BinOpVec.VecSclrElmOpLDB", "link" : "org\/saddle\/ops\/BinOpVec.html#VecSclrElmOpLDB[Op<:org.saddle.ops.ScalarOp](implicitop:org.saddle.ops.BinOp[Op,Long,Double,Boolean]):BinOpVec.this.VecSclrElemOp[Op,Long,Double,Boolean]", "kind" : "implicit def"}, {"label" : "VecSclrElmOpDIB", "tail" : "(op: BinOp[Op, Double, Int, Boolean]): VecSclrElemOp[Op, Double, Int, Boolean]", "member" : "org.saddle.ops.BinOpVec.VecSclrElmOpDIB", "link" : "org\/saddle\/ops\/BinOpVec.html#VecSclrElmOpDIB[Op<:org.saddle.ops.ScalarOp](implicitop:org.saddle.ops.BinOp[Op,Double,Int,Boolean]):BinOpVec.this.VecSclrElemOp[Op,Double,Int,Boolean]", "kind" : "implicit def"}, {"label" : "VecSclrElmOpDLB", "tail" : "(op: BinOp[Op, Double, Long, Boolean]): VecSclrElemOp[Op, Double, Long, Boolean]", "member" : "org.saddle.ops.BinOpVec.VecSclrElmOpDLB", "link" : "org\/saddle\/ops\/BinOpVec.html#VecSclrElmOpDLB[Op<:org.saddle.ops.ScalarOp](implicitop:org.saddle.ops.BinOp[Op,Double,Long,Boolean]):BinOpVec.this.VecSclrElemOp[Op,Double,Long,Boolean]", "kind" : "implicit def"}, {"label" : "VecSclrElmOpDDB", "tail" : "(op: BinOp[Op, Double, Double, Boolean]): VecSclrElemOp[Op, Double, Double, Boolean]", "member" : "org.saddle.ops.BinOpVec.VecSclrElmOpDDB", "link" : "org\/saddle\/ops\/BinOpVec.html#VecSclrElmOpDDB[Op<:org.saddle.ops.ScalarOp](implicitop:org.saddle.ops.BinOp[Op,Double,Double,Boolean]):BinOpVec.this.VecSclrElemOp[Op,Double,Double,Boolean]", "kind" : "implicit def"}, {"label" : "VecSclrElmOpIII", "tail" : "(op: BinOp[Op, Int, Int, Int]): VecSclrElemOp[Op, Int, Int, Int]", "member" : "org.saddle.ops.BinOpVec.VecSclrElmOpIII", "link" : "org\/saddle\/ops\/BinOpVec.html#VecSclrElmOpIII[Op<:org.saddle.ops.ScalarOp](implicitop:org.saddle.ops.BinOp[Op,Int,Int,Int]):BinOpVec.this.VecSclrElemOp[Op,Int,Int,Int]", "kind" : "implicit def"}, {"label" : "VecSclrElmOpILL", "tail" : "(op: BinOp[Op, Int, Long, Long]): VecSclrElemOp[Op, Int, Long, Long]", "member" : "org.saddle.ops.BinOpVec.VecSclrElmOpILL", "link" : "org\/saddle\/ops\/BinOpVec.html#VecSclrElmOpILL[Op<:org.saddle.ops.ScalarOp](implicitop:org.saddle.ops.BinOp[Op,Int,Long,Long]):BinOpVec.this.VecSclrElemOp[Op,Int,Long,Long]", "kind" : "implicit def"}, {"label" : "VecSclrElmOpIDD", "tail" : "(op: BinOp[Op, Int, Double, Double]): VecSclrElemOp[Op, Int, Double, Double]", "member" : "org.saddle.ops.BinOpVec.VecSclrElmOpIDD", "link" : "org\/saddle\/ops\/BinOpVec.html#VecSclrElmOpIDD[Op<:org.saddle.ops.ScalarOp](implicitop:org.saddle.ops.BinOp[Op,Int,Double,Double]):BinOpVec.this.VecSclrElemOp[Op,Int,Double,Double]", "kind" : "implicit def"}, {"label" : "VecSclrElmOpLIL", "tail" : "(op: BinOp[Op, Long, Int, Long]): VecSclrElemOp[Op, Long, Int, Long]", "member" : "org.saddle.ops.BinOpVec.VecSclrElmOpLIL", "link" : "org\/saddle\/ops\/BinOpVec.html#VecSclrElmOpLIL[Op<:org.saddle.ops.ScalarOp](implicitop:org.saddle.ops.BinOp[Op,Long,Int,Long]):BinOpVec.this.VecSclrElemOp[Op,Long,Int,Long]", "kind" : "implicit def"}, {"label" : "VecSclrElmOpLLL", "tail" : "(op: BinOp[Op, Long, Long, Long]): VecSclrElemOp[Op, Long, Long, Long]", "member" : "org.saddle.ops.BinOpVec.VecSclrElmOpLLL", "link" : "org\/saddle\/ops\/BinOpVec.html#VecSclrElmOpLLL[Op<:org.saddle.ops.ScalarOp](implicitop:org.saddle.ops.BinOp[Op,Long,Long,Long]):BinOpVec.this.VecSclrElemOp[Op,Long,Long,Long]", "kind" : "implicit def"}, {"label" : "VecSclrElmOpLDD", "tail" : "(op: BinOp[Op, Long, Double, Double]): VecSclrElemOp[Op, Long, Double, Double]", "member" : "org.saddle.ops.BinOpVec.VecSclrElmOpLDD", "link" : "org\/saddle\/ops\/BinOpVec.html#VecSclrElmOpLDD[Op<:org.saddle.ops.ScalarOp](implicitop:org.saddle.ops.BinOp[Op,Long,Double,Double]):BinOpVec.this.VecSclrElemOp[Op,Long,Double,Double]", "kind" : "implicit def"}, {"label" : "VecSclrElmOpDID", "tail" : "(op: BinOp[Op, Double, Int, Double]): VecSclrElemOp[Op, Double, Int, Double]", "member" : "org.saddle.ops.BinOpVec.VecSclrElmOpDID", "link" : "org\/saddle\/ops\/BinOpVec.html#VecSclrElmOpDID[Op<:org.saddle.ops.ScalarOp](implicitop:org.saddle.ops.BinOp[Op,Double,Int,Double]):BinOpVec.this.VecSclrElemOp[Op,Double,Int,Double]", "kind" : "implicit def"}, {"label" : "VecSclrElmOpDLD", "tail" : "(op: BinOp[Op, Double, Long, Double]): VecSclrElemOp[Op, Double, Long, Double]", "member" : "org.saddle.ops.BinOpVec.VecSclrElmOpDLD", "link" : "org\/saddle\/ops\/BinOpVec.html#VecSclrElmOpDLD[Op<:org.saddle.ops.ScalarOp](implicitop:org.saddle.ops.BinOp[Op,Double,Long,Double]):BinOpVec.this.VecSclrElemOp[Op,Double,Long,Double]", "kind" : "implicit def"}, {"label" : "VecSclrElmOpDDD", "tail" : "(op: BinOp[Op, Double, Double, Double]): VecSclrElemOp[Op, Double, Double, Double]", "member" : "org.saddle.ops.BinOpVec.VecSclrElmOpDDD", "link" : "org\/saddle\/ops\/BinOpVec.html#VecSclrElmOpDDD[Op<:org.saddle.ops.ScalarOp](implicitop:org.saddle.ops.BinOp[Op,Double,Double,Double]):BinOpVec.this.VecSclrElemOp[Op,Double,Double,Double]", "kind" : "implicit def"}, {"label" : "VecSclrElemOp", "tail" : "", "member" : "org.saddle.ops.BinOpVec.VecSclrElemOp", "link" : "org\/saddle\/ops\/BinOpVec.html#VecSclrElemOp[OP<:org.saddle.ops.ScalarOp,A,B,C]extendsBinOp[OP,org.saddle.Vec[A],B,org.saddle.Vec[C]]", "kind" : "final class"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/saddle\/ops\/BinOpVec.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/saddle\/ops\/BinOpVec.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/saddle\/ops\/BinOpVec.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/saddle\/ops\/BinOpVec.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/saddle\/ops\/BinOpVec.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/saddle\/ops\/BinOpVec.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/saddle\/ops\/BinOpVec.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/ops\/BinOpVec.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/ops\/BinOpVec.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/ops\/BinOpVec.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/saddle\/ops\/BinOpVec.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/saddle\/ops\/BinOpVec.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/saddle\/ops\/BinOpVec.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/saddle\/ops\/BinOpVec.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/saddle\/ops\/BinOpVec.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/saddle\/ops\/BinOpVec.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "org\/saddle\/ops\/BinOpVec.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/saddle\/ops\/BinOpVec.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/saddle\/ops\/BinOpVec.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "Provides concrete implementations of binary operations fororg.saddle.Vec; these instances provide implicit support fororg.saddle.ops.NumericOps methods which are inherited by Vec."}, {"name" : "org.saddle.ops.BinOpVecInPlace", "trait" : "org\/saddle\/ops\/BinOpVecInPlace.html", "kind" : "trait", "members_trait" : [{"label" : "VecVecElemOpBBBIp", "tail" : "(op: BinOp[Op, Boolean, Boolean, Boolean]): VecVecElemOpIp[Op, Boolean, Boolean]", "member" : "org.saddle.ops.BinOpVecInPlace.VecVecElemOpBBBIp", "link" : "org\/saddle\/ops\/BinOpVecInPlace.html#VecVecElemOpBBBIp[Op<:org.saddle.ops.ScalarOp](implicitop:org.saddle.ops.BinOp[Op,Boolean,Boolean,Boolean]):BinOpVecInPlace.this.VecVecElemOpIp[Op,Boolean,Boolean]", "kind" : "implicit def"}, {"label" : "VecVelElemOpIIIIp", "tail" : "(op: BinOp[Op, Int, Int, Int]): VecVecElemOpIp[Op, Int, Int]", "member" : "org.saddle.ops.BinOpVecInPlace.VecVelElemOpIIIIp", "link" : "org\/saddle\/ops\/BinOpVecInPlace.html#VecVelElemOpIIIIp[Op<:org.saddle.ops.ScalarOp](implicitop:org.saddle.ops.BinOp[Op,Int,Int,Int]):BinOpVecInPlace.this.VecVecElemOpIp[Op,Int,Int]", "kind" : "implicit def"}, {"label" : "VecVelElemOpLILIp", "tail" : "(op: BinOp[Op, Long, Int, Long]): VecVecElemOpIp[Op, Long, Int]", "member" : "org.saddle.ops.BinOpVecInPlace.VecVelElemOpLILIp", "link" : "org\/saddle\/ops\/BinOpVecInPlace.html#VecVelElemOpLILIp[Op<:org.saddle.ops.ScalarOp](implicitop:org.saddle.ops.BinOp[Op,Long,Int,Long]):BinOpVecInPlace.this.VecVecElemOpIp[Op,Long,Int]", "kind" : "implicit def"}, {"label" : "VecVelElemOpLLLIp", "tail" : "(op: BinOp[Op, Long, Long, Long]): VecVecElemOpIp[Op, Long, Long]", "member" : "org.saddle.ops.BinOpVecInPlace.VecVelElemOpLLLIp", "link" : "org\/saddle\/ops\/BinOpVecInPlace.html#VecVelElemOpLLLIp[Op<:org.saddle.ops.ScalarOp](implicitop:org.saddle.ops.BinOp[Op,Long,Long,Long]):BinOpVecInPlace.this.VecVecElemOpIp[Op,Long,Long]", "kind" : "implicit def"}, {"label" : "VecVelElemOpDIDIp", "tail" : "(op: BinOp[Op, Double, Int, Double]): VecVecElemOpIp[Op, Double, Int]", "member" : "org.saddle.ops.BinOpVecInPlace.VecVelElemOpDIDIp", "link" : "org\/saddle\/ops\/BinOpVecInPlace.html#VecVelElemOpDIDIp[Op<:org.saddle.ops.ScalarOp](implicitop:org.saddle.ops.BinOp[Op,Double,Int,Double]):BinOpVecInPlace.this.VecVecElemOpIp[Op,Double,Int]", "kind" : "implicit def"}, {"label" : "VecVelElemOpDLDIp", "tail" : "(op: BinOp[Op, Double, Long, Double]): VecVecElemOpIp[Op, Double, Long]", "member" : "org.saddle.ops.BinOpVecInPlace.VecVelElemOpDLDIp", "link" : "org\/saddle\/ops\/BinOpVecInPlace.html#VecVelElemOpDLDIp[Op<:org.saddle.ops.ScalarOp](implicitop:org.saddle.ops.BinOp[Op,Double,Long,Double]):BinOpVecInPlace.this.VecVecElemOpIp[Op,Double,Long]", "kind" : "implicit def"}, {"label" : "VecVelElemOpDDDIp", "tail" : "(op: BinOp[Op, Double, Double, Double]): VecVecElemOpIp[Op, Double, Double]", "member" : "org.saddle.ops.BinOpVecInPlace.VecVelElemOpDDDIp", "link" : "org\/saddle\/ops\/BinOpVecInPlace.html#VecVelElemOpDDDIp[Op<:org.saddle.ops.ScalarOp](implicitop:org.saddle.ops.BinOp[Op,Double,Double,Double]):BinOpVecInPlace.this.VecVecElemOpIp[Op,Double,Double]", "kind" : "implicit def"}, {"label" : "VecVecElemOpIp", "tail" : "", "member" : "org.saddle.ops.BinOpVecInPlace.VecVecElemOpIp", "link" : "org\/saddle\/ops\/BinOpVecInPlace.html#VecVecElemOpIp[OP<:org.saddle.ops.ScalarOp,A,B]extendsBinOpInPlace[OP,org.saddle.Vec[A],org.saddle.Vec[B]]", "kind" : "final class"}, {"label" : "VecSclrElmOpBBBIp", "tail" : "(op: BinOp[Op, Boolean, Boolean, Boolean]): VecSclrElemOpIp[Op, Boolean, Boolean]", "member" : "org.saddle.ops.BinOpVecInPlace.VecSclrElmOpBBBIp", "link" : "org\/saddle\/ops\/BinOpVecInPlace.html#VecSclrElmOpBBBIp[Op<:org.saddle.ops.ScalarOp](implicitop:org.saddle.ops.BinOp[Op,Boolean,Boolean,Boolean]):BinOpVecInPlace.this.VecSclrElemOpIp[Op,Boolean,Boolean]", "kind" : "implicit def"}, {"label" : "VecSclrElmOpIIIIp", "tail" : "(op: BinOp[Op, Int, Int, Int]): VecSclrElemOpIp[Op, Int, Int]", "member" : "org.saddle.ops.BinOpVecInPlace.VecSclrElmOpIIIIp", "link" : "org\/saddle\/ops\/BinOpVecInPlace.html#VecSclrElmOpIIIIp[Op<:org.saddle.ops.ScalarOp](implicitop:org.saddle.ops.BinOp[Op,Int,Int,Int]):BinOpVecInPlace.this.VecSclrElemOpIp[Op,Int,Int]", "kind" : "implicit def"}, {"label" : "VecSclrElmOpLILIp", "tail" : "(op: BinOp[Op, Long, Int, Long]): VecSclrElemOpIp[Op, Long, Int]", "member" : "org.saddle.ops.BinOpVecInPlace.VecSclrElmOpLILIp", "link" : "org\/saddle\/ops\/BinOpVecInPlace.html#VecSclrElmOpLILIp[Op<:org.saddle.ops.ScalarOp](implicitop:org.saddle.ops.BinOp[Op,Long,Int,Long]):BinOpVecInPlace.this.VecSclrElemOpIp[Op,Long,Int]", "kind" : "implicit def"}, {"label" : "VecSclrElmOpLLLIp", "tail" : "(op: BinOp[Op, Long, Long, Long]): VecSclrElemOpIp[Op, Long, Long]", "member" : "org.saddle.ops.BinOpVecInPlace.VecSclrElmOpLLLIp", "link" : "org\/saddle\/ops\/BinOpVecInPlace.html#VecSclrElmOpLLLIp[Op<:org.saddle.ops.ScalarOp](implicitop:org.saddle.ops.BinOp[Op,Long,Long,Long]):BinOpVecInPlace.this.VecSclrElemOpIp[Op,Long,Long]", "kind" : "implicit def"}, {"label" : "VecSclrElmOpDIDIp", "tail" : "(op: BinOp[Op, Double, Int, Double]): VecSclrElemOpIp[Op, Double, Int]", "member" : "org.saddle.ops.BinOpVecInPlace.VecSclrElmOpDIDIp", "link" : "org\/saddle\/ops\/BinOpVecInPlace.html#VecSclrElmOpDIDIp[Op<:org.saddle.ops.ScalarOp](implicitop:org.saddle.ops.BinOp[Op,Double,Int,Double]):BinOpVecInPlace.this.VecSclrElemOpIp[Op,Double,Int]", "kind" : "implicit def"}, {"label" : "VecSclrElmOpDLDIp", "tail" : "(op: BinOp[Op, Double, Long, Double]): VecSclrElemOpIp[Op, Double, Long]", "member" : "org.saddle.ops.BinOpVecInPlace.VecSclrElmOpDLDIp", "link" : "org\/saddle\/ops\/BinOpVecInPlace.html#VecSclrElmOpDLDIp[Op<:org.saddle.ops.ScalarOp](implicitop:org.saddle.ops.BinOp[Op,Double,Long,Double]):BinOpVecInPlace.this.VecSclrElemOpIp[Op,Double,Long]", "kind" : "implicit def"}, {"label" : "VecSclrElmOpDDDIp", "tail" : "(op: BinOp[Op, Double, Double, Double]): VecSclrElemOpIp[Op, Double, Double]", "member" : "org.saddle.ops.BinOpVecInPlace.VecSclrElmOpDDDIp", "link" : "org\/saddle\/ops\/BinOpVecInPlace.html#VecSclrElmOpDDDIp[Op<:org.saddle.ops.ScalarOp](implicitop:org.saddle.ops.BinOp[Op,Double,Double,Double]):BinOpVecInPlace.this.VecSclrElemOpIp[Op,Double,Double]", "kind" : "implicit def"}, {"label" : "VecSclrElemOpIp", "tail" : "", "member" : "org.saddle.ops.BinOpVecInPlace.VecSclrElemOpIp", "link" : "org\/saddle\/ops\/BinOpVecInPlace.html#VecSclrElemOpIp[OP<:org.saddle.ops.ScalarOp,A,B]extendsBinOpInPlace[OP,org.saddle.Vec[A],B]", "kind" : "final class"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/saddle\/ops\/BinOpVecInPlace.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/saddle\/ops\/BinOpVecInPlace.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/saddle\/ops\/BinOpVecInPlace.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/saddle\/ops\/BinOpVecInPlace.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/saddle\/ops\/BinOpVecInPlace.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/saddle\/ops\/BinOpVecInPlace.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/saddle\/ops\/BinOpVecInPlace.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/ops\/BinOpVecInPlace.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/ops\/BinOpVecInPlace.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/ops\/BinOpVecInPlace.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/saddle\/ops\/BinOpVecInPlace.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/saddle\/ops\/BinOpVecInPlace.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/saddle\/ops\/BinOpVecInPlace.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/saddle\/ops\/BinOpVecInPlace.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/saddle\/ops\/BinOpVecInPlace.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/saddle\/ops\/BinOpVecInPlace.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "org\/saddle\/ops\/BinOpVecInPlace.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/saddle\/ops\/BinOpVecInPlace.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/saddle\/ops\/BinOpVecInPlace.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}, {"name" : "org.saddle.ops.BitAnd", "trait" : "org\/saddle\/ops\/BitAnd.html", "kind" : "trait", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/saddle\/ops\/BitAnd.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/saddle\/ops\/BitAnd.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/saddle\/ops\/BitAnd.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/saddle\/ops\/BitAnd.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/saddle\/ops\/BitAnd.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/saddle\/ops\/BitAnd.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/saddle\/ops\/BitAnd.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/ops\/BitAnd.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/ops\/BitAnd.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/ops\/BitAnd.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/saddle\/ops\/BitAnd.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/saddle\/ops\/BitAnd.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/saddle\/ops\/BitAnd.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/saddle\/ops\/BitAnd.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/saddle\/ops\/BitAnd.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/saddle\/ops\/BitAnd.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "org\/saddle\/ops\/BitAnd.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/saddle\/ops\/BitAnd.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/saddle\/ops\/BitAnd.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}, {"name" : "org.saddle.ops.BitOr", "trait" : "org\/saddle\/ops\/BitOr.html", "kind" : "trait", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/saddle\/ops\/BitOr.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/saddle\/ops\/BitOr.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/saddle\/ops\/BitOr.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/saddle\/ops\/BitOr.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/saddle\/ops\/BitOr.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/saddle\/ops\/BitOr.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/saddle\/ops\/BitOr.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/ops\/BitOr.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/ops\/BitOr.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/ops\/BitOr.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/saddle\/ops\/BitOr.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/saddle\/ops\/BitOr.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/saddle\/ops\/BitOr.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/saddle\/ops\/BitOr.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/saddle\/ops\/BitOr.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/saddle\/ops\/BitOr.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "org\/saddle\/ops\/BitOr.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/saddle\/ops\/BitOr.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/saddle\/ops\/BitOr.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}, {"name" : "org.saddle.ops.BitShl", "trait" : "org\/saddle\/ops\/BitShl.html", "kind" : "trait", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/saddle\/ops\/BitShl.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/saddle\/ops\/BitShl.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/saddle\/ops\/BitShl.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/saddle\/ops\/BitShl.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/saddle\/ops\/BitShl.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/saddle\/ops\/BitShl.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/saddle\/ops\/BitShl.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/ops\/BitShl.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/ops\/BitShl.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/ops\/BitShl.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/saddle\/ops\/BitShl.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/saddle\/ops\/BitShl.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/saddle\/ops\/BitShl.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/saddle\/ops\/BitShl.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/saddle\/ops\/BitShl.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/saddle\/ops\/BitShl.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "org\/saddle\/ops\/BitShl.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/saddle\/ops\/BitShl.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/saddle\/ops\/BitShl.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}, {"name" : "org.saddle.ops.BitShr", "trait" : "org\/saddle\/ops\/BitShr.html", "kind" : "trait", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/saddle\/ops\/BitShr.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/saddle\/ops\/BitShr.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/saddle\/ops\/BitShr.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/saddle\/ops\/BitShr.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/saddle\/ops\/BitShr.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/saddle\/ops\/BitShr.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/saddle\/ops\/BitShr.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/ops\/BitShr.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/ops\/BitShr.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/ops\/BitShr.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/saddle\/ops\/BitShr.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/saddle\/ops\/BitShr.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/saddle\/ops\/BitShr.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/saddle\/ops\/BitShr.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/saddle\/ops\/BitShr.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/saddle\/ops\/BitShr.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "org\/saddle\/ops\/BitShr.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/saddle\/ops\/BitShr.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/saddle\/ops\/BitShr.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}, {"name" : "org.saddle.ops.BitUShr", "trait" : "org\/saddle\/ops\/BitUShr.html", "kind" : "trait", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/saddle\/ops\/BitUShr.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/saddle\/ops\/BitUShr.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/saddle\/ops\/BitUShr.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/saddle\/ops\/BitUShr.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/saddle\/ops\/BitUShr.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/saddle\/ops\/BitUShr.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/saddle\/ops\/BitUShr.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/ops\/BitUShr.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/ops\/BitUShr.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/ops\/BitUShr.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/saddle\/ops\/BitUShr.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/saddle\/ops\/BitUShr.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/saddle\/ops\/BitUShr.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/saddle\/ops\/BitUShr.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/saddle\/ops\/BitUShr.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/saddle\/ops\/BitUShr.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "org\/saddle\/ops\/BitUShr.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/saddle\/ops\/BitUShr.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/saddle\/ops\/BitUShr.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}, {"name" : "org.saddle.ops.BitXor", "trait" : "org\/saddle\/ops\/BitXor.html", "kind" : "trait", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/saddle\/ops\/BitXor.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/saddle\/ops\/BitXor.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/saddle\/ops\/BitXor.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/saddle\/ops\/BitXor.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/saddle\/ops\/BitXor.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/saddle\/ops\/BitXor.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/saddle\/ops\/BitXor.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/ops\/BitXor.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/ops\/BitXor.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/ops\/BitXor.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/saddle\/ops\/BitXor.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/saddle\/ops\/BitXor.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/saddle\/ops\/BitXor.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/saddle\/ops\/BitXor.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/saddle\/ops\/BitXor.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/saddle\/ops\/BitXor.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "org\/saddle\/ops\/BitXor.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/saddle\/ops\/BitXor.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/saddle\/ops\/BitXor.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}, {"name" : "org.saddle.ops.Divide", "trait" : "org\/saddle\/ops\/Divide.html", "kind" : "trait", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/saddle\/ops\/Divide.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/saddle\/ops\/Divide.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/saddle\/ops\/Divide.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/saddle\/ops\/Divide.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/saddle\/ops\/Divide.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/saddle\/ops\/Divide.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/saddle\/ops\/Divide.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/ops\/Divide.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/ops\/Divide.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/ops\/Divide.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/saddle\/ops\/Divide.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/saddle\/ops\/Divide.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/saddle\/ops\/Divide.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/saddle\/ops\/Divide.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/saddle\/ops\/Divide.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/saddle\/ops\/Divide.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "org\/saddle\/ops\/Divide.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/saddle\/ops\/Divide.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/saddle\/ops\/Divide.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}, {"name" : "org.saddle.ops.EqOp", "trait" : "org\/saddle\/ops\/EqOp.html", "kind" : "trait", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/saddle\/ops\/EqOp.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/saddle\/ops\/EqOp.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/saddle\/ops\/EqOp.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/saddle\/ops\/EqOp.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/saddle\/ops\/EqOp.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/saddle\/ops\/EqOp.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/saddle\/ops\/EqOp.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/ops\/EqOp.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/ops\/EqOp.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/ops\/EqOp.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/saddle\/ops\/EqOp.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/saddle\/ops\/EqOp.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/saddle\/ops\/EqOp.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/saddle\/ops\/EqOp.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/saddle\/ops\/EqOp.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/saddle\/ops\/EqOp.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "org\/saddle\/ops\/EqOp.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/saddle\/ops\/EqOp.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/saddle\/ops\/EqOp.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}, {"name" : "org.saddle.ops.GteOp", "trait" : "org\/saddle\/ops\/GteOp.html", "kind" : "trait", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/saddle\/ops\/GteOp.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/saddle\/ops\/GteOp.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/saddle\/ops\/GteOp.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/saddle\/ops\/GteOp.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/saddle\/ops\/GteOp.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/saddle\/ops\/GteOp.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/saddle\/ops\/GteOp.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/ops\/GteOp.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/ops\/GteOp.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/ops\/GteOp.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/saddle\/ops\/GteOp.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/saddle\/ops\/GteOp.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/saddle\/ops\/GteOp.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/saddle\/ops\/GteOp.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/saddle\/ops\/GteOp.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/saddle\/ops\/GteOp.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "org\/saddle\/ops\/GteOp.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/saddle\/ops\/GteOp.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/saddle\/ops\/GteOp.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}, {"name" : "org.saddle.ops.GtOp", "trait" : "org\/saddle\/ops\/GtOp.html", "kind" : "trait", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/saddle\/ops\/GtOp.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/saddle\/ops\/GtOp.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/saddle\/ops\/GtOp.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/saddle\/ops\/GtOp.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/saddle\/ops\/GtOp.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/saddle\/ops\/GtOp.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/saddle\/ops\/GtOp.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/ops\/GtOp.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/ops\/GtOp.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/ops\/GtOp.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/saddle\/ops\/GtOp.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/saddle\/ops\/GtOp.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/saddle\/ops\/GtOp.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/saddle\/ops\/GtOp.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/saddle\/ops\/GtOp.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/saddle\/ops\/GtOp.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "org\/saddle\/ops\/GtOp.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/saddle\/ops\/GtOp.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/saddle\/ops\/GtOp.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}, {"name" : "org.saddle.ops.InnerProd", "trait" : "org\/saddle\/ops\/InnerProd.html", "kind" : "trait", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/saddle\/ops\/InnerProd.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/saddle\/ops\/InnerProd.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/saddle\/ops\/InnerProd.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/saddle\/ops\/InnerProd.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/saddle\/ops\/InnerProd.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/saddle\/ops\/InnerProd.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/saddle\/ops\/InnerProd.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/ops\/InnerProd.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/ops\/InnerProd.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/ops\/InnerProd.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/saddle\/ops\/InnerProd.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/saddle\/ops\/InnerProd.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/saddle\/ops\/InnerProd.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/saddle\/ops\/InnerProd.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/saddle\/ops\/InnerProd.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/saddle\/ops\/InnerProd.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "org\/saddle\/ops\/InnerProd.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/saddle\/ops\/InnerProd.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/saddle\/ops\/InnerProd.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}, {"name" : "org.saddle.ops.LteOp", "trait" : "org\/saddle\/ops\/LteOp.html", "kind" : "trait", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/saddle\/ops\/LteOp.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/saddle\/ops\/LteOp.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/saddle\/ops\/LteOp.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/saddle\/ops\/LteOp.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/saddle\/ops\/LteOp.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/saddle\/ops\/LteOp.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/saddle\/ops\/LteOp.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/ops\/LteOp.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/ops\/LteOp.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/ops\/LteOp.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/saddle\/ops\/LteOp.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/saddle\/ops\/LteOp.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/saddle\/ops\/LteOp.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/saddle\/ops\/LteOp.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/saddle\/ops\/LteOp.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/saddle\/ops\/LteOp.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "org\/saddle\/ops\/LteOp.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/saddle\/ops\/LteOp.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/saddle\/ops\/LteOp.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}, {"name" : "org.saddle.ops.LtOp", "trait" : "org\/saddle\/ops\/LtOp.html", "kind" : "trait", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/saddle\/ops\/LtOp.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/saddle\/ops\/LtOp.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/saddle\/ops\/LtOp.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/saddle\/ops\/LtOp.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/saddle\/ops\/LtOp.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/saddle\/ops\/LtOp.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/saddle\/ops\/LtOp.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/ops\/LtOp.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/ops\/LtOp.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/ops\/LtOp.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/saddle\/ops\/LtOp.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/saddle\/ops\/LtOp.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/saddle\/ops\/LtOp.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/saddle\/ops\/LtOp.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/saddle\/ops\/LtOp.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/saddle\/ops\/LtOp.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "org\/saddle\/ops\/LtOp.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/saddle\/ops\/LtOp.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/saddle\/ops\/LtOp.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}, {"name" : "org.saddle.ops.MatrixOp", "trait" : "org\/saddle\/ops\/MatrixOp.html", "kind" : "trait", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/saddle\/ops\/MatrixOp.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/saddle\/ops\/MatrixOp.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/saddle\/ops\/MatrixOp.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/saddle\/ops\/MatrixOp.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/saddle\/ops\/MatrixOp.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/saddle\/ops\/MatrixOp.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/saddle\/ops\/MatrixOp.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/ops\/MatrixOp.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/ops\/MatrixOp.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/ops\/MatrixOp.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/saddle\/ops\/MatrixOp.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/saddle\/ops\/MatrixOp.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/saddle\/ops\/MatrixOp.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/saddle\/ops\/MatrixOp.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/saddle\/ops\/MatrixOp.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/saddle\/ops\/MatrixOp.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "org\/saddle\/ops\/MatrixOp.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/saddle\/ops\/MatrixOp.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/saddle\/ops\/MatrixOp.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}, {"name" : "org.saddle.ops.Mod", "trait" : "org\/saddle\/ops\/Mod.html", "kind" : "trait", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/saddle\/ops\/Mod.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/saddle\/ops\/Mod.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/saddle\/ops\/Mod.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/saddle\/ops\/Mod.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/saddle\/ops\/Mod.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/saddle\/ops\/Mod.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/saddle\/ops\/Mod.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/ops\/Mod.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/ops\/Mod.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/ops\/Mod.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/saddle\/ops\/Mod.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/saddle\/ops\/Mod.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/saddle\/ops\/Mod.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/saddle\/ops\/Mod.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/saddle\/ops\/Mod.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/saddle\/ops\/Mod.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "org\/saddle\/ops\/Mod.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/saddle\/ops\/Mod.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/saddle\/ops\/Mod.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}, {"name" : "org.saddle.ops.Multiply", "trait" : "org\/saddle\/ops\/Multiply.html", "kind" : "trait", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/saddle\/ops\/Multiply.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/saddle\/ops\/Multiply.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/saddle\/ops\/Multiply.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/saddle\/ops\/Multiply.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/saddle\/ops\/Multiply.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/saddle\/ops\/Multiply.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/saddle\/ops\/Multiply.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/ops\/Multiply.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/ops\/Multiply.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/ops\/Multiply.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/saddle\/ops\/Multiply.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/saddle\/ops\/Multiply.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/saddle\/ops\/Multiply.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/saddle\/ops\/Multiply.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/saddle\/ops\/Multiply.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/saddle\/ops\/Multiply.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "org\/saddle\/ops\/Multiply.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/saddle\/ops\/Multiply.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/saddle\/ops\/Multiply.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}, {"name" : "org.saddle.ops.NeqOp", "trait" : "org\/saddle\/ops\/NeqOp.html", "kind" : "trait", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/saddle\/ops\/NeqOp.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/saddle\/ops\/NeqOp.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/saddle\/ops\/NeqOp.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/saddle\/ops\/NeqOp.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/saddle\/ops\/NeqOp.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/saddle\/ops\/NeqOp.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/saddle\/ops\/NeqOp.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/ops\/NeqOp.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/ops\/NeqOp.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/ops\/NeqOp.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/saddle\/ops\/NeqOp.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/saddle\/ops\/NeqOp.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/saddle\/ops\/NeqOp.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/saddle\/ops\/NeqOp.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/saddle\/ops\/NeqOp.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/saddle\/ops\/NeqOp.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "org\/saddle\/ops\/NeqOp.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/saddle\/ops\/NeqOp.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/saddle\/ops\/NeqOp.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}, {"name" : "org.saddle.ops.NumericOps", "trait" : "org\/saddle\/ops\/NumericOps.html", "kind" : "trait", "members_trait" : [{"label" : "**=", "tail" : "(other: B)(op: BinOpInPlace[Power, This, B]): Unit", "member" : "org.saddle.ops.NumericOps.**=", "link" : "org\/saddle\/ops\/NumericOps.html#**=[B](other:B)(implicitop:org.saddle.ops.BinOpInPlace[org.saddle.ops.Power,This,B]):Unit", "kind" : "def"}, {"label" : "%=", "tail" : "(other: B)(op: BinOpInPlace[Mod, This, B]): Unit", "member" : "org.saddle.ops.NumericOps.%=", "link" : "org\/saddle\/ops\/NumericOps.html#%=[B](other:B)(implicitop:org.saddle.ops.BinOpInPlace[org.saddle.ops.Mod,This,B]):Unit", "kind" : "def"}, {"label" : "\/=", "tail" : "(other: B)(op: BinOpInPlace[Divide, This, B]): Unit", "member" : "org.saddle.ops.NumericOps.\/=", "link" : "org\/saddle\/ops\/NumericOps.html#\/=[B](other:B)(implicitop:org.saddle.ops.BinOpInPlace[org.saddle.ops.Divide,This,B]):Unit", "kind" : "def"}, {"label" : "*=", "tail" : "(other: B)(op: BinOpInPlace[Multiply, This, B]): Unit", "member" : "org.saddle.ops.NumericOps.*=", "link" : "org\/saddle\/ops\/NumericOps.html#*=[B](other:B)(implicitop:org.saddle.ops.BinOpInPlace[org.saddle.ops.Multiply,This,B]):Unit", "kind" : "def"}, {"label" : "-=", "tail" : "(other: B)(op: BinOpInPlace[Subtract, This, B]): Unit", "member" : "org.saddle.ops.NumericOps.-=", "link" : "org\/saddle\/ops\/NumericOps.html#-=[B](other:B)(implicitop:org.saddle.ops.BinOpInPlace[org.saddle.ops.Subtract,This,B]):Unit", "kind" : "def"}, {"label" : "+=", "tail" : "(other: B)(op: BinOpInPlace[Add, This, B]): Unit", "member" : "org.saddle.ops.NumericOps.+=", "link" : "org\/saddle\/ops\/NumericOps.html#+=[B](other:B)(implicitop:org.saddle.ops.BinOpInPlace[org.saddle.ops.Add,This,B]):Unit", "kind" : "def"}, {"label" : "outer", "tail" : "(other: B)(op: BinOp[OuterProd, This, B, That]): That", "member" : "org.saddle.ops.NumericOps.outer", "link" : "org\/saddle\/ops\/NumericOps.html#outer[B,That](other:B)(implicitop:org.saddle.ops.BinOp[org.saddle.ops.OuterProd,This,B,That]):That", "kind" : "def"}, {"label" : "dot", "tail" : "(other: B)(op: BinOp[InnerProd, This, B, That]): That", "member" : "org.saddle.ops.NumericOps.dot", "link" : "org\/saddle\/ops\/NumericOps.html#dot[B,That](other:B)(implicitop:org.saddle.ops.BinOp[org.saddle.ops.InnerProd,This,B,That]):That", "kind" : "def"}, {"label" : "xor", "tail" : "(other: B)(op: BinOp[XorOp, This, B, That]): That", "member" : "org.saddle.ops.NumericOps.xor", "link" : "org\/saddle\/ops\/NumericOps.html#xor[B,That](other:B)(implicitop:org.saddle.ops.BinOp[org.saddle.ops.XorOp,This,B,That]):That", "kind" : "def"}, {"label" : "&&", "tail" : "(other: B)(op: BinOp[AndOp, This, B, That]): That", "member" : "org.saddle.ops.NumericOps.&&", "link" : "org\/saddle\/ops\/NumericOps.html#&&[B,That](other:B)(implicitop:org.saddle.ops.BinOp[org.saddle.ops.AndOp,This,B,That]):That", "kind" : "def"}, {"label" : "||", "tail" : "(other: B)(op: BinOp[OrOp, This, B, That]): That", "member" : "org.saddle.ops.NumericOps.||", "link" : "org\/saddle\/ops\/NumericOps.html#||[B,That](other:B)(implicitop:org.saddle.ops.BinOp[org.saddle.ops.OrOp,This,B,That]):That", "kind" : "def"}, {"label" : "<>", "tail" : "(other: B)(op: BinOp[NeqOp, This, B, That]): That", "member" : "org.saddle.ops.NumericOps.<>", "link" : "org\/saddle\/ops\/NumericOps.html#<>[B,That](other:B)(implicitop:org.saddle.ops.BinOp[org.saddle.ops.NeqOp,This,B,That]):That", "kind" : "def"}, {"label" : "=?", "tail" : "(other: B)(op: BinOp[EqOp, This, B, That]): That", "member" : "org.saddle.ops.NumericOps.=?", "link" : "org\/saddle\/ops\/NumericOps.html#=?[B,That](other:B)(implicitop:org.saddle.ops.BinOp[org.saddle.ops.EqOp,This,B,That]):That", "kind" : "def"}, {"label" : ">=", "tail" : "(other: B)(op: BinOp[GteOp, This, B, That]): That", "member" : "org.saddle.ops.NumericOps.>=", "link" : "org\/saddle\/ops\/NumericOps.html#>=[B,That](other:B)(implicitop:org.saddle.ops.BinOp[org.saddle.ops.GteOp,This,B,That]):That", "kind" : "def"}, {"label" : ">", "tail" : "(other: B)(op: BinOp[GtOp, This, B, That]): That", "member" : "org.saddle.ops.NumericOps.>", "link" : "org\/saddle\/ops\/NumericOps.html#>[B,That](other:B)(implicitop:org.saddle.ops.BinOp[org.saddle.ops.GtOp,This,B,That]):That", "kind" : "def"}, {"label" : "<=", "tail" : "(other: B)(op: BinOp[LteOp, This, B, That]): That", "member" : "org.saddle.ops.NumericOps.<=", "link" : "org\/saddle\/ops\/NumericOps.html#<=[B,That](other:B)(implicitop:org.saddle.ops.BinOp[org.saddle.ops.LteOp,This,B,That]):That", "kind" : "def"}, {"label" : "<", "tail" : "(other: B)(op: BinOp[LtOp, This, B, That]): That", "member" : "org.saddle.ops.NumericOps.<", "link" : "org\/saddle\/ops\/NumericOps.html#<[B,That](other:B)(implicitop:org.saddle.ops.BinOp[org.saddle.ops.LtOp,This,B,That]):That", "kind" : "def"}, {"label" : ">>>", "tail" : "(other: B)(op: BinOp[BitUShr, This, B, That]): That", "member" : "org.saddle.ops.NumericOps.>>>", "link" : "org\/saddle\/ops\/NumericOps.html#>>>[B,That](other:B)(implicitop:org.saddle.ops.BinOp[org.saddle.ops.BitUShr,This,B,That]):That", "kind" : "def"}, {"label" : ">>", "tail" : "(other: B)(op: BinOp[BitShr, This, B, That]): That", "member" : "org.saddle.ops.NumericOps.>>", "link" : "org\/saddle\/ops\/NumericOps.html#>>[B,That](other:B)(implicitop:org.saddle.ops.BinOp[org.saddle.ops.BitShr,This,B,That]):That", "kind" : "def"}, {"label" : "<<", "tail" : "(other: B)(op: BinOp[BitShl, This, B, That]): That", "member" : "org.saddle.ops.NumericOps.<<", "link" : "org\/saddle\/ops\/NumericOps.html#<<[B,That](other:B)(implicitop:org.saddle.ops.BinOp[org.saddle.ops.BitShl,This,B,That]):That", "kind" : "def"}, {"label" : "^", "tail" : "(other: B)(op: BinOp[BitXor, This, B, That]): That", "member" : "org.saddle.ops.NumericOps.^", "link" : "org\/saddle\/ops\/NumericOps.html#^[B,That](other:B)(implicitop:org.saddle.ops.BinOp[org.saddle.ops.BitXor,This,B,That]):That", "kind" : "def"}, {"label" : "|", "tail" : "(other: B)(op: BinOp[BitOr, This, B, That]): That", "member" : "org.saddle.ops.NumericOps.|", "link" : "org\/saddle\/ops\/NumericOps.html#|[B,That](other:B)(implicitop:org.saddle.ops.BinOp[org.saddle.ops.BitOr,This,B,That]):That", "kind" : "def"}, {"label" : "&", "tail" : "(other: B)(op: BinOp[BitAnd, This, B, That]): That", "member" : "org.saddle.ops.NumericOps.&", "link" : "org\/saddle\/ops\/NumericOps.html#&[B,That](other:B)(implicitop:org.saddle.ops.BinOp[org.saddle.ops.BitAnd,This,B,That]):That", "kind" : "def"}, {"label" : "**", "tail" : "(other: B)(op: BinOp[Power, This, B, That]): That", "member" : "org.saddle.ops.NumericOps.**", "link" : "org\/saddle\/ops\/NumericOps.html#**[B,That](other:B)(implicitop:org.saddle.ops.BinOp[org.saddle.ops.Power,This,B,That]):That", "kind" : "def"}, {"label" : "%", "tail" : "(other: B)(op: BinOp[Mod, This, B, That]): That", "member" : "org.saddle.ops.NumericOps.%", "link" : "org\/saddle\/ops\/NumericOps.html#%[B,That](other:B)(implicitop:org.saddle.ops.BinOp[org.saddle.ops.Mod,This,B,That]):That", "kind" : "def"}, {"label" : "*", "tail" : "(other: B)(op: BinOp[Multiply, This, B, That]): That", "member" : "org.saddle.ops.NumericOps.*", "link" : "org\/saddle\/ops\/NumericOps.html#*[B,That](other:B)(implicitop:org.saddle.ops.BinOp[org.saddle.ops.Multiply,This,B,That]):That", "kind" : "def"}, {"label" : "\/", "tail" : "(other: B)(op: BinOp[Divide, This, B, That]): That", "member" : "org.saddle.ops.NumericOps.\/", "link" : "org\/saddle\/ops\/NumericOps.html#\/[B,That](other:B)(implicitop:org.saddle.ops.BinOp[org.saddle.ops.Divide,This,B,That]):That", "kind" : "def"}, {"label" : "-", "tail" : "(other: B)(op: BinOp[Subtract, This, B, That]): That", "member" : "org.saddle.ops.NumericOps.-", "link" : "org\/saddle\/ops\/NumericOps.html#-[B,That](other:B)(implicitop:org.saddle.ops.BinOp[org.saddle.ops.Subtract,This,B,That]):That", "kind" : "def"}, {"label" : "+", "tail" : "(other: B)(op: BinOp[Add, This, B, That]): That", "member" : "org.saddle.ops.NumericOps.+", "link" : "org\/saddle\/ops\/NumericOps.html#+[B,That](other:B)(implicitop:org.saddle.ops.BinOp[org.saddle.ops.Add,This,B,That]):That", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/saddle\/ops\/NumericOps.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/saddle\/ops\/NumericOps.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/saddle\/ops\/NumericOps.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/saddle\/ops\/NumericOps.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/saddle\/ops\/NumericOps.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/saddle\/ops\/NumericOps.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/saddle\/ops\/NumericOps.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/ops\/NumericOps.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/ops\/NumericOps.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/ops\/NumericOps.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/saddle\/ops\/NumericOps.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/saddle\/ops\/NumericOps.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/saddle\/ops\/NumericOps.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/saddle\/ops\/NumericOps.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/saddle\/ops\/NumericOps.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/saddle\/ops\/NumericOps.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "org\/saddle\/ops\/NumericOps.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/saddle\/ops\/NumericOps.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/saddle\/ops\/NumericOps.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "NumericOps provides a mix-in trait for mathematical objects, which in Saddleinclude:"}, {"name" : "org.saddle.ops.OpType", "trait" : "org\/saddle\/ops\/OpType.html", "kind" : "trait", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/saddle\/ops\/OpType.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/saddle\/ops\/OpType.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/saddle\/ops\/OpType.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/saddle\/ops\/OpType.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/saddle\/ops\/OpType.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/saddle\/ops\/OpType.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/saddle\/ops\/OpType.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/ops\/OpType.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/ops\/OpType.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/ops\/OpType.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/saddle\/ops\/OpType.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/saddle\/ops\/OpType.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/saddle\/ops\/OpType.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/saddle\/ops\/OpType.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/saddle\/ops\/OpType.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/saddle\/ops\/OpType.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "org\/saddle\/ops\/OpType.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/saddle\/ops\/OpType.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/saddle\/ops\/OpType.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "All operations on Saddle objects are defined via instances of subtypes ofthe trait OpType."}, {"name" : "org.saddle.ops.OrOp", "trait" : "org\/saddle\/ops\/OrOp.html", "kind" : "trait", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/saddle\/ops\/OrOp.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/saddle\/ops\/OrOp.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/saddle\/ops\/OrOp.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/saddle\/ops\/OrOp.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/saddle\/ops\/OrOp.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/saddle\/ops\/OrOp.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/saddle\/ops\/OrOp.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/ops\/OrOp.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/ops\/OrOp.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/ops\/OrOp.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/saddle\/ops\/OrOp.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/saddle\/ops\/OrOp.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/saddle\/ops\/OrOp.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/saddle\/ops\/OrOp.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/saddle\/ops\/OrOp.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/saddle\/ops\/OrOp.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "org\/saddle\/ops\/OrOp.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/saddle\/ops\/OrOp.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/saddle\/ops\/OrOp.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}, {"name" : "org.saddle.ops.OuterProd", "trait" : "org\/saddle\/ops\/OuterProd.html", "kind" : "trait", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/saddle\/ops\/OuterProd.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/saddle\/ops\/OuterProd.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/saddle\/ops\/OuterProd.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/saddle\/ops\/OuterProd.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/saddle\/ops\/OuterProd.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/saddle\/ops\/OuterProd.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/saddle\/ops\/OuterProd.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/ops\/OuterProd.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/ops\/OuterProd.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/ops\/OuterProd.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/saddle\/ops\/OuterProd.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/saddle\/ops\/OuterProd.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/saddle\/ops\/OuterProd.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/saddle\/ops\/OuterProd.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/saddle\/ops\/OuterProd.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/saddle\/ops\/OuterProd.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "org\/saddle\/ops\/OuterProd.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/saddle\/ops\/OuterProd.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/saddle\/ops\/OuterProd.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}, {"name" : "org.saddle.ops.Power", "trait" : "org\/saddle\/ops\/Power.html", "kind" : "trait", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/saddle\/ops\/Power.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/saddle\/ops\/Power.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/saddle\/ops\/Power.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/saddle\/ops\/Power.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/saddle\/ops\/Power.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/saddle\/ops\/Power.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/saddle\/ops\/Power.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/ops\/Power.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/ops\/Power.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/ops\/Power.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/saddle\/ops\/Power.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/saddle\/ops\/Power.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/saddle\/ops\/Power.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/saddle\/ops\/Power.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/saddle\/ops\/Power.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/saddle\/ops\/Power.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "org\/saddle\/ops\/Power.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/saddle\/ops\/Power.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/saddle\/ops\/Power.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}, {"name" : "org.saddle.ops.ScalarOp", "trait" : "org\/saddle\/ops\/ScalarOp.html", "kind" : "trait", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/saddle\/ops\/ScalarOp.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/saddle\/ops\/ScalarOp.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/saddle\/ops\/ScalarOp.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/saddle\/ops\/ScalarOp.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/saddle\/ops\/ScalarOp.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/saddle\/ops\/ScalarOp.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/saddle\/ops\/ScalarOp.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/ops\/ScalarOp.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/ops\/ScalarOp.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/ops\/ScalarOp.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/saddle\/ops\/ScalarOp.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/saddle\/ops\/ScalarOp.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/saddle\/ops\/ScalarOp.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/saddle\/ops\/ScalarOp.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/saddle\/ops\/ScalarOp.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/saddle\/ops\/ScalarOp.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "org\/saddle\/ops\/ScalarOp.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/saddle\/ops\/ScalarOp.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/saddle\/ops\/ScalarOp.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}, {"name" : "org.saddle.ops.Subtract", "trait" : "org\/saddle\/ops\/Subtract.html", "kind" : "trait", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/saddle\/ops\/Subtract.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/saddle\/ops\/Subtract.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/saddle\/ops\/Subtract.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/saddle\/ops\/Subtract.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/saddle\/ops\/Subtract.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/saddle\/ops\/Subtract.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/saddle\/ops\/Subtract.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/ops\/Subtract.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/ops\/Subtract.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/ops\/Subtract.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/saddle\/ops\/Subtract.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/saddle\/ops\/Subtract.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/saddle\/ops\/Subtract.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/saddle\/ops\/Subtract.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/saddle\/ops\/Subtract.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/saddle\/ops\/Subtract.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "org\/saddle\/ops\/Subtract.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/saddle\/ops\/Subtract.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/saddle\/ops\/Subtract.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}, {"name" : "org.saddle.ops.XorOp", "trait" : "org\/saddle\/ops\/XorOp.html", "kind" : "trait", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/saddle\/ops\/XorOp.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/saddle\/ops\/XorOp.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/saddle\/ops\/XorOp.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/saddle\/ops\/XorOp.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/saddle\/ops\/XorOp.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/saddle\/ops\/XorOp.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/saddle\/ops\/XorOp.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/ops\/XorOp.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/ops\/XorOp.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/ops\/XorOp.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/saddle\/ops\/XorOp.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/saddle\/ops\/XorOp.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/saddle\/ops\/XorOp.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/saddle\/ops\/XorOp.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/saddle\/ops\/XorOp.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/saddle\/ops\/XorOp.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "org\/saddle\/ops\/XorOp.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/saddle\/ops\/XorOp.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/saddle\/ops\/XorOp.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}], "org.saddle.linalg" : [{"name" : "org.saddle.linalg.DPotrfException", "shortDescription" : "", "members_class" : [{"member" : "org.saddle.linalg.DPotrfException#<init>", "error" : "unsupported entity"}, {"label" : "getSuppressed", "tail" : "(): Array[Throwable]", "member" : "java.lang.Throwable.getSuppressed", "link" : "org\/saddle\/linalg\/DPotrfException.html#getSuppressed():Array[Throwable]", "kind" : "final def"}, {"label" : "addSuppressed", "tail" : "(arg0: Throwable): Unit", "member" : "java.lang.Throwable.addSuppressed", "link" : "org\/saddle\/linalg\/DPotrfException.html#addSuppressed(x$1:Throwable):Unit", "kind" : "final def"}, {"label" : "setStackTrace", "tail" : "(arg0: Array[StackTraceElement]): Unit", "member" : "java.lang.Throwable.setStackTrace", "link" : "org\/saddle\/linalg\/DPotrfException.html#setStackTrace(x$1:Array[StackTraceElement]):Unit", "kind" : "def"}, {"label" : "getStackTrace", "tail" : "(): Array[StackTraceElement]", "member" : "java.lang.Throwable.getStackTrace", "link" : "org\/saddle\/linalg\/DPotrfException.html#getStackTrace():Array[StackTraceElement]", "kind" : "def"}, {"label" : "fillInStackTrace", "tail" : "(): Throwable", "member" : "java.lang.Throwable.fillInStackTrace", "link" : "org\/saddle\/linalg\/DPotrfException.html#fillInStackTrace():Throwable", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintWriter): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "org\/saddle\/linalg\/DPotrfException.html#printStackTrace(x$1:java.io.PrintWriter):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintStream): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "org\/saddle\/linalg\/DPotrfException.html#printStackTrace(x$1:java.io.PrintStream):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "org\/saddle\/linalg\/DPotrfException.html#printStackTrace():Unit", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "java.lang.Throwable.toString", "link" : "org\/saddle\/linalg\/DPotrfException.html#toString():String", "kind" : "def"}, {"label" : "initCause", "tail" : "(arg0: Throwable): Throwable", "member" : "java.lang.Throwable.initCause", "link" : "org\/saddle\/linalg\/DPotrfException.html#initCause(x$1:Throwable):Throwable", "kind" : "def"}, {"label" : "getCause", "tail" : "(): Throwable", "member" : "java.lang.Throwable.getCause", "link" : "org\/saddle\/linalg\/DPotrfException.html#getCause():Throwable", "kind" : "def"}, {"label" : "getLocalizedMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getLocalizedMessage", "link" : "org\/saddle\/linalg\/DPotrfException.html#getLocalizedMessage():String", "kind" : "def"}, {"label" : "getMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getMessage", "link" : "org\/saddle\/linalg\/DPotrfException.html#getMessage():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/saddle\/linalg\/DPotrfException.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/saddle\/linalg\/DPotrfException.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/saddle\/linalg\/DPotrfException.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/saddle\/linalg\/DPotrfException.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/saddle\/linalg\/DPotrfException.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/saddle\/linalg\/DPotrfException.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/saddle\/linalg\/DPotrfException.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/linalg\/DPotrfException.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/linalg\/DPotrfException.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/linalg\/DPotrfException.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/saddle\/linalg\/DPotrfException.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/saddle\/linalg\/DPotrfException.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/saddle\/linalg\/DPotrfException.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/saddle\/linalg\/DPotrfException.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/saddle\/linalg\/DPotrfException.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "org\/saddle\/linalg\/DPotrfException.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/saddle\/linalg\/DPotrfException.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/saddle\/linalg\/DPotrfException.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/saddle\/linalg\/DPotrfException.html", "kind" : "class"}, {"name" : "org.saddle.linalg.EigenDecompositionNonSymmetric", "shortDescription" : "", "members_case class" : [{"member" : "org.saddle.linalg.EigenDecompositionNonSymmetric#<init>", "error" : "unsupported entity"}, {"label" : "lambdaImag", "tail" : ": Vec[Double]", "member" : "org.saddle.linalg.EigenDecompositionNonSymmetric.lambdaImag", "link" : "org\/saddle\/linalg\/EigenDecompositionNonSymmetric.html#lambdaImag:org.saddle.Vec[Double]", "kind" : "val"}, {"label" : "lambdaReal", "tail" : ": Vec[Double]", "member" : "org.saddle.linalg.EigenDecompositionNonSymmetric.lambdaReal", "link" : "org\/saddle\/linalg\/EigenDecompositionNonSymmetric.html#lambdaReal:org.saddle.Vec[Double]", "kind" : "val"}, {"label" : "q", "tail" : ": Mat[Double]", "member" : "org.saddle.linalg.EigenDecompositionNonSymmetric.q", "link" : "org\/saddle\/linalg\/EigenDecompositionNonSymmetric.html#q:org.saddle.Mat[Double]", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "org\/saddle\/linalg\/EigenDecompositionNonSymmetric.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/saddle\/linalg\/EigenDecompositionNonSymmetric.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/saddle\/linalg\/EigenDecompositionNonSymmetric.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/saddle\/linalg\/EigenDecompositionNonSymmetric.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/saddle\/linalg\/EigenDecompositionNonSymmetric.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/saddle\/linalg\/EigenDecompositionNonSymmetric.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/saddle\/linalg\/EigenDecompositionNonSymmetric.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/saddle\/linalg\/EigenDecompositionNonSymmetric.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/linalg\/EigenDecompositionNonSymmetric.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/linalg\/EigenDecompositionNonSymmetric.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/linalg\/EigenDecompositionNonSymmetric.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/saddle\/linalg\/EigenDecompositionNonSymmetric.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/saddle\/linalg\/EigenDecompositionNonSymmetric.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/saddle\/linalg\/EigenDecompositionNonSymmetric.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "org\/saddle\/linalg\/EigenDecompositionNonSymmetric.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/saddle\/linalg\/EigenDecompositionNonSymmetric.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/saddle\/linalg\/EigenDecompositionNonSymmetric.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "org\/saddle\/linalg\/EigenDecompositionNonSymmetric.html", "kind" : "case class"}, {"name" : "org.saddle.linalg.EigenDecompositionSymmetric", "shortDescription" : "", "members_case class" : [{"member" : "org.saddle.linalg.EigenDecompositionSymmetric#<init>", "error" : "unsupported entity"}, {"label" : "lambdaReal", "tail" : ": Vec[Double]", "member" : "org.saddle.linalg.EigenDecompositionSymmetric.lambdaReal", "link" : "org\/saddle\/linalg\/EigenDecompositionSymmetric.html#lambdaReal:org.saddle.Vec[Double]", "kind" : "val"}, {"label" : "q", "tail" : ": Mat[Double]", "member" : "org.saddle.linalg.EigenDecompositionSymmetric.q", "link" : "org\/saddle\/linalg\/EigenDecompositionSymmetric.html#q:org.saddle.Mat[Double]", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "org\/saddle\/linalg\/EigenDecompositionSymmetric.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/saddle\/linalg\/EigenDecompositionSymmetric.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/saddle\/linalg\/EigenDecompositionSymmetric.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/saddle\/linalg\/EigenDecompositionSymmetric.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/saddle\/linalg\/EigenDecompositionSymmetric.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/saddle\/linalg\/EigenDecompositionSymmetric.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/saddle\/linalg\/EigenDecompositionSymmetric.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/saddle\/linalg\/EigenDecompositionSymmetric.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/linalg\/EigenDecompositionSymmetric.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/linalg\/EigenDecompositionSymmetric.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/linalg\/EigenDecompositionSymmetric.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/saddle\/linalg\/EigenDecompositionSymmetric.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/saddle\/linalg\/EigenDecompositionSymmetric.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/saddle\/linalg\/EigenDecompositionSymmetric.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "org\/saddle\/linalg\/EigenDecompositionSymmetric.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/saddle\/linalg\/EigenDecompositionSymmetric.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/saddle\/linalg\/EigenDecompositionSymmetric.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "org\/saddle\/linalg\/EigenDecompositionSymmetric.html", "kind" : "case class"}, {"name" : "org.saddle.linalg.MatPimp", "shortDescription" : "", "members_class" : [{"label" : "solvePDTransposed", "tail" : "(rhsT: Mat[Double]): Option[Mat[Double]]", "member" : "org.saddle.linalg.MatPimp.solvePDTransposed", "link" : "org\/saddle\/linalg\/MatPimp.html#solvePDTransposed(rhsT:org.saddle.Mat[Double]):Option[org.saddle.Mat[Double]]", "kind" : "def"}, {"label" : "addDiagonalMatrix", "tail" : "(other: Vec[Double]): Mat[Double]", "member" : "org.saddle.linalg.MatPimp.addDiagonalMatrix", "link" : "org\/saddle\/linalg\/MatPimp.html#addDiagonalMatrix(other:org.saddle.Vec[Double]):org.saddle.Mat[Double]", "kind" : "def"}, {"label" : "scalarOp", "tail" : "(multiply: Double, add: Double): Mat[Double]", "member" : "org.saddle.linalg.MatPimp.scalarOp", "link" : "org\/saddle\/linalg\/MatPimp.html#scalarOp(multiply:Double,add:Double):org.saddle.Mat[Double]", "kind" : "def"}, {"label" : "\\", "tail" : "(rightHandSide: Mat[Double]): Option[Mat[Double]]", "member" : "org.saddle.linalg.MatPimp.\\", "link" : "org\/saddle\/linalg\/MatPimp.html#\\(rightHandSide:org.saddle.Mat[Double]):Option[org.saddle.Mat[Double]]", "kind" : "def"}, {"label" : "solve", "tail" : "(rightHandSide: Mat[Double]): Option[Mat[Double]]", "member" : "org.saddle.linalg.MatPimp.solve", "link" : "org\/saddle\/linalg\/MatPimp.html#solve(rightHandSide:org.saddle.Mat[Double]):Option[org.saddle.Mat[Double]]", "kind" : "def"}, {"label" : "solveUpperTriangularForTransposed", "tail" : "(rightHandSide: Mat[Double]): Option[Mat[Double]]", "member" : "org.saddle.linalg.MatPimp.solveUpperTriangularForTransposed", "link" : "org\/saddle\/linalg\/MatPimp.html#solveUpperTriangularForTransposed(rightHandSide:org.saddle.Mat[Double]):Option[org.saddle.Mat[Double]]", "kind" : "def"}, {"label" : "solveLowerTriangularForTransposed", "tail" : "(rightHandSide: Mat[Double]): Option[Mat[Double]]", "member" : "org.saddle.linalg.MatPimp.solveLowerTriangularForTransposed", "link" : "org\/saddle\/linalg\/MatPimp.html#solveLowerTriangularForTransposed(rightHandSide:org.saddle.Mat[Double]):Option[org.saddle.Mat[Double]]", "kind" : "def"}, {"label" : "determinantPD", "tail" : "(): Option[Double]", "member" : "org.saddle.linalg.MatPimp.determinantPD", "link" : "org\/saddle\/linalg\/MatPimp.html#determinantPD:Option[Double]", "kind" : "def"}, {"label" : "choleskyLower", "tail" : "(): Option[Mat[Double]]", "member" : "org.saddle.linalg.MatPimp.choleskyLower", "link" : "org\/saddle\/linalg\/MatPimp.html#choleskyLower:Option[org.saddle.Mat[Double]]", "kind" : "def"}, {"label" : "eigenValuesSymm", "tail" : "(max: Int): Vec[Double]", "member" : "org.saddle.linalg.MatPimp.eigenValuesSymm", "link" : "org\/saddle\/linalg\/MatPimp.html#eigenValuesSymm(max:Int):org.saddle.Vec[Double]", "kind" : "def"}, {"label" : "singularValues", "tail" : "(max: Int): Vec[Double]", "member" : "org.saddle.linalg.MatPimp.singularValues", "link" : "org\/saddle\/linalg\/MatPimp.html#singularValues(max:Int):org.saddle.Vec[Double]", "kind" : "def"}, {"label" : "diagInverseSandwich", "tail" : "(other: Mat[Double]): Option[Vec[Double]]", "member" : "org.saddle.linalg.MatPimp.diagInverseSandwich", "link" : "org\/saddle\/linalg\/MatPimp.html#diagInverseSandwich(other:org.saddle.Mat[Double]):Option[org.saddle.Vec[Double]]", "kind" : "def"}, {"label" : "eigSymm", "tail" : "(i: Int): EigenDecompositionSymmetric", "member" : "org.saddle.linalg.MatPimp.eigSymm", "link" : "org\/saddle\/linalg\/MatPimp.html#eigSymm(i:Int):org.saddle.linalg.EigenDecompositionSymmetric", "kind" : "def"}, {"label" : "eigSymm", "tail" : "(): EigenDecompositionSymmetric", "member" : "org.saddle.linalg.MatPimp.eigSymm", "link" : "org\/saddle\/linalg\/MatPimp.html#eigSymm:org.saddle.linalg.EigenDecompositionSymmetric", "kind" : "def"}, {"label" : "eigNonSymm", "tail" : "(): EigenDecompositionNonSymmetric", "member" : "org.saddle.linalg.MatPimp.eigNonSymm", "link" : "org\/saddle\/linalg\/MatPimp.html#eigNonSymm:org.saddle.linalg.EigenDecompositionNonSymmetric", "kind" : "def"}, {"label" : "isPositiveDefinite", "tail" : "(): Boolean", "member" : "org.saddle.linalg.MatPimp.isPositiveDefinite", "link" : "org\/saddle\/linalg\/MatPimp.html#isPositiveDefinite:Boolean", "kind" : "def"}, {"label" : "diag", "tail" : "(): Vec[Double]", "member" : "org.saddle.linalg.MatPimp.diag", "link" : "org\/saddle\/linalg\/MatPimp.html#diag:org.saddle.Vec[Double]", "kind" : "def"}, {"label" : "trace", "tail" : "(): Double", "member" : "org.saddle.linalg.MatPimp.trace", "link" : "org\/saddle\/linalg\/MatPimp.html#trace:Double", "kind" : "def"}, {"label" : "svd", "tail" : "(max: Int): SVDResult", "member" : "org.saddle.linalg.MatPimp.svd", "link" : "org\/saddle\/linalg\/MatPimp.html#svd(max:Int):org.saddle.linalg.SVDResult", "kind" : "def"}, {"label" : "svd", "tail" : "(): SVDResult", "member" : "org.saddle.linalg.MatPimp.svd", "link" : "org\/saddle\/linalg\/MatPimp.html#svd:org.saddle.linalg.SVDResult", "kind" : "def"}, {"label" : "mDiagFromRight", "tail" : "(diag: Vec[Double]): Mat[Double]", "member" : "org.saddle.linalg.MatPimp.mDiagFromRight", "link" : "org\/saddle\/linalg\/MatPimp.html#mDiagFromRight(diag:org.saddle.Vec[Double]):org.saddle.Mat[Double]", "kind" : "def"}, {"label" : "mDiagFromLeft", "tail" : "(diag: Vec[Double]): Mat[Double]", "member" : "org.saddle.linalg.MatPimp.mDiagFromLeft", "link" : "org\/saddle\/linalg\/MatPimp.html#mDiagFromLeft(diag:org.saddle.Vec[Double]):org.saddle.Mat[Double]", "kind" : "def"}, {"label" : "outerMpC", "tail" : "(alpha: Double, beta: Double, c: Mat[Double]): Mat[Double]", "member" : "org.saddle.linalg.MatPimp.outerMpC", "link" : "org\/saddle\/linalg\/MatPimp.html#outerMpC(alpha:Double,beta:Double,c:org.saddle.Mat[Double]):org.saddle.Mat[Double]", "kind" : "def"}, {"label" : "rowSums", "tail" : "(): Vec[Double]", "member" : "org.saddle.linalg.MatPimp.rowSums", "link" : "org\/saddle\/linalg\/MatPimp.html#rowSums:org.saddle.Vec[Double]", "kind" : "def"}, {"label" : "colSums", "tail" : "(): Vec[Double]", "member" : "org.saddle.linalg.MatPimp.colSums", "link" : "org\/saddle\/linalg\/MatPimp.html#colSums:org.saddle.Vec[Double]", "kind" : "def"}, {"label" : "diagOuterM", "tail" : "(): Vec[Double]", "member" : "org.saddle.linalg.MatPimp.diagOuterM", "link" : "org\/saddle\/linalg\/MatPimp.html#diagOuterM:org.saddle.Vec[Double]", "kind" : "def"}, {"label" : "diagInnerM", "tail" : "(): Vec[Double]", "member" : "org.saddle.linalg.MatPimp.diagInnerM", "link" : "org\/saddle\/linalg\/MatPimp.html#diagInnerM:org.saddle.Vec[Double]", "kind" : "def"}, {"label" : "outerM", "tail" : "(): Mat[Double]", "member" : "org.saddle.linalg.MatPimp.outerM", "link" : "org\/saddle\/linalg\/MatPimp.html#outerM:org.saddle.Mat[Double]", "kind" : "def"}, {"label" : "innerMpC", "tail" : "(alpha: Double, beta: Double, c: Mat[Double]): Mat[Double]", "member" : "org.saddle.linalg.MatPimp.innerMpC", "link" : "org\/saddle\/linalg\/MatPimp.html#innerMpC(alpha:Double,beta:Double,c:org.saddle.Mat[Double]):org.saddle.Mat[Double]", "kind" : "def"}, {"label" : "innerM", "tail" : "(): Mat[Double]", "member" : "org.saddle.linalg.MatPimp.innerM", "link" : "org\/saddle\/linalg\/MatPimp.html#innerM:org.saddle.Mat[Double]", "kind" : "def"}, {"label" : "tmmtc", "tail" : "(other: B, c: B, alpha: Double, beta: Double): Mat[Double]", "member" : "org.saddle.linalg.MatPimp.tmmtc", "link" : "org\/saddle\/linalg\/MatPimp.html#tmmtc(other:MatPimp.this.B,c:MatPimp.this.B,alpha:Double,beta:Double):org.saddle.Mat[Double]", "kind" : "def"}, {"label" : "mmtc", "tail" : "(other: B, c: B, alpha: Double, beta: Double): Mat[Double]", "member" : "org.saddle.linalg.MatPimp.mmtc", "link" : "org\/saddle\/linalg\/MatPimp.html#mmtc(other:MatPimp.this.B,c:MatPimp.this.B,alpha:Double,beta:Double):org.saddle.Mat[Double]", "kind" : "def"}, {"label" : "tmmc", "tail" : "(other: B, c: B, alpha: Double, beta: Double): Mat[Double]", "member" : "org.saddle.linalg.MatPimp.tmmc", "link" : "org\/saddle\/linalg\/MatPimp.html#tmmc(other:MatPimp.this.B,c:MatPimp.this.B,alpha:Double,beta:Double):org.saddle.Mat[Double]", "kind" : "def"}, {"label" : "mmc", "tail" : "(other: B, c: B, alpha: Double, beta: Double): Mat[Double]", "member" : "org.saddle.linalg.MatPimp.mmc", "link" : "org\/saddle\/linalg\/MatPimp.html#mmc(other:MatPimp.this.B,c:MatPimp.this.B,alpha:Double,beta:Double):org.saddle.Mat[Double]", "kind" : "def"}, {"label" : "tmmt", "tail" : "(other: B): B", "member" : "org.saddle.linalg.MatPimp.tmmt", "link" : "org\/saddle\/linalg\/MatPimp.html#tmmt(other:MatPimp.this.B):MatPimp.this.B", "kind" : "def"}, {"label" : "mmt", "tail" : "(other: B): B", "member" : "org.saddle.linalg.MatPimp.mmt", "link" : "org\/saddle\/linalg\/MatPimp.html#mmt(other:MatPimp.this.B):MatPimp.this.B", "kind" : "def"}, {"label" : "tmm", "tail" : "(other: B): B", "member" : "org.saddle.linalg.MatPimp.tmm", "link" : "org\/saddle\/linalg\/MatPimp.html#tmm(other:MatPimp.this.B):MatPimp.this.B", "kind" : "def"}, {"label" : "mm", "tail" : "(other: B): B", "member" : "org.saddle.linalg.MatPimp.mm", "link" : "org\/saddle\/linalg\/MatPimp.html#mm(other:MatPimp.this.B):MatPimp.this.B", "kind" : "def"}, {"label" : "tmvW", "tail" : "(other: Vec[Double], target: Array[Double]): Vec[Double]", "member" : "org.saddle.linalg.MatPimp.tmvW", "link" : "org\/saddle\/linalg\/MatPimp.html#tmvW(other:org.saddle.Vec[Double],target:Array[Double]):org.saddle.Vec[Double]", "kind" : "def"}, {"label" : "mvW", "tail" : "(other: Vec[Double], target: Array[Double]): Vec[Double]", "member" : "org.saddle.linalg.MatPimp.mvW", "link" : "org\/saddle\/linalg\/MatPimp.html#mvW(other:org.saddle.Vec[Double],target:Array[Double]):org.saddle.Vec[Double]", "kind" : "def"}, {"label" : "tmv", "tail" : "(other: Vec[Double]): Vec[Double]", "member" : "org.saddle.linalg.MatPimp.tmv", "link" : "org\/saddle\/linalg\/MatPimp.html#tmv(other:org.saddle.Vec[Double]):org.saddle.Vec[Double]", "kind" : "def"}, {"label" : "mv", "tail" : "(other: Vec[Double]): Vec[Double]", "member" : "org.saddle.linalg.MatPimp.mv", "link" : "org\/saddle\/linalg\/MatPimp.html#mv(other:org.saddle.Vec[Double]):org.saddle.Vec[Double]", "kind" : "def"}, {"label" : "invertPD", "tail" : "(): Option[Mat[Double]]", "member" : "org.saddle.linalg.MatPimp.invertPD", "link" : "org\/saddle\/linalg\/MatPimp.html#invertPD:Option[org.saddle.Mat[Double]]", "kind" : "def"}, {"label" : "invert", "tail" : "(): Mat[Double]", "member" : "org.saddle.linalg.MatPimp.invert", "link" : "org\/saddle\/linalg\/MatPimp.html#invert:org.saddle.Mat[Double]", "kind" : "def"}, {"label" : "linalg", "tail" : "(): MatPimp", "member" : "org.saddle.linalg.MatPimp.linalg", "link" : "org\/saddle\/linalg\/MatPimp.html#linalg:org.saddle.linalg.MatPimp", "kind" : "def"}, {"label" : "B", "tail" : "", "member" : "org.saddle.linalg.MatPimp.B", "link" : "org\/saddle\/linalg\/MatPimp.html#B=org.saddle.Mat[Double]", "kind" : "type"}, {"member" : "org.saddle.linalg.MatPimp#<init>", "error" : "unsupported entity"}, {"label" : "self", "tail" : ": Mat[Double]", "member" : "org.saddle.linalg.MatPimp.self", "link" : "org\/saddle\/linalg\/MatPimp.html#self:org.saddle.Mat[Double]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/saddle\/linalg\/MatPimp.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/saddle\/linalg\/MatPimp.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/saddle\/linalg\/MatPimp.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/saddle\/linalg\/MatPimp.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/saddle\/linalg\/MatPimp.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/saddle\/linalg\/MatPimp.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/saddle\/linalg\/MatPimp.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/linalg\/MatPimp.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/linalg\/MatPimp.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/linalg\/MatPimp.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/saddle\/linalg\/MatPimp.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/saddle\/linalg\/MatPimp.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/saddle\/linalg\/MatPimp.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/saddle\/linalg\/MatPimp.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/saddle\/linalg\/MatPimp.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/saddle\/linalg\/MatPimp.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "org\/saddle\/linalg\/MatPimp.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/saddle\/linalg\/MatPimp.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/saddle\/linalg\/MatPimp.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/saddle\/linalg\/MatPimp.html", "kind" : "class"}, {"name" : "org.saddle.linalg.NetLib", "shortDescription" : "", "object" : "org\/saddle\/linalg\/NetLib$.html", "members_object" : [{"label" : "LAPACK", "tail" : ": LAPACK", "member" : "org.saddle.linalg.NetLib.LAPACK", "link" : "org\/saddle\/linalg\/NetLib$.html#LAPACK:io.github.pityka.netlib.LAPACK", "kind" : "lazy val"}, {"label" : "BLAS", "tail" : ": BLAS", "member" : "org.saddle.linalg.NetLib.BLAS", "link" : "org\/saddle\/linalg\/NetLib$.html#BLAS:io.github.pityka.netlib.BLAS", "kind" : "lazy val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/saddle\/linalg\/NetLib$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/saddle\/linalg\/NetLib$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/saddle\/linalg\/NetLib$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/saddle\/linalg\/NetLib$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/saddle\/linalg\/NetLib$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/saddle\/linalg\/NetLib$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/saddle\/linalg\/NetLib$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/linalg\/NetLib$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/linalg\/NetLib$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/linalg\/NetLib$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/saddle\/linalg\/NetLib$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/saddle\/linalg\/NetLib$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/saddle\/linalg\/NetLib$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/saddle\/linalg\/NetLib$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/saddle\/linalg\/NetLib$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/saddle\/linalg\/NetLib$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "org\/saddle\/linalg\/NetLib$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/saddle\/linalg\/NetLib$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/saddle\/linalg\/NetLib$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "org.saddle.linalg.SVDResult", "shortDescription" : "", "members_case class" : [{"member" : "org.saddle.linalg.SVDResult#<init>", "error" : "unsupported entity"}, {"label" : "vt", "tail" : ": Mat[Double]", "member" : "org.saddle.linalg.SVDResult.vt", "link" : "org\/saddle\/linalg\/SVDResult.html#vt:org.saddle.Mat[Double]", "kind" : "val"}, {"label" : "sigma", "tail" : ": Vec[Double]", "member" : "org.saddle.linalg.SVDResult.sigma", "link" : "org\/saddle\/linalg\/SVDResult.html#sigma:org.saddle.Vec[Double]", "kind" : "val"}, {"label" : "u", "tail" : ": Mat[Double]", "member" : "org.saddle.linalg.SVDResult.u", "link" : "org\/saddle\/linalg\/SVDResult.html#u:org.saddle.Mat[Double]", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "org\/saddle\/linalg\/SVDResult.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/saddle\/linalg\/SVDResult.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/saddle\/linalg\/SVDResult.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/saddle\/linalg\/SVDResult.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/saddle\/linalg\/SVDResult.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/saddle\/linalg\/SVDResult.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/saddle\/linalg\/SVDResult.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/saddle\/linalg\/SVDResult.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/linalg\/SVDResult.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/linalg\/SVDResult.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/linalg\/SVDResult.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/saddle\/linalg\/SVDResult.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/saddle\/linalg\/SVDResult.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/saddle\/linalg\/SVDResult.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "org\/saddle\/linalg\/SVDResult.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/saddle\/linalg\/SVDResult.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/saddle\/linalg\/SVDResult.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "org\/saddle\/linalg\/SVDResult.html", "kind" : "case class"}, {"name" : "org.saddle.linalg.VecPimp", "shortDescription" : "", "members_class" : [{"label" : "vv_java", "tail" : "(other: Vec[Double]): Double", "member" : "org.saddle.linalg.VecPimp.vv_java", "link" : "org\/saddle\/linalg\/VecPimp.html#vv_java(other:org.saddle.Vec[Double]):Double", "kind" : "def"}, {"label" : "vv_blas", "tail" : "(other: Vec[Double]): Double", "member" : "org.saddle.linalg.VecPimp.vv_blas", "link" : "org\/saddle\/linalg\/VecPimp.html#vv_blas(other:org.saddle.Vec[Double]):Double", "kind" : "def"}, {"label" : "vv", "tail" : "(other: Vec[Double]): Double", "member" : "org.saddle.linalg.VecPimp.vv", "link" : "org\/saddle\/linalg\/VecPimp.html#vv(other:org.saddle.Vec[Double]):Double", "kind" : "def"}, {"label" : "linalg", "tail" : "(): VecPimp", "member" : "org.saddle.linalg.VecPimp.linalg", "link" : "org\/saddle\/linalg\/VecPimp.html#linalg:org.saddle.linalg.VecPimp", "kind" : "def"}, {"label" : "B", "tail" : "", "member" : "org.saddle.linalg.VecPimp.B", "link" : "org\/saddle\/linalg\/VecPimp.html#B=org.saddle.Vec[Double]", "kind" : "type"}, {"member" : "org.saddle.linalg.VecPimp#<init>", "error" : "unsupported entity"}, {"label" : "self", "tail" : ": Vec[Double]", "member" : "org.saddle.linalg.VecPimp.self", "link" : "org\/saddle\/linalg\/VecPimp.html#self:org.saddle.Vec[Double]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/saddle\/linalg\/VecPimp.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/saddle\/linalg\/VecPimp.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/saddle\/linalg\/VecPimp.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/saddle\/linalg\/VecPimp.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/saddle\/linalg\/VecPimp.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/saddle\/linalg\/VecPimp.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/saddle\/linalg\/VecPimp.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/linalg\/VecPimp.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/linalg\/VecPimp.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/linalg\/VecPimp.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/saddle\/linalg\/VecPimp.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/saddle\/linalg\/VecPimp.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/saddle\/linalg\/VecPimp.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/saddle\/linalg\/VecPimp.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/saddle\/linalg\/VecPimp.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/saddle\/linalg\/VecPimp.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "org\/saddle\/linalg\/VecPimp.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/saddle\/linalg\/VecPimp.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/saddle\/linalg\/VecPimp.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/saddle\/linalg\/VecPimp.html", "kind" : "class"}], "org.saddle.io.csv" : [{"name" : "org.saddle.io.csv.Callback", "trait" : "org\/saddle\/io\/csv\/package$$Callback.html", "kind" : "trait", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/saddle\/io\/csv\/package$$Callback.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/saddle\/io\/csv\/package$$Callback.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/saddle\/io\/csv\/package$$Callback.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/saddle\/io\/csv\/package$$Callback.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/saddle\/io\/csv\/package$$Callback.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/saddle\/io\/csv\/package$$Callback.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/saddle\/io\/csv\/package$$Callback.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/io\/csv\/package$$Callback.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/io\/csv\/package$$Callback.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/io\/csv\/package$$Callback.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/saddle\/io\/csv\/package$$Callback.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/saddle\/io\/csv\/package$$Callback.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/saddle\/io\/csv\/package$$Callback.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/saddle\/io\/csv\/package$$Callback.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/saddle\/io\/csv\/package$$Callback.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/saddle\/io\/csv\/package$$Callback.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "org\/saddle\/io\/csv\/package$$Callback.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/saddle\/io\/csv\/package$$Callback.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/saddle\/io\/csv\/package$$Callback.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "apply", "tail" : "(chars: Array[Char], from: Array[Int], to: Array[Int], len: Int, eol: Array[Int]): Control", "member" : "org.saddle.io.csv.Callback.apply", "link" : "org\/saddle\/io\/csv\/package$$Callback.html#apply(chars:Array[Char],from:Array[Int],to:Array[Int],len:Int,eol:Array[Int]):org.saddle.io.csv.package.Control", "kind" : "abstract def"}], "shortDescription" : ""}, {"name" : "org.saddle.io.csv.Control", "trait" : "org\/saddle\/io\/csv\/package$$Control.html", "kind" : "trait", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/saddle\/io\/csv\/package$$Control.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/saddle\/io\/csv\/package$$Control.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/saddle\/io\/csv\/package$$Control.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/saddle\/io\/csv\/package$$Control.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/saddle\/io\/csv\/package$$Control.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/saddle\/io\/csv\/package$$Control.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/saddle\/io\/csv\/package$$Control.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/io\/csv\/package$$Control.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/io\/csv\/package$$Control.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/io\/csv\/package$$Control.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/saddle\/io\/csv\/package$$Control.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/saddle\/io\/csv\/package$$Control.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/saddle\/io\/csv\/package$$Control.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/saddle\/io\/csv\/package$$Control.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/saddle\/io\/csv\/package$$Control.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/saddle\/io\/csv\/package$$Control.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "org\/saddle\/io\/csv\/package$$Control.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/saddle\/io\/csv\/package$$Control.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/saddle\/io\/csv\/package$$Control.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}, {"name" : "org.saddle.io.csv.Done", "case object" : "org\/saddle\/io\/csv\/package$$Done$.html", "shortDescription" : "", "members_case object" : [{"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "org\/saddle\/io\/csv\/package$$Done$.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "productElementName", "tail" : "(n: Int): String", "member" : "scala.Product.productElementName", "link" : "org\/saddle\/io\/csv\/package$$Done$.html#productElementName(n:Int):String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/saddle\/io\/csv\/package$$Done$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/saddle\/io\/csv\/package$$Done$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/saddle\/io\/csv\/package$$Done$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/saddle\/io\/csv\/package$$Done$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/saddle\/io\/csv\/package$$Done$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/saddle\/io\/csv\/package$$Done$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/saddle\/io\/csv\/package$$Done$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/io\/csv\/package$$Done$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/io\/csv\/package$$Done$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/io\/csv\/package$$Done$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/saddle\/io\/csv\/package$$Done$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/saddle\/io\/csv\/package$$Done$.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/saddle\/io\/csv\/package$$Done$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/saddle\/io\/csv\/package$$Done$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "org\/saddle\/io\/csv\/package$$Done$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/saddle\/io\/csv\/package$$Done$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/saddle\/io\/csv\/package$$Done$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "case object"}, {"name" : "org.saddle.io.csv.Error", "shortDescription" : "", "members_case class" : [{"member" : "org.saddle.io.csv.Error#<init>", "error" : "unsupported entity"}, {"label" : "error", "tail" : ": String", "member" : "org.saddle.io.csv.Error.error", "link" : "org\/saddle\/io\/csv\/package$$Error.html#error:String", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "org\/saddle\/io\/csv\/package$$Error.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/saddle\/io\/csv\/package$$Error.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/saddle\/io\/csv\/package$$Error.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/saddle\/io\/csv\/package$$Error.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/saddle\/io\/csv\/package$$Error.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/saddle\/io\/csv\/package$$Error.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/saddle\/io\/csv\/package$$Error.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/saddle\/io\/csv\/package$$Error.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/io\/csv\/package$$Error.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/io\/csv\/package$$Error.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/io\/csv\/package$$Error.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/saddle\/io\/csv\/package$$Error.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/saddle\/io\/csv\/package$$Error.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/saddle\/io\/csv\/package$$Error.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "org\/saddle\/io\/csv\/package$$Error.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/saddle\/io\/csv\/package$$Error.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/saddle\/io\/csv\/package$$Error.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "org\/saddle\/io\/csv\/package$$Error.html", "kind" : "case class"}, {"name" : "org.saddle.io.csv.Next", "case object" : "org\/saddle\/io\/csv\/package$$Next$.html", "shortDescription" : "", "members_case object" : [{"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "org\/saddle\/io\/csv\/package$$Next$.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "productElementName", "tail" : "(n: Int): String", "member" : "scala.Product.productElementName", "link" : "org\/saddle\/io\/csv\/package$$Next$.html#productElementName(n:Int):String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/saddle\/io\/csv\/package$$Next$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/saddle\/io\/csv\/package$$Next$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/saddle\/io\/csv\/package$$Next$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/saddle\/io\/csv\/package$$Next$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/saddle\/io\/csv\/package$$Next$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/saddle\/io\/csv\/package$$Next$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/saddle\/io\/csv\/package$$Next$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/io\/csv\/package$$Next$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/io\/csv\/package$$Next$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/io\/csv\/package$$Next$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/saddle\/io\/csv\/package$$Next$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/saddle\/io\/csv\/package$$Next$.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/saddle\/io\/csv\/package$$Next$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/saddle\/io\/csv\/package$$Next$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "org\/saddle\/io\/csv\/package$$Next$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/saddle\/io\/csv\/package$$Next$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/saddle\/io\/csv\/package$$Next$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "case object"}], "org.saddle.scalar" : [{"name" : "org.saddle.scalar.NA", "case object" : "org\/saddle\/scalar\/NA$.html", "shortDescription" : "", "members_case object" : [{"label" : "toString", "tail" : "(): String", "member" : "org.saddle.scalar.NA.toString", "link" : "org\/saddle\/scalar\/NA$.html#toString():String", "kind" : "def"}, {"label" : "get", "tail" : "(): Nothing", "member" : "org.saddle.scalar.NA.get", "link" : "org\/saddle\/scalar\/NA$.html#get:Nothing", "kind" : "def"}, {"label" : "isNA", "tail" : "(): Boolean", "member" : "org.saddle.scalar.NA.isNA", "link" : "org\/saddle\/scalar\/NA$.html#isNA:Boolean", "kind" : "def"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "org\/saddle\/scalar\/NA$.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "productElementName", "tail" : "(n: Int): String", "member" : "scala.Product.productElementName", "link" : "org\/saddle\/scalar\/NA$.html#productElementName(n:Int):String", "kind" : "def"}, {"label" : "foreach", "tail" : "(f: (Nothing) => U): Unit", "member" : "org.saddle.scalar.Scalar.foreach", "link" : "org\/saddle\/scalar\/NA$.html#foreach[U](f:T=>U):Unit", "kind" : "final def"}, {"label" : "flatMap", "tail" : "(f: (Nothing) => Scalar[B]): Scalar[B]", "member" : "org.saddle.scalar.Scalar.flatMap", "link" : "org\/saddle\/scalar\/NA$.html#flatMap[B](f:T=>org.saddle.scalar.Scalar[B]):org.saddle.scalar.Scalar[B]", "kind" : "final def"}, {"label" : "map", "tail" : "(f: (Nothing) => B)(arg0: ST[B]): Scalar[B]", "member" : "org.saddle.scalar.Scalar.map", "link" : "org\/saddle\/scalar\/NA$.html#map[B](f:T=>B)(implicitevidence$1:org.saddle.ST[B]):org.saddle.scalar.Scalar[B]", "kind" : "final def"}, {"label" : "isEmpty", "tail" : "(): Boolean", "member" : "org.saddle.scalar.Scalar.isEmpty", "link" : "org\/saddle\/scalar\/NA$.html#isEmpty:Boolean", "kind" : "def"}, {"label" : "isDefined", "tail" : "(): Boolean", "member" : "org.saddle.scalar.Scalar.isDefined", "link" : "org\/saddle\/scalar\/NA$.html#isDefined:Boolean", "kind" : "def"}, {"label" : "toOption", "tail" : "(): Option[Nothing]", "member" : "org.saddle.scalar.Scalar.toOption", "link" : "org\/saddle\/scalar\/NA$.html#toOption:Option[T]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/saddle\/scalar\/NA$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/saddle\/scalar\/NA$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/saddle\/scalar\/NA$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/saddle\/scalar\/NA$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/saddle\/scalar\/NA$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/saddle\/scalar\/NA$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/saddle\/scalar\/NA$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/scalar\/NA$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/scalar\/NA$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/scalar\/NA$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/saddle\/scalar\/NA$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/saddle\/scalar\/NA$.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/saddle\/scalar\/NA$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/saddle\/scalar\/NA$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "org\/saddle\/scalar\/NA$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/saddle\/scalar\/NA$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/saddle\/scalar\/NA$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "case object"}, {"name" : "org.saddle.scalar.Scalar", "shortDescription" : "Scalar wrapper for a single element of a vector-like container.", "object" : "org\/saddle\/scalar\/Scalar$.html", "members_class" : [{"label" : "foreach", "tail" : "(f: (T) => U): Unit", "member" : "org.saddle.scalar.Scalar.foreach", "link" : "org\/saddle\/scalar\/Scalar.html#foreach[U](f:T=>U):Unit", "kind" : "final def"}, {"label" : "flatMap", "tail" : "(f: (T) => Scalar[B]): Scalar[B]", "member" : "org.saddle.scalar.Scalar.flatMap", "link" : "org\/saddle\/scalar\/Scalar.html#flatMap[B](f:T=>org.saddle.scalar.Scalar[B]):org.saddle.scalar.Scalar[B]", "kind" : "final def"}, {"label" : "map", "tail" : "(f: (T) => B)(arg0: ST[B]): Scalar[B]", "member" : "org.saddle.scalar.Scalar.map", "link" : "org\/saddle\/scalar\/Scalar.html#map[B](f:T=>B)(implicitevidence$1:org.saddle.ST[B]):org.saddle.scalar.Scalar[B]", "kind" : "final def"}, {"label" : "isEmpty", "tail" : "(): Boolean", "member" : "org.saddle.scalar.Scalar.isEmpty", "link" : "org\/saddle\/scalar\/Scalar.html#isEmpty:Boolean", "kind" : "def"}, {"label" : "isDefined", "tail" : "(): Boolean", "member" : "org.saddle.scalar.Scalar.isDefined", "link" : "org\/saddle\/scalar\/Scalar.html#isDefined:Boolean", "kind" : "def"}, {"label" : "toOption", "tail" : "(): Option[T]", "member" : "org.saddle.scalar.Scalar.toOption", "link" : "org\/saddle\/scalar\/Scalar.html#toOption:Option[T]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/saddle\/scalar\/Scalar.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/saddle\/scalar\/Scalar.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/saddle\/scalar\/Scalar.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/saddle\/scalar\/Scalar.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/saddle\/scalar\/Scalar.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/saddle\/scalar\/Scalar.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/saddle\/scalar\/Scalar.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/scalar\/Scalar.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/scalar\/Scalar.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/scalar\/Scalar.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/saddle\/scalar\/Scalar.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/saddle\/scalar\/Scalar.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/saddle\/scalar\/Scalar.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/saddle\/scalar\/Scalar.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/saddle\/scalar\/Scalar.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/saddle\/scalar\/Scalar.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "org\/saddle\/scalar\/Scalar.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/saddle\/scalar\/Scalar.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/saddle\/scalar\/Scalar.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "get", "tail" : "(): T", "member" : "org.saddle.scalar.Scalar.get", "link" : "org\/saddle\/scalar\/Scalar.html#get:T", "kind" : "abstract def"}, {"label" : "isNA", "tail" : "(): Boolean", "member" : "org.saddle.scalar.Scalar.isNA", "link" : "org\/saddle\/scalar\/Scalar.html#isNA:Boolean", "kind" : "abstract def"}], "members_object" : [{"label" : "scalarToOption", "tail" : "(sc: Scalar[T]): Option[T]", "member" : "org.saddle.scalar.Scalar.scalarToOption", "link" : "org\/saddle\/scalar\/Scalar$.html#scalarToOption[T](sc:org.saddle.scalar.Scalar[T]):Option[T]", "kind" : "implicit def"}, {"label" : "scalarUnboxF", "tail" : "(ds: Scalar[Float]): Float", "member" : "org.saddle.scalar.Scalar.scalarUnboxF", "link" : "org\/saddle\/scalar\/Scalar$.html#scalarUnboxF(ds:org.saddle.scalar.Scalar[Float]):Float", "kind" : "implicit def"}, {"label" : "scalarUnboxD", "tail" : "(ds: Scalar[Double]): Double", "member" : "org.saddle.scalar.Scalar.scalarUnboxD", "link" : "org\/saddle\/scalar\/Scalar$.html#scalarUnboxD(ds:org.saddle.scalar.Scalar[Double]):Double", "kind" : "implicit def"}, {"label" : "ord", "tail" : "(arg0: ORD[T]): ORD[Scalar[T]]", "member" : "org.saddle.scalar.Scalar.ord", "link" : "org\/saddle\/scalar\/Scalar$.html#ord[T](implicitevidence$2:org.saddle.ORD[T]):org.saddle.ORD[org.saddle.scalar.Scalar[T]]", "kind" : "implicit def"}, {"label" : "apply", "tail" : "(x: T)(st: ST[T]): Scalar[T]", "member" : "org.saddle.scalar.Scalar.apply", "link" : "org\/saddle\/scalar\/Scalar$.html#apply[T](x:T)(implicitst:org.saddle.ST[T]):org.saddle.scalar.Scalar[T]", "kind" : "def"}, {"label" : "UnboxF", "tail" : "", "member" : "org.saddle.scalar.Scalar.UnboxF", "link" : "org\/saddle\/scalar\/Scalar$.html#UnboxFextendsAnyRef", "kind" : "implicit class"}, {"label" : "UnboxD", "tail" : "", "member" : "org.saddle.scalar.Scalar.UnboxD", "link" : "org\/saddle\/scalar\/Scalar$.html#UnboxDextendsAnyRef", "kind" : "implicit class"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/saddle\/scalar\/Scalar$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/saddle\/scalar\/Scalar$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/saddle\/scalar\/Scalar$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/saddle\/scalar\/Scalar$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/saddle\/scalar\/Scalar$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/saddle\/scalar\/Scalar$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/saddle\/scalar\/Scalar$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/scalar\/Scalar$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/scalar\/Scalar$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/scalar\/Scalar$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/saddle\/scalar\/Scalar$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/saddle\/scalar\/Scalar$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/saddle\/scalar\/Scalar$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/saddle\/scalar\/Scalar$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/saddle\/scalar\/Scalar$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/saddle\/scalar\/Scalar$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "org\/saddle\/scalar\/Scalar$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/saddle\/scalar\/Scalar$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/saddle\/scalar\/Scalar$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/saddle\/scalar\/Scalar.html", "kind" : "class"}, {"name" : "org.saddle.scalar.ScalarTag", "object" : "org\/saddle\/scalar\/ScalarTag$.html", "members_object" : [{"label" : "stString", "tail" : ": ScalarTag[String]", "member" : "org.saddle.scalar.ScalarTag.stString", "link" : "org\/saddle\/scalar\/ScalarTag$.html#stString:org.saddle.scalar.ScalarTag[String]", "kind" : "implicit val"}, {"label" : "stDouble", "tail" : ": ScalarTag[Double]", "member" : "org.saddle.scalar.ScalarTag.stDouble", "link" : "org\/saddle\/scalar\/ScalarTag$.html#stDouble:org.saddle.scalar.ScalarTag[Double]", "kind" : "implicit val"}, {"label" : "stLong", "tail" : ": ScalarTag[Long]", "member" : "org.saddle.scalar.ScalarTag.stLong", "link" : "org\/saddle\/scalar\/ScalarTag$.html#stLong:org.saddle.scalar.ScalarTag[Long]", "kind" : "implicit val"}, {"label" : "stFloat", "tail" : ": ScalarTag[Float]", "member" : "org.saddle.scalar.ScalarTag.stFloat", "link" : "org\/saddle\/scalar\/ScalarTag$.html#stFloat:org.saddle.scalar.ScalarTag[Float]", "kind" : "implicit val"}, {"label" : "stInt", "tail" : ": ScalarTag[Int]", "member" : "org.saddle.scalar.ScalarTag.stInt", "link" : "org\/saddle\/scalar\/ScalarTag$.html#stInt:org.saddle.scalar.ScalarTag[Int]", "kind" : "implicit val"}, {"label" : "stShort", "tail" : ": ScalarTag[Short]", "member" : "org.saddle.scalar.ScalarTag.stShort", "link" : "org\/saddle\/scalar\/ScalarTag$.html#stShort:org.saddle.scalar.ScalarTag[Short]", "kind" : "implicit val"}, {"label" : "stByte", "tail" : ": ScalarTag[Byte]", "member" : "org.saddle.scalar.ScalarTag.stByte", "link" : "org\/saddle\/scalar\/ScalarTag$.html#stByte:org.saddle.scalar.ScalarTag[Byte]", "kind" : "implicit val"}, {"label" : "stChar", "tail" : ": ScalarTag[Char]", "member" : "org.saddle.scalar.ScalarTag.stChar", "link" : "org\/saddle\/scalar\/ScalarTag$.html#stChar:org.saddle.scalar.ScalarTag[Char]", "kind" : "implicit val"}, {"label" : "stBool", "tail" : ": ScalarTag[Boolean]", "member" : "org.saddle.scalar.ScalarTag.stBool", "link" : "org\/saddle\/scalar\/ScalarTag$.html#stBool:org.saddle.scalar.ScalarTag[Boolean]", "kind" : "implicit val"}, {"label" : "stPrd", "tail" : "(ev: CLM[T]): ScalarTag[T]", "member" : "org.saddle.scalar.ScalarTagImplicits.stPrd", "link" : "org\/saddle\/scalar\/ScalarTag$.html#stPrd[T<:Product](implicitev:org.saddle.CLM[T]):org.saddle.scalar.ScalarTag[T]", "kind" : "implicit def"}, {"label" : "stAnyRef", "tail" : "(ev: CLM[T]): ScalarTag[T]", "member" : "org.saddle.scalar.ScalarTagImplicitsL1.stAnyRef", "link" : "org\/saddle\/scalar\/ScalarTag$.html#stAnyRef[T<:AnyRef](implicitev:org.saddle.CLM[T]):org.saddle.scalar.ScalarTag[T]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/saddle\/scalar\/ScalarTag$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/saddle\/scalar\/ScalarTag$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/saddle\/scalar\/ScalarTag$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/saddle\/scalar\/ScalarTag$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/saddle\/scalar\/ScalarTag$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/saddle\/scalar\/ScalarTag$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/saddle\/scalar\/ScalarTag$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/scalar\/ScalarTag$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/scalar\/ScalarTag$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/scalar\/ScalarTag$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/saddle\/scalar\/ScalarTag$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/saddle\/scalar\/ScalarTag$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/saddle\/scalar\/ScalarTag$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/saddle\/scalar\/ScalarTag$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/saddle\/scalar\/ScalarTag$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/saddle\/scalar\/ScalarTag$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "org\/saddle\/scalar\/ScalarTag$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/saddle\/scalar\/ScalarTag$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/saddle\/scalar\/ScalarTag$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "org\/saddle\/scalar\/ScalarTag.html", "kind" : "trait", "members_trait" : [{"label" : "erasure", "tail" : "(): Class[_]", "member" : "org.saddle.scalar.ScalarTag.erasure", "link" : "org\/saddle\/scalar\/ScalarTag.html#erasure:Class[_]", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "org.saddle.scalar.ScalarTag.toString", "link" : "org\/saddle\/scalar\/ScalarTag.html#toString():String", "kind" : "def"}, {"label" : "equals", "tail" : "(o: Any): Boolean", "member" : "org.saddle.scalar.ScalarTag.equals", "link" : "org\/saddle\/scalar\/ScalarTag.html#equals(o:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "org.saddle.scalar.ScalarTag.hashCode", "link" : "org\/saddle\/scalar\/ScalarTag.html#hashCode():Int", "kind" : "def"}, {"label" : "asString", "tail" : "(v: T): String", "member" : "org.saddle.scalar.ScalarTag.asString", "link" : "org\/saddle\/scalar\/ScalarTag.html#asString(v:T):String", "kind" : "def"}, {"label" : "strListLossless", "tail" : "(v: T): List[String]", "member" : "org.saddle.scalar.ScalarTag.strListLossless", "link" : "org\/saddle\/scalar\/ScalarTag.html#strListLossless(v:T):List[String]", "kind" : "def"}, {"label" : "strList", "tail" : "(v: T): List[String]", "member" : "org.saddle.scalar.ScalarTag.strList", "link" : "org\/saddle\/scalar\/ScalarTag.html#strList(v:T):List[String]", "kind" : "def"}, {"label" : "notMissing", "tail" : "(t: T): Boolean", "member" : "org.saddle.scalar.ScalarTag.notMissing", "link" : "org\/saddle\/scalar\/ScalarTag.html#notMissing(t:T):Boolean", "kind" : "def"}, {"label" : "iseq", "tail" : "(a: T, b: T)(ev: ORD[T]): Boolean", "member" : "org.saddle.scalar.CouldBeOrdered.iseq", "link" : "org\/saddle\/scalar\/ScalarTag.html#iseq(a:T,b:T)(implicitev:org.saddle.ORD[T]):Boolean", "kind" : "def"}, {"label" : "gt", "tail" : "(a: T, b: T)(ev: ORD[T]): Boolean", "member" : "org.saddle.scalar.CouldBeOrdered.gt", "link" : "org\/saddle\/scalar\/ScalarTag.html#gt(a:T,b:T)(implicitev:org.saddle.ORD[T]):Boolean", "kind" : "def"}, {"label" : "lt", "tail" : "(a: T, b: T)(ev: ORD[T]): Boolean", "member" : "org.saddle.scalar.CouldBeOrdered.lt", "link" : "org\/saddle\/scalar\/ScalarTag.html#lt(a:T,b:T)(implicitev:org.saddle.ORD[T]):Boolean", "kind" : "def"}, {"label" : "altMatConstructor", "tail" : "(r: Int, c: Int, arr: Array[Vec[T]])(st: ST[T]): Mat[T]", "member" : "org.saddle.scalar.SpecializedFactory.altMatConstructor", "link" : "org\/saddle\/scalar\/ScalarTag.html#altMatConstructor(r:Int,c:Int,arr:Array[org.saddle.Vec[T]])(implicitst:org.saddle.ST[T]):org.saddle.Mat[T]", "kind" : "def"}, {"label" : "makeMat", "tail" : "(arr: Array[Vec[T]])(st: ST[T]): Mat[T]", "member" : "org.saddle.scalar.SpecializedFactory.makeMat", "link" : "org\/saddle\/scalar\/ScalarTag.html#makeMat(arr:Array[org.saddle.Vec[T]])(implicitst:org.saddle.ST[T]):org.saddle.Mat[T]", "kind" : "final def"}, {"label" : "canEqual", "tail" : "(x: Any): Boolean", "member" : "scala.reflect.ClassTag.canEqual", "link" : "org\/saddle\/scalar\/ScalarTag.html#canEqual(x:Any):Boolean", "kind" : "def"}, {"label" : "unapply", "tail" : "(x: Any): Option[T]", "member" : "scala.reflect.ClassTag.unapply", "link" : "org\/saddle\/scalar\/ScalarTag.html#unapply(x:Any):Option[T]", "kind" : "def"}, {"label" : "newArray", "tail" : "(len: Int): Array[T]", "member" : "scala.reflect.ClassTag.newArray", "link" : "org\/saddle\/scalar\/ScalarTag.html#newArray(len:Int):Array[T]", "kind" : "def"}, {"label" : "wrap", "tail" : "(): ClassTag[Array[T]]", "member" : "scala.reflect.ClassTag.wrap", "link" : "org\/saddle\/scalar\/ScalarTag.html#wrap:scala.reflect.ClassTag[Array[T]]", "kind" : "def"}, {"label" : "argString", "tail" : "(): String", "member" : "scala.reflect.ClassManifestDeprecatedApis.argString", "link" : "org\/saddle\/scalar\/ScalarTag.html#argString:String", "kind" : "def"}, {"label" : "typeArguments", "tail" : "(): List[OptManifest[_]]", "member" : "scala.reflect.ClassManifestDeprecatedApis.typeArguments", "link" : "org\/saddle\/scalar\/ScalarTag.html#typeArguments:List[scala.reflect.OptManifest[_]]", "kind" : "def"}, {"label" : "newArrayBuilder", "tail" : "(): ArrayBuilder[T]", "member" : "scala.reflect.ClassManifestDeprecatedApis.newArrayBuilder", "link" : "org\/saddle\/scalar\/ScalarTag.html#newArrayBuilder():scala.collection.mutable.ArrayBuilder[T]", "kind" : "def"}, {"label" : "newWrappedArray", "tail" : "(len: Int): ArraySeq[T]", "member" : "scala.reflect.ClassManifestDeprecatedApis.newWrappedArray", "link" : "org\/saddle\/scalar\/ScalarTag.html#newWrappedArray(len:Int):scala.collection.mutable.ArraySeq[T]", "kind" : "def"}, {"label" : "newArray5", "tail" : "(len: Int): Array[Array[Array[Array[Array[T]]]]]", "member" : "scala.reflect.ClassManifestDeprecatedApis.newArray5", "link" : "org\/saddle\/scalar\/ScalarTag.html#newArray5(len:Int):Array[Array[Array[Array[Array[T]]]]]", "kind" : "def"}, {"label" : "newArray4", "tail" : "(len: Int): Array[Array[Array[Array[T]]]]", "member" : "scala.reflect.ClassManifestDeprecatedApis.newArray4", "link" : "org\/saddle\/scalar\/ScalarTag.html#newArray4(len:Int):Array[Array[Array[Array[T]]]]", "kind" : "def"}, {"label" : "newArray3", "tail" : "(len: Int): Array[Array[Array[T]]]", "member" : "scala.reflect.ClassManifestDeprecatedApis.newArray3", "link" : "org\/saddle\/scalar\/ScalarTag.html#newArray3(len:Int):Array[Array[Array[T]]]", "kind" : "def"}, {"label" : "newArray2", "tail" : "(len: Int): Array[Array[T]]", "member" : "scala.reflect.ClassManifestDeprecatedApis.newArray2", "link" : "org\/saddle\/scalar\/ScalarTag.html#newArray2(len:Int):Array[Array[T]]", "kind" : "def"}, {"label" : "arrayManifest", "tail" : "(): ClassManifest[Array[T]]", "member" : "scala.reflect.ClassManifestDeprecatedApis.arrayManifest", "link" : "org\/saddle\/scalar\/ScalarTag.html#arrayManifest:scala.reflect.ClassManifest[Array[T]]", "kind" : "def"}, {"label" : "arrayClass", "tail" : "(tp: Class[_]): Class[Array[A]]", "member" : "scala.reflect.ClassManifestDeprecatedApis.arrayClass", "link" : "org\/saddle\/scalar\/ScalarTag.html#arrayClass[A](tp:Class[_]):Class[Array[A]]", "kind" : "def"}, {"label" : ">:>", "tail" : "(that: ClassManifest[_]): Boolean", "member" : "scala.reflect.ClassManifestDeprecatedApis.>:>", "link" : "org\/saddle\/scalar\/ScalarTag.html#>:>(that:scala.reflect.ClassManifest[_]):Boolean", "kind" : "def"}, {"label" : "<:<", "tail" : "(that: ClassManifest[_]): Boolean", "member" : "scala.reflect.ClassManifestDeprecatedApis.<:<", "link" : "org\/saddle\/scalar\/ScalarTag.html#<:<(that:scala.reflect.ClassManifest[_]):Boolean", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/saddle\/scalar\/ScalarTag.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/saddle\/scalar\/ScalarTag.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/saddle\/scalar\/ScalarTag.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/saddle\/scalar\/ScalarTag.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/saddle\/scalar\/ScalarTag.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/saddle\/scalar\/ScalarTag.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/saddle\/scalar\/ScalarTag.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/scalar\/ScalarTag.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/scalar\/ScalarTag.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/scalar\/ScalarTag.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/saddle\/scalar\/ScalarTag.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/saddle\/scalar\/ScalarTag.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/saddle\/scalar\/ScalarTag.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "org\/saddle\/scalar\/ScalarTag.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/saddle\/scalar\/ScalarTag.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/saddle\/scalar\/ScalarTag.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "runtimeClass", "tail" : "(): Class[_]", "member" : "org.saddle.scalar.ScalarTag.runtimeClass", "link" : "org\/saddle\/scalar\/ScalarTag.html#runtimeClass:Class[_]", "kind" : "abstract def"}, {"label" : "show", "tail" : "(v: T): String", "member" : "org.saddle.scalar.ScalarTag.show", "link" : "org\/saddle\/scalar\/ScalarTag.html#show(v:T):String", "kind" : "abstract def"}, {"label" : "parse", "tail" : "(s: Array[Char], from: Int, to: Int): T", "member" : "org.saddle.scalar.ScalarTag.parse", "link" : "org\/saddle\/scalar\/ScalarTag.html#parse(s:Array[Char],from:Int,to:Int):T", "kind" : "abstract def"}, {"label" : "isMissing", "tail" : "(t: T): Boolean", "member" : "org.saddle.scalar.ScalarTag.isMissing", "link" : "org\/saddle\/scalar\/ScalarTag.html#isMissing(t:T):Boolean", "kind" : "abstract def"}, {"label" : "missing", "tail" : "(): T", "member" : "org.saddle.scalar.ScalarTag.missing", "link" : "org\/saddle\/scalar\/ScalarTag.html#missing:T", "kind" : "abstract def"}, {"label" : "negInf", "tail" : "(ev: NUM[T]): T", "member" : "org.saddle.scalar.CouldBeNumber.negInf", "link" : "org\/saddle\/scalar\/ScalarTag.html#negInf(implicitev:org.saddle.NUM[T]):T", "kind" : "abstract def"}, {"label" : "inf", "tail" : "(ev: NUM[T]): T", "member" : "org.saddle.scalar.CouldBeNumber.inf", "link" : "org\/saddle\/scalar\/ScalarTag.html#inf(implicitev:org.saddle.NUM[T]):T", "kind" : "abstract def"}, {"label" : "one", "tail" : "(ev: NUM[T]): T", "member" : "org.saddle.scalar.CouldBeNumber.one", "link" : "org\/saddle\/scalar\/ScalarTag.html#one(implicitev:org.saddle.NUM[T]):T", "kind" : "abstract def"}, {"label" : "zero", "tail" : "(ev: NUM[T]): T", "member" : "org.saddle.scalar.CouldBeNumber.zero", "link" : "org\/saddle\/scalar\/ScalarTag.html#zero(implicitev:org.saddle.NUM[T]):T", "kind" : "abstract def"}, {"label" : "toDouble", "tail" : "(t: T)(ev: NUM[T]): Double", "member" : "org.saddle.scalar.CouldBeNumber.toDouble", "link" : "org\/saddle\/scalar\/ScalarTag.html#toDouble(t:T)(implicitev:org.saddle.NUM[T]):Double", "kind" : "abstract def"}, {"label" : "compare", "tail" : "(a: T, b: T)(ev: ORD[T]): Int", "member" : "org.saddle.scalar.CouldBeOrdered.compare", "link" : "org\/saddle\/scalar\/ScalarTag.html#compare(a:T,b:T)(implicitev:org.saddle.ORD[T]):Int", "kind" : "abstract def"}, {"label" : "makeSorter", "tail" : "(ord: ORD[T]): Sorter[T]", "member" : "org.saddle.scalar.SpecializedFactory.makeSorter", "link" : "org\/saddle\/scalar\/ScalarTag.html#makeSorter(implicitord:org.saddle.ORD[T]):org.saddle.array.Sorter[T]", "kind" : "abstract def"}, {"label" : "makeIndex", "tail" : "(vec: Vec[T])(ord: ORD[T]): Index[T]", "member" : "org.saddle.scalar.SpecializedFactory.makeIndex", "link" : "org\/saddle\/scalar\/ScalarTag.html#makeIndex(vec:org.saddle.Vec[T])(implicitord:org.saddle.ORD[T]):org.saddle.Index[T]", "kind" : "abstract def"}, {"label" : "makeMat", "tail" : "(r: Int, c: Int, arr: Array[T]): Mat[T]", "member" : "org.saddle.scalar.SpecializedFactory.makeMat", "link" : "org\/saddle\/scalar\/ScalarTag.html#makeMat(r:Int,c:Int,arr:Array[T]):org.saddle.Mat[T]", "kind" : "abstract def"}, {"label" : "makeVec", "tail" : "(arr: Array[T]): Vec[T]", "member" : "org.saddle.scalar.SpecializedFactory.makeVec", "link" : "org\/saddle\/scalar\/ScalarTag.html#makeVec(arr:Array[T]):org.saddle.Vec[T]", "kind" : "abstract def"}, {"label" : "makeBuf", "tail" : "(sz: Int): Buffer[T]", "member" : "org.saddle.scalar.SpecializedFactory.makeBuf", "link" : "org\/saddle\/scalar\/ScalarTag.html#makeBuf(sz:Int):org.saddle.Buffer[T]", "kind" : "abstract def"}], "shortDescription" : "Typeclass definition for scalar tags."}, {"name" : "org.saddle.scalar.ScalarTagAnyRef", "shortDescription" : "", "members_class" : [{"label" : "isMissing", "tail" : "(v: T): Boolean", "member" : "org.saddle.scalar.ScalarTagAnyRef.isMissing", "link" : "org\/saddle\/scalar\/ScalarTagAnyRef.html#isMissing(v:T):Boolean", "kind" : "def"}, {"label" : "missing", "tail" : "(): T", "member" : "org.saddle.scalar.ScalarTagAnyRef.missing", "link" : "org\/saddle\/scalar\/ScalarTagAnyRef.html#missing:T", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "org.saddle.scalar.ScalarTagAnyRef.toString", "link" : "org\/saddle\/scalar\/ScalarTagAnyRef.html#toString():String", "kind" : "def"}, {"member" : "org.saddle.scalar.ScalarTagAnyRef#<init>", "error" : "unsupported entity"}, {"label" : "clm", "tail" : ": CLM[T]", "member" : "org.saddle.scalar.ScalarTagAnyRef.clm", "link" : "org\/saddle\/scalar\/ScalarTagAnyRef.html#clm:org.saddle.CLM[T]", "kind" : "implicit val"}, {"label" : "makeSorter", "tail" : "(ord: ORD[T]): Sorter[T]", "member" : "org.saddle.scalar.ScalarTagBase.makeSorter", "link" : "org\/saddle\/scalar\/ScalarTagAnyRef.html#makeSorter(implicitord:org.saddle.ORD[T]):org.saddle.array.Sorter[T]", "kind" : "def"}, {"label" : "makeIndex", "tail" : "(vec: Vec[T])(ord: ORD[T]): Index[T]", "member" : "org.saddle.scalar.ScalarTagBase.makeIndex", "link" : "org\/saddle\/scalar\/ScalarTagAnyRef.html#makeIndex(vec:org.saddle.Vec[T])(implicitord:org.saddle.ORD[T]):org.saddle.Index[T]", "kind" : "def"}, {"label" : "makeMat", "tail" : "(r: Int, c: Int, arr: Array[T]): Mat[T]", "member" : "org.saddle.scalar.ScalarTagBase.makeMat", "link" : "org\/saddle\/scalar\/ScalarTagAnyRef.html#makeMat(r:Int,c:Int,arr:Array[T]):org.saddle.Mat[T]", "kind" : "def"}, {"label" : "makeVec", "tail" : "(arr: Array[T]): Vec[T]", "member" : "org.saddle.scalar.ScalarTagBase.makeVec", "link" : "org\/saddle\/scalar\/ScalarTagAnyRef.html#makeVec(arr:Array[T]):org.saddle.Vec[T]", "kind" : "def"}, {"label" : "makeLocAll", "tail" : "(sz: Int): LocatorAll[T]", "member" : "org.saddle.scalar.ScalarTagBase.makeLocAll", "link" : "org\/saddle\/scalar\/ScalarTagAnyRef.html#makeLocAll(sz:Int):org.saddle.locatorall.LocatorAll[T]", "kind" : "def"}, {"label" : "makeLoc", "tail" : "(sz: Int): Locator[T]", "member" : "org.saddle.scalar.ScalarTagBase.makeLoc", "link" : "org\/saddle\/scalar\/ScalarTagAnyRef.html#makeLoc(sz:Int):org.saddle.locator.Locator[T]", "kind" : "def"}, {"label" : "makeBuf", "tail" : "(sz: Int): Buffer[T]", "member" : "org.saddle.scalar.ScalarTagBase.makeBuf", "link" : "org\/saddle\/scalar\/ScalarTagAnyRef.html#makeBuf(sz:Int):org.saddle.Buffer[T]", "kind" : "def"}, {"label" : "runtimeClass", "tail" : "(): Class[_]", "member" : "org.saddle.scalar.ScalarTagBase.runtimeClass", "link" : "org\/saddle\/scalar\/ScalarTagAnyRef.html#runtimeClass:Class[_]", "kind" : "def"}, {"label" : "show", "tail" : "(v: T): String", "member" : "org.saddle.scalar.ScalarTagBase.show", "link" : "org\/saddle\/scalar\/ScalarTagAnyRef.html#show(v:T):String", "kind" : "def"}, {"label" : "negInf", "tail" : "(ev: NUM[T]): Nothing", "member" : "org.saddle.scalar.ScalarTagBase.negInf", "link" : "org\/saddle\/scalar\/ScalarTagAnyRef.html#negInf(implicitev:org.saddle.NUM[T]):Nothing", "kind" : "def"}, {"label" : "inf", "tail" : "(ev: NUM[T]): Nothing", "member" : "org.saddle.scalar.ScalarTagBase.inf", "link" : "org\/saddle\/scalar\/ScalarTagAnyRef.html#inf(implicitev:org.saddle.NUM[T]):Nothing", "kind" : "def"}, {"label" : "one", "tail" : "(ev: NUM[T]): T", "member" : "org.saddle.scalar.ScalarTagBase.one", "link" : "org\/saddle\/scalar\/ScalarTagAnyRef.html#one(implicitev:org.saddle.NUM[T]):T", "kind" : "def"}, {"label" : "zero", "tail" : "(ev: NUM[T]): T", "member" : "org.saddle.scalar.ScalarTagBase.zero", "link" : "org\/saddle\/scalar\/ScalarTagAnyRef.html#zero(implicitev:org.saddle.NUM[T]):T", "kind" : "def"}, {"label" : "toDouble", "tail" : "(t: T)(ev: NUM[T]): Double", "member" : "org.saddle.scalar.ScalarTagBase.toDouble", "link" : "org\/saddle\/scalar\/ScalarTagAnyRef.html#toDouble(t:T)(implicitev:org.saddle.NUM[T]):Double", "kind" : "def"}, {"label" : "compare", "tail" : "(x: T, y: T)(ev: ORD[T]): Int", "member" : "org.saddle.scalar.ScalarTagBase.compare", "link" : "org\/saddle\/scalar\/ScalarTagAnyRef.html#compare(x:T,y:T)(implicitev:org.saddle.ORD[T]):Int", "kind" : "def"}, {"label" : "parse", "tail" : "(s: Array[Char], from: Int, to: Int): T", "member" : "org.saddle.scalar.ScalarTagBase.parse", "link" : "org\/saddle\/scalar\/ScalarTagAnyRef.html#parse(s:Array[Char],from:Int,to:Int):T", "kind" : "def"}, {"label" : "erasure", "tail" : "(): Class[_]", "member" : "org.saddle.scalar.ScalarTag.erasure", "link" : "org\/saddle\/scalar\/ScalarTagAnyRef.html#erasure:Class[_]", "kind" : "def"}, {"label" : "equals", "tail" : "(o: Any): Boolean", "member" : "org.saddle.scalar.ScalarTag.equals", "link" : "org\/saddle\/scalar\/ScalarTagAnyRef.html#equals(o:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "org.saddle.scalar.ScalarTag.hashCode", "link" : "org\/saddle\/scalar\/ScalarTagAnyRef.html#hashCode():Int", "kind" : "def"}, {"label" : "asString", "tail" : "(v: T): String", "member" : "org.saddle.scalar.ScalarTag.asString", "link" : "org\/saddle\/scalar\/ScalarTagAnyRef.html#asString(v:T):String", "kind" : "def"}, {"label" : "strListLossless", "tail" : "(v: T): List[String]", "member" : "org.saddle.scalar.ScalarTag.strListLossless", "link" : "org\/saddle\/scalar\/ScalarTagAnyRef.html#strListLossless(v:T):List[String]", "kind" : "def"}, {"label" : "strList", "tail" : "(v: T): List[String]", "member" : "org.saddle.scalar.ScalarTag.strList", "link" : "org\/saddle\/scalar\/ScalarTagAnyRef.html#strList(v:T):List[String]", "kind" : "def"}, {"label" : "notMissing", "tail" : "(t: T): Boolean", "member" : "org.saddle.scalar.ScalarTag.notMissing", "link" : "org\/saddle\/scalar\/ScalarTagAnyRef.html#notMissing(t:T):Boolean", "kind" : "def"}, {"label" : "iseq", "tail" : "(a: T, b: T)(ev: ORD[T]): Boolean", "member" : "org.saddle.scalar.CouldBeOrdered.iseq", "link" : "org\/saddle\/scalar\/ScalarTagAnyRef.html#iseq(a:T,b:T)(implicitev:org.saddle.ORD[T]):Boolean", "kind" : "def"}, {"label" : "gt", "tail" : "(a: T, b: T)(ev: ORD[T]): Boolean", "member" : "org.saddle.scalar.CouldBeOrdered.gt", "link" : "org\/saddle\/scalar\/ScalarTagAnyRef.html#gt(a:T,b:T)(implicitev:org.saddle.ORD[T]):Boolean", "kind" : "def"}, {"label" : "lt", "tail" : "(a: T, b: T)(ev: ORD[T]): Boolean", "member" : "org.saddle.scalar.CouldBeOrdered.lt", "link" : "org\/saddle\/scalar\/ScalarTagAnyRef.html#lt(a:T,b:T)(implicitev:org.saddle.ORD[T]):Boolean", "kind" : "def"}, {"label" : "altMatConstructor", "tail" : "(r: Int, c: Int, arr: Array[Vec[T]])(st: ST[T]): Mat[T]", "member" : "org.saddle.scalar.SpecializedFactory.altMatConstructor", "link" : "org\/saddle\/scalar\/ScalarTagAnyRef.html#altMatConstructor(r:Int,c:Int,arr:Array[org.saddle.Vec[T]])(implicitst:org.saddle.ST[T]):org.saddle.Mat[T]", "kind" : "def"}, {"label" : "makeMat", "tail" : "(arr: Array[Vec[T]])(st: ST[T]): Mat[T]", "member" : "org.saddle.scalar.SpecializedFactory.makeMat", "link" : "org\/saddle\/scalar\/ScalarTagAnyRef.html#makeMat(arr:Array[org.saddle.Vec[T]])(implicitst:org.saddle.ST[T]):org.saddle.Mat[T]", "kind" : "final def"}, {"label" : "canEqual", "tail" : "(x: Any): Boolean", "member" : "scala.reflect.ClassTag.canEqual", "link" : "org\/saddle\/scalar\/ScalarTagAnyRef.html#canEqual(x:Any):Boolean", "kind" : "def"}, {"label" : "unapply", "tail" : "(x: Any): Option[T]", "member" : "scala.reflect.ClassTag.unapply", "link" : "org\/saddle\/scalar\/ScalarTagAnyRef.html#unapply(x:Any):Option[T]", "kind" : "def"}, {"label" : "newArray", "tail" : "(len: Int): Array[T]", "member" : "scala.reflect.ClassTag.newArray", "link" : "org\/saddle\/scalar\/ScalarTagAnyRef.html#newArray(len:Int):Array[T]", "kind" : "def"}, {"label" : "wrap", "tail" : "(): ClassTag[Array[T]]", "member" : "scala.reflect.ClassTag.wrap", "link" : "org\/saddle\/scalar\/ScalarTagAnyRef.html#wrap:scala.reflect.ClassTag[Array[T]]", "kind" : "def"}, {"label" : "argString", "tail" : "(): String", "member" : "scala.reflect.ClassManifestDeprecatedApis.argString", "link" : "org\/saddle\/scalar\/ScalarTagAnyRef.html#argString:String", "kind" : "def"}, {"label" : "typeArguments", "tail" : "(): List[OptManifest[_]]", "member" : "scala.reflect.ClassManifestDeprecatedApis.typeArguments", "link" : "org\/saddle\/scalar\/ScalarTagAnyRef.html#typeArguments:List[scala.reflect.OptManifest[_]]", "kind" : "def"}, {"label" : "newArrayBuilder", "tail" : "(): ArrayBuilder[T]", "member" : "scala.reflect.ClassManifestDeprecatedApis.newArrayBuilder", "link" : "org\/saddle\/scalar\/ScalarTagAnyRef.html#newArrayBuilder():scala.collection.mutable.ArrayBuilder[T]", "kind" : "def"}, {"label" : "newWrappedArray", "tail" : "(len: Int): ArraySeq[T]", "member" : "scala.reflect.ClassManifestDeprecatedApis.newWrappedArray", "link" : "org\/saddle\/scalar\/ScalarTagAnyRef.html#newWrappedArray(len:Int):scala.collection.mutable.ArraySeq[T]", "kind" : "def"}, {"label" : "newArray5", "tail" : "(len: Int): Array[Array[Array[Array[Array[T]]]]]", "member" : "scala.reflect.ClassManifestDeprecatedApis.newArray5", "link" : "org\/saddle\/scalar\/ScalarTagAnyRef.html#newArray5(len:Int):Array[Array[Array[Array[Array[T]]]]]", "kind" : "def"}, {"label" : "newArray4", "tail" : "(len: Int): Array[Array[Array[Array[T]]]]", "member" : "scala.reflect.ClassManifestDeprecatedApis.newArray4", "link" : "org\/saddle\/scalar\/ScalarTagAnyRef.html#newArray4(len:Int):Array[Array[Array[Array[T]]]]", "kind" : "def"}, {"label" : "newArray3", "tail" : "(len: Int): Array[Array[Array[T]]]", "member" : "scala.reflect.ClassManifestDeprecatedApis.newArray3", "link" : "org\/saddle\/scalar\/ScalarTagAnyRef.html#newArray3(len:Int):Array[Array[Array[T]]]", "kind" : "def"}, {"label" : "newArray2", "tail" : "(len: Int): Array[Array[T]]", "member" : "scala.reflect.ClassManifestDeprecatedApis.newArray2", "link" : "org\/saddle\/scalar\/ScalarTagAnyRef.html#newArray2(len:Int):Array[Array[T]]", "kind" : "def"}, {"label" : "arrayManifest", "tail" : "(): ClassManifest[Array[T]]", "member" : "scala.reflect.ClassManifestDeprecatedApis.arrayManifest", "link" : "org\/saddle\/scalar\/ScalarTagAnyRef.html#arrayManifest:scala.reflect.ClassManifest[Array[T]]", "kind" : "def"}, {"label" : "arrayClass", "tail" : "(tp: Class[_]): Class[Array[A]]", "member" : "scala.reflect.ClassManifestDeprecatedApis.arrayClass", "link" : "org\/saddle\/scalar\/ScalarTagAnyRef.html#arrayClass[A](tp:Class[_]):Class[Array[A]]", "kind" : "def"}, {"label" : ">:>", "tail" : "(that: ClassManifest[_]): Boolean", "member" : "scala.reflect.ClassManifestDeprecatedApis.>:>", "link" : "org\/saddle\/scalar\/ScalarTagAnyRef.html#>:>(that:scala.reflect.ClassManifest[_]):Boolean", "kind" : "def"}, {"label" : "<:<", "tail" : "(that: ClassManifest[_]): Boolean", "member" : "scala.reflect.ClassManifestDeprecatedApis.<:<", "link" : "org\/saddle\/scalar\/ScalarTagAnyRef.html#<:<(that:scala.reflect.ClassManifest[_]):Boolean", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/saddle\/scalar\/ScalarTagAnyRef.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/saddle\/scalar\/ScalarTagAnyRef.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/saddle\/scalar\/ScalarTagAnyRef.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/saddle\/scalar\/ScalarTagAnyRef.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/saddle\/scalar\/ScalarTagAnyRef.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/saddle\/scalar\/ScalarTagAnyRef.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/saddle\/scalar\/ScalarTagAnyRef.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/scalar\/ScalarTagAnyRef.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/scalar\/ScalarTagAnyRef.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/scalar\/ScalarTagAnyRef.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/saddle\/scalar\/ScalarTagAnyRef.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/saddle\/scalar\/ScalarTagAnyRef.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/saddle\/scalar\/ScalarTagAnyRef.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "org\/saddle\/scalar\/ScalarTagAnyRef.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/saddle\/scalar\/ScalarTagAnyRef.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/saddle\/scalar\/ScalarTagAnyRef.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/saddle\/scalar\/ScalarTagAnyRef.html", "kind" : "class"}, {"name" : "org.saddle.scalar.ScalarTagBool", "shortDescription" : "Boolean ScalarTag.", "object" : "org\/saddle\/scalar\/ScalarTagBool$.html", "members_object" : [{"label" : "toString", "tail" : "(): String", "member" : "org.saddle.scalar.ScalarTagBool.toString", "link" : "org\/saddle\/scalar\/ScalarTagBool$.html#toString():String", "kind" : "def"}, {"label" : "parse", "tail" : "(s: Array[Char], from: Int, to: Int): Boolean", "member" : "org.saddle.scalar.ScalarTagBool.parse", "link" : "org\/saddle\/scalar\/ScalarTagBool$.html#parse(s:Array[Char],from:Int,to:Int):Boolean", "kind" : "def"}, {"label" : "makeSorter", "tail" : "(ord: ORD[Boolean]): Sorter[Boolean]", "member" : "org.saddle.scalar.ScalarTagBool.makeSorter", "link" : "org\/saddle\/scalar\/ScalarTagBool$.html#makeSorter(implicitord:org.saddle.ORD[Boolean]):org.saddle.array.Sorter[Boolean]", "kind" : "def"}, {"label" : "makeIndex", "tail" : "(vec: Vec[Boolean])(ord: ORD[Boolean]): Index[Boolean]", "member" : "org.saddle.scalar.ScalarTagBool.makeIndex", "link" : "org\/saddle\/scalar\/ScalarTagBool$.html#makeIndex(vec:org.saddle.Vec[Boolean])(implicitord:org.saddle.ORD[Boolean]):org.saddle.Index[Boolean]", "kind" : "def"}, {"label" : "makeMat", "tail" : "(r: Int, c: Int, arr: Array[Boolean]): Mat[Boolean]", "member" : "org.saddle.scalar.ScalarTagBool.makeMat", "link" : "org\/saddle\/scalar\/ScalarTagBool$.html#makeMat(r:Int,c:Int,arr:Array[Boolean]):org.saddle.Mat[Boolean]", "kind" : "def"}, {"label" : "makeVec", "tail" : "(arr: Array[Boolean]): Vec[Boolean]", "member" : "org.saddle.scalar.ScalarTagBool.makeVec", "link" : "org\/saddle\/scalar\/ScalarTagBool$.html#makeVec(arr:Array[Boolean]):org.saddle.Vec[Boolean]", "kind" : "def"}, {"label" : "makeLocAll", "tail" : "(sz: Int): LocatorAllBoolean", "member" : "org.saddle.scalar.ScalarTagBool.makeLocAll", "link" : "org\/saddle\/scalar\/ScalarTagBool$.html#makeLocAll(sz:Int):org.saddle.locatorall.LocatorAllBoolean", "kind" : "def"}, {"label" : "makeLoc", "tail" : "(sz: Int): LocatorBool", "member" : "org.saddle.scalar.ScalarTagBool.makeLoc", "link" : "org\/saddle\/scalar\/ScalarTagBool$.html#makeLoc(sz:Int):org.saddle.locator.LocatorBool", "kind" : "def"}, {"label" : "makeBuf", "tail" : "(sz: Int): Buffer[Boolean]", "member" : "org.saddle.scalar.ScalarTagBool.makeBuf", "link" : "org\/saddle\/scalar\/ScalarTagBool$.html#makeBuf(sz:Int):org.saddle.Buffer[Boolean]", "kind" : "def"}, {"label" : "runtimeClass", "tail" : "(): Class[Boolean]", "member" : "org.saddle.scalar.ScalarTagBool.runtimeClass", "link" : "org\/saddle\/scalar\/ScalarTagBool$.html#runtimeClass:Class[Boolean]", "kind" : "def"}, {"label" : "show", "tail" : "(v: Boolean): String", "member" : "org.saddle.scalar.ScalarTagBool.show", "link" : "org\/saddle\/scalar\/ScalarTagBool$.html#show(v:Boolean):String", "kind" : "def"}, {"label" : "negInf", "tail" : "(ev: NUM[Boolean]): Boolean", "member" : "org.saddle.scalar.ScalarTagBool.negInf", "link" : "org\/saddle\/scalar\/ScalarTagBool$.html#negInf(implicitev:org.saddle.NUM[Boolean]):Boolean", "kind" : "def"}, {"label" : "inf", "tail" : "(ev: NUM[Boolean]): Boolean", "member" : "org.saddle.scalar.ScalarTagBool.inf", "link" : "org\/saddle\/scalar\/ScalarTagBool$.html#inf(implicitev:org.saddle.NUM[Boolean]):Boolean", "kind" : "def"}, {"label" : "one", "tail" : "(ev: NUM[Boolean]): Boolean", "member" : "org.saddle.scalar.ScalarTagBool.one", "link" : "org\/saddle\/scalar\/ScalarTagBool$.html#one(implicitev:org.saddle.NUM[Boolean]):Boolean", "kind" : "def"}, {"label" : "zero", "tail" : "(ev: NUM[Boolean]): Boolean", "member" : "org.saddle.scalar.ScalarTagBool.zero", "link" : "org\/saddle\/scalar\/ScalarTagBool$.html#zero(implicitev:org.saddle.NUM[Boolean]):Boolean", "kind" : "def"}, {"label" : "toDouble", "tail" : "(t: Boolean)(ev: NUM[Boolean]): Double", "member" : "org.saddle.scalar.ScalarTagBool.toDouble", "link" : "org\/saddle\/scalar\/ScalarTagBool$.html#toDouble(t:Boolean)(implicitev:org.saddle.NUM[Boolean]):Double", "kind" : "def"}, {"label" : "compare", "tail" : "(x: Boolean, y: Boolean)(ev: ORD[Boolean]): Int", "member" : "org.saddle.scalar.ScalarTagBool.compare", "link" : "org\/saddle\/scalar\/ScalarTagBool$.html#compare(x:Boolean,y:Boolean)(implicitev:org.saddle.ORD[Boolean]):Int", "kind" : "def"}, {"label" : "notMissing", "tail" : "(v: Boolean): Boolean", "member" : "org.saddle.scalar.ScalarTagBool.notMissing", "link" : "org\/saddle\/scalar\/ScalarTagBool$.html#notMissing(v:Boolean):Boolean", "kind" : "def"}, {"label" : "isMissing", "tail" : "(v: Boolean): Boolean", "member" : "org.saddle.scalar.ScalarTagBool.isMissing", "link" : "org\/saddle\/scalar\/ScalarTagBool$.html#isMissing(v:Boolean):Boolean", "kind" : "def"}, {"label" : "missing", "tail" : "(): Boolean", "member" : "org.saddle.scalar.ScalarTagBool.missing", "link" : "org\/saddle\/scalar\/ScalarTagBool$.html#missing:Boolean", "kind" : "def"}, {"label" : "erasure", "tail" : "(): Class[_]", "member" : "org.saddle.scalar.ScalarTag.erasure", "link" : "org\/saddle\/scalar\/ScalarTagBool$.html#erasure:Class[_]", "kind" : "def"}, {"label" : "equals", "tail" : "(o: Any): Boolean", "member" : "org.saddle.scalar.ScalarTag.equals", "link" : "org\/saddle\/scalar\/ScalarTagBool$.html#equals(o:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "org.saddle.scalar.ScalarTag.hashCode", "link" : "org\/saddle\/scalar\/ScalarTagBool$.html#hashCode():Int", "kind" : "def"}, {"label" : "asString", "tail" : "(v: Boolean): String", "member" : "org.saddle.scalar.ScalarTag.asString", "link" : "org\/saddle\/scalar\/ScalarTagBool$.html#asString(v:T):String", "kind" : "def"}, {"label" : "strListLossless", "tail" : "(v: Boolean): List[String]", "member" : "org.saddle.scalar.ScalarTag.strListLossless", "link" : "org\/saddle\/scalar\/ScalarTagBool$.html#strListLossless(v:T):List[String]", "kind" : "def"}, {"label" : "strList", "tail" : "(v: Boolean): List[String]", "member" : "org.saddle.scalar.ScalarTag.strList", "link" : "org\/saddle\/scalar\/ScalarTagBool$.html#strList(v:T):List[String]", "kind" : "def"}, {"label" : "iseq", "tail" : "(a: Boolean, b: Boolean)(ev: ORD[Boolean]): Boolean", "member" : "org.saddle.scalar.CouldBeOrdered.iseq", "link" : "org\/saddle\/scalar\/ScalarTagBool$.html#iseq(a:T,b:T)(implicitev:org.saddle.ORD[T]):Boolean", "kind" : "def"}, {"label" : "gt", "tail" : "(a: Boolean, b: Boolean)(ev: ORD[Boolean]): Boolean", "member" : "org.saddle.scalar.CouldBeOrdered.gt", "link" : "org\/saddle\/scalar\/ScalarTagBool$.html#gt(a:T,b:T)(implicitev:org.saddle.ORD[T]):Boolean", "kind" : "def"}, {"label" : "lt", "tail" : "(a: Boolean, b: Boolean)(ev: ORD[Boolean]): Boolean", "member" : "org.saddle.scalar.CouldBeOrdered.lt", "link" : "org\/saddle\/scalar\/ScalarTagBool$.html#lt(a:T,b:T)(implicitev:org.saddle.ORD[T]):Boolean", "kind" : "def"}, {"label" : "altMatConstructor", "tail" : "(r: Int, c: Int, arr: Array[Vec[Boolean]])(st: ST[Boolean]): Mat[Boolean]", "member" : "org.saddle.scalar.SpecializedFactory.altMatConstructor", "link" : "org\/saddle\/scalar\/ScalarTagBool$.html#altMatConstructor(r:Int,c:Int,arr:Array[org.saddle.Vec[T]])(implicitst:org.saddle.ST[T]):org.saddle.Mat[T]", "kind" : "def"}, {"label" : "makeMat", "tail" : "(arr: Array[Vec[Boolean]])(st: ST[Boolean]): Mat[Boolean]", "member" : "org.saddle.scalar.SpecializedFactory.makeMat", "link" : "org\/saddle\/scalar\/ScalarTagBool$.html#makeMat(arr:Array[org.saddle.Vec[T]])(implicitst:org.saddle.ST[T]):org.saddle.Mat[T]", "kind" : "final def"}, {"label" : "canEqual", "tail" : "(x: Any): Boolean", "member" : "scala.reflect.ClassTag.canEqual", "link" : "org\/saddle\/scalar\/ScalarTagBool$.html#canEqual(x:Any):Boolean", "kind" : "def"}, {"label" : "unapply", "tail" : "(x: Any): Option[Boolean]", "member" : "scala.reflect.ClassTag.unapply", "link" : "org\/saddle\/scalar\/ScalarTagBool$.html#unapply(x:Any):Option[T]", "kind" : "def"}, {"label" : "newArray", "tail" : "(len: Int): Array[Boolean]", "member" : "scala.reflect.ClassTag.newArray", "link" : "org\/saddle\/scalar\/ScalarTagBool$.html#newArray(len:Int):Array[T]", "kind" : "def"}, {"label" : "wrap", "tail" : "(): ClassTag[Array[Boolean]]", "member" : "scala.reflect.ClassTag.wrap", "link" : "org\/saddle\/scalar\/ScalarTagBool$.html#wrap:scala.reflect.ClassTag[Array[T]]", "kind" : "def"}, {"label" : "argString", "tail" : "(): String", "member" : "scala.reflect.ClassManifestDeprecatedApis.argString", "link" : "org\/saddle\/scalar\/ScalarTagBool$.html#argString:String", "kind" : "def"}, {"label" : "typeArguments", "tail" : "(): List[OptManifest[_]]", "member" : "scala.reflect.ClassManifestDeprecatedApis.typeArguments", "link" : "org\/saddle\/scalar\/ScalarTagBool$.html#typeArguments:List[scala.reflect.OptManifest[_]]", "kind" : "def"}, {"label" : "newArrayBuilder", "tail" : "(): ArrayBuilder[Boolean]", "member" : "scala.reflect.ClassManifestDeprecatedApis.newArrayBuilder", "link" : "org\/saddle\/scalar\/ScalarTagBool$.html#newArrayBuilder():scala.collection.mutable.ArrayBuilder[T]", "kind" : "def"}, {"label" : "newWrappedArray", "tail" : "(len: Int): ArraySeq[Boolean]", "member" : "scala.reflect.ClassManifestDeprecatedApis.newWrappedArray", "link" : "org\/saddle\/scalar\/ScalarTagBool$.html#newWrappedArray(len:Int):scala.collection.mutable.ArraySeq[T]", "kind" : "def"}, {"label" : "newArray5", "tail" : "(len: Int): Array[Array[Array[Array[Array[Boolean]]]]]", "member" : "scala.reflect.ClassManifestDeprecatedApis.newArray5", "link" : "org\/saddle\/scalar\/ScalarTagBool$.html#newArray5(len:Int):Array[Array[Array[Array[Array[T]]]]]", "kind" : "def"}, {"label" : "newArray4", "tail" : "(len: Int): Array[Array[Array[Array[Boolean]]]]", "member" : "scala.reflect.ClassManifestDeprecatedApis.newArray4", "link" : "org\/saddle\/scalar\/ScalarTagBool$.html#newArray4(len:Int):Array[Array[Array[Array[T]]]]", "kind" : "def"}, {"label" : "newArray3", "tail" : "(len: Int): Array[Array[Array[Boolean]]]", "member" : "scala.reflect.ClassManifestDeprecatedApis.newArray3", "link" : "org\/saddle\/scalar\/ScalarTagBool$.html#newArray3(len:Int):Array[Array[Array[T]]]", "kind" : "def"}, {"label" : "newArray2", "tail" : "(len: Int): Array[Array[Boolean]]", "member" : "scala.reflect.ClassManifestDeprecatedApis.newArray2", "link" : "org\/saddle\/scalar\/ScalarTagBool$.html#newArray2(len:Int):Array[Array[T]]", "kind" : "def"}, {"label" : "arrayManifest", "tail" : "(): ClassManifest[Array[Boolean]]", "member" : "scala.reflect.ClassManifestDeprecatedApis.arrayManifest", "link" : "org\/saddle\/scalar\/ScalarTagBool$.html#arrayManifest:scala.reflect.ClassManifest[Array[T]]", "kind" : "def"}, {"label" : "arrayClass", "tail" : "(tp: Class[_]): Class[Array[A]]", "member" : "scala.reflect.ClassManifestDeprecatedApis.arrayClass", "link" : "org\/saddle\/scalar\/ScalarTagBool$.html#arrayClass[A](tp:Class[_]):Class[Array[A]]", "kind" : "def"}, {"label" : ">:>", "tail" : "(that: ClassManifest[_]): Boolean", "member" : "scala.reflect.ClassManifestDeprecatedApis.>:>", "link" : "org\/saddle\/scalar\/ScalarTagBool$.html#>:>(that:scala.reflect.ClassManifest[_]):Boolean", "kind" : "def"}, {"label" : "<:<", "tail" : "(that: ClassManifest[_]): Boolean", "member" : "scala.reflect.ClassManifestDeprecatedApis.<:<", "link" : "org\/saddle\/scalar\/ScalarTagBool$.html#<:<(that:scala.reflect.ClassManifest[_]):Boolean", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/saddle\/scalar\/ScalarTagBool$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/saddle\/scalar\/ScalarTagBool$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/saddle\/scalar\/ScalarTagBool$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/saddle\/scalar\/ScalarTagBool$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/saddle\/scalar\/ScalarTagBool$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/saddle\/scalar\/ScalarTagBool$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/saddle\/scalar\/ScalarTagBool$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/scalar\/ScalarTagBool$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/scalar\/ScalarTagBool$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/scalar\/ScalarTagBool$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/saddle\/scalar\/ScalarTagBool$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/saddle\/scalar\/ScalarTagBool$.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/saddle\/scalar\/ScalarTagBool$.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "org\/saddle\/scalar\/ScalarTagBool$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/saddle\/scalar\/ScalarTagBool$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/saddle\/scalar\/ScalarTagBool$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "org.saddle.scalar.ScalarTagByte", "shortDescription" : "Byte ScalarTag", "object" : "org\/saddle\/scalar\/ScalarTagByte$.html", "members_object" : [{"label" : "clm", "tail" : "(): CLM[Byte]", "member" : "org.saddle.scalar.ScalarTagByte.clm", "link" : "org\/saddle\/scalar\/ScalarTagByte$.html#clm:org.saddle.CLM[Byte]", "kind" : "def"}, {"label" : "isMissing", "tail" : "(v: Byte): Boolean", "member" : "org.saddle.scalar.ScalarTagByte.isMissing", "link" : "org\/saddle\/scalar\/ScalarTagByte$.html#isMissing(v:Byte):Boolean", "kind" : "def"}, {"label" : "missing", "tail" : "(): Byte", "member" : "org.saddle.scalar.ScalarTagByte.missing", "link" : "org\/saddle\/scalar\/ScalarTagByte$.html#missing:Byte", "kind" : "def"}, {"label" : "makeSorter", "tail" : "(ord: ORD[Byte]): Sorter[Byte]", "member" : "org.saddle.scalar.ScalarTagByte.makeSorter", "link" : "org\/saddle\/scalar\/ScalarTagByte$.html#makeSorter(implicitord:org.saddle.ORD[Byte]):org.saddle.array.Sorter[Byte]", "kind" : "def"}, {"label" : "parse", "tail" : "(s: Array[Char], from: Int, to: Int): Byte", "member" : "org.saddle.scalar.ScalarTagByte.parse", "link" : "org\/saddle\/scalar\/ScalarTagByte$.html#parse(s:Array[Char],from:Int,to:Int):Byte", "kind" : "def"}, {"label" : "makeIndex", "tail" : "(vec: Vec[Byte])(ord: ORD[Byte]): Index[Byte]", "member" : "org.saddle.scalar.ScalarTagBase.makeIndex", "link" : "org\/saddle\/scalar\/ScalarTagByte$.html#makeIndex(vec:org.saddle.Vec[T])(implicitord:org.saddle.ORD[T]):org.saddle.Index[T]", "kind" : "def"}, {"label" : "makeMat", "tail" : "(r: Int, c: Int, arr: Array[Byte]): Mat[Byte]", "member" : "org.saddle.scalar.ScalarTagBase.makeMat", "link" : "org\/saddle\/scalar\/ScalarTagByte$.html#makeMat(r:Int,c:Int,arr:Array[T]):org.saddle.Mat[T]", "kind" : "def"}, {"label" : "makeVec", "tail" : "(arr: Array[Byte]): Vec[Byte]", "member" : "org.saddle.scalar.ScalarTagBase.makeVec", "link" : "org\/saddle\/scalar\/ScalarTagByte$.html#makeVec(arr:Array[T]):org.saddle.Vec[T]", "kind" : "def"}, {"label" : "makeLocAll", "tail" : "(sz: Int): LocatorAll[Byte]", "member" : "org.saddle.scalar.ScalarTagBase.makeLocAll", "link" : "org\/saddle\/scalar\/ScalarTagByte$.html#makeLocAll(sz:Int):org.saddle.locatorall.LocatorAll[T]", "kind" : "def"}, {"label" : "makeLoc", "tail" : "(sz: Int): Locator[Byte]", "member" : "org.saddle.scalar.ScalarTagBase.makeLoc", "link" : "org\/saddle\/scalar\/ScalarTagByte$.html#makeLoc(sz:Int):org.saddle.locator.Locator[T]", "kind" : "def"}, {"label" : "makeBuf", "tail" : "(sz: Int): Buffer[Byte]", "member" : "org.saddle.scalar.ScalarTagBase.makeBuf", "link" : "org\/saddle\/scalar\/ScalarTagByte$.html#makeBuf(sz:Int):org.saddle.Buffer[T]", "kind" : "def"}, {"label" : "runtimeClass", "tail" : "(): Class[_]", "member" : "org.saddle.scalar.ScalarTagBase.runtimeClass", "link" : "org\/saddle\/scalar\/ScalarTagByte$.html#runtimeClass:Class[_]", "kind" : "def"}, {"label" : "show", "tail" : "(v: Byte): String", "member" : "org.saddle.scalar.ScalarTagBase.show", "link" : "org\/saddle\/scalar\/ScalarTagByte$.html#show(v:T):String", "kind" : "def"}, {"label" : "negInf", "tail" : "(ev: NUM[Byte]): Nothing", "member" : "org.saddle.scalar.ScalarTagBase.negInf", "link" : "org\/saddle\/scalar\/ScalarTagByte$.html#negInf(implicitev:org.saddle.NUM[T]):Nothing", "kind" : "def"}, {"label" : "inf", "tail" : "(ev: NUM[Byte]): Nothing", "member" : "org.saddle.scalar.ScalarTagBase.inf", "link" : "org\/saddle\/scalar\/ScalarTagByte$.html#inf(implicitev:org.saddle.NUM[T]):Nothing", "kind" : "def"}, {"label" : "one", "tail" : "(ev: NUM[Byte]): Byte", "member" : "org.saddle.scalar.ScalarTagBase.one", "link" : "org\/saddle\/scalar\/ScalarTagByte$.html#one(implicitev:org.saddle.NUM[T]):T", "kind" : "def"}, {"label" : "zero", "tail" : "(ev: NUM[Byte]): Byte", "member" : "org.saddle.scalar.ScalarTagBase.zero", "link" : "org\/saddle\/scalar\/ScalarTagByte$.html#zero(implicitev:org.saddle.NUM[T]):T", "kind" : "def"}, {"label" : "toDouble", "tail" : "(t: Byte)(ev: NUM[Byte]): Double", "member" : "org.saddle.scalar.ScalarTagBase.toDouble", "link" : "org\/saddle\/scalar\/ScalarTagByte$.html#toDouble(t:T)(implicitev:org.saddle.NUM[T]):Double", "kind" : "def"}, {"label" : "compare", "tail" : "(x: Byte, y: Byte)(ev: ORD[Byte]): Int", "member" : "org.saddle.scalar.ScalarTagBase.compare", "link" : "org\/saddle\/scalar\/ScalarTagByte$.html#compare(x:T,y:T)(implicitev:org.saddle.ORD[T]):Int", "kind" : "def"}, {"label" : "erasure", "tail" : "(): Class[_]", "member" : "org.saddle.scalar.ScalarTag.erasure", "link" : "org\/saddle\/scalar\/ScalarTagByte$.html#erasure:Class[_]", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "org.saddle.scalar.ScalarTag.toString", "link" : "org\/saddle\/scalar\/ScalarTagByte$.html#toString():String", "kind" : "def"}, {"label" : "equals", "tail" : "(o: Any): Boolean", "member" : "org.saddle.scalar.ScalarTag.equals", "link" : "org\/saddle\/scalar\/ScalarTagByte$.html#equals(o:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "org.saddle.scalar.ScalarTag.hashCode", "link" : "org\/saddle\/scalar\/ScalarTagByte$.html#hashCode():Int", "kind" : "def"}, {"label" : "asString", "tail" : "(v: Byte): String", "member" : "org.saddle.scalar.ScalarTag.asString", "link" : "org\/saddle\/scalar\/ScalarTagByte$.html#asString(v:T):String", "kind" : "def"}, {"label" : "strListLossless", "tail" : "(v: Byte): List[String]", "member" : "org.saddle.scalar.ScalarTag.strListLossless", "link" : "org\/saddle\/scalar\/ScalarTagByte$.html#strListLossless(v:T):List[String]", "kind" : "def"}, {"label" : "strList", "tail" : "(v: Byte): List[String]", "member" : "org.saddle.scalar.ScalarTag.strList", "link" : "org\/saddle\/scalar\/ScalarTagByte$.html#strList(v:T):List[String]", "kind" : "def"}, {"label" : "notMissing", "tail" : "(t: Byte): Boolean", "member" : "org.saddle.scalar.ScalarTag.notMissing", "link" : "org\/saddle\/scalar\/ScalarTagByte$.html#notMissing(t:T):Boolean", "kind" : "def"}, {"label" : "iseq", "tail" : "(a: Byte, b: Byte)(ev: ORD[Byte]): Boolean", "member" : "org.saddle.scalar.CouldBeOrdered.iseq", "link" : "org\/saddle\/scalar\/ScalarTagByte$.html#iseq(a:T,b:T)(implicitev:org.saddle.ORD[T]):Boolean", "kind" : "def"}, {"label" : "gt", "tail" : "(a: Byte, b: Byte)(ev: ORD[Byte]): Boolean", "member" : "org.saddle.scalar.CouldBeOrdered.gt", "link" : "org\/saddle\/scalar\/ScalarTagByte$.html#gt(a:T,b:T)(implicitev:org.saddle.ORD[T]):Boolean", "kind" : "def"}, {"label" : "lt", "tail" : "(a: Byte, b: Byte)(ev: ORD[Byte]): Boolean", "member" : "org.saddle.scalar.CouldBeOrdered.lt", "link" : "org\/saddle\/scalar\/ScalarTagByte$.html#lt(a:T,b:T)(implicitev:org.saddle.ORD[T]):Boolean", "kind" : "def"}, {"label" : "altMatConstructor", "tail" : "(r: Int, c: Int, arr: Array[Vec[Byte]])(st: ST[Byte]): Mat[Byte]", "member" : "org.saddle.scalar.SpecializedFactory.altMatConstructor", "link" : "org\/saddle\/scalar\/ScalarTagByte$.html#altMatConstructor(r:Int,c:Int,arr:Array[org.saddle.Vec[T]])(implicitst:org.saddle.ST[T]):org.saddle.Mat[T]", "kind" : "def"}, {"label" : "makeMat", "tail" : "(arr: Array[Vec[Byte]])(st: ST[Byte]): Mat[Byte]", "member" : "org.saddle.scalar.SpecializedFactory.makeMat", "link" : "org\/saddle\/scalar\/ScalarTagByte$.html#makeMat(arr:Array[org.saddle.Vec[T]])(implicitst:org.saddle.ST[T]):org.saddle.Mat[T]", "kind" : "final def"}, {"label" : "canEqual", "tail" : "(x: Any): Boolean", "member" : "scala.reflect.ClassTag.canEqual", "link" : "org\/saddle\/scalar\/ScalarTagByte$.html#canEqual(x:Any):Boolean", "kind" : "def"}, {"label" : "unapply", "tail" : "(x: Any): Option[Byte]", "member" : "scala.reflect.ClassTag.unapply", "link" : "org\/saddle\/scalar\/ScalarTagByte$.html#unapply(x:Any):Option[T]", "kind" : "def"}, {"label" : "newArray", "tail" : "(len: Int): Array[Byte]", "member" : "scala.reflect.ClassTag.newArray", "link" : "org\/saddle\/scalar\/ScalarTagByte$.html#newArray(len:Int):Array[T]", "kind" : "def"}, {"label" : "wrap", "tail" : "(): ClassTag[Array[Byte]]", "member" : "scala.reflect.ClassTag.wrap", "link" : "org\/saddle\/scalar\/ScalarTagByte$.html#wrap:scala.reflect.ClassTag[Array[T]]", "kind" : "def"}, {"label" : "argString", "tail" : "(): String", "member" : "scala.reflect.ClassManifestDeprecatedApis.argString", "link" : "org\/saddle\/scalar\/ScalarTagByte$.html#argString:String", "kind" : "def"}, {"label" : "typeArguments", "tail" : "(): List[OptManifest[_]]", "member" : "scala.reflect.ClassManifestDeprecatedApis.typeArguments", "link" : "org\/saddle\/scalar\/ScalarTagByte$.html#typeArguments:List[scala.reflect.OptManifest[_]]", "kind" : "def"}, {"label" : "newArrayBuilder", "tail" : "(): ArrayBuilder[Byte]", "member" : "scala.reflect.ClassManifestDeprecatedApis.newArrayBuilder", "link" : "org\/saddle\/scalar\/ScalarTagByte$.html#newArrayBuilder():scala.collection.mutable.ArrayBuilder[T]", "kind" : "def"}, {"label" : "newWrappedArray", "tail" : "(len: Int): ArraySeq[Byte]", "member" : "scala.reflect.ClassManifestDeprecatedApis.newWrappedArray", "link" : "org\/saddle\/scalar\/ScalarTagByte$.html#newWrappedArray(len:Int):scala.collection.mutable.ArraySeq[T]", "kind" : "def"}, {"label" : "newArray5", "tail" : "(len: Int): Array[Array[Array[Array[Array[Byte]]]]]", "member" : "scala.reflect.ClassManifestDeprecatedApis.newArray5", "link" : "org\/saddle\/scalar\/ScalarTagByte$.html#newArray5(len:Int):Array[Array[Array[Array[Array[T]]]]]", "kind" : "def"}, {"label" : "newArray4", "tail" : "(len: Int): Array[Array[Array[Array[Byte]]]]", "member" : "scala.reflect.ClassManifestDeprecatedApis.newArray4", "link" : "org\/saddle\/scalar\/ScalarTagByte$.html#newArray4(len:Int):Array[Array[Array[Array[T]]]]", "kind" : "def"}, {"label" : "newArray3", "tail" : "(len: Int): Array[Array[Array[Byte]]]", "member" : "scala.reflect.ClassManifestDeprecatedApis.newArray3", "link" : "org\/saddle\/scalar\/ScalarTagByte$.html#newArray3(len:Int):Array[Array[Array[T]]]", "kind" : "def"}, {"label" : "newArray2", "tail" : "(len: Int): Array[Array[Byte]]", "member" : "scala.reflect.ClassManifestDeprecatedApis.newArray2", "link" : "org\/saddle\/scalar\/ScalarTagByte$.html#newArray2(len:Int):Array[Array[T]]", "kind" : "def"}, {"label" : "arrayManifest", "tail" : "(): ClassManifest[Array[Byte]]", "member" : "scala.reflect.ClassManifestDeprecatedApis.arrayManifest", "link" : "org\/saddle\/scalar\/ScalarTagByte$.html#arrayManifest:scala.reflect.ClassManifest[Array[T]]", "kind" : "def"}, {"label" : "arrayClass", "tail" : "(tp: Class[_]): Class[Array[A]]", "member" : "scala.reflect.ClassManifestDeprecatedApis.arrayClass", "link" : "org\/saddle\/scalar\/ScalarTagByte$.html#arrayClass[A](tp:Class[_]):Class[Array[A]]", "kind" : "def"}, {"label" : ">:>", "tail" : "(that: ClassManifest[_]): Boolean", "member" : "scala.reflect.ClassManifestDeprecatedApis.>:>", "link" : "org\/saddle\/scalar\/ScalarTagByte$.html#>:>(that:scala.reflect.ClassManifest[_]):Boolean", "kind" : "def"}, {"label" : "<:<", "tail" : "(that: ClassManifest[_]): Boolean", "member" : "scala.reflect.ClassManifestDeprecatedApis.<:<", "link" : "org\/saddle\/scalar\/ScalarTagByte$.html#<:<(that:scala.reflect.ClassManifest[_]):Boolean", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/saddle\/scalar\/ScalarTagByte$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/saddle\/scalar\/ScalarTagByte$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/saddle\/scalar\/ScalarTagByte$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/saddle\/scalar\/ScalarTagByte$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/saddle\/scalar\/ScalarTagByte$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/saddle\/scalar\/ScalarTagByte$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/saddle\/scalar\/ScalarTagByte$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/scalar\/ScalarTagByte$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/scalar\/ScalarTagByte$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/scalar\/ScalarTagByte$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/saddle\/scalar\/ScalarTagByte$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/saddle\/scalar\/ScalarTagByte$.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/saddle\/scalar\/ScalarTagByte$.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "org\/saddle\/scalar\/ScalarTagByte$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/saddle\/scalar\/ScalarTagByte$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/saddle\/scalar\/ScalarTagByte$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "org.saddle.scalar.ScalarTagChar", "shortDescription" : "Char ScalarTag", "object" : "org\/saddle\/scalar\/ScalarTagChar$.html", "members_object" : [{"label" : "clm", "tail" : "(): CLM[Char]", "member" : "org.saddle.scalar.ScalarTagChar.clm", "link" : "org\/saddle\/scalar\/ScalarTagChar$.html#clm:org.saddle.CLM[Char]", "kind" : "def"}, {"label" : "isMissing", "tail" : "(c: Char): Boolean", "member" : "org.saddle.scalar.ScalarTagChar.isMissing", "link" : "org\/saddle\/scalar\/ScalarTagChar$.html#isMissing(c:Char):Boolean", "kind" : "def"}, {"label" : "missing", "tail" : "(): Char", "member" : "org.saddle.scalar.ScalarTagChar.missing", "link" : "org\/saddle\/scalar\/ScalarTagChar$.html#missing:Char", "kind" : "def"}, {"label" : "makeSorter", "tail" : "(ord: ORD[Char]): Sorter[Char]", "member" : "org.saddle.scalar.ScalarTagChar.makeSorter", "link" : "org\/saddle\/scalar\/ScalarTagChar$.html#makeSorter(implicitord:org.saddle.ORD[Char]):org.saddle.array.Sorter[Char]", "kind" : "def"}, {"label" : "parse", "tail" : "(s: Array[Char], from: Int, to: Int): Char", "member" : "org.saddle.scalar.ScalarTagChar.parse", "link" : "org\/saddle\/scalar\/ScalarTagChar$.html#parse(s:Array[Char],from:Int,to:Int):Char", "kind" : "def"}, {"label" : "makeIndex", "tail" : "(vec: Vec[Char])(ord: ORD[Char]): Index[Char]", "member" : "org.saddle.scalar.ScalarTagBase.makeIndex", "link" : "org\/saddle\/scalar\/ScalarTagChar$.html#makeIndex(vec:org.saddle.Vec[T])(implicitord:org.saddle.ORD[T]):org.saddle.Index[T]", "kind" : "def"}, {"label" : "makeMat", "tail" : "(r: Int, c: Int, arr: Array[Char]): Mat[Char]", "member" : "org.saddle.scalar.ScalarTagBase.makeMat", "link" : "org\/saddle\/scalar\/ScalarTagChar$.html#makeMat(r:Int,c:Int,arr:Array[T]):org.saddle.Mat[T]", "kind" : "def"}, {"label" : "makeVec", "tail" : "(arr: Array[Char]): Vec[Char]", "member" : "org.saddle.scalar.ScalarTagBase.makeVec", "link" : "org\/saddle\/scalar\/ScalarTagChar$.html#makeVec(arr:Array[T]):org.saddle.Vec[T]", "kind" : "def"}, {"label" : "makeLocAll", "tail" : "(sz: Int): LocatorAll[Char]", "member" : "org.saddle.scalar.ScalarTagBase.makeLocAll", "link" : "org\/saddle\/scalar\/ScalarTagChar$.html#makeLocAll(sz:Int):org.saddle.locatorall.LocatorAll[T]", "kind" : "def"}, {"label" : "makeLoc", "tail" : "(sz: Int): Locator[Char]", "member" : "org.saddle.scalar.ScalarTagBase.makeLoc", "link" : "org\/saddle\/scalar\/ScalarTagChar$.html#makeLoc(sz:Int):org.saddle.locator.Locator[T]", "kind" : "def"}, {"label" : "makeBuf", "tail" : "(sz: Int): Buffer[Char]", "member" : "org.saddle.scalar.ScalarTagBase.makeBuf", "link" : "org\/saddle\/scalar\/ScalarTagChar$.html#makeBuf(sz:Int):org.saddle.Buffer[T]", "kind" : "def"}, {"label" : "runtimeClass", "tail" : "(): Class[_]", "member" : "org.saddle.scalar.ScalarTagBase.runtimeClass", "link" : "org\/saddle\/scalar\/ScalarTagChar$.html#runtimeClass:Class[_]", "kind" : "def"}, {"label" : "show", "tail" : "(v: Char): String", "member" : "org.saddle.scalar.ScalarTagBase.show", "link" : "org\/saddle\/scalar\/ScalarTagChar$.html#show(v:T):String", "kind" : "def"}, {"label" : "negInf", "tail" : "(ev: NUM[Char]): Nothing", "member" : "org.saddle.scalar.ScalarTagBase.negInf", "link" : "org\/saddle\/scalar\/ScalarTagChar$.html#negInf(implicitev:org.saddle.NUM[T]):Nothing", "kind" : "def"}, {"label" : "inf", "tail" : "(ev: NUM[Char]): Nothing", "member" : "org.saddle.scalar.ScalarTagBase.inf", "link" : "org\/saddle\/scalar\/ScalarTagChar$.html#inf(implicitev:org.saddle.NUM[T]):Nothing", "kind" : "def"}, {"label" : "one", "tail" : "(ev: NUM[Char]): Char", "member" : "org.saddle.scalar.ScalarTagBase.one", "link" : "org\/saddle\/scalar\/ScalarTagChar$.html#one(implicitev:org.saddle.NUM[T]):T", "kind" : "def"}, {"label" : "zero", "tail" : "(ev: NUM[Char]): Char", "member" : "org.saddle.scalar.ScalarTagBase.zero", "link" : "org\/saddle\/scalar\/ScalarTagChar$.html#zero(implicitev:org.saddle.NUM[T]):T", "kind" : "def"}, {"label" : "toDouble", "tail" : "(t: Char)(ev: NUM[Char]): Double", "member" : "org.saddle.scalar.ScalarTagBase.toDouble", "link" : "org\/saddle\/scalar\/ScalarTagChar$.html#toDouble(t:T)(implicitev:org.saddle.NUM[T]):Double", "kind" : "def"}, {"label" : "compare", "tail" : "(x: Char, y: Char)(ev: ORD[Char]): Int", "member" : "org.saddle.scalar.ScalarTagBase.compare", "link" : "org\/saddle\/scalar\/ScalarTagChar$.html#compare(x:T,y:T)(implicitev:org.saddle.ORD[T]):Int", "kind" : "def"}, {"label" : "erasure", "tail" : "(): Class[_]", "member" : "org.saddle.scalar.ScalarTag.erasure", "link" : "org\/saddle\/scalar\/ScalarTagChar$.html#erasure:Class[_]", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "org.saddle.scalar.ScalarTag.toString", "link" : "org\/saddle\/scalar\/ScalarTagChar$.html#toString():String", "kind" : "def"}, {"label" : "equals", "tail" : "(o: Any): Boolean", "member" : "org.saddle.scalar.ScalarTag.equals", "link" : "org\/saddle\/scalar\/ScalarTagChar$.html#equals(o:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "org.saddle.scalar.ScalarTag.hashCode", "link" : "org\/saddle\/scalar\/ScalarTagChar$.html#hashCode():Int", "kind" : "def"}, {"label" : "asString", "tail" : "(v: Char): String", "member" : "org.saddle.scalar.ScalarTag.asString", "link" : "org\/saddle\/scalar\/ScalarTagChar$.html#asString(v:T):String", "kind" : "def"}, {"label" : "strListLossless", "tail" : "(v: Char): List[String]", "member" : "org.saddle.scalar.ScalarTag.strListLossless", "link" : "org\/saddle\/scalar\/ScalarTagChar$.html#strListLossless(v:T):List[String]", "kind" : "def"}, {"label" : "strList", "tail" : "(v: Char): List[String]", "member" : "org.saddle.scalar.ScalarTag.strList", "link" : "org\/saddle\/scalar\/ScalarTagChar$.html#strList(v:T):List[String]", "kind" : "def"}, {"label" : "notMissing", "tail" : "(t: Char): Boolean", "member" : "org.saddle.scalar.ScalarTag.notMissing", "link" : "org\/saddle\/scalar\/ScalarTagChar$.html#notMissing(t:T):Boolean", "kind" : "def"}, {"label" : "iseq", "tail" : "(a: Char, b: Char)(ev: ORD[Char]): Boolean", "member" : "org.saddle.scalar.CouldBeOrdered.iseq", "link" : "org\/saddle\/scalar\/ScalarTagChar$.html#iseq(a:T,b:T)(implicitev:org.saddle.ORD[T]):Boolean", "kind" : "def"}, {"label" : "gt", "tail" : "(a: Char, b: Char)(ev: ORD[Char]): Boolean", "member" : "org.saddle.scalar.CouldBeOrdered.gt", "link" : "org\/saddle\/scalar\/ScalarTagChar$.html#gt(a:T,b:T)(implicitev:org.saddle.ORD[T]):Boolean", "kind" : "def"}, {"label" : "lt", "tail" : "(a: Char, b: Char)(ev: ORD[Char]): Boolean", "member" : "org.saddle.scalar.CouldBeOrdered.lt", "link" : "org\/saddle\/scalar\/ScalarTagChar$.html#lt(a:T,b:T)(implicitev:org.saddle.ORD[T]):Boolean", "kind" : "def"}, {"label" : "altMatConstructor", "tail" : "(r: Int, c: Int, arr: Array[Vec[Char]])(st: ST[Char]): Mat[Char]", "member" : "org.saddle.scalar.SpecializedFactory.altMatConstructor", "link" : "org\/saddle\/scalar\/ScalarTagChar$.html#altMatConstructor(r:Int,c:Int,arr:Array[org.saddle.Vec[T]])(implicitst:org.saddle.ST[T]):org.saddle.Mat[T]", "kind" : "def"}, {"label" : "makeMat", "tail" : "(arr: Array[Vec[Char]])(st: ST[Char]): Mat[Char]", "member" : "org.saddle.scalar.SpecializedFactory.makeMat", "link" : "org\/saddle\/scalar\/ScalarTagChar$.html#makeMat(arr:Array[org.saddle.Vec[T]])(implicitst:org.saddle.ST[T]):org.saddle.Mat[T]", "kind" : "final def"}, {"label" : "canEqual", "tail" : "(x: Any): Boolean", "member" : "scala.reflect.ClassTag.canEqual", "link" : "org\/saddle\/scalar\/ScalarTagChar$.html#canEqual(x:Any):Boolean", "kind" : "def"}, {"label" : "unapply", "tail" : "(x: Any): Option[Char]", "member" : "scala.reflect.ClassTag.unapply", "link" : "org\/saddle\/scalar\/ScalarTagChar$.html#unapply(x:Any):Option[T]", "kind" : "def"}, {"label" : "newArray", "tail" : "(len: Int): Array[Char]", "member" : "scala.reflect.ClassTag.newArray", "link" : "org\/saddle\/scalar\/ScalarTagChar$.html#newArray(len:Int):Array[T]", "kind" : "def"}, {"label" : "wrap", "tail" : "(): ClassTag[Array[Char]]", "member" : "scala.reflect.ClassTag.wrap", "link" : "org\/saddle\/scalar\/ScalarTagChar$.html#wrap:scala.reflect.ClassTag[Array[T]]", "kind" : "def"}, {"label" : "argString", "tail" : "(): String", "member" : "scala.reflect.ClassManifestDeprecatedApis.argString", "link" : "org\/saddle\/scalar\/ScalarTagChar$.html#argString:String", "kind" : "def"}, {"label" : "typeArguments", "tail" : "(): List[OptManifest[_]]", "member" : "scala.reflect.ClassManifestDeprecatedApis.typeArguments", "link" : "org\/saddle\/scalar\/ScalarTagChar$.html#typeArguments:List[scala.reflect.OptManifest[_]]", "kind" : "def"}, {"label" : "newArrayBuilder", "tail" : "(): ArrayBuilder[Char]", "member" : "scala.reflect.ClassManifestDeprecatedApis.newArrayBuilder", "link" : "org\/saddle\/scalar\/ScalarTagChar$.html#newArrayBuilder():scala.collection.mutable.ArrayBuilder[T]", "kind" : "def"}, {"label" : "newWrappedArray", "tail" : "(len: Int): ArraySeq[Char]", "member" : "scala.reflect.ClassManifestDeprecatedApis.newWrappedArray", "link" : "org\/saddle\/scalar\/ScalarTagChar$.html#newWrappedArray(len:Int):scala.collection.mutable.ArraySeq[T]", "kind" : "def"}, {"label" : "newArray5", "tail" : "(len: Int): Array[Array[Array[Array[Array[Char]]]]]", "member" : "scala.reflect.ClassManifestDeprecatedApis.newArray5", "link" : "org\/saddle\/scalar\/ScalarTagChar$.html#newArray5(len:Int):Array[Array[Array[Array[Array[T]]]]]", "kind" : "def"}, {"label" : "newArray4", "tail" : "(len: Int): Array[Array[Array[Array[Char]]]]", "member" : "scala.reflect.ClassManifestDeprecatedApis.newArray4", "link" : "org\/saddle\/scalar\/ScalarTagChar$.html#newArray4(len:Int):Array[Array[Array[Array[T]]]]", "kind" : "def"}, {"label" : "newArray3", "tail" : "(len: Int): Array[Array[Array[Char]]]", "member" : "scala.reflect.ClassManifestDeprecatedApis.newArray3", "link" : "org\/saddle\/scalar\/ScalarTagChar$.html#newArray3(len:Int):Array[Array[Array[T]]]", "kind" : "def"}, {"label" : "newArray2", "tail" : "(len: Int): Array[Array[Char]]", "member" : "scala.reflect.ClassManifestDeprecatedApis.newArray2", "link" : "org\/saddle\/scalar\/ScalarTagChar$.html#newArray2(len:Int):Array[Array[T]]", "kind" : "def"}, {"label" : "arrayManifest", "tail" : "(): ClassManifest[Array[Char]]", "member" : "scala.reflect.ClassManifestDeprecatedApis.arrayManifest", "link" : "org\/saddle\/scalar\/ScalarTagChar$.html#arrayManifest:scala.reflect.ClassManifest[Array[T]]", "kind" : "def"}, {"label" : "arrayClass", "tail" : "(tp: Class[_]): Class[Array[A]]", "member" : "scala.reflect.ClassManifestDeprecatedApis.arrayClass", "link" : "org\/saddle\/scalar\/ScalarTagChar$.html#arrayClass[A](tp:Class[_]):Class[Array[A]]", "kind" : "def"}, {"label" : ">:>", "tail" : "(that: ClassManifest[_]): Boolean", "member" : "scala.reflect.ClassManifestDeprecatedApis.>:>", "link" : "org\/saddle\/scalar\/ScalarTagChar$.html#>:>(that:scala.reflect.ClassManifest[_]):Boolean", "kind" : "def"}, {"label" : "<:<", "tail" : "(that: ClassManifest[_]): Boolean", "member" : "scala.reflect.ClassManifestDeprecatedApis.<:<", "link" : "org\/saddle\/scalar\/ScalarTagChar$.html#<:<(that:scala.reflect.ClassManifest[_]):Boolean", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/saddle\/scalar\/ScalarTagChar$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/saddle\/scalar\/ScalarTagChar$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/saddle\/scalar\/ScalarTagChar$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/saddle\/scalar\/ScalarTagChar$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/saddle\/scalar\/ScalarTagChar$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/saddle\/scalar\/ScalarTagChar$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/saddle\/scalar\/ScalarTagChar$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/scalar\/ScalarTagChar$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/scalar\/ScalarTagChar$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/scalar\/ScalarTagChar$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/saddle\/scalar\/ScalarTagChar$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/saddle\/scalar\/ScalarTagChar$.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/saddle\/scalar\/ScalarTagChar$.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "org\/saddle\/scalar\/ScalarTagChar$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/saddle\/scalar\/ScalarTagChar$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/saddle\/scalar\/ScalarTagChar$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "org.saddle.scalar.ScalarTagDouble", "shortDescription" : "Double ScalarTag", "object" : "org\/saddle\/scalar\/ScalarTagDouble$.html", "members_object" : [{"label" : "toString", "tail" : "(): String", "member" : "org.saddle.scalar.ScalarTagDouble.toString", "link" : "org\/saddle\/scalar\/ScalarTagDouble$.html#toString():String", "kind" : "def"}, {"label" : "makeSorter", "tail" : "(ord: ORD[Double]): Sorter[Double]", "member" : "org.saddle.scalar.ScalarTagDouble.makeSorter", "link" : "org\/saddle\/scalar\/ScalarTagDouble$.html#makeSorter(implicitord:org.saddle.ORD[Double]):org.saddle.array.Sorter[Double]", "kind" : "def"}, {"label" : "makeIndex", "tail" : "(vec: Vec[Double])(ord: ORD[Double]): Index[Double]", "member" : "org.saddle.scalar.ScalarTagDouble.makeIndex", "link" : "org\/saddle\/scalar\/ScalarTagDouble$.html#makeIndex(vec:org.saddle.Vec[Double])(implicitord:org.saddle.ORD[Double]):org.saddle.Index[Double]", "kind" : "def"}, {"label" : "makeMat", "tail" : "(r: Int, c: Int, arr: Array[Double]): Mat[Double]", "member" : "org.saddle.scalar.ScalarTagDouble.makeMat", "link" : "org\/saddle\/scalar\/ScalarTagDouble$.html#makeMat(r:Int,c:Int,arr:Array[Double]):org.saddle.Mat[Double]", "kind" : "def"}, {"label" : "makeVec", "tail" : "(arr: Array[Double]): Vec[Double]", "member" : "org.saddle.scalar.ScalarTagDouble.makeVec", "link" : "org\/saddle\/scalar\/ScalarTagDouble$.html#makeVec(arr:Array[Double]):org.saddle.Vec[Double]", "kind" : "def"}, {"label" : "makeLocAll", "tail" : "(sz: Int): LocatorAllDouble", "member" : "org.saddle.scalar.ScalarTagDouble.makeLocAll", "link" : "org\/saddle\/scalar\/ScalarTagDouble$.html#makeLocAll(sz:Int):org.saddle.locatorall.LocatorAllDouble", "kind" : "def"}, {"label" : "makeLoc", "tail" : "(sz: Int): LocatorDouble", "member" : "org.saddle.scalar.ScalarTagDouble.makeLoc", "link" : "org\/saddle\/scalar\/ScalarTagDouble$.html#makeLoc(sz:Int):org.saddle.locator.LocatorDouble", "kind" : "def"}, {"label" : "makeBuf", "tail" : "(sz: Int): Buffer[Double]", "member" : "org.saddle.scalar.ScalarTagDouble.makeBuf", "link" : "org\/saddle\/scalar\/ScalarTagDouble$.html#makeBuf(sz:Int):org.saddle.Buffer[Double]", "kind" : "def"}, {"label" : "runtimeClass", "tail" : "(): Class[Double]", "member" : "org.saddle.scalar.ScalarTagDouble.runtimeClass", "link" : "org\/saddle\/scalar\/ScalarTagDouble$.html#runtimeClass:Class[Double]", "kind" : "def"}, {"label" : "asString", "tail" : "(v: Double): String", "member" : "org.saddle.scalar.ScalarTagDouble.asString", "link" : "org\/saddle\/scalar\/ScalarTagDouble$.html#asString(v:Double):String", "kind" : "def"}, {"label" : "strListLossless", "tail" : "(v: Double): List[String]", "member" : "org.saddle.scalar.ScalarTagDouble.strListLossless", "link" : "org\/saddle\/scalar\/ScalarTagDouble$.html#strListLossless(v:Double):List[String]", "kind" : "def"}, {"label" : "show", "tail" : "(v: Double): String", "member" : "org.saddle.scalar.ScalarTagDouble.show", "link" : "org\/saddle\/scalar\/ScalarTagDouble$.html#show(v:Double):String", "kind" : "def"}, {"label" : "negInf", "tail" : "(ev: NUM[Double]): Double", "member" : "org.saddle.scalar.ScalarTagDouble.negInf", "link" : "org\/saddle\/scalar\/ScalarTagDouble$.html#negInf(implicitev:org.saddle.NUM[Double]):Double", "kind" : "def"}, {"label" : "inf", "tail" : "(ev: NUM[Double]): Double", "member" : "org.saddle.scalar.ScalarTagDouble.inf", "link" : "org\/saddle\/scalar\/ScalarTagDouble$.html#inf(implicitev:org.saddle.NUM[Double]):Double", "kind" : "def"}, {"label" : "one", "tail" : "(ev: NUM[Double]): Double", "member" : "org.saddle.scalar.ScalarTagDouble.one", "link" : "org\/saddle\/scalar\/ScalarTagDouble$.html#one(implicitev:org.saddle.NUM[Double]):Double", "kind" : "def"}, {"label" : "zero", "tail" : "(ev: NUM[Double]): Double", "member" : "org.saddle.scalar.ScalarTagDouble.zero", "link" : "org\/saddle\/scalar\/ScalarTagDouble$.html#zero(implicitev:org.saddle.NUM[Double]):Double", "kind" : "def"}, {"label" : "toDouble", "tail" : "(t: Double)(ev: NUM[Double]): Double", "member" : "org.saddle.scalar.ScalarTagDouble.toDouble", "link" : "org\/saddle\/scalar\/ScalarTagDouble$.html#toDouble(t:Double)(implicitev:org.saddle.NUM[Double]):Double", "kind" : "def"}, {"label" : "compare", "tail" : "(x: Double, y: Double)(ev: ORD[Double]): Int", "member" : "org.saddle.scalar.ScalarTagDouble.compare", "link" : "org\/saddle\/scalar\/ScalarTagDouble$.html#compare(x:Double,y:Double)(implicitev:org.saddle.ORD[Double]):Int", "kind" : "def"}, {"label" : "parse", "tail" : "(s: Array[Char], from: Int, to: Int): Double", "member" : "org.saddle.scalar.ScalarTagDouble.parse", "link" : "org\/saddle\/scalar\/ScalarTagDouble$.html#parse(s:Array[Char],from:Int,to:Int):Double", "kind" : "def"}, {"label" : "notMissing", "tail" : "(v: Double): Boolean", "member" : "org.saddle.scalar.ScalarTagDouble.notMissing", "link" : "org\/saddle\/scalar\/ScalarTagDouble$.html#notMissing(v:Double):Boolean", "kind" : "def"}, {"label" : "isMissing", "tail" : "(v: Double): Boolean", "member" : "org.saddle.scalar.ScalarTagDouble.isMissing", "link" : "org\/saddle\/scalar\/ScalarTagDouble$.html#isMissing(v:Double):Boolean", "kind" : "def"}, {"label" : "missing", "tail" : "(): Double", "member" : "org.saddle.scalar.ScalarTagDouble.missing", "link" : "org\/saddle\/scalar\/ScalarTagDouble$.html#missing:Double", "kind" : "def"}, {"label" : "erasure", "tail" : "(): Class[_]", "member" : "org.saddle.scalar.ScalarTag.erasure", "link" : "org\/saddle\/scalar\/ScalarTagDouble$.html#erasure:Class[_]", "kind" : "def"}, {"label" : "equals", "tail" : "(o: Any): Boolean", "member" : "org.saddle.scalar.ScalarTag.equals", "link" : "org\/saddle\/scalar\/ScalarTagDouble$.html#equals(o:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "org.saddle.scalar.ScalarTag.hashCode", "link" : "org\/saddle\/scalar\/ScalarTagDouble$.html#hashCode():Int", "kind" : "def"}, {"label" : "strList", "tail" : "(v: Double): List[String]", "member" : "org.saddle.scalar.ScalarTag.strList", "link" : "org\/saddle\/scalar\/ScalarTagDouble$.html#strList(v:T):List[String]", "kind" : "def"}, {"label" : "iseq", "tail" : "(a: Double, b: Double)(ev: ORD[Double]): Boolean", "member" : "org.saddle.scalar.CouldBeOrdered.iseq", "link" : "org\/saddle\/scalar\/ScalarTagDouble$.html#iseq(a:T,b:T)(implicitev:org.saddle.ORD[T]):Boolean", "kind" : "def"}, {"label" : "gt", "tail" : "(a: Double, b: Double)(ev: ORD[Double]): Boolean", "member" : "org.saddle.scalar.CouldBeOrdered.gt", "link" : "org\/saddle\/scalar\/ScalarTagDouble$.html#gt(a:T,b:T)(implicitev:org.saddle.ORD[T]):Boolean", "kind" : "def"}, {"label" : "lt", "tail" : "(a: Double, b: Double)(ev: ORD[Double]): Boolean", "member" : "org.saddle.scalar.CouldBeOrdered.lt", "link" : "org\/saddle\/scalar\/ScalarTagDouble$.html#lt(a:T,b:T)(implicitev:org.saddle.ORD[T]):Boolean", "kind" : "def"}, {"label" : "altMatConstructor", "tail" : "(r: Int, c: Int, arr: Array[Vec[Double]])(st: ST[Double]): Mat[Double]", "member" : "org.saddle.scalar.SpecializedFactory.altMatConstructor", "link" : "org\/saddle\/scalar\/ScalarTagDouble$.html#altMatConstructor(r:Int,c:Int,arr:Array[org.saddle.Vec[T]])(implicitst:org.saddle.ST[T]):org.saddle.Mat[T]", "kind" : "def"}, {"label" : "makeMat", "tail" : "(arr: Array[Vec[Double]])(st: ST[Double]): Mat[Double]", "member" : "org.saddle.scalar.SpecializedFactory.makeMat", "link" : "org\/saddle\/scalar\/ScalarTagDouble$.html#makeMat(arr:Array[org.saddle.Vec[T]])(implicitst:org.saddle.ST[T]):org.saddle.Mat[T]", "kind" : "final def"}, {"label" : "canEqual", "tail" : "(x: Any): Boolean", "member" : "scala.reflect.ClassTag.canEqual", "link" : "org\/saddle\/scalar\/ScalarTagDouble$.html#canEqual(x:Any):Boolean", "kind" : "def"}, {"label" : "unapply", "tail" : "(x: Any): Option[Double]", "member" : "scala.reflect.ClassTag.unapply", "link" : "org\/saddle\/scalar\/ScalarTagDouble$.html#unapply(x:Any):Option[T]", "kind" : "def"}, {"label" : "newArray", "tail" : "(len: Int): Array[Double]", "member" : "scala.reflect.ClassTag.newArray", "link" : "org\/saddle\/scalar\/ScalarTagDouble$.html#newArray(len:Int):Array[T]", "kind" : "def"}, {"label" : "wrap", "tail" : "(): ClassTag[Array[Double]]", "member" : "scala.reflect.ClassTag.wrap", "link" : "org\/saddle\/scalar\/ScalarTagDouble$.html#wrap:scala.reflect.ClassTag[Array[T]]", "kind" : "def"}, {"label" : "argString", "tail" : "(): String", "member" : "scala.reflect.ClassManifestDeprecatedApis.argString", "link" : "org\/saddle\/scalar\/ScalarTagDouble$.html#argString:String", "kind" : "def"}, {"label" : "typeArguments", "tail" : "(): List[OptManifest[_]]", "member" : "scala.reflect.ClassManifestDeprecatedApis.typeArguments", "link" : "org\/saddle\/scalar\/ScalarTagDouble$.html#typeArguments:List[scala.reflect.OptManifest[_]]", "kind" : "def"}, {"label" : "newArrayBuilder", "tail" : "(): ArrayBuilder[Double]", "member" : "scala.reflect.ClassManifestDeprecatedApis.newArrayBuilder", "link" : "org\/saddle\/scalar\/ScalarTagDouble$.html#newArrayBuilder():scala.collection.mutable.ArrayBuilder[T]", "kind" : "def"}, {"label" : "newWrappedArray", "tail" : "(len: Int): ArraySeq[Double]", "member" : "scala.reflect.ClassManifestDeprecatedApis.newWrappedArray", "link" : "org\/saddle\/scalar\/ScalarTagDouble$.html#newWrappedArray(len:Int):scala.collection.mutable.ArraySeq[T]", "kind" : "def"}, {"label" : "newArray5", "tail" : "(len: Int): Array[Array[Array[Array[Array[Double]]]]]", "member" : "scala.reflect.ClassManifestDeprecatedApis.newArray5", "link" : "org\/saddle\/scalar\/ScalarTagDouble$.html#newArray5(len:Int):Array[Array[Array[Array[Array[T]]]]]", "kind" : "def"}, {"label" : "newArray4", "tail" : "(len: Int): Array[Array[Array[Array[Double]]]]", "member" : "scala.reflect.ClassManifestDeprecatedApis.newArray4", "link" : "org\/saddle\/scalar\/ScalarTagDouble$.html#newArray4(len:Int):Array[Array[Array[Array[T]]]]", "kind" : "def"}, {"label" : "newArray3", "tail" : "(len: Int): Array[Array[Array[Double]]]", "member" : "scala.reflect.ClassManifestDeprecatedApis.newArray3", "link" : "org\/saddle\/scalar\/ScalarTagDouble$.html#newArray3(len:Int):Array[Array[Array[T]]]", "kind" : "def"}, {"label" : "newArray2", "tail" : "(len: Int): Array[Array[Double]]", "member" : "scala.reflect.ClassManifestDeprecatedApis.newArray2", "link" : "org\/saddle\/scalar\/ScalarTagDouble$.html#newArray2(len:Int):Array[Array[T]]", "kind" : "def"}, {"label" : "arrayManifest", "tail" : "(): ClassManifest[Array[Double]]", "member" : "scala.reflect.ClassManifestDeprecatedApis.arrayManifest", "link" : "org\/saddle\/scalar\/ScalarTagDouble$.html#arrayManifest:scala.reflect.ClassManifest[Array[T]]", "kind" : "def"}, {"label" : "arrayClass", "tail" : "(tp: Class[_]): Class[Array[A]]", "member" : "scala.reflect.ClassManifestDeprecatedApis.arrayClass", "link" : "org\/saddle\/scalar\/ScalarTagDouble$.html#arrayClass[A](tp:Class[_]):Class[Array[A]]", "kind" : "def"}, {"label" : ">:>", "tail" : "(that: ClassManifest[_]): Boolean", "member" : "scala.reflect.ClassManifestDeprecatedApis.>:>", "link" : "org\/saddle\/scalar\/ScalarTagDouble$.html#>:>(that:scala.reflect.ClassManifest[_]):Boolean", "kind" : "def"}, {"label" : "<:<", "tail" : "(that: ClassManifest[_]): Boolean", "member" : "scala.reflect.ClassManifestDeprecatedApis.<:<", "link" : "org\/saddle\/scalar\/ScalarTagDouble$.html#<:<(that:scala.reflect.ClassManifest[_]):Boolean", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/saddle\/scalar\/ScalarTagDouble$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/saddle\/scalar\/ScalarTagDouble$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/saddle\/scalar\/ScalarTagDouble$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/saddle\/scalar\/ScalarTagDouble$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/saddle\/scalar\/ScalarTagDouble$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/saddle\/scalar\/ScalarTagDouble$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/saddle\/scalar\/ScalarTagDouble$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/scalar\/ScalarTagDouble$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/scalar\/ScalarTagDouble$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/scalar\/ScalarTagDouble$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/saddle\/scalar\/ScalarTagDouble$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/saddle\/scalar\/ScalarTagDouble$.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/saddle\/scalar\/ScalarTagDouble$.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "org\/saddle\/scalar\/ScalarTagDouble$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/saddle\/scalar\/ScalarTagDouble$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/saddle\/scalar\/ScalarTagDouble$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "org.saddle.scalar.ScalarTagFloat", "shortDescription" : "Float ScalarTag", "object" : "org\/saddle\/scalar\/ScalarTagFloat$.html", "members_object" : [{"label" : "clm", "tail" : "(): CLM[Float]", "member" : "org.saddle.scalar.ScalarTagFloat.clm", "link" : "org\/saddle\/scalar\/ScalarTagFloat$.html#clm:org.saddle.CLM[Float]", "kind" : "def"}, {"label" : "isMissing", "tail" : "(v: Float): Boolean", "member" : "org.saddle.scalar.ScalarTagFloat.isMissing", "link" : "org\/saddle\/scalar\/ScalarTagFloat$.html#isMissing(v:Float):Boolean", "kind" : "def"}, {"label" : "missing", "tail" : "(): Float", "member" : "org.saddle.scalar.ScalarTagFloat.missing", "link" : "org\/saddle\/scalar\/ScalarTagFloat$.html#missing:Float", "kind" : "def"}, {"label" : "makeSorter", "tail" : "(ord: ORD[Float]): Sorter[Float]", "member" : "org.saddle.scalar.ScalarTagFloat.makeSorter", "link" : "org\/saddle\/scalar\/ScalarTagFloat$.html#makeSorter(implicitord:org.saddle.ORD[Float]):org.saddle.array.Sorter[Float]", "kind" : "def"}, {"label" : "parse", "tail" : "(s: Array[Char], from: Int, to: Int): Float", "member" : "org.saddle.scalar.ScalarTagFloat.parse", "link" : "org\/saddle\/scalar\/ScalarTagFloat$.html#parse(s:Array[Char],from:Int,to:Int):Float", "kind" : "def"}, {"label" : "makeIndex", "tail" : "(vec: Vec[Float])(ord: ORD[Float]): Index[Float]", "member" : "org.saddle.scalar.ScalarTagBase.makeIndex", "link" : "org\/saddle\/scalar\/ScalarTagFloat$.html#makeIndex(vec:org.saddle.Vec[T])(implicitord:org.saddle.ORD[T]):org.saddle.Index[T]", "kind" : "def"}, {"label" : "makeMat", "tail" : "(r: Int, c: Int, arr: Array[Float]): Mat[Float]", "member" : "org.saddle.scalar.ScalarTagBase.makeMat", "link" : "org\/saddle\/scalar\/ScalarTagFloat$.html#makeMat(r:Int,c:Int,arr:Array[T]):org.saddle.Mat[T]", "kind" : "def"}, {"label" : "makeVec", "tail" : "(arr: Array[Float]): Vec[Float]", "member" : "org.saddle.scalar.ScalarTagBase.makeVec", "link" : "org\/saddle\/scalar\/ScalarTagFloat$.html#makeVec(arr:Array[T]):org.saddle.Vec[T]", "kind" : "def"}, {"label" : "makeLocAll", "tail" : "(sz: Int): LocatorAll[Float]", "member" : "org.saddle.scalar.ScalarTagBase.makeLocAll", "link" : "org\/saddle\/scalar\/ScalarTagFloat$.html#makeLocAll(sz:Int):org.saddle.locatorall.LocatorAll[T]", "kind" : "def"}, {"label" : "makeLoc", "tail" : "(sz: Int): Locator[Float]", "member" : "org.saddle.scalar.ScalarTagBase.makeLoc", "link" : "org\/saddle\/scalar\/ScalarTagFloat$.html#makeLoc(sz:Int):org.saddle.locator.Locator[T]", "kind" : "def"}, {"label" : "makeBuf", "tail" : "(sz: Int): Buffer[Float]", "member" : "org.saddle.scalar.ScalarTagBase.makeBuf", "link" : "org\/saddle\/scalar\/ScalarTagFloat$.html#makeBuf(sz:Int):org.saddle.Buffer[T]", "kind" : "def"}, {"label" : "runtimeClass", "tail" : "(): Class[_]", "member" : "org.saddle.scalar.ScalarTagBase.runtimeClass", "link" : "org\/saddle\/scalar\/ScalarTagFloat$.html#runtimeClass:Class[_]", "kind" : "def"}, {"label" : "show", "tail" : "(v: Float): String", "member" : "org.saddle.scalar.ScalarTagBase.show", "link" : "org\/saddle\/scalar\/ScalarTagFloat$.html#show(v:T):String", "kind" : "def"}, {"label" : "negInf", "tail" : "(ev: NUM[Float]): Nothing", "member" : "org.saddle.scalar.ScalarTagBase.negInf", "link" : "org\/saddle\/scalar\/ScalarTagFloat$.html#negInf(implicitev:org.saddle.NUM[T]):Nothing", "kind" : "def"}, {"label" : "inf", "tail" : "(ev: NUM[Float]): Nothing", "member" : "org.saddle.scalar.ScalarTagBase.inf", "link" : "org\/saddle\/scalar\/ScalarTagFloat$.html#inf(implicitev:org.saddle.NUM[T]):Nothing", "kind" : "def"}, {"label" : "one", "tail" : "(ev: NUM[Float]): Float", "member" : "org.saddle.scalar.ScalarTagBase.one", "link" : "org\/saddle\/scalar\/ScalarTagFloat$.html#one(implicitev:org.saddle.NUM[T]):T", "kind" : "def"}, {"label" : "zero", "tail" : "(ev: NUM[Float]): Float", "member" : "org.saddle.scalar.ScalarTagBase.zero", "link" : "org\/saddle\/scalar\/ScalarTagFloat$.html#zero(implicitev:org.saddle.NUM[T]):T", "kind" : "def"}, {"label" : "toDouble", "tail" : "(t: Float)(ev: NUM[Float]): Double", "member" : "org.saddle.scalar.ScalarTagBase.toDouble", "link" : "org\/saddle\/scalar\/ScalarTagFloat$.html#toDouble(t:T)(implicitev:org.saddle.NUM[T]):Double", "kind" : "def"}, {"label" : "compare", "tail" : "(x: Float, y: Float)(ev: ORD[Float]): Int", "member" : "org.saddle.scalar.ScalarTagBase.compare", "link" : "org\/saddle\/scalar\/ScalarTagFloat$.html#compare(x:T,y:T)(implicitev:org.saddle.ORD[T]):Int", "kind" : "def"}, {"label" : "erasure", "tail" : "(): Class[_]", "member" : "org.saddle.scalar.ScalarTag.erasure", "link" : "org\/saddle\/scalar\/ScalarTagFloat$.html#erasure:Class[_]", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "org.saddle.scalar.ScalarTag.toString", "link" : "org\/saddle\/scalar\/ScalarTagFloat$.html#toString():String", "kind" : "def"}, {"label" : "equals", "tail" : "(o: Any): Boolean", "member" : "org.saddle.scalar.ScalarTag.equals", "link" : "org\/saddle\/scalar\/ScalarTagFloat$.html#equals(o:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "org.saddle.scalar.ScalarTag.hashCode", "link" : "org\/saddle\/scalar\/ScalarTagFloat$.html#hashCode():Int", "kind" : "def"}, {"label" : "asString", "tail" : "(v: Float): String", "member" : "org.saddle.scalar.ScalarTag.asString", "link" : "org\/saddle\/scalar\/ScalarTagFloat$.html#asString(v:T):String", "kind" : "def"}, {"label" : "strListLossless", "tail" : "(v: Float): List[String]", "member" : "org.saddle.scalar.ScalarTag.strListLossless", "link" : "org\/saddle\/scalar\/ScalarTagFloat$.html#strListLossless(v:T):List[String]", "kind" : "def"}, {"label" : "strList", "tail" : "(v: Float): List[String]", "member" : "org.saddle.scalar.ScalarTag.strList", "link" : "org\/saddle\/scalar\/ScalarTagFloat$.html#strList(v:T):List[String]", "kind" : "def"}, {"label" : "notMissing", "tail" : "(t: Float): Boolean", "member" : "org.saddle.scalar.ScalarTag.notMissing", "link" : "org\/saddle\/scalar\/ScalarTagFloat$.html#notMissing(t:T):Boolean", "kind" : "def"}, {"label" : "iseq", "tail" : "(a: Float, b: Float)(ev: ORD[Float]): Boolean", "member" : "org.saddle.scalar.CouldBeOrdered.iseq", "link" : "org\/saddle\/scalar\/ScalarTagFloat$.html#iseq(a:T,b:T)(implicitev:org.saddle.ORD[T]):Boolean", "kind" : "def"}, {"label" : "gt", "tail" : "(a: Float, b: Float)(ev: ORD[Float]): Boolean", "member" : "org.saddle.scalar.CouldBeOrdered.gt", "link" : "org\/saddle\/scalar\/ScalarTagFloat$.html#gt(a:T,b:T)(implicitev:org.saddle.ORD[T]):Boolean", "kind" : "def"}, {"label" : "lt", "tail" : "(a: Float, b: Float)(ev: ORD[Float]): Boolean", "member" : "org.saddle.scalar.CouldBeOrdered.lt", "link" : "org\/saddle\/scalar\/ScalarTagFloat$.html#lt(a:T,b:T)(implicitev:org.saddle.ORD[T]):Boolean", "kind" : "def"}, {"label" : "altMatConstructor", "tail" : "(r: Int, c: Int, arr: Array[Vec[Float]])(st: ST[Float]): Mat[Float]", "member" : "org.saddle.scalar.SpecializedFactory.altMatConstructor", "link" : "org\/saddle\/scalar\/ScalarTagFloat$.html#altMatConstructor(r:Int,c:Int,arr:Array[org.saddle.Vec[T]])(implicitst:org.saddle.ST[T]):org.saddle.Mat[T]", "kind" : "def"}, {"label" : "makeMat", "tail" : "(arr: Array[Vec[Float]])(st: ST[Float]): Mat[Float]", "member" : "org.saddle.scalar.SpecializedFactory.makeMat", "link" : "org\/saddle\/scalar\/ScalarTagFloat$.html#makeMat(arr:Array[org.saddle.Vec[T]])(implicitst:org.saddle.ST[T]):org.saddle.Mat[T]", "kind" : "final def"}, {"label" : "canEqual", "tail" : "(x: Any): Boolean", "member" : "scala.reflect.ClassTag.canEqual", "link" : "org\/saddle\/scalar\/ScalarTagFloat$.html#canEqual(x:Any):Boolean", "kind" : "def"}, {"label" : "unapply", "tail" : "(x: Any): Option[Float]", "member" : "scala.reflect.ClassTag.unapply", "link" : "org\/saddle\/scalar\/ScalarTagFloat$.html#unapply(x:Any):Option[T]", "kind" : "def"}, {"label" : "newArray", "tail" : "(len: Int): Array[Float]", "member" : "scala.reflect.ClassTag.newArray", "link" : "org\/saddle\/scalar\/ScalarTagFloat$.html#newArray(len:Int):Array[T]", "kind" : "def"}, {"label" : "wrap", "tail" : "(): ClassTag[Array[Float]]", "member" : "scala.reflect.ClassTag.wrap", "link" : "org\/saddle\/scalar\/ScalarTagFloat$.html#wrap:scala.reflect.ClassTag[Array[T]]", "kind" : "def"}, {"label" : "argString", "tail" : "(): String", "member" : "scala.reflect.ClassManifestDeprecatedApis.argString", "link" : "org\/saddle\/scalar\/ScalarTagFloat$.html#argString:String", "kind" : "def"}, {"label" : "typeArguments", "tail" : "(): List[OptManifest[_]]", "member" : "scala.reflect.ClassManifestDeprecatedApis.typeArguments", "link" : "org\/saddle\/scalar\/ScalarTagFloat$.html#typeArguments:List[scala.reflect.OptManifest[_]]", "kind" : "def"}, {"label" : "newArrayBuilder", "tail" : "(): ArrayBuilder[Float]", "member" : "scala.reflect.ClassManifestDeprecatedApis.newArrayBuilder", "link" : "org\/saddle\/scalar\/ScalarTagFloat$.html#newArrayBuilder():scala.collection.mutable.ArrayBuilder[T]", "kind" : "def"}, {"label" : "newWrappedArray", "tail" : "(len: Int): ArraySeq[Float]", "member" : "scala.reflect.ClassManifestDeprecatedApis.newWrappedArray", "link" : "org\/saddle\/scalar\/ScalarTagFloat$.html#newWrappedArray(len:Int):scala.collection.mutable.ArraySeq[T]", "kind" : "def"}, {"label" : "newArray5", "tail" : "(len: Int): Array[Array[Array[Array[Array[Float]]]]]", "member" : "scala.reflect.ClassManifestDeprecatedApis.newArray5", "link" : "org\/saddle\/scalar\/ScalarTagFloat$.html#newArray5(len:Int):Array[Array[Array[Array[Array[T]]]]]", "kind" : "def"}, {"label" : "newArray4", "tail" : "(len: Int): Array[Array[Array[Array[Float]]]]", "member" : "scala.reflect.ClassManifestDeprecatedApis.newArray4", "link" : "org\/saddle\/scalar\/ScalarTagFloat$.html#newArray4(len:Int):Array[Array[Array[Array[T]]]]", "kind" : "def"}, {"label" : "newArray3", "tail" : "(len: Int): Array[Array[Array[Float]]]", "member" : "scala.reflect.ClassManifestDeprecatedApis.newArray3", "link" : "org\/saddle\/scalar\/ScalarTagFloat$.html#newArray3(len:Int):Array[Array[Array[T]]]", "kind" : "def"}, {"label" : "newArray2", "tail" : "(len: Int): Array[Array[Float]]", "member" : "scala.reflect.ClassManifestDeprecatedApis.newArray2", "link" : "org\/saddle\/scalar\/ScalarTagFloat$.html#newArray2(len:Int):Array[Array[T]]", "kind" : "def"}, {"label" : "arrayManifest", "tail" : "(): ClassManifest[Array[Float]]", "member" : "scala.reflect.ClassManifestDeprecatedApis.arrayManifest", "link" : "org\/saddle\/scalar\/ScalarTagFloat$.html#arrayManifest:scala.reflect.ClassManifest[Array[T]]", "kind" : "def"}, {"label" : "arrayClass", "tail" : "(tp: Class[_]): Class[Array[A]]", "member" : "scala.reflect.ClassManifestDeprecatedApis.arrayClass", "link" : "org\/saddle\/scalar\/ScalarTagFloat$.html#arrayClass[A](tp:Class[_]):Class[Array[A]]", "kind" : "def"}, {"label" : ">:>", "tail" : "(that: ClassManifest[_]): Boolean", "member" : "scala.reflect.ClassManifestDeprecatedApis.>:>", "link" : "org\/saddle\/scalar\/ScalarTagFloat$.html#>:>(that:scala.reflect.ClassManifest[_]):Boolean", "kind" : "def"}, {"label" : "<:<", "tail" : "(that: ClassManifest[_]): Boolean", "member" : "scala.reflect.ClassManifestDeprecatedApis.<:<", "link" : "org\/saddle\/scalar\/ScalarTagFloat$.html#<:<(that:scala.reflect.ClassManifest[_]):Boolean", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/saddle\/scalar\/ScalarTagFloat$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/saddle\/scalar\/ScalarTagFloat$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/saddle\/scalar\/ScalarTagFloat$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/saddle\/scalar\/ScalarTagFloat$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/saddle\/scalar\/ScalarTagFloat$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/saddle\/scalar\/ScalarTagFloat$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/saddle\/scalar\/ScalarTagFloat$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/scalar\/ScalarTagFloat$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/scalar\/ScalarTagFloat$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/scalar\/ScalarTagFloat$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/saddle\/scalar\/ScalarTagFloat$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/saddle\/scalar\/ScalarTagFloat$.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/saddle\/scalar\/ScalarTagFloat$.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "org\/saddle\/scalar\/ScalarTagFloat$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/saddle\/scalar\/ScalarTagFloat$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/saddle\/scalar\/ScalarTagFloat$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "org.saddle.scalar.ScalarTagInt", "shortDescription" : "Int ScalarTag", "object" : "org\/saddle\/scalar\/ScalarTagInt$.html", "members_object" : [{"label" : "toString", "tail" : "(): String", "member" : "org.saddle.scalar.ScalarTagInt.toString", "link" : "org\/saddle\/scalar\/ScalarTagInt$.html#toString():String", "kind" : "def"}, {"label" : "makeSorter", "tail" : "(ord: ORD[Int]): Sorter[Int]", "member" : "org.saddle.scalar.ScalarTagInt.makeSorter", "link" : "org\/saddle\/scalar\/ScalarTagInt$.html#makeSorter(implicitord:org.saddle.ORD[Int]):org.saddle.array.Sorter[Int]", "kind" : "def"}, {"label" : "makeIndex", "tail" : "(vec: Vec[Int])(ord: ORD[Int]): Index[Int]", "member" : "org.saddle.scalar.ScalarTagInt.makeIndex", "link" : "org\/saddle\/scalar\/ScalarTagInt$.html#makeIndex(vec:org.saddle.Vec[Int])(implicitord:org.saddle.ORD[Int]):org.saddle.Index[Int]", "kind" : "def"}, {"label" : "makeMat", "tail" : "(r: Int, c: Int, arr: Array[Int]): Mat[Int]", "member" : "org.saddle.scalar.ScalarTagInt.makeMat", "link" : "org\/saddle\/scalar\/ScalarTagInt$.html#makeMat(r:Int,c:Int,arr:Array[Int]):org.saddle.Mat[Int]", "kind" : "def"}, {"label" : "makeVec", "tail" : "(arr: Array[Int]): Vec[Int]", "member" : "org.saddle.scalar.ScalarTagInt.makeVec", "link" : "org\/saddle\/scalar\/ScalarTagInt$.html#makeVec(arr:Array[Int]):org.saddle.Vec[Int]", "kind" : "def"}, {"label" : "makeLocAll", "tail" : "(sz: Int): LocatorAllInt", "member" : "org.saddle.scalar.ScalarTagInt.makeLocAll", "link" : "org\/saddle\/scalar\/ScalarTagInt$.html#makeLocAll(sz:Int):org.saddle.locatorall.LocatorAllInt", "kind" : "def"}, {"label" : "makeLoc", "tail" : "(sz: Int): LocatorInt", "member" : "org.saddle.scalar.ScalarTagInt.makeLoc", "link" : "org\/saddle\/scalar\/ScalarTagInt$.html#makeLoc(sz:Int):org.saddle.locator.LocatorInt", "kind" : "def"}, {"label" : "makeBuf", "tail" : "(sz: Int): Buffer[Int]", "member" : "org.saddle.scalar.ScalarTagInt.makeBuf", "link" : "org\/saddle\/scalar\/ScalarTagInt$.html#makeBuf(sz:Int):org.saddle.Buffer[Int]", "kind" : "def"}, {"label" : "runtimeClass", "tail" : "(): Class[Int]", "member" : "org.saddle.scalar.ScalarTagInt.runtimeClass", "link" : "org\/saddle\/scalar\/ScalarTagInt$.html#runtimeClass:Class[Int]", "kind" : "def"}, {"label" : "show", "tail" : "(v: Int): String", "member" : "org.saddle.scalar.ScalarTagInt.show", "link" : "org\/saddle\/scalar\/ScalarTagInt$.html#show(v:Int):String", "kind" : "def"}, {"label" : "negInf", "tail" : "(ev: NUM[Int]): Int", "member" : "org.saddle.scalar.ScalarTagInt.negInf", "link" : "org\/saddle\/scalar\/ScalarTagInt$.html#negInf(implicitev:org.saddle.NUM[Int]):Int", "kind" : "def"}, {"label" : "inf", "tail" : "(ev: NUM[Int]): Int", "member" : "org.saddle.scalar.ScalarTagInt.inf", "link" : "org\/saddle\/scalar\/ScalarTagInt$.html#inf(implicitev:org.saddle.NUM[Int]):Int", "kind" : "def"}, {"label" : "one", "tail" : "(ev: NUM[Int]): Int", "member" : "org.saddle.scalar.ScalarTagInt.one", "link" : "org\/saddle\/scalar\/ScalarTagInt$.html#one(implicitev:org.saddle.NUM[Int]):Int", "kind" : "def"}, {"label" : "zero", "tail" : "(ev: NUM[Int]): Int", "member" : "org.saddle.scalar.ScalarTagInt.zero", "link" : "org\/saddle\/scalar\/ScalarTagInt$.html#zero(implicitev:org.saddle.NUM[Int]):Int", "kind" : "def"}, {"label" : "toDouble", "tail" : "(t: Int)(ev: NUM[Int]): Double", "member" : "org.saddle.scalar.ScalarTagInt.toDouble", "link" : "org\/saddle\/scalar\/ScalarTagInt$.html#toDouble(t:Int)(implicitev:org.saddle.NUM[Int]):Double", "kind" : "def"}, {"label" : "compare", "tail" : "(x: Int, y: Int)(ev: ORD[Int]): Int", "member" : "org.saddle.scalar.ScalarTagInt.compare", "link" : "org\/saddle\/scalar\/ScalarTagInt$.html#compare(x:Int,y:Int)(implicitev:org.saddle.ORD[Int]):Int", "kind" : "def"}, {"label" : "parse", "tail" : "(s: Array[Char], from: Int, to: Int): Int", "member" : "org.saddle.scalar.ScalarTagInt.parse", "link" : "org\/saddle\/scalar\/ScalarTagInt$.html#parse(s:Array[Char],from:Int,to:Int):Int", "kind" : "final def"}, {"label" : "notMissing", "tail" : "(v: Int): Boolean", "member" : "org.saddle.scalar.ScalarTagInt.notMissing", "link" : "org\/saddle\/scalar\/ScalarTagInt$.html#notMissing(v:Int):Boolean", "kind" : "def"}, {"label" : "isMissing", "tail" : "(v: Int): Boolean", "member" : "org.saddle.scalar.ScalarTagInt.isMissing", "link" : "org\/saddle\/scalar\/ScalarTagInt$.html#isMissing(v:Int):Boolean", "kind" : "def"}, {"label" : "missing", "tail" : "(): Int", "member" : "org.saddle.scalar.ScalarTagInt.missing", "link" : "org\/saddle\/scalar\/ScalarTagInt$.html#missing:Int", "kind" : "def"}, {"label" : "erasure", "tail" : "(): Class[_]", "member" : "org.saddle.scalar.ScalarTag.erasure", "link" : "org\/saddle\/scalar\/ScalarTagInt$.html#erasure:Class[_]", "kind" : "def"}, {"label" : "equals", "tail" : "(o: Any): Boolean", "member" : "org.saddle.scalar.ScalarTag.equals", "link" : "org\/saddle\/scalar\/ScalarTagInt$.html#equals(o:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "org.saddle.scalar.ScalarTag.hashCode", "link" : "org\/saddle\/scalar\/ScalarTagInt$.html#hashCode():Int", "kind" : "def"}, {"label" : "asString", "tail" : "(v: Int): String", "member" : "org.saddle.scalar.ScalarTag.asString", "link" : "org\/saddle\/scalar\/ScalarTagInt$.html#asString(v:T):String", "kind" : "def"}, {"label" : "strListLossless", "tail" : "(v: Int): List[String]", "member" : "org.saddle.scalar.ScalarTag.strListLossless", "link" : "org\/saddle\/scalar\/ScalarTagInt$.html#strListLossless(v:T):List[String]", "kind" : "def"}, {"label" : "strList", "tail" : "(v: Int): List[String]", "member" : "org.saddle.scalar.ScalarTag.strList", "link" : "org\/saddle\/scalar\/ScalarTagInt$.html#strList(v:T):List[String]", "kind" : "def"}, {"label" : "iseq", "tail" : "(a: Int, b: Int)(ev: ORD[Int]): Boolean", "member" : "org.saddle.scalar.CouldBeOrdered.iseq", "link" : "org\/saddle\/scalar\/ScalarTagInt$.html#iseq(a:T,b:T)(implicitev:org.saddle.ORD[T]):Boolean", "kind" : "def"}, {"label" : "gt", "tail" : "(a: Int, b: Int)(ev: ORD[Int]): Boolean", "member" : "org.saddle.scalar.CouldBeOrdered.gt", "link" : "org\/saddle\/scalar\/ScalarTagInt$.html#gt(a:T,b:T)(implicitev:org.saddle.ORD[T]):Boolean", "kind" : "def"}, {"label" : "lt", "tail" : "(a: Int, b: Int)(ev: ORD[Int]): Boolean", "member" : "org.saddle.scalar.CouldBeOrdered.lt", "link" : "org\/saddle\/scalar\/ScalarTagInt$.html#lt(a:T,b:T)(implicitev:org.saddle.ORD[T]):Boolean", "kind" : "def"}, {"label" : "altMatConstructor", "tail" : "(r: Int, c: Int, arr: Array[Vec[Int]])(st: ST[Int]): Mat[Int]", "member" : "org.saddle.scalar.SpecializedFactory.altMatConstructor", "link" : "org\/saddle\/scalar\/ScalarTagInt$.html#altMatConstructor(r:Int,c:Int,arr:Array[org.saddle.Vec[T]])(implicitst:org.saddle.ST[T]):org.saddle.Mat[T]", "kind" : "def"}, {"label" : "makeMat", "tail" : "(arr: Array[Vec[Int]])(st: ST[Int]): Mat[Int]", "member" : "org.saddle.scalar.SpecializedFactory.makeMat", "link" : "org\/saddle\/scalar\/ScalarTagInt$.html#makeMat(arr:Array[org.saddle.Vec[T]])(implicitst:org.saddle.ST[T]):org.saddle.Mat[T]", "kind" : "final def"}, {"label" : "canEqual", "tail" : "(x: Any): Boolean", "member" : "scala.reflect.ClassTag.canEqual", "link" : "org\/saddle\/scalar\/ScalarTagInt$.html#canEqual(x:Any):Boolean", "kind" : "def"}, {"label" : "unapply", "tail" : "(x: Any): Option[Int]", "member" : "scala.reflect.ClassTag.unapply", "link" : "org\/saddle\/scalar\/ScalarTagInt$.html#unapply(x:Any):Option[T]", "kind" : "def"}, {"label" : "newArray", "tail" : "(len: Int): Array[Int]", "member" : "scala.reflect.ClassTag.newArray", "link" : "org\/saddle\/scalar\/ScalarTagInt$.html#newArray(len:Int):Array[T]", "kind" : "def"}, {"label" : "wrap", "tail" : "(): ClassTag[Array[Int]]", "member" : "scala.reflect.ClassTag.wrap", "link" : "org\/saddle\/scalar\/ScalarTagInt$.html#wrap:scala.reflect.ClassTag[Array[T]]", "kind" : "def"}, {"label" : "argString", "tail" : "(): String", "member" : "scala.reflect.ClassManifestDeprecatedApis.argString", "link" : "org\/saddle\/scalar\/ScalarTagInt$.html#argString:String", "kind" : "def"}, {"label" : "typeArguments", "tail" : "(): List[OptManifest[_]]", "member" : "scala.reflect.ClassManifestDeprecatedApis.typeArguments", "link" : "org\/saddle\/scalar\/ScalarTagInt$.html#typeArguments:List[scala.reflect.OptManifest[_]]", "kind" : "def"}, {"label" : "newArrayBuilder", "tail" : "(): ArrayBuilder[Int]", "member" : "scala.reflect.ClassManifestDeprecatedApis.newArrayBuilder", "link" : "org\/saddle\/scalar\/ScalarTagInt$.html#newArrayBuilder():scala.collection.mutable.ArrayBuilder[T]", "kind" : "def"}, {"label" : "newWrappedArray", "tail" : "(len: Int): ArraySeq[Int]", "member" : "scala.reflect.ClassManifestDeprecatedApis.newWrappedArray", "link" : "org\/saddle\/scalar\/ScalarTagInt$.html#newWrappedArray(len:Int):scala.collection.mutable.ArraySeq[T]", "kind" : "def"}, {"label" : "newArray5", "tail" : "(len: Int): Array[Array[Array[Array[Array[Int]]]]]", "member" : "scala.reflect.ClassManifestDeprecatedApis.newArray5", "link" : "org\/saddle\/scalar\/ScalarTagInt$.html#newArray5(len:Int):Array[Array[Array[Array[Array[T]]]]]", "kind" : "def"}, {"label" : "newArray4", "tail" : "(len: Int): Array[Array[Array[Array[Int]]]]", "member" : "scala.reflect.ClassManifestDeprecatedApis.newArray4", "link" : "org\/saddle\/scalar\/ScalarTagInt$.html#newArray4(len:Int):Array[Array[Array[Array[T]]]]", "kind" : "def"}, {"label" : "newArray3", "tail" : "(len: Int): Array[Array[Array[Int]]]", "member" : "scala.reflect.ClassManifestDeprecatedApis.newArray3", "link" : "org\/saddle\/scalar\/ScalarTagInt$.html#newArray3(len:Int):Array[Array[Array[T]]]", "kind" : "def"}, {"label" : "newArray2", "tail" : "(len: Int): Array[Array[Int]]", "member" : "scala.reflect.ClassManifestDeprecatedApis.newArray2", "link" : "org\/saddle\/scalar\/ScalarTagInt$.html#newArray2(len:Int):Array[Array[T]]", "kind" : "def"}, {"label" : "arrayManifest", "tail" : "(): ClassManifest[Array[Int]]", "member" : "scala.reflect.ClassManifestDeprecatedApis.arrayManifest", "link" : "org\/saddle\/scalar\/ScalarTagInt$.html#arrayManifest:scala.reflect.ClassManifest[Array[T]]", "kind" : "def"}, {"label" : "arrayClass", "tail" : "(tp: Class[_]): Class[Array[A]]", "member" : "scala.reflect.ClassManifestDeprecatedApis.arrayClass", "link" : "org\/saddle\/scalar\/ScalarTagInt$.html#arrayClass[A](tp:Class[_]):Class[Array[A]]", "kind" : "def"}, {"label" : ">:>", "tail" : "(that: ClassManifest[_]): Boolean", "member" : "scala.reflect.ClassManifestDeprecatedApis.>:>", "link" : "org\/saddle\/scalar\/ScalarTagInt$.html#>:>(that:scala.reflect.ClassManifest[_]):Boolean", "kind" : "def"}, {"label" : "<:<", "tail" : "(that: ClassManifest[_]): Boolean", "member" : "scala.reflect.ClassManifestDeprecatedApis.<:<", "link" : "org\/saddle\/scalar\/ScalarTagInt$.html#<:<(that:scala.reflect.ClassManifest[_]):Boolean", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/saddle\/scalar\/ScalarTagInt$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/saddle\/scalar\/ScalarTagInt$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/saddle\/scalar\/ScalarTagInt$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/saddle\/scalar\/ScalarTagInt$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/saddle\/scalar\/ScalarTagInt$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/saddle\/scalar\/ScalarTagInt$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/saddle\/scalar\/ScalarTagInt$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/scalar\/ScalarTagInt$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/scalar\/ScalarTagInt$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/scalar\/ScalarTagInt$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/saddle\/scalar\/ScalarTagInt$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/saddle\/scalar\/ScalarTagInt$.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/saddle\/scalar\/ScalarTagInt$.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "org\/saddle\/scalar\/ScalarTagInt$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/saddle\/scalar\/ScalarTagInt$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/saddle\/scalar\/ScalarTagInt$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "org.saddle.scalar.ScalarTagLong", "shortDescription" : "Long ScalarTag", "object" : "org\/saddle\/scalar\/ScalarTagLong$.html", "members_object" : [{"label" : "toString", "tail" : "(): String", "member" : "org.saddle.scalar.ScalarTagLong.toString", "link" : "org\/saddle\/scalar\/ScalarTagLong$.html#toString():String", "kind" : "def"}, {"label" : "makeSorter", "tail" : "(ord: ORD[Long]): Sorter[Long]", "member" : "org.saddle.scalar.ScalarTagLong.makeSorter", "link" : "org\/saddle\/scalar\/ScalarTagLong$.html#makeSorter(implicitord:org.saddle.ORD[Long]):org.saddle.array.Sorter[Long]", "kind" : "def"}, {"label" : "makeIndex", "tail" : "(vec: Vec[Long])(ord: ORD[Long]): Index[Long]", "member" : "org.saddle.scalar.ScalarTagLong.makeIndex", "link" : "org\/saddle\/scalar\/ScalarTagLong$.html#makeIndex(vec:org.saddle.Vec[Long])(implicitord:org.saddle.ORD[Long]):org.saddle.Index[Long]", "kind" : "def"}, {"label" : "makeMat", "tail" : "(r: Int, c: Int, arr: Array[Long]): Mat[Long]", "member" : "org.saddle.scalar.ScalarTagLong.makeMat", "link" : "org\/saddle\/scalar\/ScalarTagLong$.html#makeMat(r:Int,c:Int,arr:Array[Long]):org.saddle.Mat[Long]", "kind" : "def"}, {"label" : "makeVec", "tail" : "(arr: Array[Long]): Vec[Long]", "member" : "org.saddle.scalar.ScalarTagLong.makeVec", "link" : "org\/saddle\/scalar\/ScalarTagLong$.html#makeVec(arr:Array[Long]):org.saddle.Vec[Long]", "kind" : "def"}, {"label" : "makeLocAll", "tail" : "(sz: Int): LocatorAllLong", "member" : "org.saddle.scalar.ScalarTagLong.makeLocAll", "link" : "org\/saddle\/scalar\/ScalarTagLong$.html#makeLocAll(sz:Int):org.saddle.locatorall.LocatorAllLong", "kind" : "def"}, {"label" : "makeLoc", "tail" : "(sz: Int): LocatorLong", "member" : "org.saddle.scalar.ScalarTagLong.makeLoc", "link" : "org\/saddle\/scalar\/ScalarTagLong$.html#makeLoc(sz:Int):org.saddle.locator.LocatorLong", "kind" : "def"}, {"label" : "makeBuf", "tail" : "(sz: Int): Buffer[Long]", "member" : "org.saddle.scalar.ScalarTagLong.makeBuf", "link" : "org\/saddle\/scalar\/ScalarTagLong$.html#makeBuf(sz:Int):org.saddle.Buffer[Long]", "kind" : "def"}, {"label" : "runtimeClass", "tail" : "(): Class[Long]", "member" : "org.saddle.scalar.ScalarTagLong.runtimeClass", "link" : "org\/saddle\/scalar\/ScalarTagLong$.html#runtimeClass:Class[Long]", "kind" : "def"}, {"label" : "show", "tail" : "(v: Long): String", "member" : "org.saddle.scalar.ScalarTagLong.show", "link" : "org\/saddle\/scalar\/ScalarTagLong$.html#show(v:Long):String", "kind" : "def"}, {"label" : "negInf", "tail" : "(ev: NUM[Long]): Long", "member" : "org.saddle.scalar.ScalarTagLong.negInf", "link" : "org\/saddle\/scalar\/ScalarTagLong$.html#negInf(implicitev:org.saddle.NUM[Long]):Long", "kind" : "def"}, {"label" : "inf", "tail" : "(ev: NUM[Long]): Long", "member" : "org.saddle.scalar.ScalarTagLong.inf", "link" : "org\/saddle\/scalar\/ScalarTagLong$.html#inf(implicitev:org.saddle.NUM[Long]):Long", "kind" : "def"}, {"label" : "one", "tail" : "(ev: NUM[Long]): Long", "member" : "org.saddle.scalar.ScalarTagLong.one", "link" : "org\/saddle\/scalar\/ScalarTagLong$.html#one(implicitev:org.saddle.NUM[Long]):Long", "kind" : "def"}, {"label" : "zero", "tail" : "(ev: NUM[Long]): Long", "member" : "org.saddle.scalar.ScalarTagLong.zero", "link" : "org\/saddle\/scalar\/ScalarTagLong$.html#zero(implicitev:org.saddle.NUM[Long]):Long", "kind" : "def"}, {"label" : "toDouble", "tail" : "(t: Long)(ev: NUM[Long]): Double", "member" : "org.saddle.scalar.ScalarTagLong.toDouble", "link" : "org\/saddle\/scalar\/ScalarTagLong$.html#toDouble(t:Long)(implicitev:org.saddle.NUM[Long]):Double", "kind" : "def"}, {"label" : "compare", "tail" : "(x: Long, y: Long)(ev: ORD[Long]): Int", "member" : "org.saddle.scalar.ScalarTagLong.compare", "link" : "org\/saddle\/scalar\/ScalarTagLong$.html#compare(x:Long,y:Long)(implicitev:org.saddle.ORD[Long]):Int", "kind" : "def"}, {"label" : "parse", "tail" : "(s: Array[Char], from: Int, to: Int): Long", "member" : "org.saddle.scalar.ScalarTagLong.parse", "link" : "org\/saddle\/scalar\/ScalarTagLong$.html#parse(s:Array[Char],from:Int,to:Int):Long", "kind" : "final def"}, {"label" : "notMissing", "tail" : "(v: Long): Boolean", "member" : "org.saddle.scalar.ScalarTagLong.notMissing", "link" : "org\/saddle\/scalar\/ScalarTagLong$.html#notMissing(v:Long):Boolean", "kind" : "def"}, {"label" : "isMissing", "tail" : "(v: Long): Boolean", "member" : "org.saddle.scalar.ScalarTagLong.isMissing", "link" : "org\/saddle\/scalar\/ScalarTagLong$.html#isMissing(v:Long):Boolean", "kind" : "def"}, {"label" : "missing", "tail" : "(): Long", "member" : "org.saddle.scalar.ScalarTagLong.missing", "link" : "org\/saddle\/scalar\/ScalarTagLong$.html#missing:Long", "kind" : "def"}, {"label" : "erasure", "tail" : "(): Class[_]", "member" : "org.saddle.scalar.ScalarTag.erasure", "link" : "org\/saddle\/scalar\/ScalarTagLong$.html#erasure:Class[_]", "kind" : "def"}, {"label" : "equals", "tail" : "(o: Any): Boolean", "member" : "org.saddle.scalar.ScalarTag.equals", "link" : "org\/saddle\/scalar\/ScalarTagLong$.html#equals(o:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "org.saddle.scalar.ScalarTag.hashCode", "link" : "org\/saddle\/scalar\/ScalarTagLong$.html#hashCode():Int", "kind" : "def"}, {"label" : "asString", "tail" : "(v: Long): String", "member" : "org.saddle.scalar.ScalarTag.asString", "link" : "org\/saddle\/scalar\/ScalarTagLong$.html#asString(v:T):String", "kind" : "def"}, {"label" : "strListLossless", "tail" : "(v: Long): List[String]", "member" : "org.saddle.scalar.ScalarTag.strListLossless", "link" : "org\/saddle\/scalar\/ScalarTagLong$.html#strListLossless(v:T):List[String]", "kind" : "def"}, {"label" : "strList", "tail" : "(v: Long): List[String]", "member" : "org.saddle.scalar.ScalarTag.strList", "link" : "org\/saddle\/scalar\/ScalarTagLong$.html#strList(v:T):List[String]", "kind" : "def"}, {"label" : "iseq", "tail" : "(a: Long, b: Long)(ev: ORD[Long]): Boolean", "member" : "org.saddle.scalar.CouldBeOrdered.iseq", "link" : "org\/saddle\/scalar\/ScalarTagLong$.html#iseq(a:T,b:T)(implicitev:org.saddle.ORD[T]):Boolean", "kind" : "def"}, {"label" : "gt", "tail" : "(a: Long, b: Long)(ev: ORD[Long]): Boolean", "member" : "org.saddle.scalar.CouldBeOrdered.gt", "link" : "org\/saddle\/scalar\/ScalarTagLong$.html#gt(a:T,b:T)(implicitev:org.saddle.ORD[T]):Boolean", "kind" : "def"}, {"label" : "lt", "tail" : "(a: Long, b: Long)(ev: ORD[Long]): Boolean", "member" : "org.saddle.scalar.CouldBeOrdered.lt", "link" : "org\/saddle\/scalar\/ScalarTagLong$.html#lt(a:T,b:T)(implicitev:org.saddle.ORD[T]):Boolean", "kind" : "def"}, {"label" : "altMatConstructor", "tail" : "(r: Int, c: Int, arr: Array[Vec[Long]])(st: ST[Long]): Mat[Long]", "member" : "org.saddle.scalar.SpecializedFactory.altMatConstructor", "link" : "org\/saddle\/scalar\/ScalarTagLong$.html#altMatConstructor(r:Int,c:Int,arr:Array[org.saddle.Vec[T]])(implicitst:org.saddle.ST[T]):org.saddle.Mat[T]", "kind" : "def"}, {"label" : "makeMat", "tail" : "(arr: Array[Vec[Long]])(st: ST[Long]): Mat[Long]", "member" : "org.saddle.scalar.SpecializedFactory.makeMat", "link" : "org\/saddle\/scalar\/ScalarTagLong$.html#makeMat(arr:Array[org.saddle.Vec[T]])(implicitst:org.saddle.ST[T]):org.saddle.Mat[T]", "kind" : "final def"}, {"label" : "canEqual", "tail" : "(x: Any): Boolean", "member" : "scala.reflect.ClassTag.canEqual", "link" : "org\/saddle\/scalar\/ScalarTagLong$.html#canEqual(x:Any):Boolean", "kind" : "def"}, {"label" : "unapply", "tail" : "(x: Any): Option[Long]", "member" : "scala.reflect.ClassTag.unapply", "link" : "org\/saddle\/scalar\/ScalarTagLong$.html#unapply(x:Any):Option[T]", "kind" : "def"}, {"label" : "newArray", "tail" : "(len: Int): Array[Long]", "member" : "scala.reflect.ClassTag.newArray", "link" : "org\/saddle\/scalar\/ScalarTagLong$.html#newArray(len:Int):Array[T]", "kind" : "def"}, {"label" : "wrap", "tail" : "(): ClassTag[Array[Long]]", "member" : "scala.reflect.ClassTag.wrap", "link" : "org\/saddle\/scalar\/ScalarTagLong$.html#wrap:scala.reflect.ClassTag[Array[T]]", "kind" : "def"}, {"label" : "argString", "tail" : "(): String", "member" : "scala.reflect.ClassManifestDeprecatedApis.argString", "link" : "org\/saddle\/scalar\/ScalarTagLong$.html#argString:String", "kind" : "def"}, {"label" : "typeArguments", "tail" : "(): List[OptManifest[_]]", "member" : "scala.reflect.ClassManifestDeprecatedApis.typeArguments", "link" : "org\/saddle\/scalar\/ScalarTagLong$.html#typeArguments:List[scala.reflect.OptManifest[_]]", "kind" : "def"}, {"label" : "newArrayBuilder", "tail" : "(): ArrayBuilder[Long]", "member" : "scala.reflect.ClassManifestDeprecatedApis.newArrayBuilder", "link" : "org\/saddle\/scalar\/ScalarTagLong$.html#newArrayBuilder():scala.collection.mutable.ArrayBuilder[T]", "kind" : "def"}, {"label" : "newWrappedArray", "tail" : "(len: Int): ArraySeq[Long]", "member" : "scala.reflect.ClassManifestDeprecatedApis.newWrappedArray", "link" : "org\/saddle\/scalar\/ScalarTagLong$.html#newWrappedArray(len:Int):scala.collection.mutable.ArraySeq[T]", "kind" : "def"}, {"label" : "newArray5", "tail" : "(len: Int): Array[Array[Array[Array[Array[Long]]]]]", "member" : "scala.reflect.ClassManifestDeprecatedApis.newArray5", "link" : "org\/saddle\/scalar\/ScalarTagLong$.html#newArray5(len:Int):Array[Array[Array[Array[Array[T]]]]]", "kind" : "def"}, {"label" : "newArray4", "tail" : "(len: Int): Array[Array[Array[Array[Long]]]]", "member" : "scala.reflect.ClassManifestDeprecatedApis.newArray4", "link" : "org\/saddle\/scalar\/ScalarTagLong$.html#newArray4(len:Int):Array[Array[Array[Array[T]]]]", "kind" : "def"}, {"label" : "newArray3", "tail" : "(len: Int): Array[Array[Array[Long]]]", "member" : "scala.reflect.ClassManifestDeprecatedApis.newArray3", "link" : "org\/saddle\/scalar\/ScalarTagLong$.html#newArray3(len:Int):Array[Array[Array[T]]]", "kind" : "def"}, {"label" : "newArray2", "tail" : "(len: Int): Array[Array[Long]]", "member" : "scala.reflect.ClassManifestDeprecatedApis.newArray2", "link" : "org\/saddle\/scalar\/ScalarTagLong$.html#newArray2(len:Int):Array[Array[T]]", "kind" : "def"}, {"label" : "arrayManifest", "tail" : "(): ClassManifest[Array[Long]]", "member" : "scala.reflect.ClassManifestDeprecatedApis.arrayManifest", "link" : "org\/saddle\/scalar\/ScalarTagLong$.html#arrayManifest:scala.reflect.ClassManifest[Array[T]]", "kind" : "def"}, {"label" : "arrayClass", "tail" : "(tp: Class[_]): Class[Array[A]]", "member" : "scala.reflect.ClassManifestDeprecatedApis.arrayClass", "link" : "org\/saddle\/scalar\/ScalarTagLong$.html#arrayClass[A](tp:Class[_]):Class[Array[A]]", "kind" : "def"}, {"label" : ">:>", "tail" : "(that: ClassManifest[_]): Boolean", "member" : "scala.reflect.ClassManifestDeprecatedApis.>:>", "link" : "org\/saddle\/scalar\/ScalarTagLong$.html#>:>(that:scala.reflect.ClassManifest[_]):Boolean", "kind" : "def"}, {"label" : "<:<", "tail" : "(that: ClassManifest[_]): Boolean", "member" : "scala.reflect.ClassManifestDeprecatedApis.<:<", "link" : "org\/saddle\/scalar\/ScalarTagLong$.html#<:<(that:scala.reflect.ClassManifest[_]):Boolean", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/saddle\/scalar\/ScalarTagLong$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/saddle\/scalar\/ScalarTagLong$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/saddle\/scalar\/ScalarTagLong$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/saddle\/scalar\/ScalarTagLong$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/saddle\/scalar\/ScalarTagLong$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/saddle\/scalar\/ScalarTagLong$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/saddle\/scalar\/ScalarTagLong$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/scalar\/ScalarTagLong$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/scalar\/ScalarTagLong$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/scalar\/ScalarTagLong$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/saddle\/scalar\/ScalarTagLong$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/saddle\/scalar\/ScalarTagLong$.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/saddle\/scalar\/ScalarTagLong$.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "org\/saddle\/scalar\/ScalarTagLong$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/saddle\/scalar\/ScalarTagLong$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/saddle\/scalar\/ScalarTagLong$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "org.saddle.scalar.ScalarTagProduct", "shortDescription" : "", "members_class" : [{"label" : "clm", "tail" : "(): CLM[T]", "member" : "org.saddle.scalar.ScalarTagProduct.clm", "link" : "org\/saddle\/scalar\/ScalarTagProduct.html#clm:org.saddle.CLM[T]", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "org.saddle.scalar.ScalarTagProduct.toString", "link" : "org\/saddle\/scalar\/ScalarTagProduct.html#toString():String", "kind" : "def"}, {"label" : "strList", "tail" : "(v: T): List[String]", "member" : "org.saddle.scalar.ScalarTagProduct.strList", "link" : "org\/saddle\/scalar\/ScalarTagProduct.html#strList(v:T):List[String]", "kind" : "def"}, {"label" : "isMissing", "tail" : "(v: T): Boolean", "member" : "org.saddle.scalar.ScalarTagProduct.isMissing", "link" : "org\/saddle\/scalar\/ScalarTagProduct.html#isMissing(v:T):Boolean", "kind" : "def"}, {"label" : "missing", "tail" : "(): T", "member" : "org.saddle.scalar.ScalarTagProduct.missing", "link" : "org\/saddle\/scalar\/ScalarTagProduct.html#missing:T", "kind" : "def"}, {"member" : "org.saddle.scalar.ScalarTagProduct#<init>", "error" : "unsupported entity"}, {"label" : "makeSorter", "tail" : "(ord: ORD[T]): Sorter[T]", "member" : "org.saddle.scalar.ScalarTagBase.makeSorter", "link" : "org\/saddle\/scalar\/ScalarTagProduct.html#makeSorter(implicitord:org.saddle.ORD[T]):org.saddle.array.Sorter[T]", "kind" : "def"}, {"label" : "makeIndex", "tail" : "(vec: Vec[T])(ord: ORD[T]): Index[T]", "member" : "org.saddle.scalar.ScalarTagBase.makeIndex", "link" : "org\/saddle\/scalar\/ScalarTagProduct.html#makeIndex(vec:org.saddle.Vec[T])(implicitord:org.saddle.ORD[T]):org.saddle.Index[T]", "kind" : "def"}, {"label" : "makeMat", "tail" : "(r: Int, c: Int, arr: Array[T]): Mat[T]", "member" : "org.saddle.scalar.ScalarTagBase.makeMat", "link" : "org\/saddle\/scalar\/ScalarTagProduct.html#makeMat(r:Int,c:Int,arr:Array[T]):org.saddle.Mat[T]", "kind" : "def"}, {"label" : "makeVec", "tail" : "(arr: Array[T]): Vec[T]", "member" : "org.saddle.scalar.ScalarTagBase.makeVec", "link" : "org\/saddle\/scalar\/ScalarTagProduct.html#makeVec(arr:Array[T]):org.saddle.Vec[T]", "kind" : "def"}, {"label" : "makeLocAll", "tail" : "(sz: Int): LocatorAll[T]", "member" : "org.saddle.scalar.ScalarTagBase.makeLocAll", "link" : "org\/saddle\/scalar\/ScalarTagProduct.html#makeLocAll(sz:Int):org.saddle.locatorall.LocatorAll[T]", "kind" : "def"}, {"label" : "makeLoc", "tail" : "(sz: Int): Locator[T]", "member" : "org.saddle.scalar.ScalarTagBase.makeLoc", "link" : "org\/saddle\/scalar\/ScalarTagProduct.html#makeLoc(sz:Int):org.saddle.locator.Locator[T]", "kind" : "def"}, {"label" : "makeBuf", "tail" : "(sz: Int): Buffer[T]", "member" : "org.saddle.scalar.ScalarTagBase.makeBuf", "link" : "org\/saddle\/scalar\/ScalarTagProduct.html#makeBuf(sz:Int):org.saddle.Buffer[T]", "kind" : "def"}, {"label" : "runtimeClass", "tail" : "(): Class[_]", "member" : "org.saddle.scalar.ScalarTagBase.runtimeClass", "link" : "org\/saddle\/scalar\/ScalarTagProduct.html#runtimeClass:Class[_]", "kind" : "def"}, {"label" : "show", "tail" : "(v: T): String", "member" : "org.saddle.scalar.ScalarTagBase.show", "link" : "org\/saddle\/scalar\/ScalarTagProduct.html#show(v:T):String", "kind" : "def"}, {"label" : "negInf", "tail" : "(ev: NUM[T]): Nothing", "member" : "org.saddle.scalar.ScalarTagBase.negInf", "link" : "org\/saddle\/scalar\/ScalarTagProduct.html#negInf(implicitev:org.saddle.NUM[T]):Nothing", "kind" : "def"}, {"label" : "inf", "tail" : "(ev: NUM[T]): Nothing", "member" : "org.saddle.scalar.ScalarTagBase.inf", "link" : "org\/saddle\/scalar\/ScalarTagProduct.html#inf(implicitev:org.saddle.NUM[T]):Nothing", "kind" : "def"}, {"label" : "one", "tail" : "(ev: NUM[T]): T", "member" : "org.saddle.scalar.ScalarTagBase.one", "link" : "org\/saddle\/scalar\/ScalarTagProduct.html#one(implicitev:org.saddle.NUM[T]):T", "kind" : "def"}, {"label" : "zero", "tail" : "(ev: NUM[T]): T", "member" : "org.saddle.scalar.ScalarTagBase.zero", "link" : "org\/saddle\/scalar\/ScalarTagProduct.html#zero(implicitev:org.saddle.NUM[T]):T", "kind" : "def"}, {"label" : "toDouble", "tail" : "(t: T)(ev: NUM[T]): Double", "member" : "org.saddle.scalar.ScalarTagBase.toDouble", "link" : "org\/saddle\/scalar\/ScalarTagProduct.html#toDouble(t:T)(implicitev:org.saddle.NUM[T]):Double", "kind" : "def"}, {"label" : "compare", "tail" : "(x: T, y: T)(ev: ORD[T]): Int", "member" : "org.saddle.scalar.ScalarTagBase.compare", "link" : "org\/saddle\/scalar\/ScalarTagProduct.html#compare(x:T,y:T)(implicitev:org.saddle.ORD[T]):Int", "kind" : "def"}, {"label" : "parse", "tail" : "(s: Array[Char], from: Int, to: Int): T", "member" : "org.saddle.scalar.ScalarTagBase.parse", "link" : "org\/saddle\/scalar\/ScalarTagProduct.html#parse(s:Array[Char],from:Int,to:Int):T", "kind" : "def"}, {"label" : "erasure", "tail" : "(): Class[_]", "member" : "org.saddle.scalar.ScalarTag.erasure", "link" : "org\/saddle\/scalar\/ScalarTagProduct.html#erasure:Class[_]", "kind" : "def"}, {"label" : "equals", "tail" : "(o: Any): Boolean", "member" : "org.saddle.scalar.ScalarTag.equals", "link" : "org\/saddle\/scalar\/ScalarTagProduct.html#equals(o:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "org.saddle.scalar.ScalarTag.hashCode", "link" : "org\/saddle\/scalar\/ScalarTagProduct.html#hashCode():Int", "kind" : "def"}, {"label" : "asString", "tail" : "(v: T): String", "member" : "org.saddle.scalar.ScalarTag.asString", "link" : "org\/saddle\/scalar\/ScalarTagProduct.html#asString(v:T):String", "kind" : "def"}, {"label" : "strListLossless", "tail" : "(v: T): List[String]", "member" : "org.saddle.scalar.ScalarTag.strListLossless", "link" : "org\/saddle\/scalar\/ScalarTagProduct.html#strListLossless(v:T):List[String]", "kind" : "def"}, {"label" : "notMissing", "tail" : "(t: T): Boolean", "member" : "org.saddle.scalar.ScalarTag.notMissing", "link" : "org\/saddle\/scalar\/ScalarTagProduct.html#notMissing(t:T):Boolean", "kind" : "def"}, {"label" : "iseq", "tail" : "(a: T, b: T)(ev: ORD[T]): Boolean", "member" : "org.saddle.scalar.CouldBeOrdered.iseq", "link" : "org\/saddle\/scalar\/ScalarTagProduct.html#iseq(a:T,b:T)(implicitev:org.saddle.ORD[T]):Boolean", "kind" : "def"}, {"label" : "gt", "tail" : "(a: T, b: T)(ev: ORD[T]): Boolean", "member" : "org.saddle.scalar.CouldBeOrdered.gt", "link" : "org\/saddle\/scalar\/ScalarTagProduct.html#gt(a:T,b:T)(implicitev:org.saddle.ORD[T]):Boolean", "kind" : "def"}, {"label" : "lt", "tail" : "(a: T, b: T)(ev: ORD[T]): Boolean", "member" : "org.saddle.scalar.CouldBeOrdered.lt", "link" : "org\/saddle\/scalar\/ScalarTagProduct.html#lt(a:T,b:T)(implicitev:org.saddle.ORD[T]):Boolean", "kind" : "def"}, {"label" : "altMatConstructor", "tail" : "(r: Int, c: Int, arr: Array[Vec[T]])(st: ST[T]): Mat[T]", "member" : "org.saddle.scalar.SpecializedFactory.altMatConstructor", "link" : "org\/saddle\/scalar\/ScalarTagProduct.html#altMatConstructor(r:Int,c:Int,arr:Array[org.saddle.Vec[T]])(implicitst:org.saddle.ST[T]):org.saddle.Mat[T]", "kind" : "def"}, {"label" : "makeMat", "tail" : "(arr: Array[Vec[T]])(st: ST[T]): Mat[T]", "member" : "org.saddle.scalar.SpecializedFactory.makeMat", "link" : "org\/saddle\/scalar\/ScalarTagProduct.html#makeMat(arr:Array[org.saddle.Vec[T]])(implicitst:org.saddle.ST[T]):org.saddle.Mat[T]", "kind" : "final def"}, {"label" : "canEqual", "tail" : "(x: Any): Boolean", "member" : "scala.reflect.ClassTag.canEqual", "link" : "org\/saddle\/scalar\/ScalarTagProduct.html#canEqual(x:Any):Boolean", "kind" : "def"}, {"label" : "unapply", "tail" : "(x: Any): Option[T]", "member" : "scala.reflect.ClassTag.unapply", "link" : "org\/saddle\/scalar\/ScalarTagProduct.html#unapply(x:Any):Option[T]", "kind" : "def"}, {"label" : "newArray", "tail" : "(len: Int): Array[T]", "member" : "scala.reflect.ClassTag.newArray", "link" : "org\/saddle\/scalar\/ScalarTagProduct.html#newArray(len:Int):Array[T]", "kind" : "def"}, {"label" : "wrap", "tail" : "(): ClassTag[Array[T]]", "member" : "scala.reflect.ClassTag.wrap", "link" : "org\/saddle\/scalar\/ScalarTagProduct.html#wrap:scala.reflect.ClassTag[Array[T]]", "kind" : "def"}, {"label" : "argString", "tail" : "(): String", "member" : "scala.reflect.ClassManifestDeprecatedApis.argString", "link" : "org\/saddle\/scalar\/ScalarTagProduct.html#argString:String", "kind" : "def"}, {"label" : "typeArguments", "tail" : "(): List[OptManifest[_]]", "member" : "scala.reflect.ClassManifestDeprecatedApis.typeArguments", "link" : "org\/saddle\/scalar\/ScalarTagProduct.html#typeArguments:List[scala.reflect.OptManifest[_]]", "kind" : "def"}, {"label" : "newArrayBuilder", "tail" : "(): ArrayBuilder[T]", "member" : "scala.reflect.ClassManifestDeprecatedApis.newArrayBuilder", "link" : "org\/saddle\/scalar\/ScalarTagProduct.html#newArrayBuilder():scala.collection.mutable.ArrayBuilder[T]", "kind" : "def"}, {"label" : "newWrappedArray", "tail" : "(len: Int): ArraySeq[T]", "member" : "scala.reflect.ClassManifestDeprecatedApis.newWrappedArray", "link" : "org\/saddle\/scalar\/ScalarTagProduct.html#newWrappedArray(len:Int):scala.collection.mutable.ArraySeq[T]", "kind" : "def"}, {"label" : "newArray5", "tail" : "(len: Int): Array[Array[Array[Array[Array[T]]]]]", "member" : "scala.reflect.ClassManifestDeprecatedApis.newArray5", "link" : "org\/saddle\/scalar\/ScalarTagProduct.html#newArray5(len:Int):Array[Array[Array[Array[Array[T]]]]]", "kind" : "def"}, {"label" : "newArray4", "tail" : "(len: Int): Array[Array[Array[Array[T]]]]", "member" : "scala.reflect.ClassManifestDeprecatedApis.newArray4", "link" : "org\/saddle\/scalar\/ScalarTagProduct.html#newArray4(len:Int):Array[Array[Array[Array[T]]]]", "kind" : "def"}, {"label" : "newArray3", "tail" : "(len: Int): Array[Array[Array[T]]]", "member" : "scala.reflect.ClassManifestDeprecatedApis.newArray3", "link" : "org\/saddle\/scalar\/ScalarTagProduct.html#newArray3(len:Int):Array[Array[Array[T]]]", "kind" : "def"}, {"label" : "newArray2", "tail" : "(len: Int): Array[Array[T]]", "member" : "scala.reflect.ClassManifestDeprecatedApis.newArray2", "link" : "org\/saddle\/scalar\/ScalarTagProduct.html#newArray2(len:Int):Array[Array[T]]", "kind" : "def"}, {"label" : "arrayManifest", "tail" : "(): ClassManifest[Array[T]]", "member" : "scala.reflect.ClassManifestDeprecatedApis.arrayManifest", "link" : "org\/saddle\/scalar\/ScalarTagProduct.html#arrayManifest:scala.reflect.ClassManifest[Array[T]]", "kind" : "def"}, {"label" : "arrayClass", "tail" : "(tp: Class[_]): Class[Array[A]]", "member" : "scala.reflect.ClassManifestDeprecatedApis.arrayClass", "link" : "org\/saddle\/scalar\/ScalarTagProduct.html#arrayClass[A](tp:Class[_]):Class[Array[A]]", "kind" : "def"}, {"label" : ">:>", "tail" : "(that: ClassManifest[_]): Boolean", "member" : "scala.reflect.ClassManifestDeprecatedApis.>:>", "link" : "org\/saddle\/scalar\/ScalarTagProduct.html#>:>(that:scala.reflect.ClassManifest[_]):Boolean", "kind" : "def"}, {"label" : "<:<", "tail" : "(that: ClassManifest[_]): Boolean", "member" : "scala.reflect.ClassManifestDeprecatedApis.<:<", "link" : "org\/saddle\/scalar\/ScalarTagProduct.html#<:<(that:scala.reflect.ClassManifest[_]):Boolean", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/saddle\/scalar\/ScalarTagProduct.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/saddle\/scalar\/ScalarTagProduct.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/saddle\/scalar\/ScalarTagProduct.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/saddle\/scalar\/ScalarTagProduct.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/saddle\/scalar\/ScalarTagProduct.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/saddle\/scalar\/ScalarTagProduct.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/saddle\/scalar\/ScalarTagProduct.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/scalar\/ScalarTagProduct.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/scalar\/ScalarTagProduct.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/scalar\/ScalarTagProduct.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/saddle\/scalar\/ScalarTagProduct.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/saddle\/scalar\/ScalarTagProduct.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/saddle\/scalar\/ScalarTagProduct.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "org\/saddle\/scalar\/ScalarTagProduct.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/saddle\/scalar\/ScalarTagProduct.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/saddle\/scalar\/ScalarTagProduct.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/saddle\/scalar\/ScalarTagProduct.html", "kind" : "class"}, {"name" : "org.saddle.scalar.ScalarTagShort", "shortDescription" : "Short ScalarTag", "object" : "org\/saddle\/scalar\/ScalarTagShort$.html", "members_object" : [{"label" : "clm", "tail" : "(): CLM[Short]", "member" : "org.saddle.scalar.ScalarTagShort.clm", "link" : "org\/saddle\/scalar\/ScalarTagShort$.html#clm:org.saddle.CLM[Short]", "kind" : "def"}, {"label" : "isMissing", "tail" : "(v: Short): Boolean", "member" : "org.saddle.scalar.ScalarTagShort.isMissing", "link" : "org\/saddle\/scalar\/ScalarTagShort$.html#isMissing(v:Short):Boolean", "kind" : "def"}, {"label" : "missing", "tail" : "(): Short", "member" : "org.saddle.scalar.ScalarTagShort.missing", "link" : "org\/saddle\/scalar\/ScalarTagShort$.html#missing:Short", "kind" : "def"}, {"label" : "makeSorter", "tail" : "(ord: ORD[Short]): Sorter[Short]", "member" : "org.saddle.scalar.ScalarTagShort.makeSorter", "link" : "org\/saddle\/scalar\/ScalarTagShort$.html#makeSorter(implicitord:org.saddle.ORD[Short]):org.saddle.array.Sorter[Short]", "kind" : "def"}, {"label" : "parse", "tail" : "(s: Array[Char], from: Int, to: Int): Short", "member" : "org.saddle.scalar.ScalarTagShort.parse", "link" : "org\/saddle\/scalar\/ScalarTagShort$.html#parse(s:Array[Char],from:Int,to:Int):Short", "kind" : "def"}, {"label" : "makeIndex", "tail" : "(vec: Vec[Short])(ord: ORD[Short]): Index[Short]", "member" : "org.saddle.scalar.ScalarTagBase.makeIndex", "link" : "org\/saddle\/scalar\/ScalarTagShort$.html#makeIndex(vec:org.saddle.Vec[T])(implicitord:org.saddle.ORD[T]):org.saddle.Index[T]", "kind" : "def"}, {"label" : "makeMat", "tail" : "(r: Int, c: Int, arr: Array[Short]): Mat[Short]", "member" : "org.saddle.scalar.ScalarTagBase.makeMat", "link" : "org\/saddle\/scalar\/ScalarTagShort$.html#makeMat(r:Int,c:Int,arr:Array[T]):org.saddle.Mat[T]", "kind" : "def"}, {"label" : "makeVec", "tail" : "(arr: Array[Short]): Vec[Short]", "member" : "org.saddle.scalar.ScalarTagBase.makeVec", "link" : "org\/saddle\/scalar\/ScalarTagShort$.html#makeVec(arr:Array[T]):org.saddle.Vec[T]", "kind" : "def"}, {"label" : "makeLocAll", "tail" : "(sz: Int): LocatorAll[Short]", "member" : "org.saddle.scalar.ScalarTagBase.makeLocAll", "link" : "org\/saddle\/scalar\/ScalarTagShort$.html#makeLocAll(sz:Int):org.saddle.locatorall.LocatorAll[T]", "kind" : "def"}, {"label" : "makeLoc", "tail" : "(sz: Int): Locator[Short]", "member" : "org.saddle.scalar.ScalarTagBase.makeLoc", "link" : "org\/saddle\/scalar\/ScalarTagShort$.html#makeLoc(sz:Int):org.saddle.locator.Locator[T]", "kind" : "def"}, {"label" : "makeBuf", "tail" : "(sz: Int): Buffer[Short]", "member" : "org.saddle.scalar.ScalarTagBase.makeBuf", "link" : "org\/saddle\/scalar\/ScalarTagShort$.html#makeBuf(sz:Int):org.saddle.Buffer[T]", "kind" : "def"}, {"label" : "runtimeClass", "tail" : "(): Class[_]", "member" : "org.saddle.scalar.ScalarTagBase.runtimeClass", "link" : "org\/saddle\/scalar\/ScalarTagShort$.html#runtimeClass:Class[_]", "kind" : "def"}, {"label" : "show", "tail" : "(v: Short): String", "member" : "org.saddle.scalar.ScalarTagBase.show", "link" : "org\/saddle\/scalar\/ScalarTagShort$.html#show(v:T):String", "kind" : "def"}, {"label" : "negInf", "tail" : "(ev: NUM[Short]): Nothing", "member" : "org.saddle.scalar.ScalarTagBase.negInf", "link" : "org\/saddle\/scalar\/ScalarTagShort$.html#negInf(implicitev:org.saddle.NUM[T]):Nothing", "kind" : "def"}, {"label" : "inf", "tail" : "(ev: NUM[Short]): Nothing", "member" : "org.saddle.scalar.ScalarTagBase.inf", "link" : "org\/saddle\/scalar\/ScalarTagShort$.html#inf(implicitev:org.saddle.NUM[T]):Nothing", "kind" : "def"}, {"label" : "one", "tail" : "(ev: NUM[Short]): Short", "member" : "org.saddle.scalar.ScalarTagBase.one", "link" : "org\/saddle\/scalar\/ScalarTagShort$.html#one(implicitev:org.saddle.NUM[T]):T", "kind" : "def"}, {"label" : "zero", "tail" : "(ev: NUM[Short]): Short", "member" : "org.saddle.scalar.ScalarTagBase.zero", "link" : "org\/saddle\/scalar\/ScalarTagShort$.html#zero(implicitev:org.saddle.NUM[T]):T", "kind" : "def"}, {"label" : "toDouble", "tail" : "(t: Short)(ev: NUM[Short]): Double", "member" : "org.saddle.scalar.ScalarTagBase.toDouble", "link" : "org\/saddle\/scalar\/ScalarTagShort$.html#toDouble(t:T)(implicitev:org.saddle.NUM[T]):Double", "kind" : "def"}, {"label" : "compare", "tail" : "(x: Short, y: Short)(ev: ORD[Short]): Int", "member" : "org.saddle.scalar.ScalarTagBase.compare", "link" : "org\/saddle\/scalar\/ScalarTagShort$.html#compare(x:T,y:T)(implicitev:org.saddle.ORD[T]):Int", "kind" : "def"}, {"label" : "erasure", "tail" : "(): Class[_]", "member" : "org.saddle.scalar.ScalarTag.erasure", "link" : "org\/saddle\/scalar\/ScalarTagShort$.html#erasure:Class[_]", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "org.saddle.scalar.ScalarTag.toString", "link" : "org\/saddle\/scalar\/ScalarTagShort$.html#toString():String", "kind" : "def"}, {"label" : "equals", "tail" : "(o: Any): Boolean", "member" : "org.saddle.scalar.ScalarTag.equals", "link" : "org\/saddle\/scalar\/ScalarTagShort$.html#equals(o:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "org.saddle.scalar.ScalarTag.hashCode", "link" : "org\/saddle\/scalar\/ScalarTagShort$.html#hashCode():Int", "kind" : "def"}, {"label" : "asString", "tail" : "(v: Short): String", "member" : "org.saddle.scalar.ScalarTag.asString", "link" : "org\/saddle\/scalar\/ScalarTagShort$.html#asString(v:T):String", "kind" : "def"}, {"label" : "strListLossless", "tail" : "(v: Short): List[String]", "member" : "org.saddle.scalar.ScalarTag.strListLossless", "link" : "org\/saddle\/scalar\/ScalarTagShort$.html#strListLossless(v:T):List[String]", "kind" : "def"}, {"label" : "strList", "tail" : "(v: Short): List[String]", "member" : "org.saddle.scalar.ScalarTag.strList", "link" : "org\/saddle\/scalar\/ScalarTagShort$.html#strList(v:T):List[String]", "kind" : "def"}, {"label" : "notMissing", "tail" : "(t: Short): Boolean", "member" : "org.saddle.scalar.ScalarTag.notMissing", "link" : "org\/saddle\/scalar\/ScalarTagShort$.html#notMissing(t:T):Boolean", "kind" : "def"}, {"label" : "iseq", "tail" : "(a: Short, b: Short)(ev: ORD[Short]): Boolean", "member" : "org.saddle.scalar.CouldBeOrdered.iseq", "link" : "org\/saddle\/scalar\/ScalarTagShort$.html#iseq(a:T,b:T)(implicitev:org.saddle.ORD[T]):Boolean", "kind" : "def"}, {"label" : "gt", "tail" : "(a: Short, b: Short)(ev: ORD[Short]): Boolean", "member" : "org.saddle.scalar.CouldBeOrdered.gt", "link" : "org\/saddle\/scalar\/ScalarTagShort$.html#gt(a:T,b:T)(implicitev:org.saddle.ORD[T]):Boolean", "kind" : "def"}, {"label" : "lt", "tail" : "(a: Short, b: Short)(ev: ORD[Short]): Boolean", "member" : "org.saddle.scalar.CouldBeOrdered.lt", "link" : "org\/saddle\/scalar\/ScalarTagShort$.html#lt(a:T,b:T)(implicitev:org.saddle.ORD[T]):Boolean", "kind" : "def"}, {"label" : "altMatConstructor", "tail" : "(r: Int, c: Int, arr: Array[Vec[Short]])(st: ST[Short]): Mat[Short]", "member" : "org.saddle.scalar.SpecializedFactory.altMatConstructor", "link" : "org\/saddle\/scalar\/ScalarTagShort$.html#altMatConstructor(r:Int,c:Int,arr:Array[org.saddle.Vec[T]])(implicitst:org.saddle.ST[T]):org.saddle.Mat[T]", "kind" : "def"}, {"label" : "makeMat", "tail" : "(arr: Array[Vec[Short]])(st: ST[Short]): Mat[Short]", "member" : "org.saddle.scalar.SpecializedFactory.makeMat", "link" : "org\/saddle\/scalar\/ScalarTagShort$.html#makeMat(arr:Array[org.saddle.Vec[T]])(implicitst:org.saddle.ST[T]):org.saddle.Mat[T]", "kind" : "final def"}, {"label" : "canEqual", "tail" : "(x: Any): Boolean", "member" : "scala.reflect.ClassTag.canEqual", "link" : "org\/saddle\/scalar\/ScalarTagShort$.html#canEqual(x:Any):Boolean", "kind" : "def"}, {"label" : "unapply", "tail" : "(x: Any): Option[Short]", "member" : "scala.reflect.ClassTag.unapply", "link" : "org\/saddle\/scalar\/ScalarTagShort$.html#unapply(x:Any):Option[T]", "kind" : "def"}, {"label" : "newArray", "tail" : "(len: Int): Array[Short]", "member" : "scala.reflect.ClassTag.newArray", "link" : "org\/saddle\/scalar\/ScalarTagShort$.html#newArray(len:Int):Array[T]", "kind" : "def"}, {"label" : "wrap", "tail" : "(): ClassTag[Array[Short]]", "member" : "scala.reflect.ClassTag.wrap", "link" : "org\/saddle\/scalar\/ScalarTagShort$.html#wrap:scala.reflect.ClassTag[Array[T]]", "kind" : "def"}, {"label" : "argString", "tail" : "(): String", "member" : "scala.reflect.ClassManifestDeprecatedApis.argString", "link" : "org\/saddle\/scalar\/ScalarTagShort$.html#argString:String", "kind" : "def"}, {"label" : "typeArguments", "tail" : "(): List[OptManifest[_]]", "member" : "scala.reflect.ClassManifestDeprecatedApis.typeArguments", "link" : "org\/saddle\/scalar\/ScalarTagShort$.html#typeArguments:List[scala.reflect.OptManifest[_]]", "kind" : "def"}, {"label" : "newArrayBuilder", "tail" : "(): ArrayBuilder[Short]", "member" : "scala.reflect.ClassManifestDeprecatedApis.newArrayBuilder", "link" : "org\/saddle\/scalar\/ScalarTagShort$.html#newArrayBuilder():scala.collection.mutable.ArrayBuilder[T]", "kind" : "def"}, {"label" : "newWrappedArray", "tail" : "(len: Int): ArraySeq[Short]", "member" : "scala.reflect.ClassManifestDeprecatedApis.newWrappedArray", "link" : "org\/saddle\/scalar\/ScalarTagShort$.html#newWrappedArray(len:Int):scala.collection.mutable.ArraySeq[T]", "kind" : "def"}, {"label" : "newArray5", "tail" : "(len: Int): Array[Array[Array[Array[Array[Short]]]]]", "member" : "scala.reflect.ClassManifestDeprecatedApis.newArray5", "link" : "org\/saddle\/scalar\/ScalarTagShort$.html#newArray5(len:Int):Array[Array[Array[Array[Array[T]]]]]", "kind" : "def"}, {"label" : "newArray4", "tail" : "(len: Int): Array[Array[Array[Array[Short]]]]", "member" : "scala.reflect.ClassManifestDeprecatedApis.newArray4", "link" : "org\/saddle\/scalar\/ScalarTagShort$.html#newArray4(len:Int):Array[Array[Array[Array[T]]]]", "kind" : "def"}, {"label" : "newArray3", "tail" : "(len: Int): Array[Array[Array[Short]]]", "member" : "scala.reflect.ClassManifestDeprecatedApis.newArray3", "link" : "org\/saddle\/scalar\/ScalarTagShort$.html#newArray3(len:Int):Array[Array[Array[T]]]", "kind" : "def"}, {"label" : "newArray2", "tail" : "(len: Int): Array[Array[Short]]", "member" : "scala.reflect.ClassManifestDeprecatedApis.newArray2", "link" : "org\/saddle\/scalar\/ScalarTagShort$.html#newArray2(len:Int):Array[Array[T]]", "kind" : "def"}, {"label" : "arrayManifest", "tail" : "(): ClassManifest[Array[Short]]", "member" : "scala.reflect.ClassManifestDeprecatedApis.arrayManifest", "link" : "org\/saddle\/scalar\/ScalarTagShort$.html#arrayManifest:scala.reflect.ClassManifest[Array[T]]", "kind" : "def"}, {"label" : "arrayClass", "tail" : "(tp: Class[_]): Class[Array[A]]", "member" : "scala.reflect.ClassManifestDeprecatedApis.arrayClass", "link" : "org\/saddle\/scalar\/ScalarTagShort$.html#arrayClass[A](tp:Class[_]):Class[Array[A]]", "kind" : "def"}, {"label" : ">:>", "tail" : "(that: ClassManifest[_]): Boolean", "member" : "scala.reflect.ClassManifestDeprecatedApis.>:>", "link" : "org\/saddle\/scalar\/ScalarTagShort$.html#>:>(that:scala.reflect.ClassManifest[_]):Boolean", "kind" : "def"}, {"label" : "<:<", "tail" : "(that: ClassManifest[_]): Boolean", "member" : "scala.reflect.ClassManifestDeprecatedApis.<:<", "link" : "org\/saddle\/scalar\/ScalarTagShort$.html#<:<(that:scala.reflect.ClassManifest[_]):Boolean", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/saddle\/scalar\/ScalarTagShort$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/saddle\/scalar\/ScalarTagShort$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/saddle\/scalar\/ScalarTagShort$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/saddle\/scalar\/ScalarTagShort$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/saddle\/scalar\/ScalarTagShort$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/saddle\/scalar\/ScalarTagShort$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/saddle\/scalar\/ScalarTagShort$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/scalar\/ScalarTagShort$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/scalar\/ScalarTagShort$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/scalar\/ScalarTagShort$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/saddle\/scalar\/ScalarTagShort$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/saddle\/scalar\/ScalarTagShort$.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/saddle\/scalar\/ScalarTagShort$.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "org\/saddle\/scalar\/ScalarTagShort$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/saddle\/scalar\/ScalarTagShort$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/saddle\/scalar\/ScalarTagShort$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "org.saddle.scalar.ScalarTagString", "shortDescription" : "", "object" : "org\/saddle\/scalar\/ScalarTagString$.html", "members_object" : [{"label" : "parse", "tail" : "(s: Array[Char], from: Int, to: Int): String", "member" : "org.saddle.scalar.ScalarTagString.parse", "link" : "org\/saddle\/scalar\/ScalarTagString$.html#parse(s:Array[Char],from:Int,to:Int):String", "kind" : "def"}, {"label" : "clm", "tail" : "(): CLM[String]", "member" : "org.saddle.scalar.ScalarTagString.clm", "link" : "org\/saddle\/scalar\/ScalarTagString$.html#clm:org.saddle.CLM[String]", "kind" : "def"}, {"label" : "isMissing", "tail" : "(v: String): Boolean", "member" : "org.saddle.scalar.ScalarTagString.isMissing", "link" : "org\/saddle\/scalar\/ScalarTagString$.html#isMissing(v:String):Boolean", "kind" : "def"}, {"label" : "missing", "tail" : "(): String", "member" : "org.saddle.scalar.ScalarTagString.missing", "link" : "org\/saddle\/scalar\/ScalarTagString$.html#missing:String", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "org.saddle.scalar.ScalarTagString.toString", "link" : "org\/saddle\/scalar\/ScalarTagString$.html#toString():String", "kind" : "def"}, {"label" : "makeSorter", "tail" : "(ord: ORD[String]): Sorter[String]", "member" : "org.saddle.scalar.ScalarTagBase.makeSorter", "link" : "org\/saddle\/scalar\/ScalarTagString$.html#makeSorter(implicitord:org.saddle.ORD[T]):org.saddle.array.Sorter[T]", "kind" : "def"}, {"label" : "makeIndex", "tail" : "(vec: Vec[String])(ord: ORD[String]): Index[String]", "member" : "org.saddle.scalar.ScalarTagBase.makeIndex", "link" : "org\/saddle\/scalar\/ScalarTagString$.html#makeIndex(vec:org.saddle.Vec[T])(implicitord:org.saddle.ORD[T]):org.saddle.Index[T]", "kind" : "def"}, {"label" : "makeMat", "tail" : "(r: Int, c: Int, arr: Array[String]): Mat[String]", "member" : "org.saddle.scalar.ScalarTagBase.makeMat", "link" : "org\/saddle\/scalar\/ScalarTagString$.html#makeMat(r:Int,c:Int,arr:Array[T]):org.saddle.Mat[T]", "kind" : "def"}, {"label" : "makeVec", "tail" : "(arr: Array[String]): Vec[String]", "member" : "org.saddle.scalar.ScalarTagBase.makeVec", "link" : "org\/saddle\/scalar\/ScalarTagString$.html#makeVec(arr:Array[T]):org.saddle.Vec[T]", "kind" : "def"}, {"label" : "makeLocAll", "tail" : "(sz: Int): LocatorAll[String]", "member" : "org.saddle.scalar.ScalarTagBase.makeLocAll", "link" : "org\/saddle\/scalar\/ScalarTagString$.html#makeLocAll(sz:Int):org.saddle.locatorall.LocatorAll[T]", "kind" : "def"}, {"label" : "makeLoc", "tail" : "(sz: Int): Locator[String]", "member" : "org.saddle.scalar.ScalarTagBase.makeLoc", "link" : "org\/saddle\/scalar\/ScalarTagString$.html#makeLoc(sz:Int):org.saddle.locator.Locator[T]", "kind" : "def"}, {"label" : "makeBuf", "tail" : "(sz: Int): Buffer[String]", "member" : "org.saddle.scalar.ScalarTagBase.makeBuf", "link" : "org\/saddle\/scalar\/ScalarTagString$.html#makeBuf(sz:Int):org.saddle.Buffer[T]", "kind" : "def"}, {"label" : "runtimeClass", "tail" : "(): Class[_]", "member" : "org.saddle.scalar.ScalarTagBase.runtimeClass", "link" : "org\/saddle\/scalar\/ScalarTagString$.html#runtimeClass:Class[_]", "kind" : "def"}, {"label" : "show", "tail" : "(v: String): String", "member" : "org.saddle.scalar.ScalarTagBase.show", "link" : "org\/saddle\/scalar\/ScalarTagString$.html#show(v:T):String", "kind" : "def"}, {"label" : "negInf", "tail" : "(ev: NUM[String]): Nothing", "member" : "org.saddle.scalar.ScalarTagBase.negInf", "link" : "org\/saddle\/scalar\/ScalarTagString$.html#negInf(implicitev:org.saddle.NUM[T]):Nothing", "kind" : "def"}, {"label" : "inf", "tail" : "(ev: NUM[String]): Nothing", "member" : "org.saddle.scalar.ScalarTagBase.inf", "link" : "org\/saddle\/scalar\/ScalarTagString$.html#inf(implicitev:org.saddle.NUM[T]):Nothing", "kind" : "def"}, {"label" : "one", "tail" : "(ev: NUM[String]): String", "member" : "org.saddle.scalar.ScalarTagBase.one", "link" : "org\/saddle\/scalar\/ScalarTagString$.html#one(implicitev:org.saddle.NUM[T]):T", "kind" : "def"}, {"label" : "zero", "tail" : "(ev: NUM[String]): String", "member" : "org.saddle.scalar.ScalarTagBase.zero", "link" : "org\/saddle\/scalar\/ScalarTagString$.html#zero(implicitev:org.saddle.NUM[T]):T", "kind" : "def"}, {"label" : "toDouble", "tail" : "(t: String)(ev: NUM[String]): Double", "member" : "org.saddle.scalar.ScalarTagBase.toDouble", "link" : "org\/saddle\/scalar\/ScalarTagString$.html#toDouble(t:T)(implicitev:org.saddle.NUM[T]):Double", "kind" : "def"}, {"label" : "compare", "tail" : "(x: String, y: String)(ev: ORD[String]): Int", "member" : "org.saddle.scalar.ScalarTagBase.compare", "link" : "org\/saddle\/scalar\/ScalarTagString$.html#compare(x:T,y:T)(implicitev:org.saddle.ORD[T]):Int", "kind" : "def"}, {"label" : "erasure", "tail" : "(): Class[_]", "member" : "org.saddle.scalar.ScalarTag.erasure", "link" : "org\/saddle\/scalar\/ScalarTagString$.html#erasure:Class[_]", "kind" : "def"}, {"label" : "equals", "tail" : "(o: Any): Boolean", "member" : "org.saddle.scalar.ScalarTag.equals", "link" : "org\/saddle\/scalar\/ScalarTagString$.html#equals(o:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "org.saddle.scalar.ScalarTag.hashCode", "link" : "org\/saddle\/scalar\/ScalarTagString$.html#hashCode():Int", "kind" : "def"}, {"label" : "asString", "tail" : "(v: String): String", "member" : "org.saddle.scalar.ScalarTag.asString", "link" : "org\/saddle\/scalar\/ScalarTagString$.html#asString(v:T):String", "kind" : "def"}, {"label" : "strListLossless", "tail" : "(v: String): List[String]", "member" : "org.saddle.scalar.ScalarTag.strListLossless", "link" : "org\/saddle\/scalar\/ScalarTagString$.html#strListLossless(v:T):List[String]", "kind" : "def"}, {"label" : "strList", "tail" : "(v: String): List[String]", "member" : "org.saddle.scalar.ScalarTag.strList", "link" : "org\/saddle\/scalar\/ScalarTagString$.html#strList(v:T):List[String]", "kind" : "def"}, {"label" : "notMissing", "tail" : "(t: String): Boolean", "member" : "org.saddle.scalar.ScalarTag.notMissing", "link" : "org\/saddle\/scalar\/ScalarTagString$.html#notMissing(t:T):Boolean", "kind" : "def"}, {"label" : "iseq", "tail" : "(a: String, b: String)(ev: ORD[String]): Boolean", "member" : "org.saddle.scalar.CouldBeOrdered.iseq", "link" : "org\/saddle\/scalar\/ScalarTagString$.html#iseq(a:T,b:T)(implicitev:org.saddle.ORD[T]):Boolean", "kind" : "def"}, {"label" : "gt", "tail" : "(a: String, b: String)(ev: ORD[String]): Boolean", "member" : "org.saddle.scalar.CouldBeOrdered.gt", "link" : "org\/saddle\/scalar\/ScalarTagString$.html#gt(a:T,b:T)(implicitev:org.saddle.ORD[T]):Boolean", "kind" : "def"}, {"label" : "lt", "tail" : "(a: String, b: String)(ev: ORD[String]): Boolean", "member" : "org.saddle.scalar.CouldBeOrdered.lt", "link" : "org\/saddle\/scalar\/ScalarTagString$.html#lt(a:T,b:T)(implicitev:org.saddle.ORD[T]):Boolean", "kind" : "def"}, {"label" : "altMatConstructor", "tail" : "(r: Int, c: Int, arr: Array[Vec[String]])(st: ST[String]): Mat[String]", "member" : "org.saddle.scalar.SpecializedFactory.altMatConstructor", "link" : "org\/saddle\/scalar\/ScalarTagString$.html#altMatConstructor(r:Int,c:Int,arr:Array[org.saddle.Vec[T]])(implicitst:org.saddle.ST[T]):org.saddle.Mat[T]", "kind" : "def"}, {"label" : "makeMat", "tail" : "(arr: Array[Vec[String]])(st: ST[String]): Mat[String]", "member" : "org.saddle.scalar.SpecializedFactory.makeMat", "link" : "org\/saddle\/scalar\/ScalarTagString$.html#makeMat(arr:Array[org.saddle.Vec[T]])(implicitst:org.saddle.ST[T]):org.saddle.Mat[T]", "kind" : "final def"}, {"label" : "canEqual", "tail" : "(x: Any): Boolean", "member" : "scala.reflect.ClassTag.canEqual", "link" : "org\/saddle\/scalar\/ScalarTagString$.html#canEqual(x:Any):Boolean", "kind" : "def"}, {"label" : "unapply", "tail" : "(x: Any): Option[String]", "member" : "scala.reflect.ClassTag.unapply", "link" : "org\/saddle\/scalar\/ScalarTagString$.html#unapply(x:Any):Option[T]", "kind" : "def"}, {"label" : "newArray", "tail" : "(len: Int): Array[String]", "member" : "scala.reflect.ClassTag.newArray", "link" : "org\/saddle\/scalar\/ScalarTagString$.html#newArray(len:Int):Array[T]", "kind" : "def"}, {"label" : "wrap", "tail" : "(): ClassTag[Array[String]]", "member" : "scala.reflect.ClassTag.wrap", "link" : "org\/saddle\/scalar\/ScalarTagString$.html#wrap:scala.reflect.ClassTag[Array[T]]", "kind" : "def"}, {"label" : "argString", "tail" : "(): String", "member" : "scala.reflect.ClassManifestDeprecatedApis.argString", "link" : "org\/saddle\/scalar\/ScalarTagString$.html#argString:String", "kind" : "def"}, {"label" : "typeArguments", "tail" : "(): List[OptManifest[_]]", "member" : "scala.reflect.ClassManifestDeprecatedApis.typeArguments", "link" : "org\/saddle\/scalar\/ScalarTagString$.html#typeArguments:List[scala.reflect.OptManifest[_]]", "kind" : "def"}, {"label" : "newArrayBuilder", "tail" : "(): ArrayBuilder[String]", "member" : "scala.reflect.ClassManifestDeprecatedApis.newArrayBuilder", "link" : "org\/saddle\/scalar\/ScalarTagString$.html#newArrayBuilder():scala.collection.mutable.ArrayBuilder[T]", "kind" : "def"}, {"label" : "newWrappedArray", "tail" : "(len: Int): ArraySeq[String]", "member" : "scala.reflect.ClassManifestDeprecatedApis.newWrappedArray", "link" : "org\/saddle\/scalar\/ScalarTagString$.html#newWrappedArray(len:Int):scala.collection.mutable.ArraySeq[T]", "kind" : "def"}, {"label" : "newArray5", "tail" : "(len: Int): Array[Array[Array[Array[Array[String]]]]]", "member" : "scala.reflect.ClassManifestDeprecatedApis.newArray5", "link" : "org\/saddle\/scalar\/ScalarTagString$.html#newArray5(len:Int):Array[Array[Array[Array[Array[T]]]]]", "kind" : "def"}, {"label" : "newArray4", "tail" : "(len: Int): Array[Array[Array[Array[String]]]]", "member" : "scala.reflect.ClassManifestDeprecatedApis.newArray4", "link" : "org\/saddle\/scalar\/ScalarTagString$.html#newArray4(len:Int):Array[Array[Array[Array[T]]]]", "kind" : "def"}, {"label" : "newArray3", "tail" : "(len: Int): Array[Array[Array[String]]]", "member" : "scala.reflect.ClassManifestDeprecatedApis.newArray3", "link" : "org\/saddle\/scalar\/ScalarTagString$.html#newArray3(len:Int):Array[Array[Array[T]]]", "kind" : "def"}, {"label" : "newArray2", "tail" : "(len: Int): Array[Array[String]]", "member" : "scala.reflect.ClassManifestDeprecatedApis.newArray2", "link" : "org\/saddle\/scalar\/ScalarTagString$.html#newArray2(len:Int):Array[Array[T]]", "kind" : "def"}, {"label" : "arrayManifest", "tail" : "(): ClassManifest[Array[String]]", "member" : "scala.reflect.ClassManifestDeprecatedApis.arrayManifest", "link" : "org\/saddle\/scalar\/ScalarTagString$.html#arrayManifest:scala.reflect.ClassManifest[Array[T]]", "kind" : "def"}, {"label" : "arrayClass", "tail" : "(tp: Class[_]): Class[Array[A]]", "member" : "scala.reflect.ClassManifestDeprecatedApis.arrayClass", "link" : "org\/saddle\/scalar\/ScalarTagString$.html#arrayClass[A](tp:Class[_]):Class[Array[A]]", "kind" : "def"}, {"label" : ">:>", "tail" : "(that: ClassManifest[_]): Boolean", "member" : "scala.reflect.ClassManifestDeprecatedApis.>:>", "link" : "org\/saddle\/scalar\/ScalarTagString$.html#>:>(that:scala.reflect.ClassManifest[_]):Boolean", "kind" : "def"}, {"label" : "<:<", "tail" : "(that: ClassManifest[_]): Boolean", "member" : "scala.reflect.ClassManifestDeprecatedApis.<:<", "link" : "org\/saddle\/scalar\/ScalarTagString$.html#<:<(that:scala.reflect.ClassManifest[_]):Boolean", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/saddle\/scalar\/ScalarTagString$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/saddle\/scalar\/ScalarTagString$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/saddle\/scalar\/ScalarTagString$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/saddle\/scalar\/ScalarTagString$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/saddle\/scalar\/ScalarTagString$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/saddle\/scalar\/ScalarTagString$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/saddle\/scalar\/ScalarTagString$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/scalar\/ScalarTagString$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/scalar\/ScalarTagString$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/scalar\/ScalarTagString$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/saddle\/scalar\/ScalarTagString$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/saddle\/scalar\/ScalarTagString$.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/saddle\/scalar\/ScalarTagString$.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "org\/saddle\/scalar\/ScalarTagString$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/saddle\/scalar\/ScalarTagString$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/saddle\/scalar\/ScalarTagString$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "org.saddle.scalar.Value", "shortDescription" : "", "members_case class" : [{"label" : "toString", "tail" : "(): String", "member" : "org.saddle.scalar.Value.toString", "link" : "org\/saddle\/scalar\/Value.html#toString():String", "kind" : "def"}, {"label" : "get", "tail" : "(): T", "member" : "org.saddle.scalar.Value.get", "link" : "org\/saddle\/scalar\/Value.html#get:T", "kind" : "def"}, {"label" : "isNA", "tail" : "(): Boolean", "member" : "org.saddle.scalar.Value.isNA", "link" : "org\/saddle\/scalar\/Value.html#isNA:Boolean", "kind" : "def"}, {"member" : "org.saddle.scalar.Value#<init>", "error" : "unsupported entity"}, {"label" : "el", "tail" : ": T", "member" : "org.saddle.scalar.Value.el", "link" : "org\/saddle\/scalar\/Value.html#el:T", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "org\/saddle\/scalar\/Value.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "foreach", "tail" : "(f: (T) => U): Unit", "member" : "org.saddle.scalar.Scalar.foreach", "link" : "org\/saddle\/scalar\/Value.html#foreach[U](f:T=>U):Unit", "kind" : "final def"}, {"label" : "flatMap", "tail" : "(f: (T) => Scalar[B]): Scalar[B]", "member" : "org.saddle.scalar.Scalar.flatMap", "link" : "org\/saddle\/scalar\/Value.html#flatMap[B](f:T=>org.saddle.scalar.Scalar[B]):org.saddle.scalar.Scalar[B]", "kind" : "final def"}, {"label" : "map", "tail" : "(f: (T) => B)(arg0: ST[B]): Scalar[B]", "member" : "org.saddle.scalar.Scalar.map", "link" : "org\/saddle\/scalar\/Value.html#map[B](f:T=>B)(implicitevidence$1:org.saddle.ST[B]):org.saddle.scalar.Scalar[B]", "kind" : "final def"}, {"label" : "isEmpty", "tail" : "(): Boolean", "member" : "org.saddle.scalar.Scalar.isEmpty", "link" : "org\/saddle\/scalar\/Value.html#isEmpty:Boolean", "kind" : "def"}, {"label" : "isDefined", "tail" : "(): Boolean", "member" : "org.saddle.scalar.Scalar.isDefined", "link" : "org\/saddle\/scalar\/Value.html#isDefined:Boolean", "kind" : "def"}, {"label" : "toOption", "tail" : "(): Option[T]", "member" : "org.saddle.scalar.Scalar.toOption", "link" : "org\/saddle\/scalar\/Value.html#toOption:Option[T]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/saddle\/scalar\/Value.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/saddle\/scalar\/Value.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/saddle\/scalar\/Value.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/saddle\/scalar\/Value.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/saddle\/scalar\/Value.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/saddle\/scalar\/Value.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/saddle\/scalar\/Value.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/scalar\/Value.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/scalar\/Value.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/scalar\/Value.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/saddle\/scalar\/Value.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/saddle\/scalar\/Value.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/saddle\/scalar\/Value.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "org\/saddle\/scalar\/Value.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/saddle\/scalar\/Value.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/saddle\/scalar\/Value.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "org\/saddle\/scalar\/Value.html", "kind" : "case class"}], "org.saddle.binary" : [{"name" : "org.saddle.binary.Reader", "shortDescription" : "", "object" : "org\/saddle\/binary\/Reader$.html", "members_object" : [{"label" : "readMatFromArray", "tail" : "(array: Array[Byte])(arg0: ST[T]): Either[String, Mat[T]]", "member" : "org.saddle.binary.Reader.readMatFromArray", "link" : "org\/saddle\/binary\/Reader$.html#readMatFromArray[T](array:Array[Byte])(implicitevidence$9:org.saddle.ST[T]):scala.util.Either[String,org.saddle.Mat[T]]", "kind" : "def"}, {"label" : "readMatFromArrays", "tail" : "(arrays: IndexedSeq[Array[Byte]])(arg0: ST[T]): Either[String, Mat[T]]", "member" : "org.saddle.binary.Reader.readMatFromArrays", "link" : "org\/saddle\/binary\/Reader$.html#readMatFromArrays[T](arrays:IndexedSeq[Array[Byte]])(implicitevidence$8:org.saddle.ST[T]):scala.util.Either[String,org.saddle.Mat[T]]", "kind" : "def"}, {"label" : "readFrameFromArray", "tail" : "(array: Array[Byte])(arg0: ST[T]): Either[String, Frame[String, String, T]]", "member" : "org.saddle.binary.Reader.readFrameFromArray", "link" : "org\/saddle\/binary\/Reader$.html#readFrameFromArray[T](array:Array[Byte])(implicitevidence$7:org.saddle.ST[T]):scala.util.Either[String,org.saddle.Frame[String,String,T]]", "kind" : "def"}, {"label" : "readFrameFromChannel", "tail" : "(channel: ReadableByteChannel)(arg0: ST[T]): Either[String, Frame[String, String, T]]", "member" : "org.saddle.binary.Reader.readFrameFromChannel", "link" : "org\/saddle\/binary\/Reader$.html#readFrameFromChannel[T](channel:java.nio.channels.ReadableByteChannel)(implicitevidence$6:org.saddle.ST[T]):scala.util.Either[String,org.saddle.Frame[String,String,T]]", "kind" : "def"}, {"label" : "readMatFromChannel", "tail" : "(channel: ReadableByteChannel)(arg0: ST[T]): Either[String, Mat[T]]", "member" : "org.saddle.binary.Reader.readMatFromChannel", "link" : "org\/saddle\/binary\/Reader$.html#readMatFromChannel[T](channel:java.nio.channels.ReadableByteChannel)(implicitevidence$4:org.saddle.ST[T]):scala.util.Either[String,org.saddle.Mat[T]]", "kind" : "def"}, {"label" : "parse", "tail" : "(size: Int, from: ByteBuffer)(arg0: ST[T]): Either[String, Array[T]]", "member" : "org.saddle.binary.Reader.parse", "link" : "org\/saddle\/binary\/Reader$.html#parse[T](size:Int,from:java.nio.ByteBuffer)(implicitevidence$1:org.saddle.ST[T]):scala.util.Either[String,Array[T]]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/saddle\/binary\/Reader$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/saddle\/binary\/Reader$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/saddle\/binary\/Reader$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/saddle\/binary\/Reader$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/saddle\/binary\/Reader$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/saddle\/binary\/Reader$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/saddle\/binary\/Reader$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/binary\/Reader$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/binary\/Reader$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/binary\/Reader$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/saddle\/binary\/Reader$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/saddle\/binary\/Reader$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/saddle\/binary\/Reader$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/saddle\/binary\/Reader$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/saddle\/binary\/Reader$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/saddle\/binary\/Reader$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "org\/saddle\/binary\/Reader$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/saddle\/binary\/Reader$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/saddle\/binary\/Reader$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "org.saddle.binary.Writer", "shortDescription" : "", "object" : "org\/saddle\/binary\/Writer$.html", "members_object" : [{"label" : "writeFrameIntoArray", "tail" : "(frame: Frame[RX, CX, T])(arg0: ST[T]): Either[String, Array[Byte]]", "member" : "org.saddle.binary.Writer.writeFrameIntoArray", "link" : "org\/saddle\/binary\/Writer$.html#writeFrameIntoArray[RX,CX,T](frame:org.saddle.Frame[RX,CX,T])(implicitevidence$10:org.saddle.ST[T]):Either[String,Array[Byte]]", "kind" : "def"}, {"label" : "writeMatIntoArrays", "tail" : "(mat: Mat[T], maxArrayLength: Long)(arg0: ST[T]): Either[String, IndexedSeq[Array[Byte]]]", "member" : "org.saddle.binary.Writer.writeMatIntoArrays", "link" : "org\/saddle\/binary\/Writer$.html#writeMatIntoArrays[T](mat:org.saddle.Mat[T],maxArrayLength:Long)(implicitevidence$9:org.saddle.ST[T]):Either[String,IndexedSeq[Array[Byte]]]", "kind" : "def"}, {"label" : "writeMatIntoArray", "tail" : "(mat: Mat[T])(arg0: ST[T]): Either[String, Array[Byte]]", "member" : "org.saddle.binary.Writer.writeMatIntoArray", "link" : "org\/saddle\/binary\/Writer$.html#writeMatIntoArray[T](mat:org.saddle.Mat[T])(implicitevidence$8:org.saddle.ST[T]):Either[String,Array[Byte]]", "kind" : "def"}, {"label" : "writeFrameIntoChannel", "tail" : "(frame: Frame[RX, CX, T], channel: WritableByteChannel)(arg0: ST[T]): Either[String, Unit]", "member" : "org.saddle.binary.Writer.writeFrameIntoChannel", "link" : "org\/saddle\/binary\/Writer$.html#writeFrameIntoChannel[RX,CX,T](frame:org.saddle.Frame[RX,CX,T],channel:java.nio.channels.WritableByteChannel)(implicitevidence$7:org.saddle.ST[T]):Either[String,Unit]", "kind" : "def"}, {"label" : "writeMatIntoChannel", "tail" : "(mat: Mat[T], channel: WritableByteChannel)(arg0: ST[T]): Either[String, Unit]", "member" : "org.saddle.binary.Writer.writeMatIntoChannel", "link" : "org\/saddle\/binary\/Writer$.html#writeMatIntoChannel[T](mat:org.saddle.Mat[T],channel:java.nio.channels.WritableByteChannel)(implicitevidence$6:org.saddle.ST[T]):Either[String,Unit]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/saddle\/binary\/Writer$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/saddle\/binary\/Writer$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/saddle\/binary\/Writer$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/saddle\/binary\/Writer$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/saddle\/binary\/Writer$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/saddle\/binary\/Writer$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/saddle\/binary\/Writer$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/binary\/Writer$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/binary\/Writer$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/binary\/Writer$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/saddle\/binary\/Writer$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/saddle\/binary\/Writer$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/saddle\/binary\/Writer$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/saddle\/binary\/Writer$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/saddle\/binary\/Writer$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/saddle\/binary\/Writer$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "org\/saddle\/binary\/Writer$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/saddle\/binary\/Writer$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/saddle\/binary\/Writer$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}], "org.saddle.groupby" : [{"name" : "org.saddle.groupby.FrameGrouper", "shortDescription" : "Helper class to do combine or transform after a groupBy", "object" : "org\/saddle\/groupby\/FrameGrouper$.html", "members_class" : [{"label" : "transform", "tail" : "(fn: (Vec[T]) => Vec[U])(arg0: ST[U]): Frame[X, Y, U]", "member" : "org.saddle.groupby.FrameGrouper.transform", "link" : "org\/saddle\/groupby\/FrameGrouper.html#transform[U](fn:org.saddle.Vec[T]=>org.saddle.Vec[U])(implicitevidence$10:org.saddle.ST[U]):org.saddle.Frame[X,Y,U]", "kind" : "def"}, {"label" : "transform", "tail" : "(fn: (Z, Vec[T]) => Vec[U])(arg0: ST[U]): Frame[X, Y, U]", "member" : "org.saddle.groupby.FrameGrouper.transform", "link" : "org\/saddle\/groupby\/FrameGrouper.html#transform[U](fn:(Z,org.saddle.Vec[T])=>org.saddle.Vec[U])(implicitevidence$9:org.saddle.ST[U]):org.saddle.Frame[X,Y,U]", "kind" : "def"}, {"label" : "combine", "tail" : "(fn: (Vec[T]) => U)(arg0: ST[U]): Frame[Z, Y, U]", "member" : "org.saddle.groupby.FrameGrouper.combine", "link" : "org\/saddle\/groupby\/FrameGrouper.html#combine[U](fn:org.saddle.Vec[T]=>U)(implicitevidence$8:org.saddle.ST[U]):org.saddle.Frame[Z,Y,U]", "kind" : "def"}, {"label" : "combine", "tail" : "(fn: (Z, Vec[T]) => U)(arg0: ST[U]): Frame[Z, Y, U]", "member" : "org.saddle.groupby.FrameGrouper.combine", "link" : "org\/saddle\/groupby\/FrameGrouper.html#combine[U](fn:(Z,org.saddle.Vec[T])=>U)(implicitevidence$7:org.saddle.ST[U]):org.saddle.Frame[Z,Y,U]", "kind" : "def"}, {"label" : "groups", "tail" : "(): Array[(Z, Array[Int])]", "member" : "org.saddle.groupby.FrameGrouper.groups", "link" : "org\/saddle\/groupby\/FrameGrouper.html#groups:Array[(Z,Array[Int])]", "kind" : "def"}, {"label" : "keys", "tail" : "(): Array[Z]", "member" : "org.saddle.groupby.FrameGrouper.keys", "link" : "org\/saddle\/groupby\/FrameGrouper.html#keys:Array[Z]", "kind" : "def"}, {"member" : "org.saddle.groupby.FrameGrouper#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/saddle\/groupby\/FrameGrouper.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/saddle\/groupby\/FrameGrouper.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/saddle\/groupby\/FrameGrouper.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/saddle\/groupby\/FrameGrouper.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/saddle\/groupby\/FrameGrouper.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/saddle\/groupby\/FrameGrouper.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/saddle\/groupby\/FrameGrouper.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/groupby\/FrameGrouper.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/groupby\/FrameGrouper.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/groupby\/FrameGrouper.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/saddle\/groupby\/FrameGrouper.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/saddle\/groupby\/FrameGrouper.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/saddle\/groupby\/FrameGrouper.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/saddle\/groupby\/FrameGrouper.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/saddle\/groupby\/FrameGrouper.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/saddle\/groupby\/FrameGrouper.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "org\/saddle\/groupby\/FrameGrouper.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/saddle\/groupby\/FrameGrouper.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/saddle\/groupby\/FrameGrouper.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "apply", "tail" : "(ix: Index[Z], frame: Frame[X, Y, T])(arg0: ST[Z], arg1: ORD[Z], arg2: ST[X], arg3: ORD[X], arg4: ST[Y], arg5: ORD[Y]): FrameGrouper[Z, X, Y, T]", "member" : "org.saddle.groupby.FrameGrouper.apply", "link" : "org\/saddle\/groupby\/FrameGrouper$.html#apply[Z,X,Y,T](ix:org.saddle.Index[Z],frame:org.saddle.Frame[X,Y,T])(implicitevidence$15:org.saddle.ST[Z],implicitevidence$16:org.saddle.ORD[Z],implicitevidence$17:org.saddle.ST[X],implicitevidence$18:org.saddle.ORD[X],implicitevidence$19:org.saddle.ST[Y],implicitevidence$20:org.saddle.ORD[Y]):org.saddle.groupby.FrameGrouper[Z,X,Y,T]", "kind" : "def"}, {"label" : "apply", "tail" : "(frame: Frame[Z, Y, T])(arg0: ST[Z], arg1: ORD[Z], arg2: ST[Y], arg3: ORD[Y]): FrameGrouper[Z, Z, Y, T]", "member" : "org.saddle.groupby.FrameGrouper.apply", "link" : "org\/saddle\/groupby\/FrameGrouper$.html#apply[Z,Y,T](frame:org.saddle.Frame[Z,Y,T])(implicitevidence$11:org.saddle.ST[Z],implicitevidence$12:org.saddle.ORD[Z],implicitevidence$13:org.saddle.ST[Y],implicitevidence$14:org.saddle.ORD[Y]):org.saddle.groupby.FrameGrouper[Z,Z,Y,T]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/saddle\/groupby\/FrameGrouper$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/saddle\/groupby\/FrameGrouper$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/saddle\/groupby\/FrameGrouper$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/saddle\/groupby\/FrameGrouper$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/saddle\/groupby\/FrameGrouper$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/saddle\/groupby\/FrameGrouper$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/saddle\/groupby\/FrameGrouper$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/groupby\/FrameGrouper$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/groupby\/FrameGrouper$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/groupby\/FrameGrouper$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/saddle\/groupby\/FrameGrouper$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/saddle\/groupby\/FrameGrouper$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/saddle\/groupby\/FrameGrouper$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/saddle\/groupby\/FrameGrouper$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/saddle\/groupby\/FrameGrouper$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/saddle\/groupby\/FrameGrouper$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "org\/saddle\/groupby\/FrameGrouper$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/saddle\/groupby\/FrameGrouper$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/saddle\/groupby\/FrameGrouper$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/saddle\/groupby\/FrameGrouper.html", "kind" : "class"}, {"name" : "org.saddle.groupby.IndexGrouper", "shortDescription" : "Creates groups for each unique key in an index", "object" : "org\/saddle\/groupby\/IndexGrouper$.html", "members_class" : [{"label" : "groups", "tail" : "(): Array[(Y, Array[Int])]", "member" : "org.saddle.groupby.IndexGrouper.groups", "link" : "org\/saddle\/groupby\/IndexGrouper.html#groups:Array[(Y,Array[Int])]", "kind" : "def"}, {"label" : "keys", "tail" : "(): Array[Y]", "member" : "org.saddle.groupby.IndexGrouper.keys", "link" : "org\/saddle\/groupby\/IndexGrouper.html#keys:Array[Y]", "kind" : "def"}, {"member" : "org.saddle.groupby.IndexGrouper#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/saddle\/groupby\/IndexGrouper.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/saddle\/groupby\/IndexGrouper.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/saddle\/groupby\/IndexGrouper.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/saddle\/groupby\/IndexGrouper.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/saddle\/groupby\/IndexGrouper.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/saddle\/groupby\/IndexGrouper.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/saddle\/groupby\/IndexGrouper.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/groupby\/IndexGrouper.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/groupby\/IndexGrouper.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/groupby\/IndexGrouper.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/saddle\/groupby\/IndexGrouper.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/saddle\/groupby\/IndexGrouper.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/saddle\/groupby\/IndexGrouper.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/saddle\/groupby\/IndexGrouper.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/saddle\/groupby\/IndexGrouper.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/saddle\/groupby\/IndexGrouper.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "org\/saddle\/groupby\/IndexGrouper.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/saddle\/groupby\/IndexGrouper.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/saddle\/groupby\/IndexGrouper.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "apply", "tail" : "(ix: Index[Y], sorted: Boolean)(arg0: ST[Y], arg1: ORD[Y]): IndexGrouper[Y]", "member" : "org.saddle.groupby.IndexGrouper.apply", "link" : "org\/saddle\/groupby\/IndexGrouper$.html#apply[Y](ix:org.saddle.Index[Y],sorted:Boolean)(implicitevidence$5:org.saddle.ST[Y],implicitevidence$6:org.saddle.ORD[Y]):org.saddle.groupby.IndexGrouper[Y]", "kind" : "def"}, {"label" : "apply", "tail" : "(ix: Index[Y])(arg0: ST[Y], arg1: ORD[Y]): IndexGrouper[Y]", "member" : "org.saddle.groupby.IndexGrouper.apply", "link" : "org\/saddle\/groupby\/IndexGrouper$.html#apply[Y](ix:org.saddle.Index[Y])(implicitevidence$3:org.saddle.ST[Y],implicitevidence$4:org.saddle.ORD[Y]):org.saddle.groupby.IndexGrouper[Y]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/saddle\/groupby\/IndexGrouper$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/saddle\/groupby\/IndexGrouper$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/saddle\/groupby\/IndexGrouper$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/saddle\/groupby\/IndexGrouper$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/saddle\/groupby\/IndexGrouper$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/saddle\/groupby\/IndexGrouper$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/saddle\/groupby\/IndexGrouper$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/groupby\/IndexGrouper$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/groupby\/IndexGrouper$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/groupby\/IndexGrouper$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/saddle\/groupby\/IndexGrouper$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/saddle\/groupby\/IndexGrouper$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/saddle\/groupby\/IndexGrouper$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/saddle\/groupby\/IndexGrouper$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/saddle\/groupby\/IndexGrouper$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/saddle\/groupby\/IndexGrouper$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "org\/saddle\/groupby\/IndexGrouper$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/saddle\/groupby\/IndexGrouper$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/saddle\/groupby\/IndexGrouper$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/saddle\/groupby\/IndexGrouper.html", "kind" : "class"}, {"name" : "org.saddle.groupby.SeriesGrouper", "shortDescription" : "Helper class to do combine or transform after a groupBy", "object" : "org\/saddle\/groupby\/SeriesGrouper$.html", "members_class" : [{"label" : "transform", "tail" : "(fn: (Vec[T]) => Vec[U])(arg0: ST[U]): Series[X, U]", "member" : "org.saddle.groupby.SeriesGrouper.transform", "link" : "org\/saddle\/groupby\/SeriesGrouper.html#transform[U](fn:org.saddle.Vec[T]=>org.saddle.Vec[U])(implicitevidence$8:org.saddle.ST[U]):org.saddle.Series[X,U]", "kind" : "def"}, {"label" : "transform", "tail" : "(fn: (Y, Vec[T]) => Vec[U])(arg0: ST[U]): Series[X, U]", "member" : "org.saddle.groupby.SeriesGrouper.transform", "link" : "org\/saddle\/groupby\/SeriesGrouper.html#transform[U](fn:(Y,org.saddle.Vec[T])=>org.saddle.Vec[U])(implicitevidence$7:org.saddle.ST[U]):org.saddle.Series[X,U]", "kind" : "def"}, {"label" : "combine", "tail" : "(fn: (Vec[T]) => U)(arg0: ST[U]): Series[Y, U]", "member" : "org.saddle.groupby.SeriesGrouper.combine", "link" : "org\/saddle\/groupby\/SeriesGrouper.html#combine[U](fn:org.saddle.Vec[T]=>U)(implicitevidence$6:org.saddle.ST[U]):org.saddle.Series[Y,U]", "kind" : "def"}, {"label" : "combine", "tail" : "(fn: (Y, Vec[T]) => U)(arg0: ST[U]): Series[Y, U]", "member" : "org.saddle.groupby.SeriesGrouper.combine", "link" : "org\/saddle\/groupby\/SeriesGrouper.html#combine[U](fn:(Y,org.saddle.Vec[T])=>U)(implicitevidence$5:org.saddle.ST[U]):org.saddle.Series[Y,U]", "kind" : "def"}, {"member" : "org.saddle.groupby.SeriesGrouper#<init>", "error" : "unsupported entity"}, {"label" : "groups", "tail" : "(): Array[(Y, Array[Int])]", "member" : "org.saddle.groupby.IndexGrouper.groups", "link" : "org\/saddle\/groupby\/SeriesGrouper.html#groups:Array[(Y,Array[Int])]", "kind" : "def"}, {"label" : "keys", "tail" : "(): Array[Y]", "member" : "org.saddle.groupby.IndexGrouper.keys", "link" : "org\/saddle\/groupby\/SeriesGrouper.html#keys:Array[Y]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/saddle\/groupby\/SeriesGrouper.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/saddle\/groupby\/SeriesGrouper.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/saddle\/groupby\/SeriesGrouper.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/saddle\/groupby\/SeriesGrouper.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/saddle\/groupby\/SeriesGrouper.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/saddle\/groupby\/SeriesGrouper.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/saddle\/groupby\/SeriesGrouper.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/groupby\/SeriesGrouper.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/groupby\/SeriesGrouper.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/groupby\/SeriesGrouper.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/saddle\/groupby\/SeriesGrouper.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/saddle\/groupby\/SeriesGrouper.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/saddle\/groupby\/SeriesGrouper.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/saddle\/groupby\/SeriesGrouper.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/saddle\/groupby\/SeriesGrouper.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/saddle\/groupby\/SeriesGrouper.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "org\/saddle\/groupby\/SeriesGrouper.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/saddle\/groupby\/SeriesGrouper.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/saddle\/groupby\/SeriesGrouper.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "apply", "tail" : "(series: Series[Y, T])(arg0: ST[Y], arg1: ORD[Y]): SeriesGrouper[Y, Y, T]", "member" : "org.saddle.groupby.SeriesGrouper.apply", "link" : "org\/saddle\/groupby\/SeriesGrouper$.html#apply[Y,T](series:org.saddle.Series[Y,T])(implicitevidence$15:org.saddle.ST[Y],implicitevidence$16:org.saddle.ORD[Y]):org.saddle.groupby.SeriesGrouper[Y,Y,T]", "kind" : "def"}, {"label" : "apply", "tail" : "(ix: Index[Y], ser: Series[X, T])(arg0: ST[Y], arg1: ORD[Y], arg2: ST[X], arg3: ORD[X]): SeriesGrouper[Y, X, T]", "member" : "org.saddle.groupby.SeriesGrouper.apply", "link" : "org\/saddle\/groupby\/SeriesGrouper$.html#apply[Y,X,T](ix:org.saddle.Index[Y],ser:org.saddle.Series[X,T])(implicitevidence$11:org.saddle.ST[Y],implicitevidence$12:org.saddle.ORD[Y],implicitevidence$13:org.saddle.ST[X],implicitevidence$14:org.saddle.ORD[X]):org.saddle.groupby.SeriesGrouper[Y,X,T]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/saddle\/groupby\/SeriesGrouper$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/saddle\/groupby\/SeriesGrouper$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/saddle\/groupby\/SeriesGrouper$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/saddle\/groupby\/SeriesGrouper$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/saddle\/groupby\/SeriesGrouper$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/saddle\/groupby\/SeriesGrouper$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/saddle\/groupby\/SeriesGrouper$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/groupby\/SeriesGrouper$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/groupby\/SeriesGrouper$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/groupby\/SeriesGrouper$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/saddle\/groupby\/SeriesGrouper$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/saddle\/groupby\/SeriesGrouper$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/saddle\/groupby\/SeriesGrouper$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/saddle\/groupby\/SeriesGrouper$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/saddle\/groupby\/SeriesGrouper$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/saddle\/groupby\/SeriesGrouper$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "org\/saddle\/groupby\/SeriesGrouper$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/saddle\/groupby\/SeriesGrouper$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/saddle\/groupby\/SeriesGrouper$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/saddle\/groupby\/SeriesGrouper.html", "kind" : "class"}], "org.saddle.array" : [{"name" : "org.saddle.array.InsertionSort", "shortDescription" : "An implementation of insertion sort.", "object" : "org\/saddle\/array\/InsertionSort$.html", "members_object" : [{"label" : "sort", "tail" : "(data: Array[A], start: Int, end: Int)(o: ORD[A]): Unit", "member" : "org.saddle.array.InsertionSort.sort", "link" : "org\/saddle\/array\/InsertionSort$.html#sort[A](data:Array[A],start:Int,end:Int)(implicito:org.saddle.ORD[A]):Unit", "kind" : "final def"}, {"label" : "sort", "tail" : "(data: Array[A])(arg0: ORD[A]): Unit", "member" : "org.saddle.array.InsertionSort.sort", "link" : "org\/saddle\/array\/InsertionSort$.html#sort[A](data:Array[A])(implicitevidence$1:org.saddle.ORD[A]):Unit", "kind" : "final def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/saddle\/array\/InsertionSort$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/saddle\/array\/InsertionSort$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/saddle\/array\/InsertionSort$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/saddle\/array\/InsertionSort$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/saddle\/array\/InsertionSort$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/saddle\/array\/InsertionSort$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/saddle\/array\/InsertionSort$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/array\/InsertionSort$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/array\/InsertionSort$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/array\/InsertionSort$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/saddle\/array\/InsertionSort$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/saddle\/array\/InsertionSort$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/saddle\/array\/InsertionSort$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/saddle\/array\/InsertionSort$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/saddle\/array\/InsertionSort$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/saddle\/array\/InsertionSort$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "org\/saddle\/array\/InsertionSort$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/saddle\/array\/InsertionSort$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/saddle\/array\/InsertionSort$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "org.saddle.array.MergeSort", "shortDescription" : "In-place merge sort implementation.", "object" : "org\/saddle\/array\/MergeSort$.html", "members_object" : [{"label" : "merge", "tail" : "(in: Array[A], out: Array[A], start: Int, mid: Int, end: Int)(o: ORD[A]): Unit", "member" : "org.saddle.array.MergeSort.merge", "link" : "org\/saddle\/array\/MergeSort$.html#merge[A](in:Array[A],out:Array[A],start:Int,mid:Int,end:Int)(implicito:org.saddle.ORD[A]):Unit", "kind" : "final def"}, {"label" : "sort", "tail" : "(data: Array[A])(arg0: ORD[A], arg1: ClassTag[A]): Unit", "member" : "org.saddle.array.MergeSort.sort", "link" : "org\/saddle\/array\/MergeSort$.html#sort[A](data:Array[A])(implicitevidence$2:org.saddle.ORD[A],implicitevidence$3:scala.reflect.ClassTag[A]):Unit", "kind" : "final def"}, {"label" : "startStep", "tail" : "(): Int", "member" : "org.saddle.array.MergeSort.startStep", "link" : "org\/saddle\/array\/MergeSort$.html#startStep:Int", "kind" : "final def"}, {"label" : "startWidth", "tail" : "(): Int", "member" : "org.saddle.array.MergeSort.startWidth", "link" : "org\/saddle\/array\/MergeSort$.html#startWidth:Int", "kind" : "final def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/saddle\/array\/MergeSort$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/saddle\/array\/MergeSort$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/saddle\/array\/MergeSort$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/saddle\/array\/MergeSort$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/saddle\/array\/MergeSort$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/saddle\/array\/MergeSort$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/saddle\/array\/MergeSort$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/array\/MergeSort$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/array\/MergeSort$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/array\/MergeSort$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/saddle\/array\/MergeSort$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/saddle\/array\/MergeSort$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/saddle\/array\/MergeSort$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/saddle\/array\/MergeSort$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/saddle\/array\/MergeSort$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/saddle\/array\/MergeSort$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "org\/saddle\/array\/MergeSort$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/saddle\/array\/MergeSort$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/saddle\/array\/MergeSort$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "org.saddle.array.PermuteInsertionSort", "shortDescription" : "An implementation of insertion sort.", "object" : "org\/saddle\/array\/PermuteInsertionSort$.html", "members_object" : [{"label" : "sort", "tail" : "(data: Array[A], start: Int, end: Int, perm: Array[Int])(o: ORD[A]): Unit", "member" : "org.saddle.array.PermuteInsertionSort.sort", "link" : "org\/saddle\/array\/PermuteInsertionSort$.html#sort[A](data:Array[A],start:Int,end:Int,perm:Array[Int])(implicito:org.saddle.ORD[A]):Unit", "kind" : "final def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/saddle\/array\/PermuteInsertionSort$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/saddle\/array\/PermuteInsertionSort$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/saddle\/array\/PermuteInsertionSort$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/saddle\/array\/PermuteInsertionSort$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/saddle\/array\/PermuteInsertionSort$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/saddle\/array\/PermuteInsertionSort$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/saddle\/array\/PermuteInsertionSort$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/array\/PermuteInsertionSort$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/array\/PermuteInsertionSort$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/array\/PermuteInsertionSort$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/saddle\/array\/PermuteInsertionSort$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/saddle\/array\/PermuteInsertionSort$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/saddle\/array\/PermuteInsertionSort$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/saddle\/array\/PermuteInsertionSort$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/saddle\/array\/PermuteInsertionSort$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/saddle\/array\/PermuteInsertionSort$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "org\/saddle\/array\/PermuteInsertionSort$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/saddle\/array\/PermuteInsertionSort$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/saddle\/array\/PermuteInsertionSort$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "org.saddle.array.PermuteMergeSort", "shortDescription" : "In-place merge sort implementation.", "object" : "org\/saddle\/array\/PermuteMergeSort$.html", "members_object" : [{"label" : "mergePerm", "tail" : "(data: Array[A], in: Array[Int], out: Array[Int], start: Int, mid: Int, end: Int)(o: ORD[A]): Unit", "member" : "org.saddle.array.PermuteMergeSort.mergePerm", "link" : "org\/saddle\/array\/PermuteMergeSort$.html#mergePerm[A](data:Array[A],in:Array[Int],out:Array[Int],start:Int,mid:Int,end:Int)(implicito:org.saddle.ORD[A]):Unit", "kind" : "final def"}, {"label" : "sort", "tail" : "(data: Array[A], perm: Array[Int])(arg0: ORD[A]): Unit", "member" : "org.saddle.array.PermuteMergeSort.sort", "link" : "org\/saddle\/array\/PermuteMergeSort$.html#sort[A](data:Array[A],perm:Array[Int])(implicitevidence$4:org.saddle.ORD[A]):Unit", "kind" : "final def"}, {"label" : "startStep", "tail" : "(): Int", "member" : "org.saddle.array.PermuteMergeSort.startStep", "link" : "org\/saddle\/array\/PermuteMergeSort$.html#startStep:Int", "kind" : "final def"}, {"label" : "startWidth", "tail" : "(): Int", "member" : "org.saddle.array.PermuteMergeSort.startWidth", "link" : "org\/saddle\/array\/PermuteMergeSort$.html#startWidth:Int", "kind" : "final def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/saddle\/array\/PermuteMergeSort$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/saddle\/array\/PermuteMergeSort$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/saddle\/array\/PermuteMergeSort$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/saddle\/array\/PermuteMergeSort$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/saddle\/array\/PermuteMergeSort$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/saddle\/array\/PermuteMergeSort$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/saddle\/array\/PermuteMergeSort$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/array\/PermuteMergeSort$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/array\/PermuteMergeSort$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/array\/PermuteMergeSort$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/saddle\/array\/PermuteMergeSort$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/saddle\/array\/PermuteMergeSort$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/saddle\/array\/PermuteMergeSort$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/saddle\/array\/PermuteMergeSort$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/saddle\/array\/PermuteMergeSort$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/saddle\/array\/PermuteMergeSort$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "org\/saddle\/array\/PermuteMergeSort$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/saddle\/array\/PermuteMergeSort$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/saddle\/array\/PermuteMergeSort$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "org.saddle.array.Sorter", "object" : "org\/saddle\/array\/Sorter$.html", "members_object" : [{"label" : "anySorter", "tail" : "(): Sorter[T]", "member" : "org.saddle.array.Sorter.anySorter", "link" : "org\/saddle\/array\/Sorter$.html#anySorter[T]:org.saddle.array.Sorter[T]", "kind" : "def"}, {"label" : "doubleSorter", "tail" : "", "member" : "org.saddle.array.Sorter.doubleSorter", "link" : "org\/saddle\/array\/Sorter$.html#doubleSorter", "kind" : "object"}, {"label" : "longSorter", "tail" : "", "member" : "org.saddle.array.Sorter.longSorter", "link" : "org\/saddle\/array\/Sorter$.html#longSorter", "kind" : "object"}, {"label" : "floatSorter", "tail" : "", "member" : "org.saddle.array.Sorter.floatSorter", "link" : "org\/saddle\/array\/Sorter$.html#floatSorter", "kind" : "object"}, {"label" : "intSorter", "tail" : "", "member" : "org.saddle.array.Sorter.intSorter", "link" : "org\/saddle\/array\/Sorter$.html#intSorter", "kind" : "object"}, {"label" : "shortSorter", "tail" : "", "member" : "org.saddle.array.Sorter.shortSorter", "link" : "org\/saddle\/array\/Sorter$.html#shortSorter", "kind" : "object"}, {"label" : "charSorter", "tail" : "", "member" : "org.saddle.array.Sorter.charSorter", "link" : "org\/saddle\/array\/Sorter$.html#charSorter", "kind" : "object"}, {"label" : "byteSorter", "tail" : "", "member" : "org.saddle.array.Sorter.byteSorter", "link" : "org\/saddle\/array\/Sorter$.html#byteSorter", "kind" : "object"}, {"label" : "boolSorter", "tail" : "", "member" : "org.saddle.array.Sorter.boolSorter", "link" : "org\/saddle\/array\/Sorter$.html#boolSorter", "kind" : "object"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/saddle\/array\/Sorter$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/saddle\/array\/Sorter$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/saddle\/array\/Sorter$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/saddle\/array\/Sorter$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/saddle\/array\/Sorter$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/saddle\/array\/Sorter$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/saddle\/array\/Sorter$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/array\/Sorter$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/array\/Sorter$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/array\/Sorter$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/saddle\/array\/Sorter$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/saddle\/array\/Sorter$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/saddle\/array\/Sorter$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/saddle\/array\/Sorter$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/saddle\/array\/Sorter$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/saddle\/array\/Sorter$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "org\/saddle\/array\/Sorter$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/saddle\/array\/Sorter$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/saddle\/array\/Sorter$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "org\/saddle\/array\/Sorter.html", "kind" : "trait", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/saddle\/array\/Sorter.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/saddle\/array\/Sorter.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/saddle\/array\/Sorter.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/saddle\/array\/Sorter.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/saddle\/array\/Sorter.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/saddle\/array\/Sorter.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/saddle\/array\/Sorter.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/array\/Sorter.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/array\/Sorter.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/array\/Sorter.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/saddle\/array\/Sorter.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/saddle\/array\/Sorter.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/saddle\/array\/Sorter.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/saddle\/array\/Sorter.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/saddle\/array\/Sorter.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/saddle\/array\/Sorter.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "org\/saddle\/array\/Sorter.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/saddle\/array\/Sorter.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/saddle\/array\/Sorter.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "sorted", "tail" : "(arr: Array[T])(ord: ORD[T]): Array[T]", "member" : "org.saddle.array.Sorter.sorted", "link" : "org\/saddle\/array\/Sorter.html#sorted(arr:Array[T])(implicitord:org.saddle.ORD[T]):Array[T]", "kind" : "abstract def"}, {"label" : "argSorted", "tail" : "(arr: Array[T])(ord: ORD[T]): Array[Int]", "member" : "org.saddle.array.Sorter.argSorted", "link" : "org\/saddle\/array\/Sorter.html#argSorted(arr:Array[T])(implicitord:org.saddle.ORD[T]):Array[Int]", "kind" : "abstract def"}], "shortDescription" : "Typeclass interface for sorting implementations"}], "org.saddle.vec" : [{"name" : "org.saddle.vec.VecDefault", "shortDescription" : "", "members_class" : [{"label" : "reshape", "tail" : "(rows: Int, columns: Int): Mat[T]", "member" : "org.saddle.vec.VecDefault.reshape", "link" : "org\/saddle\/vec\/VecDefault.html#reshape(rows:Int,columns:Int):org.saddle.Mat[T]", "kind" : "def"}, {"label" : "update", "tail" : "(slice: Slice[Int], value: Vec[T]): Unit", "member" : "org.saddle.vec.VecDefault.update", "link" : "org\/saddle\/vec\/VecDefault.html#update(slice:org.saddle.index.Slice[Int],value:org.saddle.Vec[T]):Unit", "kind" : "def"}, {"label" : "update", "tail" : "(slice: Slice[Int], value: T): Unit", "member" : "org.saddle.vec.VecDefault.update", "link" : "org\/saddle\/vec\/VecDefault.html#update(slice:org.saddle.index.Slice[Int],value:T):Unit", "kind" : "def"}, {"label" : "update", "tail" : "(offset: Int, value: T): Unit", "member" : "org.saddle.vec.VecDefault.update", "link" : "org\/saddle\/vec\/VecDefault.html#update(offset:Int,value:T):Unit", "kind" : "def"}, {"label" : "dropRight", "tail" : "(i: Int): Vec[T]", "member" : "org.saddle.vec.VecDefault.dropRight", "link" : "org\/saddle\/vec\/VecDefault.html#dropRight(i:Int):org.saddle.Vec[T]", "kind" : "def"}, {"label" : "dropLeft", "tail" : "(i: Int): Vec[T]", "member" : "org.saddle.vec.VecDefault.dropLeft", "link" : "org\/saddle\/vec\/VecDefault.html#dropLeft(i:Int):org.saddle.Vec[T]", "kind" : "def"}, {"label" : "takeRight", "tail" : "(i: Int): Vec[T]", "member" : "org.saddle.vec.VecDefault.takeRight", "link" : "org\/saddle\/vec\/VecDefault.html#takeRight(i:Int):org.saddle.Vec[T]", "kind" : "def"}, {"label" : "takeLeft", "tail" : "(i: Int): Vec[T]", "member" : "org.saddle.vec.VecDefault.takeLeft", "link" : "org\/saddle\/vec\/VecDefault.html#takeLeft(i:Int):org.saddle.Vec[T]", "kind" : "def"}, {"label" : "updated", "tail" : "(offset: Array[Int], value: T): Vec[T]", "member" : "org.saddle.vec.VecDefault.updated", "link" : "org\/saddle\/vec\/VecDefault.html#updated(offset:Array[Int],value:T):org.saddle.Vec[T]", "kind" : "def"}, {"label" : "updated", "tail" : "(offset: Int, value: T): Vec[T]", "member" : "org.saddle.vec.VecDefault.updated", "link" : "org\/saddle\/vec\/VecDefault.html#updated(offset:Int,value:T):org.saddle.Vec[T]", "kind" : "def"}, {"label" : "roundTo", "tail" : "(sig: Int)(ev: NUM[T]): Vec[Double]", "member" : "org.saddle.vec.VecDefault.roundTo", "link" : "org\/saddle\/vec\/VecDefault.html#roundTo(sig:Int)(implicitev:org.saddle.NUM[T]):org.saddle.Vec[Double]", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "org.saddle.vec.VecDefault.toString", "link" : "org\/saddle\/vec\/VecDefault.html#toString():String", "kind" : "def"}, {"label" : "print", "tail" : "(len: Int, stream: OutputStream): Unit", "member" : "org.saddle.vec.VecDefault.print", "link" : "org\/saddle\/vec\/VecDefault.html#print(len:Int,stream:java.io.OutputStream):Unit", "kind" : "def"}, {"label" : "stringify", "tail" : "(len: Int): String", "member" : "org.saddle.vec.VecDefault.stringify", "link" : "org\/saddle\/vec\/VecDefault.html#stringify(len:Int):String", "kind" : "def"}, {"label" : "equals", "tail" : "(o: Any): Boolean", "member" : "org.saddle.vec.VecDefault.equals", "link" : "org\/saddle\/vec\/VecDefault.html#equals(o:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "org.saddle.vec.VecDefault.hashCode", "link" : "org\/saddle\/vec\/VecDefault.html#hashCode():Int", "kind" : "def"}, {"label" : "median", "tail" : "(n: NUM[T]): Double", "member" : "org.saddle.vec.VecDefault.median", "link" : "org\/saddle\/vec\/VecDefault.html#median(implicitn:org.saddle.NUM[T]):Double", "kind" : "def"}, {"label" : "mean", "tail" : "(n: NUM[T]): Double", "member" : "org.saddle.vec.VecDefault.mean", "link" : "org\/saddle\/vec\/VecDefault.html#mean(implicitn:org.saddle.NUM[T]):Double", "kind" : "def"}, {"label" : "rank", "tail" : "(tie: RankTie, ascending: Boolean)(na: NUM[T]): Vec[Double]", "member" : "org.saddle.vec.VecDefault.rank", "link" : "org\/saddle\/vec\/VecDefault.html#rank(tie:org.saddle.RankTie,ascending:Boolean)(implicitna:org.saddle.NUM[T]):org.saddle.Vec[Double]", "kind" : "def"}, {"label" : "percentile", "tail" : "(tile: Double, method: PctMethod)(na: NUM[T]): Double", "member" : "org.saddle.vec.VecDefault.percentile", "link" : "org\/saddle\/vec\/VecDefault.html#percentile(tile:Double,method:org.saddle.PctMethod)(implicitna:org.saddle.NUM[T]):Double", "kind" : "def"}, {"label" : "countif", "tail" : "(a: T): Int", "member" : "org.saddle.vec.VecDefault.countif", "link" : "org\/saddle\/vec\/VecDefault.html#countif(a:T):Int", "kind" : "def"}, {"label" : "countif", "tail" : "(test: (T) => Boolean): Int", "member" : "org.saddle.vec.VecDefault.countif", "link" : "org\/saddle\/vec\/VecDefault.html#countif(test:T=>Boolean):Int", "kind" : "def"}, {"label" : "count", "tail" : "(): Int", "member" : "org.saddle.vec.VecDefault.count", "link" : "org\/saddle\/vec\/VecDefault.html#count:Int", "kind" : "def"}, {"label" : "argmax", "tail" : "(na: NUM[T], st: ST[T], ord: ORD[T]): Int", "member" : "org.saddle.vec.VecDefault.argmax", "link" : "org\/saddle\/vec\/VecDefault.html#argmax(implicitna:org.saddle.NUM[T],implicitst:org.saddle.ST[T],implicitord:org.saddle.ORD[T]):Int", "kind" : "def"}, {"label" : "argmin", "tail" : "(na: NUM[T], st: ST[T], ord: ORD[T]): Int", "member" : "org.saddle.vec.VecDefault.argmin", "link" : "org\/saddle\/vec\/VecDefault.html#argmin(implicitna:org.saddle.NUM[T],implicitst:org.saddle.ST[T],implicitord:org.saddle.ORD[T]):Int", "kind" : "def"}, {"label" : "prod", "tail" : "(na: NUM[T], st: ST[T]): T", "member" : "org.saddle.vec.VecDefault.prod", "link" : "org\/saddle\/vec\/VecDefault.html#prod(implicitna:org.saddle.NUM[T],implicitst:org.saddle.ST[T]):T", "kind" : "def"}, {"label" : "sum", "tail" : "(na: NUM[T], st: ST[T]): T", "member" : "org.saddle.vec.VecDefault.sum", "link" : "org\/saddle\/vec\/VecDefault.html#sum(implicitna:org.saddle.NUM[T],implicitst:org.saddle.ST[T]):T", "kind" : "def"}, {"label" : "max", "tail" : "(na: NUM[T], st: ST[T]): Scalar[T]", "member" : "org.saddle.vec.VecDefault.max", "link" : "org\/saddle\/vec\/VecDefault.html#max(implicitna:org.saddle.NUM[T],implicitst:org.saddle.ST[T]):org.saddle.scalar.Scalar[T]", "kind" : "def"}, {"label" : "min", "tail" : "(na: NUM[T], st: ST[T]): Scalar[T]", "member" : "org.saddle.vec.VecDefault.min", "link" : "org\/saddle\/vec\/VecDefault.html#min(implicitna:org.saddle.NUM[T],implicitst:org.saddle.ST[T]):org.saddle.scalar.Scalar[T]", "kind" : "def"}, {"label" : "toSeq", "tail" : "(): IndexedSeq[T]", "member" : "org.saddle.vec.VecDefault.toSeq", "link" : "org\/saddle\/vec\/VecDefault.html#toSeq:IndexedSeq[T]", "kind" : "def"}, {"label" : "fillBackward", "tail" : "(limit: Int): Vec[T]", "member" : "org.saddle.vec.VecDefault.fillBackward", "link" : "org\/saddle\/vec\/VecDefault.html#fillBackward(limit:Int):org.saddle.Vec[T]", "kind" : "def"}, {"label" : "fillForward", "tail" : "(limit: Int): Vec[T]", "member" : "org.saddle.vec.VecDefault.fillForward", "link" : "org\/saddle\/vec\/VecDefault.html#fillForward(limit:Int):org.saddle.Vec[T]", "kind" : "def"}, {"label" : "fillNA", "tail" : "(method: FillMethod, limit: Int): Vec[T]", "member" : "org.saddle.vec.VecDefault.fillNA", "link" : "org\/saddle\/vec\/VecDefault.html#fillNA(method:org.saddle.FillMethod,limit:Int):org.saddle.Vec[T]", "kind" : "def"}, {"label" : "fillNA", "tail" : "(f: (Int) => T): Vec[T]", "member" : "org.saddle.vec.VecDefault.fillNA", "link" : "org\/saddle\/vec\/VecDefault.html#fillNA(f:Int=>T):org.saddle.Vec[T]", "kind" : "def"}, {"label" : "splitAt", "tail" : "(i: Int): (Vec[T], Vec[T])", "member" : "org.saddle.vec.VecDefault.splitAt", "link" : "org\/saddle\/vec\/VecDefault.html#splitAt(i:Int):(org.saddle.Vec[T],org.saddle.Vec[T])", "kind" : "def"}, {"label" : "sliceBy", "tail" : "(from: Int, to: Int, stride: Int): Vec[T]", "member" : "org.saddle.vec.VecDefault.sliceBy", "link" : "org\/saddle\/vec\/VecDefault.html#sliceBy(from:Int,to:Int,stride:Int):org.saddle.Vec[T]", "kind" : "def"}, {"label" : "reversed", "tail" : "(): Vec[T]", "member" : "org.saddle.vec.VecDefault.reversed", "link" : "org\/saddle\/vec\/VecDefault.html#reversed:org.saddle.Vec[T]", "kind" : "def"}, {"label" : "sorted", "tail" : "(ev: ORD[T], st: ST[T]): Vec[T]", "member" : "org.saddle.vec.VecDefault.sorted", "link" : "org\/saddle\/vec\/VecDefault.html#sorted(implicitev:org.saddle.ORD[T],implicitst:org.saddle.ST[T]):org.saddle.Vec[T]", "kind" : "def"}, {"label" : "partition", "tail" : "(pred: Vec[Boolean]): (Vec[T], Vec[T])", "member" : "org.saddle.vec.VecDefault.partition", "link" : "org\/saddle\/vec\/VecDefault.html#partition(pred:org.saddle.Vec[Boolean]):(org.saddle.Vec[T],org.saddle.Vec[T])", "kind" : "def"}, {"label" : "whereNot", "tail" : "(pred: Vec[Boolean]): Vec[T]", "member" : "org.saddle.vec.VecDefault.whereNot", "link" : "org\/saddle\/vec\/VecDefault.html#whereNot(pred:org.saddle.Vec[Boolean]):org.saddle.Vec[T]", "kind" : "def"}, {"label" : "where", "tail" : "(pred: Vec[Boolean]): Vec[T]", "member" : "org.saddle.vec.VecDefault.where", "link" : "org\/saddle\/vec\/VecDefault.html#where(pred:org.saddle.Vec[Boolean]):org.saddle.Vec[T]", "kind" : "def"}, {"label" : "filterAt", "tail" : "(pred: (Int) => Boolean): Vec[T]", "member" : "org.saddle.vec.VecDefault.filterAt", "link" : "org\/saddle\/vec\/VecDefault.html#filterAt(pred:Int=>Boolean):org.saddle.Vec[T]", "kind" : "def"}, {"label" : "filter", "tail" : "(pred: (T) => Boolean): Vec[T]", "member" : "org.saddle.vec.VecDefault.filter", "link" : "org\/saddle\/vec\/VecDefault.html#filter(pred:T=>Boolean):org.saddle.Vec[T]", "kind" : "def"}, {"label" : "exists", "tail" : "(pred: (T) => Boolean): Boolean", "member" : "org.saddle.vec.VecDefault.exists", "link" : "org\/saddle\/vec\/VecDefault.html#exists(pred:T=>Boolean):Boolean", "kind" : "def"}, {"label" : "findOne", "tail" : "(pred: (T) => Boolean): Int", "member" : "org.saddle.vec.VecDefault.findOne", "link" : "org\/saddle\/vec\/VecDefault.html#findOne(pred:T=>Boolean):Int", "kind" : "def"}, {"label" : "find", "tail" : "(pred: (T) => Boolean): Vec[Int]", "member" : "org.saddle.vec.VecDefault.find", "link" : "org\/saddle\/vec\/VecDefault.html#find(pred:T=>Boolean):org.saddle.Vec[Int]", "kind" : "def"}, {"label" : "forall", "tail" : "(pred: (T) => Boolean)(op: (T) => Unit): Unit", "member" : "org.saddle.vec.VecDefault.forall", "link" : "org\/saddle\/vec\/VecDefault.html#forall(pred:T=>Boolean)(op:T=>Unit):Unit", "kind" : "def"}, {"label" : "foreach", "tail" : "(op: (T) => Unit): Unit", "member" : "org.saddle.vec.VecDefault.foreach", "link" : "org\/saddle\/vec\/VecDefault.html#foreach(op:T=>Unit):Unit", "kind" : "def"}, {"label" : "mask", "tail" : "(f: (T) => Boolean): Vec[T]", "member" : "org.saddle.vec.VecDefault.mask", "link" : "org\/saddle\/vec\/VecDefault.html#mask(f:T=>Boolean):org.saddle.Vec[T]", "kind" : "def"}, {"label" : "mask", "tail" : "(m: Vec[Boolean]): Vec[T]", "member" : "org.saddle.vec.VecDefault.mask", "link" : "org\/saddle\/vec\/VecDefault.html#mask(m:org.saddle.Vec[Boolean]):org.saddle.Vec[T]", "kind" : "def"}, {"label" : "isEmpty", "tail" : "(): Boolean", "member" : "org.saddle.vec.VecDefault.isEmpty", "link" : "org\/saddle\/vec\/VecDefault.html#isEmpty:Boolean", "kind" : "def"}, {"label" : "tail", "tail" : "(n: Int): Vec[T]", "member" : "org.saddle.vec.VecDefault.tail", "link" : "org\/saddle\/vec\/VecDefault.html#tail(n:Int):org.saddle.Vec[T]", "kind" : "def"}, {"label" : "head", "tail" : "(n: Int): Vec[T]", "member" : "org.saddle.vec.VecDefault.head", "link" : "org\/saddle\/vec\/VecDefault.html#head(n:Int):org.saddle.Vec[T]", "kind" : "def"}, {"label" : "last", "tail" : "(): Scalar[T]", "member" : "org.saddle.vec.VecDefault.last", "link" : "org\/saddle\/vec\/VecDefault.html#last:org.saddle.scalar.Scalar[T]", "kind" : "def"}, {"label" : "first", "tail" : "(): Scalar[T]", "member" : "org.saddle.vec.VecDefault.first", "link" : "org\/saddle\/vec\/VecDefault.html#first:org.saddle.scalar.Scalar[T]", "kind" : "def"}, {"label" : "take", "tail" : "(rng: Slice[Int]): Vec[T]", "member" : "org.saddle.vec.VecDefault.take", "link" : "org\/saddle\/vec\/VecDefault.html#take(rng:org.saddle.index.Slice[Int]):org.saddle.Vec[T]", "kind" : "def"}, {"label" : "apply", "tail" : "(loc: Int): T", "member" : "org.saddle.vec.VecDefault.apply", "link" : "org\/saddle\/vec\/VecDefault.html#apply(loc:Int):T", "kind" : "def"}, {"label" : "at", "tail" : "(loc: Int): Scalar[T]", "member" : "org.saddle.vec.VecDefault.at", "link" : "org\/saddle\/vec\/VecDefault.html#at(loc:Int):org.saddle.scalar.Scalar[T]", "kind" : "def"}, {"label" : "shift", "tail" : "(n: Int): VecDefault[T]", "member" : "org.saddle.vec.VecDefault.shift", "link" : "org\/saddle\/vec\/VecDefault.html#shift(n:Int):org.saddle.vec.VecDefault[T]", "kind" : "def"}, {"label" : "view", "tail" : "(offsets: Array[Int]): Vec[T]", "member" : "org.saddle.vec.VecDefault.view", "link" : "org\/saddle\/vec\/VecDefault.html#view(offsets:Array[Int]):org.saddle.Vec[T]", "kind" : "def"}, {"label" : "slice", "tail" : "(from: Int, until: Int, stride: Int): Vec[T]", "member" : "org.saddle.vec.VecDefault.slice", "link" : "org\/saddle\/vec\/VecDefault.html#slice(from:Int,until:Int,stride:Int):org.saddle.Vec[T]", "kind" : "def"}, {"label" : "zipMapIdx", "tail" : "(f: (T, Int) => C)(arg0: ST[C]): Vec[C]", "member" : "org.saddle.vec.VecDefault.zipMapIdx", "link" : "org\/saddle\/vec\/VecDefault.html#zipMapIdx[C](f:(T,Int)=>C)(implicitevidence$11:org.saddle.ST[C]):org.saddle.Vec[C]", "kind" : "def"}, {"label" : "zipMap", "tail" : "(other: Vec[B])(f: (T, B) => C)(arg0: ST[B], arg1: ST[C]): Vec[C]", "member" : "org.saddle.vec.VecDefault.zipMap", "link" : "org\/saddle\/vec\/VecDefault.html#zipMap[B,C](other:org.saddle.Vec[B])(f:(T,B)=>C)(implicitevidence$9:org.saddle.ST[B],implicitevidence$10:org.saddle.ST[C]):org.saddle.Vec[C]", "kind" : "def"}, {"label" : "scanLeft", "tail" : "(init: B)(f: (B, T) => B)(arg0: ST[B]): Vec[B]", "member" : "org.saddle.vec.VecDefault.scanLeft", "link" : "org\/saddle\/vec\/VecDefault.html#scanLeft[B](init:B)(f:(B,T)=>B)(implicitevidence$8:org.saddle.ST[B]):org.saddle.Vec[B]", "kind" : "def"}, {"label" : "flatMap", "tail" : "(f: (T) => Vec[B])(arg0: ST[B]): Vec[B]", "member" : "org.saddle.vec.VecDefault.flatMap", "link" : "org\/saddle\/vec\/VecDefault.html#flatMap[B](f:T=>org.saddle.Vec[B])(implicitevidence$7:org.saddle.ST[B]):org.saddle.Vec[B]", "kind" : "def"}, {"label" : "map", "tail" : "(f: (T) => B)(arg0: ST[B]): Vec[B]", "member" : "org.saddle.vec.VecDefault.map", "link" : "org\/saddle\/vec\/VecDefault.html#map[B](f:T=>B)(implicitevidence$6:org.saddle.ST[B]):org.saddle.Vec[B]", "kind" : "def"}, {"label" : "rolling", "tail" : "(winSz: Int, f: (Vec[T]) => B)(arg0: ST[B]): Vec[B]", "member" : "org.saddle.vec.VecDefault.rolling", "link" : "org\/saddle\/vec\/VecDefault.html#rolling[B](winSz:Int,f:org.saddle.Vec[T]=>B)(implicitevidence$5:org.saddle.ST[B]):org.saddle.Vec[B]", "kind" : "def"}, {"label" : "filterScanLeft", "tail" : "(pred: (T) => Boolean)(init: B)(f: (B, T) => B)(arg0: ST[B]): Vec[B]", "member" : "org.saddle.vec.VecDefault.filterScanLeft", "link" : "org\/saddle\/vec\/VecDefault.html#filterScanLeft[B](pred:T=>Boolean)(init:B)(f:(B,T)=>B)(implicitevidence$4:org.saddle.ST[B]):org.saddle.Vec[B]", "kind" : "def"}, {"label" : "filterFoldLeft", "tail" : "(pred: (T) => Boolean)(init: B)(f: (B, T) => B)(arg0: ST[B]): B", "member" : "org.saddle.vec.VecDefault.filterFoldLeft", "link" : "org\/saddle\/vec\/VecDefault.html#filterFoldLeft[B](pred:T=>Boolean)(init:B)(f:(B,T)=>B)(implicitevidence$3:org.saddle.ST[B]):B", "kind" : "def"}, {"label" : "foldLeftWhile", "tail" : "(init: B)(f: (B, T) => B)(cond: (B, T) => Boolean)(arg0: ST[B]): B", "member" : "org.saddle.vec.VecDefault.foldLeftWhile", "link" : "org\/saddle\/vec\/VecDefault.html#foldLeftWhile[B](init:B)(f:(B,T)=>B)(cond:(B,T)=>Boolean)(implicitevidence$2:org.saddle.ST[B]):B", "kind" : "def"}, {"label" : "foldLeft", "tail" : "(init: B)(f: (B, T) => B)(arg0: ST[B]): B", "member" : "org.saddle.vec.VecDefault.foldLeft", "link" : "org\/saddle\/vec\/VecDefault.html#foldLeft[B](init:B)(f:(B,T)=>B)(implicitevidence$1:org.saddle.ST[B]):B", "kind" : "def"}, {"label" : "concat", "tail" : "(v: Vec[T]): Vec[T]", "member" : "org.saddle.vec.VecDefault.concat", "link" : "org\/saddle\/vec\/VecDefault.html#concat(v:org.saddle.Vec[T]):org.saddle.Vec[T]", "kind" : "def"}, {"label" : "unary_-", "tail" : "(num: NUM[T]): Vec[T]", "member" : "org.saddle.vec.VecDefault.unary_-", "link" : "org\/saddle\/vec\/VecDefault.html#unary_-(implicitnum:org.saddle.NUM[T]):org.saddle.Vec[T]", "kind" : "def"}, {"label" : "hasNA", "tail" : "(): Boolean", "member" : "org.saddle.vec.VecDefault.hasNA", "link" : "org\/saddle\/vec\/VecDefault.html#hasNA:Boolean", "kind" : "def"}, {"label" : "dropNA", "tail" : "(): Vec[T]", "member" : "org.saddle.vec.VecDefault.dropNA", "link" : "org\/saddle\/vec\/VecDefault.html#dropNA:org.saddle.Vec[T]", "kind" : "def"}, {"label" : "without", "tail" : "(locs: Array[Int]): Vec[T]", "member" : "org.saddle.vec.VecDefault.without", "link" : "org\/saddle\/vec\/VecDefault.html#without(locs:Array[Int]):org.saddle.Vec[T]", "kind" : "def"}, {"label" : "take", "tail" : "(locs: Int*): Vec[T]", "member" : "org.saddle.vec.VecDefault.take", "link" : "org\/saddle\/vec\/VecDefault.html#take(locs:Int*):org.saddle.Vec[T]", "kind" : "def"}, {"label" : "take", "tail" : "(locs: Array[Int]): Vec[T]", "member" : "org.saddle.vec.VecDefault.take", "link" : "org\/saddle\/vec\/VecDefault.html#take(locs:Array[Int]):org.saddle.Vec[T]", "kind" : "def"}, {"label" : "contents", "tail" : "(): Array[T]", "member" : "org.saddle.vec.VecDefault.contents", "link" : "org\/saddle\/vec\/VecDefault.html#contents:Array[T]", "kind" : "def"}, {"label" : "copy", "tail" : "(): Vec[T]", "member" : "org.saddle.vec.VecDefault.copy", "link" : "org\/saddle\/vec\/VecDefault.html#copy:org.saddle.Vec[T]", "kind" : "def"}, {"label" : "toArray", "tail" : "(): Array[T]", "member" : "org.saddle.vec.VecDefault.toArray", "link" : "org\/saddle\/vec\/VecDefault.html#toArray:Array[T]", "kind" : "def"}, {"label" : "raw", "tail" : "(loc: Int): T", "member" : "org.saddle.vec.VecDefault.raw", "link" : "org\/saddle\/vec\/VecDefault.html#raw(loc:Int):T", "kind" : "def"}, {"label" : "length", "tail" : "(): Int", "member" : "org.saddle.vec.VecDefault.length", "link" : "org\/saddle\/vec\/VecDefault.html#length:Int", "kind" : "def"}, {"label" : "needsCopy", "tail" : "(): Boolean", "member" : "org.saddle.vec.VecDefault.needsCopy", "link" : "org\/saddle\/vec\/VecDefault.html#needsCopy:Boolean", "kind" : "def"}, {"member" : "org.saddle.vec.VecDefault#<init>", "error" : "unsupported entity"}, {"label" : "scalarTag", "tail" : ": ST[T]", "member" : "org.saddle.vec.VecDefault.scalarTag", "link" : "org\/saddle\/vec\/VecDefault.html#scalarTag:org.saddle.ST[T]", "kind" : "val"}, {"label" : "**=", "tail" : "(other: B)(op: BinOpInPlace[Power, Vec[T], B]): Unit", "member" : "org.saddle.ops.NumericOps.**=", "link" : "org\/saddle\/vec\/VecDefault.html#**=[B](other:B)(implicitop:org.saddle.ops.BinOpInPlace[org.saddle.ops.Power,This,B]):Unit", "kind" : "def"}, {"label" : "%=", "tail" : "(other: B)(op: BinOpInPlace[Mod, Vec[T], B]): Unit", "member" : "org.saddle.ops.NumericOps.%=", "link" : "org\/saddle\/vec\/VecDefault.html#%=[B](other:B)(implicitop:org.saddle.ops.BinOpInPlace[org.saddle.ops.Mod,This,B]):Unit", "kind" : "def"}, {"label" : "\/=", "tail" : "(other: B)(op: BinOpInPlace[Divide, Vec[T], B]): Unit", "member" : "org.saddle.ops.NumericOps.\/=", "link" : "org\/saddle\/vec\/VecDefault.html#\/=[B](other:B)(implicitop:org.saddle.ops.BinOpInPlace[org.saddle.ops.Divide,This,B]):Unit", "kind" : "def"}, {"label" : "*=", "tail" : "(other: B)(op: BinOpInPlace[Multiply, Vec[T], B]): Unit", "member" : "org.saddle.ops.NumericOps.*=", "link" : "org\/saddle\/vec\/VecDefault.html#*=[B](other:B)(implicitop:org.saddle.ops.BinOpInPlace[org.saddle.ops.Multiply,This,B]):Unit", "kind" : "def"}, {"label" : "-=", "tail" : "(other: B)(op: BinOpInPlace[Subtract, Vec[T], B]): Unit", "member" : "org.saddle.ops.NumericOps.-=", "link" : "org\/saddle\/vec\/VecDefault.html#-=[B](other:B)(implicitop:org.saddle.ops.BinOpInPlace[org.saddle.ops.Subtract,This,B]):Unit", "kind" : "def"}, {"label" : "+=", "tail" : "(other: B)(op: BinOpInPlace[Add, Vec[T], B]): Unit", "member" : "org.saddle.ops.NumericOps.+=", "link" : "org\/saddle\/vec\/VecDefault.html#+=[B](other:B)(implicitop:org.saddle.ops.BinOpInPlace[org.saddle.ops.Add,This,B]):Unit", "kind" : "def"}, {"label" : "outer", "tail" : "(other: B)(op: BinOp[OuterProd, Vec[T], B, That]): That", "member" : "org.saddle.ops.NumericOps.outer", "link" : "org\/saddle\/vec\/VecDefault.html#outer[B,That](other:B)(implicitop:org.saddle.ops.BinOp[org.saddle.ops.OuterProd,This,B,That]):That", "kind" : "def"}, {"label" : "dot", "tail" : "(other: B)(op: BinOp[InnerProd, Vec[T], B, That]): That", "member" : "org.saddle.ops.NumericOps.dot", "link" : "org\/saddle\/vec\/VecDefault.html#dot[B,That](other:B)(implicitop:org.saddle.ops.BinOp[org.saddle.ops.InnerProd,This,B,That]):That", "kind" : "def"}, {"label" : "xor", "tail" : "(other: B)(op: BinOp[XorOp, Vec[T], B, That]): That", "member" : "org.saddle.ops.NumericOps.xor", "link" : "org\/saddle\/vec\/VecDefault.html#xor[B,That](other:B)(implicitop:org.saddle.ops.BinOp[org.saddle.ops.XorOp,This,B,That]):That", "kind" : "def"}, {"label" : "&&", "tail" : "(other: B)(op: BinOp[AndOp, Vec[T], B, That]): That", "member" : "org.saddle.ops.NumericOps.&&", "link" : "org\/saddle\/vec\/VecDefault.html#&&[B,That](other:B)(implicitop:org.saddle.ops.BinOp[org.saddle.ops.AndOp,This,B,That]):That", "kind" : "def"}, {"label" : "||", "tail" : "(other: B)(op: BinOp[OrOp, Vec[T], B, That]): That", "member" : "org.saddle.ops.NumericOps.||", "link" : "org\/saddle\/vec\/VecDefault.html#||[B,That](other:B)(implicitop:org.saddle.ops.BinOp[org.saddle.ops.OrOp,This,B,That]):That", "kind" : "def"}, {"label" : "<>", "tail" : "(other: B)(op: BinOp[NeqOp, Vec[T], B, That]): That", "member" : "org.saddle.ops.NumericOps.<>", "link" : "org\/saddle\/vec\/VecDefault.html#<>[B,That](other:B)(implicitop:org.saddle.ops.BinOp[org.saddle.ops.NeqOp,This,B,That]):That", "kind" : "def"}, {"label" : "=?", "tail" : "(other: B)(op: BinOp[EqOp, Vec[T], B, That]): That", "member" : "org.saddle.ops.NumericOps.=?", "link" : "org\/saddle\/vec\/VecDefault.html#=?[B,That](other:B)(implicitop:org.saddle.ops.BinOp[org.saddle.ops.EqOp,This,B,That]):That", "kind" : "def"}, {"label" : ">=", "tail" : "(other: B)(op: BinOp[GteOp, Vec[T], B, That]): That", "member" : "org.saddle.ops.NumericOps.>=", "link" : "org\/saddle\/vec\/VecDefault.html#>=[B,That](other:B)(implicitop:org.saddle.ops.BinOp[org.saddle.ops.GteOp,This,B,That]):That", "kind" : "def"}, {"label" : ">", "tail" : "(other: B)(op: BinOp[GtOp, Vec[T], B, That]): That", "member" : "org.saddle.ops.NumericOps.>", "link" : "org\/saddle\/vec\/VecDefault.html#>[B,That](other:B)(implicitop:org.saddle.ops.BinOp[org.saddle.ops.GtOp,This,B,That]):That", "kind" : "def"}, {"label" : "<=", "tail" : "(other: B)(op: BinOp[LteOp, Vec[T], B, That]): That", "member" : "org.saddle.ops.NumericOps.<=", "link" : "org\/saddle\/vec\/VecDefault.html#<=[B,That](other:B)(implicitop:org.saddle.ops.BinOp[org.saddle.ops.LteOp,This,B,That]):That", "kind" : "def"}, {"label" : "<", "tail" : "(other: B)(op: BinOp[LtOp, Vec[T], B, That]): That", "member" : "org.saddle.ops.NumericOps.<", "link" : "org\/saddle\/vec\/VecDefault.html#<[B,That](other:B)(implicitop:org.saddle.ops.BinOp[org.saddle.ops.LtOp,This,B,That]):That", "kind" : "def"}, {"label" : ">>>", "tail" : "(other: B)(op: BinOp[BitUShr, Vec[T], B, That]): That", "member" : "org.saddle.ops.NumericOps.>>>", "link" : "org\/saddle\/vec\/VecDefault.html#>>>[B,That](other:B)(implicitop:org.saddle.ops.BinOp[org.saddle.ops.BitUShr,This,B,That]):That", "kind" : "def"}, {"label" : ">>", "tail" : "(other: B)(op: BinOp[BitShr, Vec[T], B, That]): That", "member" : "org.saddle.ops.NumericOps.>>", "link" : "org\/saddle\/vec\/VecDefault.html#>>[B,That](other:B)(implicitop:org.saddle.ops.BinOp[org.saddle.ops.BitShr,This,B,That]):That", "kind" : "def"}, {"label" : "<<", "tail" : "(other: B)(op: BinOp[BitShl, Vec[T], B, That]): That", "member" : "org.saddle.ops.NumericOps.<<", "link" : "org\/saddle\/vec\/VecDefault.html#<<[B,That](other:B)(implicitop:org.saddle.ops.BinOp[org.saddle.ops.BitShl,This,B,That]):That", "kind" : "def"}, {"label" : "^", "tail" : "(other: B)(op: BinOp[BitXor, Vec[T], B, That]): That", "member" : "org.saddle.ops.NumericOps.^", "link" : "org\/saddle\/vec\/VecDefault.html#^[B,That](other:B)(implicitop:org.saddle.ops.BinOp[org.saddle.ops.BitXor,This,B,That]):That", "kind" : "def"}, {"label" : "|", "tail" : "(other: B)(op: BinOp[BitOr, Vec[T], B, That]): That", "member" : "org.saddle.ops.NumericOps.|", "link" : "org\/saddle\/vec\/VecDefault.html#|[B,That](other:B)(implicitop:org.saddle.ops.BinOp[org.saddle.ops.BitOr,This,B,That]):That", "kind" : "def"}, {"label" : "&", "tail" : "(other: B)(op: BinOp[BitAnd, Vec[T], B, That]): That", "member" : "org.saddle.ops.NumericOps.&", "link" : "org\/saddle\/vec\/VecDefault.html#&[B,That](other:B)(implicitop:org.saddle.ops.BinOp[org.saddle.ops.BitAnd,This,B,That]):That", "kind" : "def"}, {"label" : "**", "tail" : "(other: B)(op: BinOp[Power, Vec[T], B, That]): That", "member" : "org.saddle.ops.NumericOps.**", "link" : "org\/saddle\/vec\/VecDefault.html#**[B,That](other:B)(implicitop:org.saddle.ops.BinOp[org.saddle.ops.Power,This,B,That]):That", "kind" : "def"}, {"label" : "%", "tail" : "(other: B)(op: BinOp[Mod, Vec[T], B, That]): That", "member" : "org.saddle.ops.NumericOps.%", "link" : "org\/saddle\/vec\/VecDefault.html#%[B,That](other:B)(implicitop:org.saddle.ops.BinOp[org.saddle.ops.Mod,This,B,That]):That", "kind" : "def"}, {"label" : "*", "tail" : "(other: B)(op: BinOp[Multiply, Vec[T], B, That]): That", "member" : "org.saddle.ops.NumericOps.*", "link" : "org\/saddle\/vec\/VecDefault.html#*[B,That](other:B)(implicitop:org.saddle.ops.BinOp[org.saddle.ops.Multiply,This,B,That]):That", "kind" : "def"}, {"label" : "\/", "tail" : "(other: B)(op: BinOp[Divide, Vec[T], B, That]): That", "member" : "org.saddle.ops.NumericOps.\/", "link" : "org\/saddle\/vec\/VecDefault.html#\/[B,That](other:B)(implicitop:org.saddle.ops.BinOp[org.saddle.ops.Divide,This,B,That]):That", "kind" : "def"}, {"label" : "-", "tail" : "(other: B)(op: BinOp[Subtract, Vec[T], B, That]): That", "member" : "org.saddle.ops.NumericOps.-", "link" : "org\/saddle\/vec\/VecDefault.html#-[B,That](other:B)(implicitop:org.saddle.ops.BinOp[org.saddle.ops.Subtract,This,B,That]):That", "kind" : "def"}, {"label" : "+", "tail" : "(other: B)(op: BinOp[Add, Vec[T], B, That]): That", "member" : "org.saddle.ops.NumericOps.+", "link" : "org\/saddle\/vec\/VecDefault.html#+[B,That](other:B)(implicitop:org.saddle.ops.BinOp[org.saddle.ops.Add,This,B,That]):That", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/saddle\/vec\/VecDefault.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/saddle\/vec\/VecDefault.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/saddle\/vec\/VecDefault.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/saddle\/vec\/VecDefault.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/saddle\/vec\/VecDefault.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/saddle\/vec\/VecDefault.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/saddle\/vec\/VecDefault.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/vec\/VecDefault.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/vec\/VecDefault.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/vec\/VecDefault.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/saddle\/vec\/VecDefault.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/saddle\/vec\/VecDefault.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/saddle\/vec\/VecDefault.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "org\/saddle\/vec\/VecDefault.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/saddle\/vec\/VecDefault.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/saddle\/vec\/VecDefault.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/saddle\/vec\/VecDefault.html", "kind" : "class"}], "org.saddle.util" : [{"name" : "org.saddle.util.DoubleTotalOrder", "shortDescription" : "", "object" : "org\/saddle\/util\/DoubleTotalOrder$.html", "members_object" : [{"label" : "max", "tail" : "(x: Double, y: Double): Double", "member" : "org.saddle.util.DoubleTotalOrderTrait.max", "link" : "org\/saddle\/util\/DoubleTotalOrder$.html#max(x:Double,y:Double):Double", "kind" : "def"}, {"label" : "min", "tail" : "(x: Double, y: Double): Double", "member" : "org.saddle.util.DoubleTotalOrderTrait.min", "link" : "org\/saddle\/util\/DoubleTotalOrder$.html#min(x:Double,y:Double):Double", "kind" : "def"}, {"label" : "lteqv", "tail" : "(x: Double, y: Double): Boolean", "member" : "org.saddle.util.DoubleTotalOrderTrait.lteqv", "link" : "org\/saddle\/util\/DoubleTotalOrder$.html#lteqv(x:Double,y:Double):Boolean", "kind" : "def"}, {"label" : "lt", "tail" : "(x: Double, y: Double): Boolean", "member" : "org.saddle.util.DoubleTotalOrderTrait.lt", "link" : "org\/saddle\/util\/DoubleTotalOrder$.html#lt(x:Double,y:Double):Boolean", "kind" : "def"}, {"label" : "gteqv", "tail" : "(x: Double, y: Double): Boolean", "member" : "org.saddle.util.DoubleTotalOrderTrait.gteqv", "link" : "org\/saddle\/util\/DoubleTotalOrder$.html#gteqv(x:Double,y:Double):Boolean", "kind" : "def"}, {"label" : "gt", "tail" : "(x: Double, y: Double): Boolean", "member" : "org.saddle.util.DoubleTotalOrderTrait.gt", "link" : "org\/saddle\/util\/DoubleTotalOrder$.html#gt(x:Double,y:Double):Boolean", "kind" : "def"}, {"label" : "neqv", "tail" : "(x: Double, y: Double): Boolean", "member" : "org.saddle.util.DoubleTotalOrderTrait.neqv", "link" : "org\/saddle\/util\/DoubleTotalOrder$.html#neqv(x:Double,y:Double):Boolean", "kind" : "def"}, {"label" : "eqv", "tail" : "(x: Double, y: Double): Boolean", "member" : "org.saddle.util.DoubleTotalOrderTrait.eqv", "link" : "org\/saddle\/util\/DoubleTotalOrder$.html#eqv(x:Double,y:Double):Boolean", "kind" : "def"}, {"label" : "compare", "tail" : "(x: Double, y: Double): Int", "member" : "org.saddle.util.DoubleTotalOrderTrait.compare", "link" : "org\/saddle\/util\/DoubleTotalOrder$.html#compare(x:Double,y:Double):Int", "kind" : "def"}, {"label" : "hash", "tail" : "(x: Double): Int", "member" : "org.saddle.util.DoubleTotalOrderTrait.hash", "link" : "org\/saddle\/util\/DoubleTotalOrder$.html#hash(x:Double):Int", "kind" : "def"}, {"label" : "toOrdering", "tail" : "(): Ordering[Double]", "member" : "cats.kernel.Order.toOrdering", "link" : "org\/saddle\/util\/DoubleTotalOrder$.html#toOrdering:Ordering[A]", "kind" : "def"}, {"label" : "partialCompare", "tail" : "(x: Double, y: Double): Double", "member" : "cats.kernel.Order.partialCompare", "link" : "org\/saddle\/util\/DoubleTotalOrder$.html#partialCompare(x:A,y:A):Double", "kind" : "def"}, {"label" : "comparison", "tail" : "(x: Double, y: Double): Comparison", "member" : "cats.kernel.Order.comparison", "link" : "org\/saddle\/util\/DoubleTotalOrder$.html#comparison(x:A,y:A):cats.kernel.Comparison", "kind" : "def"}, {"label" : "pmax", "tail" : "(x: Double, y: Double): Option[Double]", "member" : "cats.kernel.PartialOrder.pmax", "link" : "org\/saddle\/util\/DoubleTotalOrder$.html#pmax(x:A,y:A):Option[A]", "kind" : "def"}, {"label" : "pmin", "tail" : "(x: Double, y: Double): Option[Double]", "member" : "cats.kernel.PartialOrder.pmin", "link" : "org\/saddle\/util\/DoubleTotalOrder$.html#pmin(x:A,y:A):Option[A]", "kind" : "def"}, {"label" : "tryCompare", "tail" : "(x: Double, y: Double): Option[Int]", "member" : "cats.kernel.PartialOrder.tryCompare", "link" : "org\/saddle\/util\/DoubleTotalOrder$.html#tryCompare(x:A,y:A):Option[Int]", "kind" : "def"}, {"label" : "partialComparison", "tail" : "(x: Double, y: Double): Option[Comparison]", "member" : "cats.kernel.PartialOrder.partialComparison", "link" : "org\/saddle\/util\/DoubleTotalOrder$.html#partialComparison(x:A,y:A):Option[cats.kernel.Comparison]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/saddle\/util\/DoubleTotalOrder$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/saddle\/util\/DoubleTotalOrder$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/saddle\/util\/DoubleTotalOrder$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/saddle\/util\/DoubleTotalOrder$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/saddle\/util\/DoubleTotalOrder$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/saddle\/util\/DoubleTotalOrder$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/saddle\/util\/DoubleTotalOrder$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/util\/DoubleTotalOrder$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/util\/DoubleTotalOrder$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/util\/DoubleTotalOrder$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/saddle\/util\/DoubleTotalOrder$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/saddle\/util\/DoubleTotalOrder$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/saddle\/util\/DoubleTotalOrder$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/saddle\/util\/DoubleTotalOrder$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/saddle\/util\/DoubleTotalOrder$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/saddle\/util\/DoubleTotalOrder$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "org\/saddle\/util\/DoubleTotalOrder$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/saddle\/util\/DoubleTotalOrder$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/saddle\/util\/DoubleTotalOrder$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "org.saddle.util.FloatTotalOrder", "shortDescription" : "", "object" : "org\/saddle\/util\/FloatTotalOrder$.html", "members_object" : [{"label" : "max", "tail" : "(x: Float, y: Float): Float", "member" : "org.saddle.util.FloatTotalOrderTrait.max", "link" : "org\/saddle\/util\/FloatTotalOrder$.html#max(x:Float,y:Float):Float", "kind" : "def"}, {"label" : "min", "tail" : "(x: Float, y: Float): Float", "member" : "org.saddle.util.FloatTotalOrderTrait.min", "link" : "org\/saddle\/util\/FloatTotalOrder$.html#min(x:Float,y:Float):Float", "kind" : "def"}, {"label" : "lteqv", "tail" : "(x: Float, y: Float): Boolean", "member" : "org.saddle.util.FloatTotalOrderTrait.lteqv", "link" : "org\/saddle\/util\/FloatTotalOrder$.html#lteqv(x:Float,y:Float):Boolean", "kind" : "def"}, {"label" : "lt", "tail" : "(x: Float, y: Float): Boolean", "member" : "org.saddle.util.FloatTotalOrderTrait.lt", "link" : "org\/saddle\/util\/FloatTotalOrder$.html#lt(x:Float,y:Float):Boolean", "kind" : "def"}, {"label" : "gteqv", "tail" : "(x: Float, y: Float): Boolean", "member" : "org.saddle.util.FloatTotalOrderTrait.gteqv", "link" : "org\/saddle\/util\/FloatTotalOrder$.html#gteqv(x:Float,y:Float):Boolean", "kind" : "def"}, {"label" : "gt", "tail" : "(x: Float, y: Float): Boolean", "member" : "org.saddle.util.FloatTotalOrderTrait.gt", "link" : "org\/saddle\/util\/FloatTotalOrder$.html#gt(x:Float,y:Float):Boolean", "kind" : "def"}, {"label" : "neqv", "tail" : "(x: Float, y: Float): Boolean", "member" : "org.saddle.util.FloatTotalOrderTrait.neqv", "link" : "org\/saddle\/util\/FloatTotalOrder$.html#neqv(x:Float,y:Float):Boolean", "kind" : "def"}, {"label" : "eqv", "tail" : "(x: Float, y: Float): Boolean", "member" : "org.saddle.util.FloatTotalOrderTrait.eqv", "link" : "org\/saddle\/util\/FloatTotalOrder$.html#eqv(x:Float,y:Float):Boolean", "kind" : "def"}, {"label" : "compare", "tail" : "(x: Float, y: Float): Int", "member" : "org.saddle.util.FloatTotalOrderTrait.compare", "link" : "org\/saddle\/util\/FloatTotalOrder$.html#compare(x:Float,y:Float):Int", "kind" : "def"}, {"label" : "hash", "tail" : "(x: Float): Int", "member" : "org.saddle.util.FloatTotalOrderTrait.hash", "link" : "org\/saddle\/util\/FloatTotalOrder$.html#hash(x:Float):Int", "kind" : "def"}, {"label" : "toOrdering", "tail" : "(): Ordering[Float]", "member" : "cats.kernel.Order.toOrdering", "link" : "org\/saddle\/util\/FloatTotalOrder$.html#toOrdering:Ordering[A]", "kind" : "def"}, {"label" : "partialCompare", "tail" : "(x: Float, y: Float): Double", "member" : "cats.kernel.Order.partialCompare", "link" : "org\/saddle\/util\/FloatTotalOrder$.html#partialCompare(x:A,y:A):Double", "kind" : "def"}, {"label" : "comparison", "tail" : "(x: Float, y: Float): Comparison", "member" : "cats.kernel.Order.comparison", "link" : "org\/saddle\/util\/FloatTotalOrder$.html#comparison(x:A,y:A):cats.kernel.Comparison", "kind" : "def"}, {"label" : "pmax", "tail" : "(x: Float, y: Float): Option[Float]", "member" : "cats.kernel.PartialOrder.pmax", "link" : "org\/saddle\/util\/FloatTotalOrder$.html#pmax(x:A,y:A):Option[A]", "kind" : "def"}, {"label" : "pmin", "tail" : "(x: Float, y: Float): Option[Float]", "member" : "cats.kernel.PartialOrder.pmin", "link" : "org\/saddle\/util\/FloatTotalOrder$.html#pmin(x:A,y:A):Option[A]", "kind" : "def"}, {"label" : "tryCompare", "tail" : "(x: Float, y: Float): Option[Int]", "member" : "cats.kernel.PartialOrder.tryCompare", "link" : "org\/saddle\/util\/FloatTotalOrder$.html#tryCompare(x:A,y:A):Option[Int]", "kind" : "def"}, {"label" : "partialComparison", "tail" : "(x: Float, y: Float): Option[Comparison]", "member" : "cats.kernel.PartialOrder.partialComparison", "link" : "org\/saddle\/util\/FloatTotalOrder$.html#partialComparison(x:A,y:A):Option[cats.kernel.Comparison]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/saddle\/util\/FloatTotalOrder$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/saddle\/util\/FloatTotalOrder$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/saddle\/util\/FloatTotalOrder$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/saddle\/util\/FloatTotalOrder$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/saddle\/util\/FloatTotalOrder$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/saddle\/util\/FloatTotalOrder$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/saddle\/util\/FloatTotalOrder$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/util\/FloatTotalOrder$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/util\/FloatTotalOrder$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/saddle\/util\/FloatTotalOrder$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/saddle\/util\/FloatTotalOrder$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/saddle\/util\/FloatTotalOrder$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/saddle\/util\/FloatTotalOrder$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/saddle\/util\/FloatTotalOrder$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/saddle\/util\/FloatTotalOrder$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/saddle\/util\/FloatTotalOrder$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "org\/saddle\/util\/FloatTotalOrder$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/saddle\/util\/FloatTotalOrder$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/saddle\/util\/FloatTotalOrder$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}]};